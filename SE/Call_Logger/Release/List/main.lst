##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    27/Jan/2009  11:16:24 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\Documents and Settings\Mehanoshin\Рабочий         #
#                       стол\123\Embedded Workbench 4.0                      #
#                       Evaluation\Project\Call_Logger\main.c                #
#    Command line    =  "C:\Documents and Settings\Mehanoshin\Рабочий        #
#                       стол\123\Embedded Workbench 4.0                      #
#                       Evaluation\Project\Call_Logger\main.c" -D NDEBUG     #
#                       -lC "C:\Documents and Settings\Mehanoshin\Рабочий    #
#                       стол\123\Embedded Workbench 4.0                      #
#                       Evaluation\Project\Call_Logger\Release\List\" -lA    #
#                       "C:\Documents and Settings\Mehanoshin\Рабочий        #
#                       стол\123\Embedded Workbench 4.0                      #
#                       Evaluation\Project\Call_Logger\Release\List\" -o     #
#                       "C:\Documents and Settings\Mehanoshin\Рабочий        #
#                       стол\123\Embedded Workbench 4.0                      #
#                       Evaluation\Project\Call_Logger\Release\Obj\" -s9     #
#                       --no_unroll --no_inline --cpu_mode arm --endian      #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --eec++ --dlib_config "C:\Documents    #
#                       and Settings\Mehanoshin\Рабочий стол\123\Embedded    #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\Documents and Settings\Mehanoshin\Рабочий        #
#                       стол\123\Embedded Workbench 4.0 Evaluation\ARM\INC\" #
#    List file       =  C:\Documents and Settings\Mehanoshin\Рабочий         #
#                       стол\123\Embedded Workbench 4.0                      #
#                       Evaluation\Project\Call_Logger\Release\List\main.lst #
#    Object file     =  C:\Documents and Settings\Mehanoshin\Рабочий         #
#                       стол\123\Embedded Workbench 4.0                      #
#                       Evaluation\Project\Call_Logger\Release\Obj\main.r79  #
#                                                                            #
#                                                                            #
##############################################################################

C:\Documents and Settings\Mehanoshin\Рабочий стол\123\Embedded Workbench 4.0 Evaluation\Project\Call_Logger\main.c
      1          #include "..\\include\Lib_Clara.h"
      2          #include "..\\include\Dir.h"
      3          #include "..\\include\cfg_items.h"
      4          #include "conf_loader.h"
      5          #include "config_data.h"
      6          
      7          /*
      8          typedef struct
      9          {
     10            char dummy[24];
     11            char * PNUM;
     12          }MTCALL_EVENT_DATA;
     13          */
     14          
     15          typedef struct
     16          {
     17            char pos1;
     18            char cale_base;
     19            short pos3;
     20          }CALE_SET;
     21          
     22          typedef struct
     23          {
     24            char dummy[0x2C];
     25            int unkID;
     26          }ses_est;
     27          
     28          typedef struct
     29          {
     30            char dummy[0x34];
     31            int unkID;
     32          }ses_term;
     33          
     34          typedef struct
     35          {
     36            wchar_t * PNUM;
     37            wchar_t * Name;
     38            int first_callstate;
     39            int last_callstate;
     40            DATETIME * startdatetime;
     41            DATETIME * begindatetime;
     42            char line;
     43          }myList_elem;
     44          
     45          typedef struct
     46          {
     47            int ID;
     48            DATETIME * SesEst;
     49          }myList_gprs_elem;
     50          
     51          typedef struct
     52          {
     53            BOOK * book;
     54          }MSG;
     55          
     56          BOOK * CLBook;
     57          LIST * myList;
     58          LIST * myList_gprs;
     59          DATETIME * cur_date;
     60          
     61          wchar_t * Money=0;
     62          
     63          //Название говорящее...

   \                                 In segment CODE, align 4, keep-with-next
     64          void win12512unicode(wchar_t *ws, char *s, int len)
     65          {
   \                     ??win12512unicode:
   \   00000000   040000EA           B        ??win12512unicode_1
     66            int c;
     67            while((c=*s++)&&((len--)>0))
     68            {
     69              if (c==0xA8) c=0x401;
     70              if (c==0xAA) c=0x404;
     71              if (c==0xAF) c=0x407;
     72              if (c==0xB8) c=0x451;
     73              if (c==0xBA) c=0x454;
     74              if (c==0xBF) c=0x457;
     75              if ((c>=0xC0)&&(c<0x100)) c+=0x350;
   \                     ??win12512unicode_2:
   \   00000004   C00053E3           CMP      R3,#+192
   \   00000008   010000BA           BLT      ??win12512unicode_3
   \   0000000C   400F53E3           CMP      R3,#+256
   \   00000010   D43F83B2           ADDLT    R3,R3,#+848
     76              *ws++=c;
   \                     ??win12512unicode_3:
   \   00000014   ........           STRH     R3,[R0], #+2
   \                     ??win12512unicode_1:
   \   00000018   ........           LDRB     R3,[R1], #+1
   \   0000001C   000053E3           CMP      R3,#+0
   \   00000020   1900000A           BEQ      ??win12512unicode_4
   \   00000024   02C0A0E1           MOV      R12,R2
   \   00000028   01204CE2           SUB      R2,R12,#+1
   \   0000002C   01005CE3           CMP      R12,#+1
   \   00000030   150000BA           BLT      ??win12512unicode_4
   \   00000034   A80053E3           CMP      R3,#+168
   \   00000038   0200001A           BNE      ??win12512unicode_5
   \   0000003C   0130A0E3           MOV      R3,#+1
   \                     ??win12512unicode_6:
   \   00000040   403E83E3           ORR      R3,R3,#0x400
   \   00000044   F2FFFFEA           B        ??win12512unicode_3
   \                     ??win12512unicode_5:
   \   00000048   AA0053E3           CMP      R3,#+170
   \   0000004C   0430A003           MOVEQ    R3,#+4
   \   00000050   FAFFFF0A           BEQ      ??win12512unicode_6
   \   00000054   AF0053E3           CMP      R3,#+175
   \   00000058   0100001A           BNE      ??win12512unicode_7
   \   0000005C   0730A0E3           MOV      R3,#+7
   \                     ??win12512unicode_8:
   \   00000060   F6FFFFEA           B        ??win12512unicode_6
   \                     ??win12512unicode_7:
   \   00000064   B80053E3           CMP      R3,#+184
   \   00000068   5130A003           MOVEQ    R3,#+81
   \   0000006C   F3FFFF0A           BEQ      ??win12512unicode_6
   \   00000070   BA0053E3           CMP      R3,#+186
   \   00000074   5430A003           MOVEQ    R3,#+84
   \   00000078   F0FFFF0A           BEQ      ??win12512unicode_6
   \   0000007C   BF0053E3           CMP      R3,#+191
   \   00000080   DFFFFF1A           BNE      ??win12512unicode_2
   \   00000084   5730A0E3           MOV      R3,#+87
   \   00000088   ECFFFFEA           B        ??win12512unicode_6
     77            }
     78            *ws=0;
   \                     ??win12512unicode_4:
   \   0000008C   0010A0E3           MOV      R1,#+0
   \   00000090   B010C0E1           STRH     R1,[R0, #+0]
     79          }
   \   00000094   1EFF2FE1           BX       LR               ;; return
     80          
     81          // берем значения из ини-файла

   \                                 In segment CODE, align 4, keep-with-next
     82          void get_bcfg_key(void)
     83          {
   \                     ??get_bcfg_key:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     84            InitConfig();
     85            if (Money) delete(Money);
   \   00000004   ........           LDR      R4,??DataTable0  ;; CLBook
   \   00000008   ........           _BLF     ??InitConfig,??InitConfig??rA
   \   0000000C   100094E5           LDR      R0,[R4, #+16]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0000000A           BEQ      ??get_bcfg_key_1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
     86            Money=new wchar_t[strlen((char*)strMoney)+1];
   \                     ??get_bcfg_key_1:
   \   0000001C   30509FE5           LDR      R5,??get_bcfg_key_2  ;; strMoney
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   5A0100EF           SWI      +346
   \   00000028   010080E2           ADD      R0,R0,#+1
   \   0000002C   8000A0E1           LSL      R0,R0,#+1
   \   00000030   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000034   100084E5           STR      R0,[R4, #+16]
     87            win12512unicode(Money,(char*)strMoney,strlen((char*)strMoney));
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   5A0100EF           SWI      +346
   \   00000040   0020A0E1           MOV      R2,R0
   \   00000044   100094E5           LDR      R0,[R4, #+16]
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   3040BDE8           POP      {R4,R5,LR}       ;; Pop
   \   00000050   ........           B        ??win12512unicode  ;; tailcall
   \                     ??get_bcfg_key_2:
   \   00000054   ........           DC32     strMoney
     88          
     89          }
     90          
     91          
     92          
     93          //Функция поиска элемента в листе звонков

   \                                 In segment CODE, align 4, keep-with-next
     94          int myList_Find(void *r0,void *r1)
     95          {
     96            if (((myList_elem*)r0)->line==((myList_elem*)r1)->line) return(0);
   \                     ??myList_Find:
   \   00000000   1800D0E5           LDRB     R0,[R0, #+24]
   \   00000004   1810D1E5           LDRB     R1,[R1, #+24]
   \   00000008   010050E1           CMP      R0,R1
   \   0000000C   0000A003           MOVEQ    R0,#+0
   \   00000010   1EFF2F01           BXEQ     LR
     97            return(1);
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   1EFF2FE1           BX       LR               ;; return
     98          }
     99          
    100          //Функция поиска элемента в листе жпрс

   \                                 In segment CODE, align 4, keep-with-next
    101          int myList_gprs_Find(void *r0,void *r1)
    102          {
    103            if (((myList_gprs_elem*)r0)->ID==((myList_gprs_elem*)r1)->ID) return(0);
   \                     ??myList_gprs_Find:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   001091E5           LDR      R1,[R1, #+0]
   \   00000008   010050E1           CMP      R0,R1
   \   0000000C   0000A003           MOVEQ    R0,#+0
   \   00000010   1EFF2F01           BXEQ     LR
    104            return(1);
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   1EFF2FE1           BX       LR               ;; return
    105          }
    106          
    107          //Убийство моего элемента

   \                                 In segment CODE, align 4, keep-with-next
    108          void myList_elem_Free(void * r)
    109          {
   \                     ??myList_elem_Free:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    110            myList_elem * r0=(myList_elem *)r;
    111            if (r0)
   \   00000008   1080BD08           POPEQ    {R4,PC}
    112            {
    113              if (r0->PNUM)
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0000000A           BEQ      ??myList_elem_Free_1
    114              {
    115                delete(r0->PNUM);
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
    116              }
    117              if (r0->Name)
   \                     ??myList_elem_Free_1:
   \   0000001C   040094E5           LDR      R0,[R4, #+4]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0000000A           BEQ      ??myList_elem_Free_2
    118              {
    119                delete(r0->Name);
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
    120              }
    121              if (r0->startdatetime)
   \                     ??myList_elem_Free_2:
   \   0000002C   100094E5           LDR      R0,[R4, #+16]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0000000A           BEQ      ??myList_elem_Free_3
    122              {
    123                delete(r0->startdatetime);
   \   00000038   ........           _BLF     `??operator delete`,`??operator delete??rA`
    124              }
    125              if (r0->begindatetime)
   \                     ??myList_elem_Free_3:
   \   0000003C   140094E5           LDR      R0,[R4, #+20]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0000000A           BEQ      ??myList_elem_Free_4
    126              {
    127                delete(r0->begindatetime);
   \   00000048   ........           _BLF     `??operator delete`,`??operator delete??rA`
    128              }    
    129              delete(r0);
   \                     ??myList_elem_Free_4:
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     `??operator delete`,`??operator delete??rA`
    130            }
    131          }
   \   00000054   1080BDE8           POP      {R4,PC}          ;; return
    132          
    133          
    134          //Убийство моего элемента жпрс

   \                                 In segment CODE, align 4, keep-with-next
    135          void myList_gprs_elem_Free(void * r)
    136          {
   \                     ??myList_gprs_elem_Free:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    137            myList_gprs_elem * r0=(myList_gprs_elem *)r;
    138            delete(r0->SesEst);
   \   00000008   040094E5           LDR      R0,[R4, #+4]
   \   0000000C   ........           _BLF     `??operator delete`,`??operator delete??rA`
    139            delete(r0);
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000018   ........           _BF      `??operator delete`,`??operator delete??rA`  ;; tailcall
    140          }
    141          
    142          //Фильтр для убийства элементов при убийстве листа (всех ненулевых)

   \                                 In segment CODE, align 4, keep-with-next
    143          int myList_elem_Filter(void * r0)
    144          {
    145            if (r0) return(1);
   \                     ??myList_elem_Filter:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   0100A013           MOVNE    R0,#+1
    146            return(0);
   \   00000008   1EFF2FE1           BX       LR               ;; return
    147          }
    148          
    149          //Убийство эльфа

   \                                 In segment CODE, align 4, keep-with-next
    150          int TerminateElf(void * ,BOOK * book)
    151          {
   \                     ??TerminateElf:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0100A0E1           MOV      R0,R1
    152            FreeBook(book);
   \   00000008   2F0100EF           SWI      +303
    153            return(1);
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   0080BDE8           POP      {PC}             ;; return
    154          }
    155          
    156          //Показать информацию об авторе

   \                                 In segment CODE, align 4, keep-with-next
    157          int ShowAuthorInfo(void *mess ,BOOK * book)
    158          {
   \                     ??ShowAuthorInfo:
   \   00000000   10402DE9           PUSH     {R4,LR}
    159            MSG * msg = (MSG*)mess;
    160            MessageBox(0x6fFFFFFF,STR("Call Logger, v2.1\n\n(c) IronMaster"),0, 1 ,5000,msg->book);
   \   00000004   FF20A0E3           MOV      R2,#+255
   \   00000008   FF2C82E3           ORR      R2,R2,#0xFF00
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   34009FE5           LDR      R0,??ShowAuthorInfo_1  ;; `?<Constant L"\\x43\\x61\\x6c\\x6c\\x20\\x4c\\x6f\\x67\\`
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   5D0100EF           SWI      +349
   \   0000001C   001094E5           LDR      R1,[R4, #+0]
   \   00000020   0130A0E3           MOV      R3,#+1
   \   00000024   02002DE9           PUSH     {R1}
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   8810A0E3           MOV      R1,#+136
   \   00000030   4C1D81E3           ORR      R1,R1,#0x1300
   \   00000034   02002DE9           PUSH     {R1}
   \   00000038   0010A0E1           MOV      R1,R0
   \   0000003C   9004E0E3           MVN      R0,#-1879048192
   \   00000040   570200EF           SWI      +599
    161            return(1);
   \   00000044   0100A0E3           MOV      R0,#+1
   \   00000048   1680BDE8           POP      {R1,R2,R4,PC}    ;; return
   \                     ??ShowAuthorInfo_1:
   \   0000004C   ........           DC32     `?<Constant L"\\x43\\x61\\x6c\\x6c\\x20\\x4c\\x6f\\x67\\`
    162          }
    163          
    164          /*
    165          //Тестируем черный список....
    166          int BlackList(void * BlackStruct, BOOK *)
    167          {
    168            (MTCALL_EVENT_DATA*)BlackStruct;
    169            return(0);
    170          }
    171          */
    172          

   \                                 In segment CODE, align 4, keep-with-next
    173          int onClockChange(void * r0, BOOK *)
    174          {
   \                     ??onClockChange:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   F6DF4DE2           SUB      SP,SP,#+984
    175            DATETIME * datetime=new(DATETIME);
   \   00000008   0800A0E3           MOV      R0,#+8
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   0C008DE5           STR      R0,[SP, #+12]
    176            REQUEST_DATEANDTIME_GET(SYNC,datetime);
   \   00000014   0010A0E1           MOV      R1,R0
   \   00000018   ........           LDR      R0,??DataTable18  ;; SYNC
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   6E0100EF           SWI      +366
   \   00000024   04079FE5           LDR      R0,??onClockChange_1  ;; CLBook + 12
   \   00000028   0C109DE5           LDR      R1,[SP, #+12]
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   0310D1E5           LDRB     R1,[R1, #+3]
   \   00000034   0300D0E5           LDRB     R0,[R0, #+3]
   \   00000038   010050E1           CMP      R0,R1
   \   0000003C   B601000A           BEQ      ??onClockChange_2
    177            if (cur_date->date.day!=datetime->date.day)
    178            {
    179              FSTAT _fstat;
    180              wchar_t fpath[200];
    181              wchar_t folder[20];
    182              wstrcpy(fpath,GetDir(DIR_OTHER | MEM_EXTERNAL));
    183              wstrcat(fpath,L"/Call Logger/");
   \   00000040   ........           LDR      R5,??DataTable2  ;; `?<Constant L"\\xd\\xa\\x54\\x6f\\x74\\x61\\x6c\\x20\\x6`
   \   00000044   0800A0E3           MOV      R0,#+8
   \   00000048   050100EF           SWI      +261
   \   0000004C   0010A0E1           MOV      R1,R0
   \   00000050   880F8DE2           ADD      R0,SP,#+544
   \   00000054   520100EF           SWI      +338
   \   00000058   6C1F85E2           ADD      R1,R5,#+432
   \   0000005C   880F8DE2           ADD      R0,SP,#+544
   \   00000060   540100EF           SWI      +340
    184              snwprintf(folder,20,L"%04d-%02d-%02d",cur_date->date.year,cur_date->date.mon,cur_date->date.day);
   \   00000064   C4069FE5           LDR      R0,??onClockChange_1  ;; CLBook + 12
   \   00000068   732F85E2           ADD      R2,R5,#+460
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   0310D0E5           LDRB     R1,[R0, #+3]
   \   00000074   02002DE9           PUSH     {R1}
   \   00000078   0210D0E5           LDRB     R1,[R0, #+2]
   \   0000007C   02002DE9           PUSH     {R1}
   \   00000080   B030D0E1           LDRH     R3,[R0, #+0]
   \   00000084   EE0F8DE2           ADD      R0,SP,#+952
   \   00000088   1410A0E3           MOV      R1,#+20
   \   0000008C   150100EF           SWI      +277
    185              wstrcat(fpath,folder);
   \   00000090   EE1F8DE2           ADD      R1,SP,#+952
   \   00000094   8A0F8DE2           ADD      R0,SP,#+552
   \   00000098   540100EF           SWI      +340
   \   0000009C   7C208DE2           ADD      R2,SP,#+124
   \   000000A0   7B1F85E2           ADD      R1,R5,#+492
   \   000000A4   8A0F8DE2           ADD      R0,SP,#+552
    186              if (fstat(fpath,L"gprs.txt",&_fstat)>=0)
   \   000000A8   1C0100EF           SWI      +284
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   08D08DE2           ADD      SP,SP,#+8
   \   000000B4   9301004A           BMI      ??onClockChange_3
    187              {
    188                char * buffer_gprs=new char[_fstat.fsize+2];
   \   000000B8   7C009DE5           LDR      R0,[SP, #+124]
   \   000000BC   020080E2           ADD      R0,R0,#+2
   \   000000C0   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   000000C4   0060A0E1           MOV      R6,R0
    189                memset(buffer_gprs,0,_fstat.fsize+2);
   \   000000C8   7C009DE5           LDR      R0,[SP, #+124]
   \   000000CC   0010A0E3           MOV      R1,#+0
   \   000000D0   022080E2           ADD      R2,R0,#+2
   \   000000D4   0600A0E1           MOV      R0,R6
   \   000000D8   120100EF           SWI      +274
    190                int f=_fopen(fpath,L"gprs.txt",0x1,0x180,0);
   \   000000DC   0000A0E3           MOV      R0,#+0
   \   000000E0   01002DE9           PUSH     {R0}
   \   000000E4   603FA0E3           MOV      R3,#+384
   \   000000E8   0120A0E3           MOV      R2,#+1
   \   000000EC   7B1F85E2           ADD      R1,R5,#+492
   \   000000F0   890F8DE2           ADD      R0,SP,#+548
   \   000000F4   160100EF           SWI      +278
    191                fread(f,buffer_gprs,_fstat.fsize);
   \   000000F8   80209DE5           LDR      R2,[SP, #+128]
   \   000000FC   0040A0E1           MOV      R4,R0
   \   00000100   0610A0E1           MOV      R1,R6
   \   00000104   180100EF           SWI      +280
    192                fclose(f);
   \   00000108   0400A0E1           MOV      R0,R4
   \   0000010C   170100EF           SWI      +279
    193                wchar_t buffer_str[200];
    194                if (!wstrwstr((wchar_t*)buffer_gprs,L"Total cost"))
   \   00000110   0400A0E3           MOV      R0,#+4
   \   00000114   400E80E3           ORR      R0,R0,#0x400
   \   00000118   051080E0           ADD      R1,R0,R5
   \   0000011C   0600A0E1           MOV      R0,R6
   \   00000120   9E0200EF           SWI      +670
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   04D08DE2           ADD      SP,SP,#+4
   \   0000012C   7301001A           BNE      ??onClockChange_4
    195                {
    196                  int rub=0;
   \   00000130   0040A0E3           MOV      R4,#+0
    197                  int kop=0;
   \   00000134   0070A0E3           MOV      R7,#+0
    198                  int hex=0;
   \   00000138   0410A0E1           MOV      R1,R4
   \   0000013C   00108DE5           STR      R1,[SP, #+0]
    199                  int len=0;
    200                  wchar_t temp_buf[50];
    201                  wchar_t * pos=(wchar_t *)buffer_gprs;
   \   00000140   0680A0E1           MOV      R8,R6
   \   00000144   210000EA           B        ??onClockChange_5
    202                  while (pos=wstrwstr(pos,L"cost -"))
    203                  {
    204                    pos=pos+7;
    205                    len=(wstrchr(pos,'.')-pos);
   \                     ??onClockChange_6:
   \   00000148   2E10A0E3           MOV      R1,#+46
   \   0000014C   0E8080E2           ADD      R8,R0,#+14
   \   00000150   0800A0E1           MOV      R0,R8
   \   00000154   A00200EF           SWI      +672
   \   00000158   A000A0E1           LSR      R0,R0,#+1
   \   0000015C   A8B040E0           SUB      R11,R0,R8, LSR #+1
    206                    wstrncpy(temp_buf,pos,len);
   \   00000160   0B20A0E1           MOV      R2,R11
   \   00000164   0810A0E1           MOV      R1,R8
   \   00000168   10008DE2           ADD      R0,SP,#+16
   \   0000016C   530100EF           SWI      +339
    207                    wtoi(temp_buf,len,&hex);
   \   00000170   0D20A0E1           MOV      R2,SP
   \   00000174   0B10A0E1           MOV      R1,R11
   \   00000178   10008DE2           ADD      R0,SP,#+16
   \   0000017C   9B0200EF           SWI      +667
    208                    rub=rub+hex;
   \   00000180   00009DE5           LDR      R0,[SP, #+0]
    209                    hex=0;
   \   00000184   0010A0E3           MOV      R1,#+0
   \   00000188   044080E0           ADD      R4,R0,R4
   \   0000018C   00108DE5           STR      R1,[SP, #+0]
    210                    pos=wstrchr(pos,'.')+1;
   \   00000190   2E10A0E3           MOV      R1,#+46
   \   00000194   0800A0E1           MOV      R0,R8
   \   00000198   A00200EF           SWI      +672
   \   0000019C   028080E2           ADD      R8,R0,#+2
    211                    wstrncpy(temp_buf,pos,2);
   \   000001A0   0220A0E3           MOV      R2,#+2
   \   000001A4   0810A0E1           MOV      R1,R8
   \   000001A8   10008DE2           ADD      R0,SP,#+16
   \   000001AC   530100EF           SWI      +339
    212                    wtoi(temp_buf,2,&hex);
   \   000001B0   0D20A0E1           MOV      R2,SP
   \   000001B4   0210A0E3           MOV      R1,#+2
   \   000001B8   10008DE2           ADD      R0,SP,#+16
   \   000001BC   9B0200EF           SWI      +667
    213                    kop=kop+hex;
   \   000001C0   00009DE5           LDR      R0,[SP, #+0]
    214                    hex=0;
   \   000001C4   0010A0E3           MOV      R1,#+0
   \   000001C8   077080E0           ADD      R7,R0,R7
   \   000001CC   00108DE5           STR      R1,[SP, #+0]
    215                  }
   \                     ??onClockChange_5:
   \   000001D0   801F85E2           ADD      R1,R5,#+512
   \   000001D4   0800A0E1           MOV      R0,R8
   \   000001D8   9E0200EF           SWI      +670
   \   000001DC   0080B0E1           MOVS     R8,R0
   \   000001E0   D8FFFF1A           BNE      ??onClockChange_6
    216                  rub=rub+kop/100;
   \   000001E4   ........           LDR      R1,??DataTable28  ;; 0x51eb851f
    217                  kop=kop%100;
    218                  
    219                  pos=(wchar_t *)buffer_gprs;
    220                  int traf_whole=0;
    221                  int traf_fract=0;
    222                  hex=0;
    223                  len=0;        
    224                  if (TrafDiv)
   \   000001E8   ........           LDR      R0,??DataTable30  ;; TrafDiv
   \   000001EC   9127C3E0           SMULL    R2,R3,R1,R7
   \   000001F0   0090A0E3           MOV      R9,#+0
   \   000001F4   C332A0E1           ASR      R3,R3,#+5
   \   000001F8   A71F83E0           ADD      R1,R3,R7, LSR #+31
   \   000001FC   041081E0           ADD      R1,R1,R4
   \   00000200   04108DE5           STR      R1,[SP, #+4]
   \   00000204   ........           LDR      R1,??DataTable28  ;; 0x51eb851f
   \   00000208   0640A0E1           MOV      R4,R6
   \   0000020C   9721C3E0           SMULL    R2,R3,R7,R1
   \   00000210   6420A0E3           MOV      R2,#+100
   \   00000214   C332A0E1           ASR      R3,R3,#+5
   \   00000218   A73F83E0           ADD      R3,R3,R7, LSR #+31
   \   0000021C   920303E0           MUL      R3,R2,R3
   \   00000220   031047E0           SUB      R1,R7,R3
   \   00000224   08108DE5           STR      R1,[SP, #+8]
   \   00000228   0070A0E3           MOV      R7,#+0
   \   0000022C   0710A0E1           MOV      R1,R7
   \   00000230   00108DE5           STR      R1,[SP, #+0]
   \   00000234   000090E5           LDR      R0,[R0, #+0]
   \   00000238   000050E3           CMP      R0,#+0
   \   0000023C   BC00000A           BEQ      ??onClockChange_7
    225                  {
    226                    int traf_whole_sent=0;
    227                    int traf_fract_sent=0;
    228                    int traf_whole_rec=0;
    229                    int traf_fract_rec=0;          
   \   00000240   ........           LDR      R0,??DataTable31  ;; TrafKb
   \   00000244   00A0A0E3           MOV      R10,#+0
   \   00000248   000090E5           LDR      R0,[R0, #+0]
   \   0000024C   0180A0E1           MOV      R8,R1
   \   00000250   000050E3           CMP      R0,#+0
   \   00000254   2200001A           BNE      ??onClockChange_8
   \   00000258   890000EA           B        ??onClockChange_9
    230                    if (TrafKb)
    231                    {
    232                      while (pos=wstrwstr(pos,L"sent -"))
    233                      {
    234                        pos=pos+7;
    235                        len=(wstrchr(pos,'.')-pos);
   \                     ??onClockChange_10:
   \   0000025C   2E10A0E3           MOV      R1,#+46
   \   00000260   0E4080E2           ADD      R4,R0,#+14
   \   00000264   0400A0E1           MOV      R0,R4
   \   00000268   A00200EF           SWI      +672
   \   0000026C   A000A0E1           LSR      R0,R0,#+1
   \   00000270   A4B040E0           SUB      R11,R0,R4, LSR #+1
    236                        wstrncpy(temp_buf,pos,len);
   \   00000274   0B20A0E1           MOV      R2,R11
   \   00000278   0410A0E1           MOV      R1,R4
   \   0000027C   10008DE2           ADD      R0,SP,#+16
   \   00000280   530100EF           SWI      +339
    237                        wtoi(temp_buf,len,&hex);
   \   00000284   0D20A0E1           MOV      R2,SP
   \   00000288   0B10A0E1           MOV      R1,R11
   \   0000028C   10008DE2           ADD      R0,SP,#+16
   \   00000290   9B0200EF           SWI      +667
    238                        traf_whole_sent=traf_whole_sent+hex;
   \   00000294   00009DE5           LDR      R0,[SP, #+0]
    239                        hex=0;
   \   00000298   0010A0E3           MOV      R1,#+0
   \   0000029C   077080E0           ADD      R7,R0,R7
   \   000002A0   00108DE5           STR      R1,[SP, #+0]
    240                        pos=wstrchr(pos,'.')+1;
   \   000002A4   2E10A0E3           MOV      R1,#+46
   \   000002A8   0400A0E1           MOV      R0,R4
   \   000002AC   A00200EF           SWI      +672
   \   000002B0   024080E2           ADD      R4,R0,#+2
    241                        wstrncpy(temp_buf,pos,2);
   \   000002B4   0220A0E3           MOV      R2,#+2
   \   000002B8   0410A0E1           MOV      R1,R4
   \   000002BC   10008DE2           ADD      R0,SP,#+16
   \   000002C0   530100EF           SWI      +339
    242                        wtoi(temp_buf,2,&hex);
   \   000002C4   0D20A0E1           MOV      R2,SP
   \   000002C8   0210A0E3           MOV      R1,#+2
   \   000002CC   10008DE2           ADD      R0,SP,#+16
   \   000002D0   9B0200EF           SWI      +667
    243                        traf_fract_sent=traf_fract_sent+hex;
   \   000002D4   00009DE5           LDR      R0,[SP, #+0]
    244                        hex=0;
   \   000002D8   0810A0E1           MOV      R1,R8
   \   000002DC   0AA080E0           ADD      R10,R0,R10
   \   000002E0   00108DE5           STR      R1,[SP, #+0]
    245                      }
   \                     ??onClockChange_8:
   \   000002E4   841F85E2           ADD      R1,R5,#+528
   \   000002E8   0400A0E1           MOV      R0,R4
   \   000002EC   9E0200EF           SWI      +670
   \   000002F0   0040B0E1           MOVS     R4,R0
   \   000002F4   D8FFFF1A           BNE      ??onClockChange_10
    246                      traf_whole_sent=traf_whole_sent+traf_fract_sent/100;
   \   000002F8   ........           LDR      R0,??DataTable28  ;; 0x51eb851f
    247                      traf_fract_sent=traf_fract_sent%100;
    248                      pos=(wchar_t *)buffer_gprs;
   \   000002FC   0640A0E1           MOV      R4,R6
   \   00000300   901AC2E0           SMULL    R1,R2,R0,R10
   \   00000304   C222A0E1           ASR      R2,R2,#+5
   \   00000308   AA0F82E0           ADD      R0,R2,R10, LSR #+31
   \   0000030C   077080E0           ADD      R7,R0,R7
   \   00000310   ........           LDR      R0,??DataTable28  ;; 0x51eb851f
   \   00000314   9A10C2E0           SMULL    R1,R2,R10,R0
   \   00000318   6410A0E3           MOV      R1,#+100
   \   0000031C   C222A0E1           ASR      R2,R2,#+5
   \   00000320   AA2F82E0           ADD      R2,R2,R10, LSR #+31
   \   00000324   910202E0           MUL      R2,R1,R2
   \   00000328   02A04AE0           SUB      R10,R10,R2
   \   0000032C   210000EA           B        ??onClockChange_11
    249                      while (pos=wstrwstr(pos,L"received -"))
    250                      {
    251                        pos=pos+11;
    252                        len=(wstrchr(pos,'.')-pos);
   \                     ??onClockChange_12:
   \   00000330   2E10A0E3           MOV      R1,#+46
   \   00000334   164080E2           ADD      R4,R0,#+22
   \   00000338   0400A0E1           MOV      R0,R4
   \   0000033C   A00200EF           SWI      +672
   \   00000340   A000A0E1           LSR      R0,R0,#+1
   \   00000344   A4B040E0           SUB      R11,R0,R4, LSR #+1
    253                        wstrncpy(temp_buf,pos,len);
   \   00000348   0B20A0E1           MOV      R2,R11
   \   0000034C   0410A0E1           MOV      R1,R4
   \   00000350   10008DE2           ADD      R0,SP,#+16
   \   00000354   530100EF           SWI      +339
    254                        wtoi(temp_buf,len,&hex);
   \   00000358   0D20A0E1           MOV      R2,SP
   \   0000035C   0B10A0E1           MOV      R1,R11
   \   00000360   10008DE2           ADD      R0,SP,#+16
   \   00000364   9B0200EF           SWI      +667
    255                        traf_whole_rec=traf_whole_rec+hex;
   \   00000368   00009DE5           LDR      R0,[SP, #+0]
    256                        hex=0;
   \   0000036C   0010A0E3           MOV      R1,#+0
   \   00000370   088080E0           ADD      R8,R0,R8
   \   00000374   00108DE5           STR      R1,[SP, #+0]
    257                        pos=wstrchr(pos,'.')+1;
   \   00000378   2E10A0E3           MOV      R1,#+46
   \   0000037C   0400A0E1           MOV      R0,R4
   \   00000380   A00200EF           SWI      +672
   \   00000384   024080E2           ADD      R4,R0,#+2
    258                        wstrncpy(temp_buf,pos,2);
   \   00000388   0220A0E3           MOV      R2,#+2
   \   0000038C   0410A0E1           MOV      R1,R4
   \   00000390   10008DE2           ADD      R0,SP,#+16
   \   00000394   530100EF           SWI      +339
    259                        wtoi(temp_buf,2,&hex);
   \   00000398   0D20A0E1           MOV      R2,SP
   \   0000039C   0210A0E3           MOV      R1,#+2
   \   000003A0   10008DE2           ADD      R0,SP,#+16
   \   000003A4   9B0200EF           SWI      +667
    260                        traf_fract_rec=traf_fract_rec+hex;
   \   000003A8   00009DE5           LDR      R0,[SP, #+0]
    261                        hex=0;
   \   000003AC   0010A0E3           MOV      R1,#+0
   \   000003B0   099080E0           ADD      R9,R0,R9
   \   000003B4   00108DE5           STR      R1,[SP, #+0]
    262                      }
   \                     ??onClockChange_11:
   \   000003B8   881F85E2           ADD      R1,R5,#+544
   \   000003BC   0400A0E1           MOV      R0,R4
   \   000003C0   9E0200EF           SWI      +670
   \   000003C4   0040B0E1           MOVS     R4,R0
   \   000003C8   D8FFFF1A           BNE      ??onClockChange_12
    263                      traf_whole_rec=traf_whole_rec+traf_fract_rec/100;
    264                      traf_fract_rec=traf_fract_rec%100;
    265                      snwprintf(buffer_str,400,L"\r\nTotal cost - %d.%02d %ls\r\nTotal sent - %d.%02d Kb\r\nTotal received - %d.%02d Kb\r\n\r\n",rub,kop,Money,traf_whole_sent,traf_fract_sent,traf_whole_rec,traf_fract_rec);
   \   000003CC   ........           LDR      R0,??DataTable28  ;; 0x51eb851f
   \   000003D0   9910C2E0           SMULL    R1,R2,R9,R0
   \   000003D4   6410A0E3           MOV      R1,#+100
   \   000003D8   C222A0E1           ASR      R2,R2,#+5
   \   000003DC   A92F82E0           ADD      R2,R2,R9, LSR #+31
   \   000003E0   910202E0           MUL      R2,R1,R2
   \   000003E4   020049E0           SUB      R0,R9,R2
   \   000003E8   01002DE9           PUSH     {R0}
   \   000003EC   ........           LDR      R0,??DataTable28  ;; 0x51eb851f
   \   000003F0   9019C2E0           SMULL    R1,R2,R0,R9
   \   000003F4   641FA0E3           MOV      R1,#+400
   \   000003F8   C222A0E1           ASR      R2,R2,#+5
   \   000003FC   A90F82E0           ADD      R0,R2,R9, LSR #+31
   \   00000400   080080E0           ADD      R0,R0,R8
   \   00000404   01002DE9           PUSH     {R0}
   \   00000408   ........           LDR      R0,??DataTable29  ;; CLBook + 16
   \   0000040C   00042DE9           PUSH     {R10}
   \   00000410   80002DE9           PUSH     {R7}
   \   00000414   000090E5           LDR      R0,[R0, #+0]
   \   00000418   8E2F85E2           ADD      R2,R5,#+568
   \   0000041C   01002DE9           PUSH     {R0}
   \   00000420   1C009DE5           LDR      R0,[SP, #+28]
   \   00000424   01002DE9           PUSH     {R0}
   \   00000428   1C309DE5           LDR      R3,[SP, #+28]
   \   0000042C   A8008DE2           ADD      R0,SP,#+168
   \   00000430   150100EF           SWI      +277
   \   00000434   18D08DE2           ADD      SP,SP,#+24
   \   00000438   9F0000EA           B        ??onClockChange_13
    266                    }
    267                    else
    268                    {
    269                      while (pos=wstrwstr(pos,L"sent -"))
    270                      {
    271                        pos=pos+7;
    272                        len=(wstrchr(pos,' ')-pos);
   \                     ??onClockChange_14:
   \   0000043C   2010A0E3           MOV      R1,#+32
   \   00000440   0E4080E2           ADD      R4,R0,#+14
   \   00000444   0400A0E1           MOV      R0,R4
   \   00000448   A00200EF           SWI      +672
   \   0000044C   A000A0E1           LSR      R0,R0,#+1
   \   00000450   A4B040E0           SUB      R11,R0,R4, LSR #+1
    273                        wstrncpy(temp_buf,pos,len);
   \   00000454   0B20A0E1           MOV      R2,R11
   \   00000458   0410A0E1           MOV      R1,R4
   \   0000045C   10008DE2           ADD      R0,SP,#+16
   \   00000460   530100EF           SWI      +339
    274                        wtoi(temp_buf,len,&hex);
   \   00000464   0D20A0E1           MOV      R2,SP
   \   00000468   0B10A0E1           MOV      R1,R11
   \   0000046C   10008DE2           ADD      R0,SP,#+16
   \   00000470   9B0200EF           SWI      +667
    275                        traf_whole_sent=traf_whole_sent+hex;
   \   00000474   00009DE5           LDR      R0,[SP, #+0]
    276                        hex=0;
   \   00000478   0010A0E3           MOV      R1,#+0
   \   0000047C   077080E0           ADD      R7,R0,R7
   \   00000480   00108DE5           STR      R1,[SP, #+0]
    277                      }
   \                     ??onClockChange_9:
   \   00000484   841F85E2           ADD      R1,R5,#+528
   \   00000488   0400A0E1           MOV      R0,R4
   \   0000048C   9E0200EF           SWI      +670
   \   00000490   0040B0E1           MOVS     R4,R0
   \   00000494   E8FFFF1A           BNE      ??onClockChange_14
    278                      pos=(wchar_t *)buffer_gprs;
   \   00000498   0640A0E1           MOV      R4,R6
   \   0000049C   110000EA           B        ??onClockChange_15
    279                      while (pos=wstrwstr(pos,L"received -"))
    280                      {
    281                        pos=pos+11;
    282                        len=(wstrchr(pos,' ')-pos);
   \                     ??onClockChange_16:
   \   000004A0   2010A0E3           MOV      R1,#+32
   \   000004A4   164080E2           ADD      R4,R0,#+22
   \   000004A8   0400A0E1           MOV      R0,R4
   \   000004AC   A00200EF           SWI      +672
   \   000004B0   A000A0E1           LSR      R0,R0,#+1
   \   000004B4   A4B040E0           SUB      R11,R0,R4, LSR #+1
    283                        wstrncpy(temp_buf,pos,len);
   \   000004B8   0B20A0E1           MOV      R2,R11
   \   000004BC   0410A0E1           MOV      R1,R4
   \   000004C0   10008DE2           ADD      R0,SP,#+16
   \   000004C4   530100EF           SWI      +339
    284                        wtoi(temp_buf,len,&hex);
   \   000004C8   0D20A0E1           MOV      R2,SP
   \   000004CC   0B10A0E1           MOV      R1,R11
   \   000004D0   10008DE2           ADD      R0,SP,#+16
   \   000004D4   9B0200EF           SWI      +667
    285                        traf_whole_rec=traf_whole_rec+hex;
   \   000004D8   00009DE5           LDR      R0,[SP, #+0]
    286                        hex=0;
   \   000004DC   0010A0E3           MOV      R1,#+0
   \   000004E0   088080E0           ADD      R8,R0,R8
   \   000004E4   00108DE5           STR      R1,[SP, #+0]
    287                      }
   \                     ??onClockChange_15:
   \   000004E8   881F85E2           ADD      R1,R5,#+544
   \   000004EC   0400A0E1           MOV      R0,R4
   \   000004F0   9E0200EF           SWI      +670
   \   000004F4   0040B0E1           MOVS     R4,R0
   \   000004F8   E8FFFF1A           BNE      ??onClockChange_16
    288                      snwprintf(buffer_str,400,L"\r\nTotal cost - %d.%02d %ls\r\nTotal sent - %d b\r\nTotal received - %d b\r\n\r\n",rub,kop,Money,traf_whole_sent,traf_whole_rec);
   \   000004FC   ........           LDR      R0,??DataTable29  ;; CLBook + 16
   \   00000500   00012DE9           PUSH     {R8}
   \   00000504   80002DE9           PUSH     {R7}
   \   00000508   000090E5           LDR      R0,[R0, #+0]
   \   0000050C   B92F85E2           ADD      R2,R5,#+740
   \                     ??onClockChange_17:
   \   00000510   01002DE9           PUSH     {R0}
   \   00000514   14009DE5           LDR      R0,[SP, #+20]
   \   00000518   01002DE9           PUSH     {R0}
   \   0000051C   14309DE5           LDR      R3,[SP, #+20]
   \   00000520   641FA0E3           MOV      R1,#+400
   \   00000524   A0008DE2           ADD      R0,SP,#+160
   \   00000528   150100EF           SWI      +277
   \   0000052C   10D08DE2           ADD      SP,SP,#+16
   \   00000530   610000EA           B        ??onClockChange_13
    289                    }
    290                  }
    291                  else
    292                  {
    293                    if (TrafKb)
   \                     ??onClockChange_7:
   \   00000534   ........           LDR      R0,??DataTable31  ;; TrafKb
   \   00000538   DE8FA0E3           MOV      R8,#+888
   \   0000053C   000090E5           LDR      R0,[R0, #+0]
   \   00000540   000050E3           CMP      R0,#+0
   \   00000544   2200001A           BNE      ??onClockChange_18
   \   00000548   4A0000EA           B        ??onClockChange_19
    294                    {
    295                      while (pos=wstrwstr(pos,L"traffic -"))
    296                      {
    297                        pos=pos+10;
    298                        len=(wstrchr(pos,'.')-pos);
   \                     ??onClockChange_20:
   \   0000054C   2E10A0E3           MOV      R1,#+46
   \   00000550   144080E2           ADD      R4,R0,#+20
   \   00000554   0400A0E1           MOV      R0,R4
   \   00000558   A00200EF           SWI      +672
   \   0000055C   A000A0E1           LSR      R0,R0,#+1
   \   00000560   A4B040E0           SUB      R11,R0,R4, LSR #+1
    299                        wstrncpy(temp_buf,pos,len);
   \   00000564   0B20A0E1           MOV      R2,R11
   \   00000568   0410A0E1           MOV      R1,R4
   \   0000056C   10008DE2           ADD      R0,SP,#+16
   \   00000570   530100EF           SWI      +339
    300                        wtoi(temp_buf,len,&hex);
   \   00000574   0D20A0E1           MOV      R2,SP
   \   00000578   0B10A0E1           MOV      R1,R11
   \   0000057C   10008DE2           ADD      R0,SP,#+16
   \   00000580   9B0200EF           SWI      +667
    301                        traf_whole=traf_whole+hex;
   \   00000584   00009DE5           LDR      R0,[SP, #+0]
    302                        hex=0;
   \   00000588   0010A0E3           MOV      R1,#+0
   \   0000058C   077080E0           ADD      R7,R0,R7
   \   00000590   00108DE5           STR      R1,[SP, #+0]
    303                        pos=wstrchr(pos,'.')+1;
   \   00000594   2E10A0E3           MOV      R1,#+46
   \   00000598   0400A0E1           MOV      R0,R4
   \   0000059C   A00200EF           SWI      +672
   \   000005A0   024080E2           ADD      R4,R0,#+2
    304                        wstrncpy(temp_buf,pos,2);
   \   000005A4   0220A0E3           MOV      R2,#+2
   \   000005A8   0410A0E1           MOV      R1,R4
   \   000005AC   10008DE2           ADD      R0,SP,#+16
   \   000005B0   530100EF           SWI      +339
    305                        wtoi(temp_buf,2,&hex);
   \   000005B4   0D20A0E1           MOV      R2,SP
   \   000005B8   0210A0E3           MOV      R1,#+2
   \   000005BC   10008DE2           ADD      R0,SP,#+16
   \   000005C0   9B0200EF           SWI      +667
    306                        traf_fract=traf_fract+hex;
   \   000005C4   00009DE5           LDR      R0,[SP, #+0]
    307                        hex=0;
   \   000005C8   0010A0E3           MOV      R1,#+0
   \   000005CC   099080E0           ADD      R9,R0,R9
   \   000005D0   00108DE5           STR      R1,[SP, #+0]
    308                      }
   \                     ??onClockChange_18:
   \   000005D4   051088E0           ADD      R1,R8,R5
   \   000005D8   0400A0E1           MOV      R0,R4
   \   000005DC   9E0200EF           SWI      +670
   \   000005E0   0040B0E1           MOVS     R4,R0
   \   000005E4   D8FFFF1A           BNE      ??onClockChange_20
    309                      traf_whole=traf_whole+traf_fract/100;
    310                      traf_fract=traf_fract%100;
    311                      snwprintf(buffer_str,400,L"\r\nTotal cost - %d.%02d %ls\r\nTotal traffic - %d.%02d Kb\r\n\r\n",rub,kop,Money,traf_whole,traf_fract);
   \   000005E8   ........           LDR      R0,??DataTable28  ;; 0x51eb851f
   \   000005EC   9910C2E0           SMULL    R1,R2,R9,R0
   \   000005F0   6410A0E3           MOV      R1,#+100
   \   000005F4   C222A0E1           ASR      R2,R2,#+5
   \   000005F8   A92F82E0           ADD      R2,R2,R9, LSR #+31
   \   000005FC   910202E0           MUL      R2,R1,R2
   \   00000600   020049E0           SUB      R0,R9,R2
   \   00000604   01002DE9           PUSH     {R0}
   \   00000608   ........           LDR      R0,??DataTable28  ;; 0x51eb851f
   \   0000060C   9019C2E0           SMULL    R1,R2,R0,R9
   \   00000610   C222A0E1           ASR      R2,R2,#+5
   \   00000614   A90F82E0           ADD      R0,R2,R9, LSR #+31
   \   00000618   070080E0           ADD      R0,R0,R7
   \   0000061C   01002DE9           PUSH     {R0}
   \   00000620   ........           LDR      R0,??DataTable29  ;; CLBook + 16
   \   00000624   E32F85E2           ADD      R2,R5,#+908
   \   00000628   000090E5           LDR      R0,[R0, #+0]
   \   0000062C   B7FFFFEA           B        ??onClockChange_17
    312                    }
    313                    else
    314                    {
    315                      while (pos=wstrwstr(pos,L"traffic -"))
    316                      {
    317                        pos=pos+10;
    318                        len=(wstrchr(pos,' ')-pos);
   \                     ??onClockChange_21:
   \   00000630   2010A0E3           MOV      R1,#+32
   \   00000634   144080E2           ADD      R4,R0,#+20
   \   00000638   0400A0E1           MOV      R0,R4
   \   0000063C   A00200EF           SWI      +672
   \   00000640   A000A0E1           LSR      R0,R0,#+1
   \   00000644   A4B040E0           SUB      R11,R0,R4, LSR #+1
    319                        wstrncpy(temp_buf,pos,len);
   \   00000648   0B20A0E1           MOV      R2,R11
   \   0000064C   0410A0E1           MOV      R1,R4
   \   00000650   10008DE2           ADD      R0,SP,#+16
   \   00000654   530100EF           SWI      +339
    320                        wtoi(temp_buf,len,&hex);
   \   00000658   0D20A0E1           MOV      R2,SP
   \   0000065C   0B10A0E1           MOV      R1,R11
   \   00000660   10008DE2           ADD      R0,SP,#+16
   \   00000664   9B0200EF           SWI      +667
    321                        traf_whole=traf_whole+hex;
   \   00000668   00009DE5           LDR      R0,[SP, #+0]
    322                        hex=0;
   \   0000066C   0010A0E3           MOV      R1,#+0
   \   00000670   077080E0           ADD      R7,R0,R7
   \   00000674   00108DE5           STR      R1,[SP, #+0]
    323                      }
   \                     ??onClockChange_19:
   \   00000678   051088E0           ADD      R1,R8,R5
   \   0000067C   0400A0E1           MOV      R0,R4
   \   00000680   9E0200EF           SWI      +670
   \   00000684   0040B0E1           MOVS     R4,R0
   \   00000688   E8FFFF1A           BNE      ??onClockChange_21
    324                      snwprintf(buffer_str,400,L"\r\nTotal cost - %d.%02d %ls\r\nTotal traffic - %d b\r\n\r\n",rub,kop,Money,traf_whole);
   \   0000068C   ........           LDR      R0,??DataTable29  ;; CLBook + 16
   \   00000690   80002DE9           PUSH     {R7}
   \   00000694   000090E5           LDR      R0,[R0, #+0]
   \   00000698   0520A0E1           MOV      R2,R5
   \   0000069C   01002DE9           PUSH     {R0}
   \   000006A0   10009DE5           LDR      R0,[SP, #+16]
   \   000006A4   641FA0E3           MOV      R1,#+400
   \   000006A8   01002DE9           PUSH     {R0}
   \   000006AC   10309DE5           LDR      R3,[SP, #+16]
   \   000006B0   9C008DE2           ADD      R0,SP,#+156
   \   000006B4   150100EF           SWI      +277
   \   000006B8   0CD08DE2           ADD      SP,SP,#+12
    325                    }
    326                  }
    327                  f=_fopen(fpath,L"gprs.txt",0x108,0x180,0);
   \                     ??onClockChange_13:
   \   000006BC   0000A0E3           MOV      R0,#+0
   \   000006C0   01002DE9           PUSH     {R0}
   \   000006C4   603FA0E3           MOV      R3,#+384
   \   000006C8   422FA0E3           MOV      R2,#+264
   \   000006CC   7B1F85E2           ADD      R1,R5,#+492
   \   000006D0   890F8DE2           ADD      R0,SP,#+548
   \   000006D4   160100EF           SWI      +278
   \   000006D8   0040A0E1           MOV      R4,R0
    328                  fwrite(f,buffer_str,wstrlen(buffer_str)*2);
   \   000006DC   94008DE2           ADD      R0,SP,#+148
   \   000006E0   570100EF           SWI      +343
   \   000006E4   8020A0E1           LSL      R2,R0,#+1
   \   000006E8   94108DE2           ADD      R1,SP,#+148
   \   000006EC   0400A0E1           MOV      R0,R4
   \   000006F0   190100EF           SWI      +281
    329                  fclose(f);
   \   000006F4   0400A0E1           MOV      R0,R4
   \   000006F8   170100EF           SWI      +279
   \   000006FC   04D08DE2           ADD      SP,SP,#+4
    330                }
    331                delete(buffer_gprs);
   \                     ??onClockChange_4:
   \   00000700   0600A0E1           MOV      R0,R6
   \   00000704   ........           _BLF     `??operator delete`,`??operator delete??rA`
    332              }
    333              memcpy(cur_date,datetime,7);
   \                     ??onClockChange_3:
   \   00000708   20009FE5           LDR      R0,??onClockChange_1  ;; CLBook + 12
   \   0000070C   0C109DE5           LDR      R1,[SP, #+12]
   \   00000710   000090E5           LDR      R0,[R0, #+0]
   \   00000714   0720A0E3           MOV      R2,#+7
   \   00000718   130100EF           SWI      +275
    334            }
    335            delete(datetime);
   \                     ??onClockChange_2:
   \   0000071C   0C009DE5           LDR      R0,[SP, #+12]
   \   00000720   ........           _BLF     `??operator delete`,`??operator delete??rA`
    336            return(0);
   \   00000724   0000A0E3           MOV      R0,#+0
   \   00000728   F6DF8DE2           ADD      SP,SP,#+984
   \   0000072C   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??onClockChange_1:
   \   00000730   ........           DC32     CLBook + 12
    337          }
    338          
    339          //Ловим создание содинения

   \                                 In segment CODE, align 4, keep-with-next
    340          int onSessionEstablished(void * r0, BOOK *)
    341          {
   \                     ??onSessionEstablished:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    342            if (r0)
   \   00000008   0F00000A           BEQ      ??onSessionEstablished_1
    343            {
    344              myList_gprs_elem * elem_gprs=new(myList_gprs_elem);
   \   0000000C   0800A0E3           MOV      R0,#+8
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   0050A0E1           MOV      R5,R0
    345              elem_gprs->ID=((ses_est*)r0)->unkID;
   \   00000018   2C0094E5           LDR      R0,[R4, #+44]
   \   0000001C   000085E5           STR      R0,[R5, #+0]
    346              elem_gprs->SesEst=new(DATETIME);
   \   00000020   0800A0E3           MOV      R0,#+8
   \   00000024   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000028   040085E5           STR      R0,[R5, #+4]
    347              REQUEST_DATEANDTIME_GET(SYNC,elem_gprs->SesEst);
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   ........           LDR      R0,??DataTable18  ;; SYNC
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   6E0100EF           SWI      +366
    348              ListElement_AddtoTop(myList_gprs,elem_gprs);
   \   0000003C   ........           LDR      R0,??DataTable22  ;; CLBook + 8
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   000090E5           LDR      R0,[R0, #+0]
   \   00000048   6B0100EF           SWI      +363
    349            }
    350            return(0);
   \                     ??onSessionEstablished_1:
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   3080BDE8           POP      {R4,R5,PC}       ;; return
    351          }
    352          
    353          //Ловим окончание содинения

   \                                 In segment CODE, align 4, keep-with-next
    354          int onSessionTerminated(void * r0, BOOK *)
    355          {
   \                     ??onSessionTerminated:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   47DF4DE2           SUB      SP,SP,#+284
   \   00000008   40DE4DE2           SUB      SP,SP,#+1024
   \   0000000C   0040B0E1           MOVS     R4,R0
    356            if (r0)
   \   00000010   1502000A           BEQ      ??onSessionTerminated_1
    357            {
    358              int f;
    359              wchar_t fpath_gprs[200];
    360              wchar_t folder_gprs[20];
    361              wchar_t buffer_gprs_ptr[400];
    362              wchar_t * buffer_gprs=buffer_gprs_ptr;
   \   00000014   44508DE2           ADD      R5,SP,#+68
    363              GPRS_SESSION_INFO * buf_ses=new(GPRS_SESSION_INFO);
   \   00000018   0C00A0E3           MOV      R0,#+12
   \   0000001C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000020   08008DE5           STR      R0,[SP, #+8]
    364              GPRS_GetLastSessionInfo(0,buf_ses);
   \   00000024   0010A0E1           MOV      R1,R0
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   990200EF           SWI      +665
    365              
    366              myList_gprs_elem * temp_elem_gprs=new(myList_gprs_elem);
   \   00000030   0800A0E3           MOV      R0,#+8
   \   00000034   ........           _BLF     `??operator new`,`??operator new??rA`
    367              temp_elem_gprs->ID=((ses_term*)r0)->unkID;
   \   00000038   3C289FE5           LDR      R2,??onSessionTerminated_2  ;; ??myList_gprs_Find
   \   0000003C   1C008DE5           STR      R0,[SP, #+28]
   \   00000040   341094E5           LDR      R1,[R4, #+52]
   \   00000044   001080E5           STR      R1,[R0, #+0]
   \   00000048   ........           LDR      R0,??DataTable22  ;; CLBook + 8
   \   0000004C   1C109DE5           LDR      R1,[SP, #+28]
   \   00000050   000090E5           LDR      R0,[R0, #+0]
    368              int pos=ListElement_Find(myList_gprs,temp_elem_gprs,myList_gprs_Find);
   \   00000054   AC0100EF           SWI      +428
    369              if (pos!=0xFFFF)
   \   00000058   FF10A0E3           MOV      R1,#+255
   \   0000005C   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000060   010050E1           CMP      R0,R1
   \   00000064   FC01000A           BEQ      ??onSessionTerminated_3
    370              {
    371                myList_gprs_elem * elem_gprs=(myList_gprs_elem*)ListElement_Remove(myList_gprs,pos);
    372                wstrcpy(fpath_gprs,GetDir(DIR_OTHER | MEM_EXTERNAL));
    373                wstrcat(fpath_gprs,L"/Call Logger/");
   \   00000068   ........           LDR      R4,??DataTable21  ;; `?<Constant L"\\xd\\xa\\x54\\x6f\\x74\\x61\\x6c\\x20\\x6`
   \   0000006C   0010A0E1           MOV      R1,R0
   \   00000070   ........           LDR      R0,??DataTable22  ;; CLBook + 8
   \   00000074   000090E5           LDR      R0,[R0, #+0]
   \   00000078   790100EF           SWI      +377
   \   0000007C   0C008DE5           STR      R0,[SP, #+12]
   \   00000080   0800A0E3           MOV      R0,#+8
   \   00000084   050100EF           SWI      +261
   \   00000088   0010A0E1           MOV      R1,R0
   \   0000008C   D90F8DE2           ADD      R0,SP,#+868
   \   00000090   520100EF           SWI      +338
   \   00000094   6C1F84E2           ADD      R1,R4,#+432
   \   00000098   D90F8DE2           ADD      R0,SP,#+868
   \   0000009C   540100EF           SWI      +340
    374                snwprintf(folder_gprs,20,L"%04d-%02d-%02d",elem_gprs->SesEst->date.year,elem_gprs->SesEst->date.mon,elem_gprs->SesEst->date.day);
   \   000000A0   0C009DE5           LDR      R0,[SP, #+12]
   \   000000A4   732F84E2           ADD      R2,R4,#+460
   \   000000A8   040090E5           LDR      R0,[R0, #+4]
   \   000000AC   0310D0E5           LDRB     R1,[R0, #+3]
   \   000000B0   02002DE9           PUSH     {R1}
   \   000000B4   0210D0E5           LDRB     R1,[R0, #+2]
   \   000000B8   02002DE9           PUSH     {R1}
   \   000000BC   B030D0E1           LDRH     R3,[R0, #+0]
   \   000000C0   FC008DE2           ADD      R0,SP,#+252
   \   000000C4   400E80E2           ADD      R0,R0,#+1024
   \   000000C8   1410A0E3           MOV      R1,#+20
   \   000000CC   150100EF           SWI      +277
    375                wstrcat(fpath_gprs,folder_gprs);
   \   000000D0   FC108DE2           ADD      R1,SP,#+252
   \   000000D4   401E81E2           ADD      R1,R1,#+1024
   \   000000D8   DB0F8DE2           ADD      R0,SP,#+876
   \   000000DC   540100EF           SWI      +340
   \   000000E0   0020A0E3           MOV      R2,#+0
   \   000000E4   7B1F84E2           ADD      R1,R4,#+492
   \   000000E8   DB0F8DE2           ADD      R0,SP,#+876
    376                if (fstat(fpath_gprs,L"gprs.txt",0)<0)
   \   000000EC   1C0100EF           SWI      +284
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   08D08DE2           ADD      SP,SP,#+8
   \   000000F8   0300005A           BPL      ??onSessionTerminated_4
    377                {
    378                  buffer_gprs[0]=0xFEFF;
   \   000000FC   FF10A0E3           MOV      R1,#+255
   \   00000100   FE1C81E3           ORR      R1,R1,#0xFE00
   \   00000104   B414CDE1           STRH     R1,[SP, #+68]
    379                  buffer_gprs=buffer_gprs+1;
   \   00000108   46508DE2           ADD      R5,SP,#+70
    380                }
    381                int traf=buf_ses->SentBytes+buf_ses->RcvBytes;
   \                     ??onSessionTerminated_4:
   \   0000010C   08009DE5           LDR      R0,[SP, #+8]
   \   00000110   08109DE5           LDR      R1,[SP, #+8]
   \   00000114   040090E5           LDR      R0,[R0, #+4]
   \   00000118   081091E5           LDR      R1,[R1, #+8]
   \   0000011C   000081E0           ADD      R0,R1,R0
    382                if (traf/1024<=TrafRound)
   \   00000120   C014A0E1           ASR      R1,R0,#+9
   \   00000124   210B80E0           ADD      R0,R0,R1, LSR #+22
   \   00000128   4095A0E1           ASR      R9,R0,#+10
   \   0000012C   4C079FE5           LDR      R0,??onSessionTerminated_2+0x4  ;; TrafRound
   \   00000130   002090E5           LDR      R2,[R0, #+0]
   \   00000134   090052E1           CMP      R2,R9
    383                {
    384                  traf=TrafRound;
   \   00000138   0290A021           MOVCS    R9,R2
   \   0000013C   0800002A           BCS      ??onSessionTerminated_5
    385                }
    386                else
    387                {
    388                  if (traf/1024%TrafRound>0)
   \   00000140   0900A0E1           MOV      R0,R9
   \   00000144   0210A0E1           MOV      R1,R2
   \   00000148   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   0300000A           BEQ      ??onSessionTerminated_5
    389                  {
    390                    traf=traf/1024/TrafRound*TrafRound+TrafRound;
   \   00000154   0900A0E1           MOV      R0,R9
   \   00000158   0210A0E1           MOV      R1,R2
   \   0000015C   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000160   922129E0           MLA      R9,R2,R1,R2
    391                  }
    392                  else
    393                  {
    394                    traf=traf/1024;
    395                  }
    396                }
    397                int traf_cost;
    398                int cost_rub;
    399                int cost_kop1;
    400                int cost_kop2;
    401                if (!TimeDay)
   \                     ??onSessionTerminated_5:
   \   00000164   18079FE5           LDR      R0,??onSessionTerminated_2+0x8  ;; TimeDay
   \   00000168   001090E5           LDR      R1,[R0, #+0]
   \   0000016C   000051E3           CMP      R1,#+0
   \   00000170   3F00001A           BNE      ??onSessionTerminated_6
    402                {
    403                  traf_cost=traf*TrafCost/1024;
   \   00000174   0C079FE5           LDR      R0,??onSessionTerminated_2+0xC  ;; TrafCost
    404                  if (traf*TrafCost%1024*10/1024>=5) traf_cost=traf_cost+1;
   \   00000178   0A20A0E3           MOV      R2,#+10
   \   0000017C   000090E5           LDR      R0,[R0, #+0]
   \   00000180   900901E0           MUL      R1,R0,R9
   \   00000184   2105A0E1           LSR      R0,R1,#+10
   \   00000188   011BA0E1           LSL      R1,R1,#+22
   \   0000018C   211BA0E1           LSR      R1,R1,#+22
   \   00000190   920101E0           MUL      R1,R2,R1
   \   00000194   2115A0E1           LSR      R1,R1,#+10
   \   00000198   050051E3           CMP      R1,#+5
    405                  cost_rub=traf_cost/100;
   \                     ??onSessionTerminated_7:
   \   0000019C   ........           LDR      R1,??DataTable28  ;; 0x51eb851f
   \   000001A0   01008022           ADDCS    R0,R0,#+1
   \   000001A4   9120C3E0           SMULL    R2,R3,R1,R0
   \   000001A8   C332A0E1           ASR      R3,R3,#+5
   \   000001AC   A06F83E0           ADD      R6,R3,R0, LSR #+31
    406                  cost_kop1=traf_cost%100*10/100;
   \   000001B0   9021C3E0           SMULL    R2,R3,R0,R1
   \   000001B4   6420A0E3           MOV      R2,#+100
   \   000001B8   C332A0E1           ASR      R3,R3,#+5
   \   000001BC   A03F83E0           ADD      R3,R3,R0, LSR #+31
   \   000001C0   920303E0           MUL      R3,R2,R3
   \   000001C4   0A10A0E3           MOV      R1,#+10
   \   000001C8   030040E0           SUB      R0,R0,R3
   \   000001CC   910000E0           MUL      R0,R1,R0
   \   000001D0   ........           LDR      R1,??DataTable28  ;; 0x51eb851f
   \   000001D4   9120C3E0           SMULL    R2,R3,R1,R0
   \   000001D8   C332A0E1           ASR      R3,R3,#+5
   \   000001DC   A07F83E0           ADD      R7,R3,R0, LSR #+31
    407                  cost_kop2=traf_cost%100*10%100*10/100;
   \   000001E0   9021C3E0           SMULL    R2,R3,R0,R1
   \   000001E4   6420A0E3           MOV      R2,#+100
   \   000001E8   C332A0E1           ASR      R3,R3,#+5
   \   000001EC   A03F83E0           ADD      R3,R3,R0, LSR #+31
   \   000001F0   920303E0           MUL      R3,R2,R3
   \   000001F4   0A10A0E3           MOV      R1,#+10
   \   000001F8   030040E0           SUB      R0,R0,R3
   \   000001FC   910000E0           MUL      R0,R1,R0
   \   00000200   ........           LDR      R1,??DataTable28  ;; 0x51eb851f
   \   00000204   9120C3E0           SMULL    R2,R3,R1,R0
    408                }
    409                else
    410                {
    411                  int cur_time;
    412                  if (!elem_gprs->SesEst->time.hour)
    413                  {
    414                    cur_time=24;
    415                  }
    416                  else
    417                  {
    418                    cur_time=elem_gprs->SesEst->time.hour;
    419                  }
    420                  if (TimeDay<TimeNight)
    421                  {          
    422                    if ((cur_time>=TimeDay)&&(cur_time<TimeNight))
    423                    {
    424                      traf_cost=traf*TrafCostDay/1024;
    425                      if (traf*TrafCostDay%1024*10/1024>=5) traf_cost=traf_cost+1;
    426                      cost_rub=traf_cost/100;
    427                      cost_kop1=traf_cost%100*10/100;
    428                      cost_kop2=traf_cost%100*10%100*10/100;
    429                    }
    430                    else
    431                    {
    432                      traf_cost=traf*TrafCostNight/1024;
    433                      if (traf*TrafCostNight%1024*10/1024>=5) traf_cost=traf_cost+1;
    434                      cost_rub=traf_cost/100;
    435                      cost_kop1=traf_cost%100*10/100;
    436                      cost_kop2=traf_cost%100*10%100*10/100;
    437                    }
    438                  }
    439                  else
    440                  {
    441                    if (TimeNight<TimeDay)
    442                    {
    443                      if ((cur_time>=TimeNight)&&(cur_time<TimeDay))
    444                      {
    445                        traf_cost=traf*TrafCostNight/1024;
    446                        if (traf*TrafCostNight%1024*10/1024>=5) traf_cost=traf_cost+1;
    447                        cost_rub=traf_cost/100;
    448                        cost_kop1=traf_cost%100*10/100;
    449                        cost_kop2=traf_cost%100*10%100*10/100;
    450                      }
    451                      else
    452                      {
    453                        traf_cost=traf*TrafCostDay/1024;
    454                        if (traf*TrafCostDay%1024*10/1024>=5) traf_cost=traf_cost+1;
    455                        cost_rub=traf_cost/100;
    456                        cost_kop1=traf_cost%100*10/100;
    457                        cost_kop2=traf_cost%100*10%100*10/100;
    458                      }
    459                    }
    460                    else
    461                    {
    462                      if ((cur_time>=TimeDay)&&(cur_time<TimeNight))
    463                      {
    464                        traf_cost=traf*TrafCostDay/1024;
    465                        if (traf*TrafCostDay%1024*10/1024>=5) traf_cost=traf_cost+1;
    466                        cost_rub=traf_cost/100;
    467                        cost_kop1=traf_cost%100*10/100;
    468                        cost_kop2=traf_cost%100*10%100*10/100;
    469          
    470                      }
    471                      else
    472                      {
    473                        traf_cost=traf*TrafCostNight/1024;
    474                        if (traf*TrafCostNight%1024*10/1024>=5) traf_cost=traf_cost+1;
    475                        cost_rub=traf_cost/100;
    476                        cost_kop1=traf_cost%100*10/100;
    477                        cost_kop2=traf_cost%100*10%100*10/100;
    478                      }
    479                    }
    480                  }
    481                }
    482                if ((Hol1)||(Hol2))
   \   00000208   7C169FE5           LDR      R1,??onSessionTerminated_2+0x10  ;; Hol2
   \   0000020C   C332A0E1           ASR      R3,R3,#+5
   \   00000210   001091E5           LDR      R1,[R1, #+0]
   \   00000214   A08F83E0           ADD      R8,R3,R0, LSR #+31
   \   00000218   00108DE5           STR      R1,[SP, #+0]
   \   0000021C   6C169FE5           LDR      R1,??onSessionTerminated_2+0x14  ;; Hol1
   \   00000220   001091E5           LDR      R1,[R1, #+0]
   \   00000224   04108DE5           STR      R1,[SP, #+4]
   \   00000228   000051E3           CMP      R1,#+0
   \   0000022C   00009D05           LDREQ    R0,[SP, #+0]
   \   00000230   00005003           CMPEQ    R0,#+0
   \   00000234   6F00000A           BEQ      ??onSessionTerminated_8
    483                {
    484                  int cur_day;
    485                  char weekday;
    486                  CALE_SET * baseday=new(CALE_SET);
   \   00000238   0400A0E3           MOV      R0,#+4
   \   0000023C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000240   00A0A0E1           MOV      R10,R0
    487                  DATE_GetWeekDay((DATE*)elem_gprs->SesEst,&weekday);
   \   00000244   0C009DE5           LDR      R0,[SP, #+12]
   \   00000248   10108DE2           ADD      R1,SP,#+16
   \   0000024C   040090E5           LDR      R0,[R0, #+4]
   \   00000250   9C0200EF           SWI      +668
    488                  Cale_GetSettings(3,baseday);
   \   00000254   0A10A0E1           MOV      R1,R10
   \   00000258   0300A0E3           MOV      R0,#+3
   \   0000025C   9D0200EF           SWI      +669
    489                  if (weekday>=baseday->cale_base)
   \   00000260   0100DAE5           LDRB     R0,[R10, #+1]
   \   00000264   1010DDE5           LDRB     R1,[SP, #+16]
   \   00000268   000051E1           CMP      R1,R0
   \   0000026C   07108132           ADDCC    R1,R1,#+7
    490                  {
    491                    cur_day=weekday-baseday->cale_base+1;
   \   00000270   300000EA           B        ??onSessionTerminated_9
   \                     ??onSessionTerminated_6:
   \   00000274   0C009DE5           LDR      R0,[SP, #+12]
   \   00000278   0A60A0E3           MOV      R6,#+10
   \   0000027C   040090E5           LDR      R0,[R0, #+4]
   \   00000280   0A80A0E3           MOV      R8,#+10
   \   00000284   0420D0E5           LDRB     R2,[R0, #+4]
   \   00000288   04069FE5           LDR      R0,??onSessionTerminated_2+0x18  ;; TrafCostDay
   \   0000028C   000052E3           CMP      R2,#+0
   \   00000290   003090E5           LDR      R3,[R0, #+0]
   \   00000294   1820A003           MOVEQ    R2,#+24
   \   00000298   930900E0           MUL      R0,R3,R9
   \   0000029C   003BA0E1           LSL      R3,R0,#+22
   \   000002A0   233BA0E1           LSR      R3,R3,#+22
   \   000002A4   960303E0           MUL      R3,R6,R3
   \   000002A8   E8659FE5           LDR      R6,??onSessionTerminated_2+0x1C  ;; TrafCostNight
   \   000002AC   2335A0E1           LSR      R3,R3,#+10
   \   000002B0   007096E5           LDR      R7,[R6, #+0]
   \   000002B4   2005A0E1           LSR      R0,R0,#+10
   \   000002B8   970906E0           MUL      R6,R7,R9
   \   000002BC   067BA0E1           LSL      R7,R6,#+22
   \   000002C0   277BA0E1           LSR      R7,R7,#+22
   \   000002C4   980707E0           MUL      R7,R8,R7
   \   000002C8   CC859FE5           LDR      R8,??onSessionTerminated_2+0x20  ;; TimeNight
   \   000002CC   2775A0E1           LSR      R7,R7,#+10
   \   000002D0   008098E5           LDR      R8,[R8, #+0]
   \   000002D4   2665A0E1           LSR      R6,R6,#+10
   \   000002D8   080051E1           CMP      R1,R8
   \   000002DC   0800002A           BCS      ??onSessionTerminated_10
   \   000002E0   010052E1           CMP      R2,R1
   \   000002E4   0300003A           BCC      ??onSessionTerminated_11
   \   000002E8   080052E1           CMP      R2,R8
   \   000002EC   0100002A           BCS      ??onSessionTerminated_11
   \                     ??onSessionTerminated_12:
   \   000002F0   050053E3           CMP      R3,#+5
   \   000002F4   A8FFFFEA           B        ??onSessionTerminated_7
   \                     ??onSessionTerminated_11:
   \   000002F8   0600A0E1           MOV      R0,R6
   \   000002FC   050057E3           CMP      R7,#+5
   \   00000300   A5FFFFEA           B        ??onSessionTerminated_7
   \                     ??onSessionTerminated_10:
   \   00000304   010058E1           CMP      R8,R1
   \   00000308   0400002A           BCS      ??onSessionTerminated_13
   \   0000030C   080052E1           CMP      R2,R8
   \   00000310   F6FFFF3A           BCC      ??onSessionTerminated_12
   \   00000314   010052E1           CMP      R2,R1
   \   00000318   F4FFFF2A           BCS      ??onSessionTerminated_12
   \   0000031C   F5FFFFEA           B        ??onSessionTerminated_11
   \                     ??onSessionTerminated_13:
   \   00000320   010052E1           CMP      R2,R1
   \   00000324   F3FFFF3A           BCC      ??onSessionTerminated_11
   \   00000328   080052E1           CMP      R2,R8
   \   0000032C   F1FFFF2A           BCS      ??onSessionTerminated_11
   \   00000330   050053E3           CMP      R3,#+5
   \   00000334   98FFFFEA           B        ??onSessionTerminated_7
   \                     ??onSessionTerminated_9:
   \   00000338   000041E0           SUB      R0,R1,R0
   \   0000033C   01B080E2           ADD      R11,R0,#+1
    492                  }
    493                  else
    494                  {
    495                    cur_day=7+weekday-baseday->cale_base+1;
    496                  }
    497                  delete(baseday);
   \   00000340   0A00A0E1           MOV      R0,R10
   \   00000344   ........           _BLF     `??operator delete`,`??operator delete??rA`
    498                  if ((Hol1==cur_day)||(Hol2==cur_day))
   \   00000348   04009DE5           LDR      R0,[SP, #+4]
   \   0000034C   0B0050E1           CMP      R0,R11
   \   00000350   00009D15           LDRNE    R0,[SP, #+0]
   \   00000354   0B005011           CMPNE    R0,R11
   \   00000358   2600001A           BNE      ??onSessionTerminated_8
    499                  {
    500                    traf_cost=traf*TrafCostHol/1024;
   \   0000035C   3C059FE5           LDR      R0,??onSessionTerminated_2+0x24  ;; TrafCostHol
    501                    if (traf*TrafCostHol%1024*10/1024>=5) traf_cost=traf_cost+1;
   \   00000360   0A20A0E3           MOV      R2,#+10
   \   00000364   000090E5           LDR      R0,[R0, #+0]
   \   00000368   900901E0           MUL      R1,R0,R9
   \   0000036C   2105A0E1           LSR      R0,R1,#+10
   \   00000370   011BA0E1           LSL      R1,R1,#+22
   \   00000374   211BA0E1           LSR      R1,R1,#+22
   \   00000378   920101E0           MUL      R1,R2,R1
   \   0000037C   2115A0E1           LSR      R1,R1,#+10
   \   00000380   050051E3           CMP      R1,#+5
    502                    cost_rub=traf_cost/100;
   \   00000384   ........           LDR      R1,??DataTable28  ;; 0x51eb851f
   \   00000388   01008022           ADDCS    R0,R0,#+1
   \   0000038C   9120C3E0           SMULL    R2,R3,R1,R0
   \   00000390   C332A0E1           ASR      R3,R3,#+5
   \   00000394   A06F83E0           ADD      R6,R3,R0, LSR #+31
    503                    cost_kop1=traf_cost%100*10/100;
   \   00000398   9021C3E0           SMULL    R2,R3,R0,R1
   \   0000039C   6420A0E3           MOV      R2,#+100
   \   000003A0   C332A0E1           ASR      R3,R3,#+5
   \   000003A4   A03F83E0           ADD      R3,R3,R0, LSR #+31
   \   000003A8   920303E0           MUL      R3,R2,R3
   \   000003AC   0A10A0E3           MOV      R1,#+10
   \   000003B0   030040E0           SUB      R0,R0,R3
   \   000003B4   910000E0           MUL      R0,R1,R0
   \   000003B8   ........           LDR      R1,??DataTable28  ;; 0x51eb851f
   \   000003BC   9120C3E0           SMULL    R2,R3,R1,R0
   \   000003C0   C332A0E1           ASR      R3,R3,#+5
   \   000003C4   A07F83E0           ADD      R7,R3,R0, LSR #+31
    504                    cost_kop2=traf_cost%100*10%100*10/100;
   \   000003C8   9021C3E0           SMULL    R2,R3,R0,R1
   \   000003CC   6420A0E3           MOV      R2,#+100
   \   000003D0   C332A0E1           ASR      R3,R3,#+5
   \   000003D4   A03F83E0           ADD      R3,R3,R0, LSR #+31
   \   000003D8   920303E0           MUL      R3,R2,R3
   \   000003DC   0A10A0E3           MOV      R1,#+10
   \   000003E0   030040E0           SUB      R0,R0,R3
   \   000003E4   910000E0           MUL      R0,R1,R0
   \   000003E8   ........           LDR      R1,??DataTable28  ;; 0x51eb851f
   \   000003EC   9120C3E0           SMULL    R2,R3,R1,R0
   \   000003F0   C332A0E1           ASR      R3,R3,#+5
   \   000003F4   A08F83E0           ADD      R8,R3,R0, LSR #+31
    505                  }
    506                }
    507                
    508                if (TrafDiv)
   \                     ??onSessionTerminated_8:
   \   000003F8   ........           LDR      R1,??DataTable29  ;; CLBook + 16
   \   000003FC   ........           LDR      R9,??DataTable30  ;; TrafDiv
   \   00000400   002091E5           LDR      R2,[R1, #+0]
   \   00000404   08109DE5           LDR      R1,[SP, #+8]
   \   00000408   0C009DE5           LDR      R0,[SP, #+12]
   \   0000040C   08A091E5           LDR      R10,[R1, #+8]
   \   00000410   043091E5           LDR      R3,[R1, #+4]
   \   00000414   ........           LDR      R1,??DataTable31  ;; TrafKb
   \   00000418   009099E5           LDR      R9,[R9, #+0]
   \   0000041C   040090E5           LDR      R0,[R0, #+4]
   \   00000420   00B091E5           LDR      R11,[R1, #+0]
   \   00000424   8610A0E3           MOV      R1,#+134
   \   00000428   401F81E3           ORR      R1,R1,#0x100
   \   0000042C   000059E3           CMP      R9,#+0
   \   00000430   7700000A           BEQ      ??onSessionTerminated_14
    509                {
    510                  if (TrafKb)
   \   00000434   00005BE3           CMP      R11,#+0
   \   00000438   6300000A           BEQ      ??onSessionTerminated_15
    511                  {
    512                    int sent=buf_ses->SentBytes;
    513                    int Kb_s=sent/1024;
   \   0000043C   C394A0E1           ASR      R9,R3,#+9
   \   00000440   299B83E0           ADD      R9,R3,R9, LSR #+22
   \   00000444   4995A0E1           ASR      R9,R9,#+10
   \   00000448   14908DE5           STR      R9,[SP, #+20]
    514                    int b_s1=sent%1024*10/1024;
   \   0000044C   093543E0           SUB      R3,R3,R9, LSL #+10
   \   00000450   0A90A0E3           MOV      R9,#+10
   \   00000454   99030BE0           MUL      R11,R9,R3
    515                    int b_s2=sent%1024*10%1024*10/1024;
   \   00000458   0AE0A0E3           MOV      LR,#+10
   \   0000045C   CB34A0E1           ASR      R3,R11,#+9
   \   00000460   233B8BE0           ADD      R3,R11,R3, LSR #+22
   \   00000464   4395A0E1           ASR      R9,R3,#+10
   \   00000468   09354BE0           SUB      R3,R11,R9, LSL #+10
   \   0000046C   9E030CE0           MUL      R12,LR,R3
   \   00000470   00B08DE5           STR      R11,[SP, #+0]
   \   00000474   CC34A0E1           ASR      R3,R12,#+9
   \   00000478   233B8CE0           ADD      R3,R12,R3, LSR #+22
   \   0000047C   4335A0E1           ASR      R3,R3,#+10
    516                    if (sent%1024*10%1024*10%1024*10/1024>=5) b_s2=b_s2+1;
   \   00000480   00B08DE5           STR      R11,[SP, #+0]
   \   00000484   00B08DE5           STR      R11,[SP, #+0]
   \   00000488   03E54CE0           SUB      LR,R12,R3, LSL #+10
   \   0000048C   0AB0A0E3           MOV      R11,#+10
   \   00000490   9B0E0EE0           MUL      LR,R11,LR
   \   00000494   CEB4A0E1           ASR      R11,LR,#+9
   \   00000498   2BBB8EE0           ADD      R11,LR,R11, LSR #+22
   \   0000049C   4BB5A0E1           ASR      R11,R11,#+10
   \   000004A0   05005BE3           CMP      R11,#+5
   \   000004A4   013083A2           ADDGE    R3,R3,#+1
    517                    if (b_s2==10)
   \   000004A8   0A0053E3           CMP      R3,#+10
    518                    {
    519                      b_s1=b_s1+1;
   \   000004AC   01908902           ADDEQ    R9,R9,#+1
    520                      b_s2=0;
   \   000004B0   0030A003           MOVEQ    R3,#+0
    521                    }
    522                    if (b_s1==10)
   \   000004B4   0A0059E3           CMP      R9,#+10
   \   000004B8   0300001A           BNE      ??onSessionTerminated_16
    523                    {
    524                      Kb_s=Kb_s+1;
   \   000004BC   14B09DE5           LDR      R11,[SP, #+20]
    525                      b_s1=0;
   \   000004C0   0090A0E3           MOV      R9,#+0
   \   000004C4   01B08BE2           ADD      R11,R11,#+1
   \   000004C8   14B08DE5           STR      R11,[SP, #+20]
    526                    }
    527                    
    528                    int rec=buf_ses->RcvBytes;
    529                    int Kb_r=rec/1024;
   \                     ??onSessionTerminated_16:
   \   000004CC   CAB4A0E1           ASR      R11,R10,#+9
   \   000004D0   2BBB8AE0           ADD      R11,R10,R11, LSR #+22
   \   000004D4   4BB5A0E1           ASR      R11,R11,#+10
   \   000004D8   18B08DE5           STR      R11,[SP, #+24]
    530                    int b_r1=rec%1024*10/1024;
   \   000004DC   0BA54AE0           SUB      R10,R10,R11, LSL #+10
   \   000004E0   0AB0A0E3           MOV      R11,#+10
   \   000004E4   9B0A0AE0           MUL      R10,R11,R10
    531                    int b_r2=rec%1024*10%1024*10/1024;
   \   000004E8   0AC0A0E3           MOV      R12,#+10
   \   000004EC   CAB4A0E1           ASR      R11,R10,#+9
   \   000004F0   2BBB8AE0           ADD      R11,R10,R11, LSR #+22
   \   000004F4   4BB5A0E1           ASR      R11,R11,#+10
   \   000004F8   0BE54AE0           SUB      LR,R10,R11, LSL #+10
   \   000004FC   9C0E0EE0           MUL      LR,R12,LR
   \   00000500   00A08DE5           STR      R10,[SP, #+0]
   \   00000504   04E08DE5           STR      LR,[SP, #+4]
    532                    if (rec%1024*10%1024*10%1024*10/1024>=5) b_r2=b_r2+1;
   \   00000508   00A08DE5           STR      R10,[SP, #+0]
   \   0000050C   00A08DE5           STR      R10,[SP, #+0]
   \   00000510   04A09DE5           LDR      R10,[SP, #+4]
   \   00000514   0EC0A0E1           MOV      R12,LR
   \   00000518   CCE4A0E1           ASR      LR,R12,#+9
   \   0000051C   2ECB8CE0           ADD      R12,R12,LR, LSR #+22
   \   00000520   4CE5A0E1           ASR      LR,R12,#+10
   \   00000524   00A08DE5           STR      R10,[SP, #+0]
   \   00000528   0EC54AE0           SUB      R12,R10,LR, LSL #+10
   \   0000052C   0AA0A0E3           MOV      R10,#+10
   \   00000530   9A0C0CE0           MUL      R12,R10,R12
   \   00000534   CCA4A0E1           ASR      R10,R12,#+9
   \   00000538   2AAB8CE0           ADD      R10,R12,R10, LSR #+22
   \   0000053C   4AA5A0E1           ASR      R10,R10,#+10
   \   00000540   05005AE3           CMP      R10,#+5
   \   00000544   01E08EA2           ADDGE    LR,LR,#+1
    533                    if (b_r2==10)
   \   00000548   0A005EE3           CMP      LR,#+10
    534                    {
    535                      b_r1=b_r1+1;
   \   0000054C   01B08B02           ADDEQ    R11,R11,#+1
    536                      b_r2=0;
   \   00000550   00E0A003           MOVEQ    LR,#+0
    537                    }
    538                    if (b_r1==10)
   \   00000554   0A005BE3           CMP      R11,#+10
   \   00000558   0300001A           BNE      ??onSessionTerminated_17
    539                    {
    540                      Kb_r=Kb_r+1;
   \   0000055C   18B09DE5           LDR      R11,[SP, #+24]
   \   00000560   01B08BE2           ADD      R11,R11,#+1
   \   00000564   18B08DE5           STR      R11,[SP, #+24]
    541                      b_r1=0;
   \   00000568   00B0A0E3           MOV      R11,#+0
    542                    }
    543                    snwprintf(buffer_gprs,390,L"Start time - %02d:%02d:%02d, sent - %d.%d%d Kb, received - %d.%d%d Kb, cost - %d.%d%d %ls\r\n",elem_gprs->SesEst->time.hour,elem_gprs->SesEst->time.min,elem_gprs->SesEst->time.sec,Kb_s,b_s1,b_s2,Kb_r,b_r1,b_r2,cost_rub,cost_kop1,cost_kop2,Money);
   \                     ??onSessionTerminated_17:
   \   0000056C   04002DE9           PUSH     {R2}
   \   00000570   00012DE9           PUSH     {R8}
   \   00000574   80002DE9           PUSH     {R7}
   \   00000578   40002DE9           PUSH     {R6}
   \   0000057C   00402DE9           PUSH     {LR}
   \   00000580   00082DE9           PUSH     {R11}
   \   00000584   30209DE5           LDR      R2,[SP, #+48]
   \   00000588   04002DE9           PUSH     {R2}
   \   0000058C   08002DE9           PUSH     {R3}
   \   00000590   00022DE9           PUSH     {R9}
   \   00000594   38209DE5           LDR      R2,[SP, #+56]
   \   00000598   04002DE9           PUSH     {R2}
   \   0000059C   0620D0E5           LDRB     R2,[R0, #+6]
   \   000005A0   04002DE9           PUSH     {R2}
   \   000005A4   0520D0E5           LDRB     R2,[R0, #+5]
   \   000005A8   04002DE9           PUSH     {R2}
   \   000005AC   0430D0E5           LDRB     R3,[R0, #+4]
   \   000005B0   1C00A0E3           MOV      R0,#+28
   \   000005B4   400E80E3           ORR      R0,R0,#0x400
   \   000005B8   042080E0           ADD      R2,R0,R4
   \   000005BC   0500A0E1           MOV      R0,R5
   \   000005C0   150100EF           SWI      +277
   \   000005C4   30D08DE2           ADD      SP,SP,#+48
   \   000005C8   570000EA           B        ??onSessionTerminated_18
    544                  }
    545                  else
    546                  {
    547                    snwprintf(buffer_gprs,390,L"Start time - %02d:%02d:%02d, sent - %d b, received - %d b, cost - %d.%d%d %ls\r\n",elem_gprs->SesEst->time.hour,elem_gprs->SesEst->time.min,elem_gprs->SesEst->time.sec,buf_ses->SentBytes,buf_ses->RcvBytes,cost_rub,cost_kop1,cost_kop2,Money);
   \                     ??onSessionTerminated_15:
   \   000005CC   04002DE9           PUSH     {R2}
   \   000005D0   00012DE9           PUSH     {R8}
   \   000005D4   80002DE9           PUSH     {R7}
   \   000005D8   40002DE9           PUSH     {R6}
   \   000005DC   00042DE9           PUSH     {R10}
   \   000005E0   08002DE9           PUSH     {R3}
   \   000005E4   0620D0E5           LDRB     R2,[R0, #+6]
   \   000005E8   04002DE9           PUSH     {R2}
   \   000005EC   0520D0E5           LDRB     R2,[R0, #+5]
   \   000005F0   04002DE9           PUSH     {R2}
   \   000005F4   0430D0E5           LDRB     R3,[R0, #+4]
   \   000005F8   D400A0E3           MOV      R0,#+212
   \   000005FC   400E80E3           ORR      R0,R0,#0x400
   \   00000600   042080E0           ADD      R2,R0,R4
   \   00000604   0500A0E1           MOV      R0,R5
   \   00000608   150100EF           SWI      +277
   \   0000060C   20D08DE2           ADD      SP,SP,#+32
   \   00000610   450000EA           B        ??onSessionTerminated_18
    548                  }
    549                }
    550                else
    551                {
    552                  traf=buf_ses->SentBytes+buf_ses->RcvBytes;
   \                     ??onSessionTerminated_14:
   \   00000614   03908AE0           ADD      R9,R10,R3
    553                  if (TrafKb)
   \   00000618   00005BE3           CMP      R11,#+0
   \   0000061C   3200000A           BEQ      ??onSessionTerminated_19
    554                  {
    555                    int Kb=traf/1024;
   \   00000620   C934A0E1           ASR      R3,R9,#+9
   \   00000624   233B89E0           ADD      R3,R9,R3, LSR #+22
   \   00000628   4335A0E1           ASR      R3,R3,#+10
    556                    int b1=traf%1024*10/1024;
   \   0000062C   039549E0           SUB      R9,R9,R3, LSL #+10
   \   00000630   0AA0A0E3           MOV      R10,#+10
   \   00000634   9A0909E0           MUL      R9,R10,R9
    557                    int b2=traf%1024*10%1024*10/1024;
   \   00000638   0AB0A0E3           MOV      R11,#+10
   \   0000063C   00908DE5           STR      R9,[SP, #+0]
    558                    if (traf%1024*10%1024*10%1024*10/1024>=5) b2=b2+1;
   \   00000640   00908DE5           STR      R9,[SP, #+0]
   \   00000644   00908DE5           STR      R9,[SP, #+0]
    559                    if (b2==10)
    560                    {
    561                      b1=b1+1;
    562                      b2=0;
    563                    }
    564                    if (b1==10)
    565                    {
    566                      Kb=Kb+1;
    567                      b1=0;
    568                    }
    569                    snwprintf(buffer_gprs,390,L"Start time - %02d:%02d:%02d, traffic - %d.%d%d Kb, cost - %d.%d%d %ls\r\n",elem_gprs->SesEst->time.hour,elem_gprs->SesEst->time.min,elem_gprs->SesEst->time.sec,Kb,b1,b2,cost_rub,cost_kop1,cost_kop2,Money);
   \   00000648   04002DE9           PUSH     {R2}
   \   0000064C   C9A4A0E1           ASR      R10,R9,#+9
   \   00000650   2AAB89E0           ADD      R10,R9,R10, LSR #+22
   \   00000654   4AC5A0E1           ASR      R12,R10,#+10
   \   00000658   0CA549E0           SUB      R10,R9,R12, LSL #+10
   \   0000065C   9B0A0EE0           MUL      LR,R11,R10
   \   00000660   0A90A0E3           MOV      R9,#+10
   \   00000664   CEA4A0E1           ASR      R10,LR,#+9
   \   00000668   2AAB8EE0           ADD      R10,LR,R10, LSR #+22
   \   0000066C   4AB5A0E1           ASR      R11,R10,#+10
   \   00000670   0BA54EE0           SUB      R10,LR,R11, LSL #+10
   \   00000674   990A0AE0           MUL      R10,R9,R10
   \   00000678   00012DE9           PUSH     {R8}
   \   0000067C   CA94A0E1           ASR      R9,R10,#+9
   \   00000680   299B8AE0           ADD      R9,R10,R9, LSR #+22
   \   00000684   4995A0E1           ASR      R9,R9,#+10
   \   00000688   050059E3           CMP      R9,#+5
   \   0000068C   01B08BA2           ADDGE    R11,R11,#+1
   \   00000690   0A005BE3           CMP      R11,#+10
   \   00000694   01C08C02           ADDEQ    R12,R12,#+1
   \   00000698   00B0A003           MOVEQ    R11,#+0
   \   0000069C   0A005CE3           CMP      R12,#+10
   \   000006A0   01308302           ADDEQ    R3,R3,#+1
   \   000006A4   00C0A003           MOVEQ    R12,#+0
   \   000006A8   80002DE9           PUSH     {R7}
   \   000006AC   40002DE9           PUSH     {R6}
   \   000006B0   00082DE9           PUSH     {R11}
   \   000006B4   00102DE9           PUSH     {R12}
   \   000006B8   08002DE9           PUSH     {R3}
   \   000006BC   0620D0E5           LDRB     R2,[R0, #+6]
   \   000006C0   04002DE9           PUSH     {R2}
   \   000006C4   0520D0E5           LDRB     R2,[R0, #+5]
   \   000006C8   04002DE9           PUSH     {R2}
   \   000006CC   0430D0E5           LDRB     R3,[R0, #+4]
   \   000006D0   7400A0E3           MOV      R0,#+116
   \   000006D4   500E80E3           ORR      R0,R0,#0x500
   \   000006D8   042080E0           ADD      R2,R0,R4
   \   000006DC   0500A0E1           MOV      R0,R5
   \   000006E0   150100EF           SWI      +277
   \   000006E4   24D08DE2           ADD      SP,SP,#+36
   \   000006E8   0F0000EA           B        ??onSessionTerminated_18
    570                  }
    571                  else
    572                  {
    573                    snwprintf(buffer_gprs,390,L"Start time - %02d:%02d:%02d, traffic - %d b, cost - %d.%d%d %ls\r\n",elem_gprs->SesEst->time.hour,elem_gprs->SesEst->time.min,elem_gprs->SesEst->time.sec,traf,cost_rub,cost_kop1,cost_kop2,Money);
   \                     ??onSessionTerminated_19:
   \   000006EC   04002DE9           PUSH     {R2}
   \   000006F0   00012DE9           PUSH     {R8}
   \   000006F4   80002DE9           PUSH     {R7}
   \   000006F8   40002DE9           PUSH     {R6}
   \   000006FC   00022DE9           PUSH     {R9}
   \   00000700   0620D0E5           LDRB     R2,[R0, #+6]
   \   00000704   04002DE9           PUSH     {R2}
   \   00000708   0520D0E5           LDRB     R2,[R0, #+5]
   \   0000070C   04002DE9           PUSH     {R2}
   \   00000710   0430D0E5           LDRB     R3,[R0, #+4]
   \   00000714   0400A0E3           MOV      R0,#+4
   \   00000718   600E80E3           ORR      R0,R0,#0x600
   \   0000071C   042080E0           ADD      R2,R0,R4
   \   00000720   0500A0E1           MOV      R0,R5
   \   00000724   150100EF           SWI      +277
   \   00000728   1CD08DE2           ADD      SP,SP,#+28
    574                  }
    575                }
    576                int str_len=(wstrlen(buffer_gprs))*2;
   \                     ??onSessionTerminated_18:
   \   0000072C   0500A0E1           MOV      R0,R5
   \   00000730   570100EF           SWI      +343
   \   00000734   8060A0E1           LSL      R6,R0,#+1
    577                if (fstat(fpath_gprs,L"gprs.txt",0)<0)
   \   00000738   0020A0E3           MOV      R2,#+0
   \   0000073C   7B1F84E2           ADD      R1,R4,#+492
   \   00000740   D90F8DE2           ADD      R0,SP,#+868
   \   00000744   1C0100EF           SWI      +284
   \   00000748   000050E3           CMP      R0,#+0
    578                {
    579                  buffer_gprs=buffer_gprs-1;
   \   0000074C   02504542           SUBMI    R5,R5,#+2
    580                }
    581                FSTAT _fstat;
    582                if ((fstat(fpath_gprs,L"gprs.txt",&_fstat)<0)||(!sort_order))
   \   00000750   28208DE2           ADD      R2,SP,#+40
   \   00000754   7B1F84E2           ADD      R1,R4,#+492
   \   00000758   D90F8DE2           ADD      R0,SP,#+868
   \   0000075C   1C0100EF           SWI      +284
   \   00000760   000050E3           CMP      R0,#+0
   \   00000764   0300004A           BMI      ??onSessionTerminated_20
   \   00000768   ........           LDR      R0,??DataTable36  ;; sort_order
   \   0000076C   000090E5           LDR      R0,[R0, #+0]
   \   00000770   000050E3           CMP      R0,#+0
   \   00000774   0B00001A           BNE      ??onSessionTerminated_21
    583                {
    584                  f=_fopen(fpath_gprs,L"gprs.txt",0x108,0x180,0);
   \                     ??onSessionTerminated_20:
   \   00000778   0000A0E3           MOV      R0,#+0
   \   0000077C   01002DE9           PUSH     {R0}
   \   00000780   603FA0E3           MOV      R3,#+384
   \   00000784   422FA0E3           MOV      R2,#+264
   \   00000788   7B1F84E2           ADD      R1,R4,#+492
   \   0000078C   DA0F8DE2           ADD      R0,SP,#+872
   \   00000790   160100EF           SWI      +278
   \   00000794   0040A0E1           MOV      R4,R0
    585                  fwrite(f,buffer_gprs,str_len);
   \   00000798   0620A0E1           MOV      R2,R6
   \   0000079C   0510A0E1           MOV      R1,R5
   \   000007A0   190100EF           SWI      +281
   \   000007A4   270000EA           B        ??onSessionTerminated_22
    586                }
    587                else
    588                {
    589                  char * new_buff=new char[_fstat.fsize+str_len];
   \                     ??onSessionTerminated_21:
   \   000007A8   30009DE5           LDR      R0,[SP, #+48]
   \   000007AC   000086E0           ADD      R0,R6,R0
   \   000007B0   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   000007B4   0070A0E1           MOV      R7,R0
    590                  f=_fopen(fpath_gprs,L"gprs.txt",0x4,0x180,0);
   \   000007B8   0000A0E3           MOV      R0,#+0
   \   000007BC   01002DE9           PUSH     {R0}
   \   000007C0   603FA0E3           MOV      R3,#+384
   \   000007C4   0420A0E3           MOV      R2,#+4
   \   000007C8   7B1F84E2           ADD      R1,R4,#+492
   \   000007CC   DA0F8DE2           ADD      R0,SP,#+872
   \   000007D0   160100EF           SWI      +278
   \   000007D4   0040A0E1           MOV      R4,R0
    591                  fread(f,new_buff,2);
   \   000007D8   0220A0E3           MOV      R2,#+2
   \   000007DC   0710A0E1           MOV      R1,R7
   \   000007E0   180100EF           SWI      +280
    592                  lseek(f,2,0);
   \   000007E4   0020A0E3           MOV      R2,#+0
   \   000007E8   0210A0E3           MOV      R1,#+2
   \   000007EC   0400A0E1           MOV      R0,R4
   \   000007F0   760100EF           SWI      +374
    593                  memcpy(new_buff+2,buffer_gprs,str_len);
   \   000007F4   0620A0E1           MOV      R2,R6
   \   000007F8   0510A0E1           MOV      R1,R5
   \   000007FC   020087E2           ADD      R0,R7,#+2
   \   00000800   130100EF           SWI      +275
    594                  fread(f,new_buff+2+str_len,_fstat.fsize-2);
   \   00000804   34009DE5           LDR      R0,[SP, #+52]
   \   00000808   022040E2           SUB      R2,R0,#+2
   \   0000080C   070086E0           ADD      R0,R6,R7
   \   00000810   021080E2           ADD      R1,R0,#+2
   \   00000814   0400A0E1           MOV      R0,R4
   \   00000818   180100EF           SWI      +280
    595                  lseek(f,0,0);
   \   0000081C   0020A0E3           MOV      R2,#+0
   \   00000820   0010A0E3           MOV      R1,#+0
   \   00000824   0400A0E1           MOV      R0,R4
   \   00000828   760100EF           SWI      +374
    596                  fwrite(f,new_buff,_fstat.fsize+str_len);
   \   0000082C   34009DE5           LDR      R0,[SP, #+52]
   \   00000830   0710A0E1           MOV      R1,R7
   \   00000834   002086E0           ADD      R2,R6,R0
   \   00000838   0400A0E1           MOV      R0,R4
   \   0000083C   190100EF           SWI      +281
    597                  delete(new_buff);
   \   00000840   0700A0E1           MOV      R0,R7
   \   00000844   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??onSessionTerminated_22:
   \   00000848   04D08DE2           ADD      SP,SP,#+4
    598                }
    599                fclose(f);
   \   0000084C   0400A0E1           MOV      R0,R4
   \   00000850   170100EF           SWI      +279
    600                myList_gprs_elem_Free(elem_gprs);
   \   00000854   0C009DE5           LDR      R0,[SP, #+12]
   \   00000858   ........           BL       ??myList_gprs_elem_Free
    601              }
    602              delete(buf_ses);
   \                     ??onSessionTerminated_3:
   \   0000085C   08009DE5           LDR      R0,[SP, #+8]
   \   00000860   ........           _BLF     `??operator delete`,`??operator delete??rA`
    603              delete(temp_elem_gprs);
   \   00000864   1C009DE5           LDR      R0,[SP, #+28]
   \   00000868   ........           _BLF     `??operator delete`,`??operator delete??rA`
    604            }
    605            return(0);
   \                     ??onSessionTerminated_1:
   \   0000086C   0000A0E3           MOV      R0,#+0
   \   00000870   47DF8DE2           ADD      SP,SP,#+284
   \   00000874   40DE8DE2           ADD      SP,SP,#+1024
   \   00000878   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??onSessionTerminated_2:
   \   0000087C   ........           DC32     ??myList_gprs_Find
   \   00000880   ........           DC32     TrafRound
   \   00000884   ........           DC32     TimeDay
   \   00000888   ........           DC32     TrafCost
   \   0000088C   ........           DC32     Hol2
   \   00000890   ........           DC32     Hol1
   \   00000894   ........           DC32     TrafCostDay
   \   00000898   ........           DC32     TrafCostNight
   \   0000089C   ........           DC32     TimeNight
   \   000008A0   ........           DC32     TrafCostHol
    606          }
    607            
    608          //Оновное действо.... Все в куче....

   \                                 In segment CODE, align 4, keep-with-next
    609          int OnCallManager(void * CallManStruct, BOOK *)
    610          {
   \                     ??OnCallManager:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   AFDF4DE2           SUB      SP,SP,#+700
   \   00000008   40DE4DE2           SUB      SP,SP,#+1024
    611            //Ловим всех кроме idle
    612            if (((CALLMANAGER_EVENT_DATA*)CallManStruct)->CallState)
   \   0000000C   0200D0E5           LDRB     R0,[R0, #+2]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   4002000A           BEQ      ??OnCallManager_1
    613            {
    614              //Создаем структурку
    615              myList_elem* temp_elem=new(myList_elem);
   \   00000018   1C00A0E3           MOV      R0,#+28
   \   0000001C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000020   0040A0E1           MOV      R4,R0
    616              int length=PNUM_len(((CALLMANAGER_EVENT_DATA*)CallManStruct)->PNUM);
   \   00000024   BC069DE5           LDR      R0,[SP, #+1724]
   \   00000028   0080A0E3           MOV      R8,#+0
   \   0000002C   040090E5           LDR      R0,[R0, #+4]
   \   00000030   660100EF           SWI      +358
   \   00000034   0050A0E1           MOV      R5,R0
   \   00000038   BC069DE5           LDR      R0,[SP, #+1724]
   \   0000003C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000040   FF0050E3           CMP      R0,#+255
   \   00000044   0600001A           BNE      ??OnCallManager_2
    617              //Проверяем наличие элемента в листе
    618              if (((CALLMANAGER_EVENT_DATA*)CallManStruct)->CallID==0xFF)
    619              {
    620                if (myList->FirstFree)
   \   00000048   D8089FE5           LDR      R0,??OnCallManager_3  ;; CLBook + 4
   \   0000004C   000090E5           LDR      R0,[R0, #+0]
   \   00000050   B200D0E1           LDRH     R0,[R0, #+2]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0300000A           BEQ      ??OnCallManager_4
    621                {
    622                  temp_elem->line=1;
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   010000EA           B        ??OnCallManager_4
    623                }
    624                else
    625                {
    626                  temp_elem->line=0;
    627                }
    628              }
    629              else
    630              {
    631                temp_elem->line=((CALLMANAGER_EVENT_DATA*)CallManStruct)->CallID;
   \                     ??OnCallManager_2:
   \   00000064   BC069DE5           LDR      R0,[SP, #+1724]
   \   00000068   0000D0E5           LDRB     R0,[R0, #+0]
    632              }
    633              temp_elem->PNUM=new wchar_t[length+1];
   \                     ??OnCallManager_4:
   \   0000006C   016085E2           ADD      R6,R5,#+1
   \   00000070   1800C4E5           STRB     R0,[R4, #+24]
   \   00000074   8600A0E1           LSL      R0,R6,#+1
   \   00000078   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   0000007C   000084E5           STR      R0,[R4, #+0]
    634              char * sp=new char[length+1];
   \   00000080   0600A0E1           MOV      R0,R6
   \   00000084   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000088   0070A0E1           MOV      R7,R0
    635              memset(sp,0,length+1);
   \   0000008C   0620A0E1           MOV      R2,R6
   \   00000090   0010A0E3           MOV      R1,#+0
   \   00000094   120100EF           SWI      +274
    636              PNUM2str(sp,((CALLMANAGER_EVENT_DATA*)CallManStruct)->PNUM,length,length+1);
   \   00000098   BC069DE5           LDR      R0,[SP, #+1724]
   \   0000009C   0630A0E1           MOV      R3,R6
   \   000000A0   041090E5           LDR      R1,[R0, #+4]
   \   000000A4   0520A0E1           MOV      R2,R5
    637              str2wstr(temp_elem->PNUM,sp);
    638              delete(sp);
    639              if (ListElement_Find(myList,temp_elem,myList_Find)==0xFFFF)
   \   000000A8   ........           LDR      R5,??DataTable33  ;; `?<Constant L"\\xd\\xa\\x54\\x6f\\x74\\x61\\x6c\\x20\\x6`
   \   000000AC   0700A0E1           MOV      R0,R7
   \   000000B0   670100EF           SWI      +359
   \   000000B4   000094E5           LDR      R0,[R4, #+0]
   \   000000B8   0710A0E1           MOV      R1,R7
   \   000000BC   580100EF           SWI      +344
   \   000000C0   0700A0E1           MOV      R0,R7
   \   000000C4   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   000000C8   58089FE5           LDR      R0,??OnCallManager_3  ;; CLBook + 4
   \   000000CC   58289FE5           LDR      R2,??OnCallManager_3+0x4  ;; ??myList_Find
   \   000000D0   000090E5           LDR      R0,[R0, #+0]
   \   000000D4   0410A0E1           MOV      R1,R4
   \   000000D8   AC0100EF           SWI      +428
   \   000000DC   FF10A0E3           MOV      R1,#+255
   \   000000E0   FF1C81E3           ORR      R1,R1,#0xFF00
   \   000000E4   010050E1           CMP      R0,R1
   \   000000E8   3F00001A           BNE      ??OnCallManager_5
    640              {
    641                temp_elem->startdatetime=new DATETIME;
   \   000000EC   0800A0E3           MOV      R0,#+8
   \   000000F0   ........           _BLF     `??operator new`,`??operator new??rA`
   \   000000F4   100084E5           STR      R0,[R4, #+16]
    642                REQUEST_DATEANDTIME_GET(SYNC,temp_elem->startdatetime);
   \   000000F8   0010A0E1           MOV      R1,R0
   \   000000FC   ........           LDR      R0,??DataTable41  ;; SYNC
   \   00000100   000090E5           LDR      R0,[R0, #+0]
   \   00000104   6E0100EF           SWI      +366
    643                temp_elem->first_callstate=((CALLMANAGER_EVENT_DATA*)CallManStruct)->CallState;
   \   00000108   BC069DE5           LDR      R0,[SP, #+1724]
   \   0000010C   0200D0E5           LDRB     R0,[R0, #+2]
   \   00000110   080084E5           STR      R0,[R4, #+8]
    644                temp_elem->last_callstate=0;
   \   00000114   0C8084E5           STR      R8,[R4, #+12]
    645                if (CallStatusDesc_GetName(CallID_GetCallStatusDesc(temp_elem->line)))
   \   00000118   1800D4E5           LDRB     R0,[R4, #+24]
   \   0000011C   950200EF           SWI      +661
   \   00000120   960200EF           SWI      +662
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   1800000A           BEQ      ??OnCallManager_6
    646                {
    647                  if (CallStatusDesc_GetName(CallID_GetCallStatusDesc(temp_elem->line))[0])
   \   0000012C   1800D4E5           LDRB     R0,[R4, #+24]
   \   00000130   950200EF           SWI      +661
   \   00000134   960200EF           SWI      +662
   \   00000138   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   0D00000A           BEQ      ??OnCallManager_7
    648                  {
    649                    temp_elem->Name=new wchar_t[wstrlen(CallStatusDesc_GetName(CallID_GetCallStatusDesc(temp_elem->line))+1)];
   \   00000144   1800D4E5           LDRB     R0,[R4, #+24]
   \   00000148   950200EF           SWI      +661
   \   0000014C   960200EF           SWI      +662
   \   00000150   020080E2           ADD      R0,R0,#+2
   \   00000154   570100EF           SWI      +343
   \   00000158   8000A0E1           LSL      R0,R0,#+1
   \   0000015C   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000160   040084E5           STR      R0,[R4, #+4]
    650                    wstrcpy(temp_elem->Name,CallStatusDesc_GetName(CallID_GetCallStatusDesc(temp_elem->line))+2);
   \   00000164   1800D4E5           LDRB     R0,[R4, #+24]
   \   00000168   950200EF           SWI      +661
   \   0000016C   960200EF           SWI      +662
   \   00000170   041080E2           ADD      R1,R0,#+4
   \   00000174   040094E5           LDR      R0,[R4, #+4]
   \   00000178   0B0000EA           B        ??OnCallManager_8
    651                  }
    652                  else
    653                  {
    654                    temp_elem->Name=new wchar_t[14];
   \                     ??OnCallManager_7:
   \   0000017C   1C00A0E3           MOV      R0,#+28
   \   00000180   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000184   040084E5           STR      R0,[R4, #+4]
    655                    temp_elem->Name[0]=0;
   \   00000188   B080C0E1           STRH     R8,[R0, #+0]
   \   0000018C   070000EA           B        ??OnCallManager_9
    656                  }
    657                }
    658                else
    659                {
    660                  temp_elem->Name=new wchar_t[20];
   \                     ??OnCallManager_6:
   \   00000190   2800A0E3           MOV      R0,#+40
   \   00000194   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000198   040084E5           STR      R0,[R4, #+4]
    661                  temp_elem->Name[0]=0;
   \   0000019C   B080C0E1           STRH     R8,[R0, #+0]
    662                  wstrcpy(temp_elem->Name,L"Emergency");
   \   000001A0   8810A0E3           MOV      R1,#+136
   \   000001A4   601E81E3           ORR      R1,R1,#0x600
   \   000001A8   051081E0           ADD      R1,R1,R5
   \                     ??OnCallManager_8:
   \   000001AC   520100EF           SWI      +338
    663                }
    664                  
    665                temp_elem->begindatetime=new DATETIME;
   \                     ??OnCallManager_9:
   \   000001B0   0800A0E3           MOV      R0,#+8
   \   000001B4   ........           _BLF     `??operator new`,`??operator new??rA`
   \   000001B8   140084E5           STR      R0,[R4, #+20]
    666                temp_elem->begindatetime->time.hour=0;
   \   000001BC   0480C0E5           STRB     R8,[R0, #+4]
    667                temp_elem->begindatetime->time.min=0;
   \   000001C0   140094E5           LDR      R0,[R4, #+20]
    668                temp_elem->begindatetime->time.sec=0;
    669                ListElement_AddtoTop(myList,temp_elem);
   \   000001C4   0410A0E1           MOV      R1,R4
   \   000001C8   0580C0E5           STRB     R8,[R0, #+5]
   \   000001CC   140094E5           LDR      R0,[R4, #+20]
   \   000001D0   0680C0E5           STRB     R8,[R0, #+6]
   \   000001D4   4C079FE5           LDR      R0,??OnCallManager_3  ;; CLBook + 4
   \   000001D8   000090E5           LDR      R0,[R0, #+0]
   \   000001DC   6B0100EF           SWI      +363
   \   000001E0   0100A0E3           MOV      R0,#+1
   \   000001E4   6CDE8DE2           ADD      SP,SP,#+1728
   \   000001E8   F08FBDE8           POP      {R4-R11,PC}
    670              }
    671              else
    672              {
    673                if (((CALLMANAGER_EVENT_DATA*)CallManStruct)->CallState==6)
   \                     ??OnCallManager_5:
   \   000001EC   BC069DE5           LDR      R0,[SP, #+1724]
   \   000001F0   0200D0E5           LDRB     R0,[R0, #+2]
   \   000001F4   060050E3           CMP      R0,#+6
   \   000001F8   A901001A           BNE      ??OnCallManager_10
    674                {
    675                  DATETIME * enddatetime=new DATETIME;
   \   000001FC   0800A0E3           MOV      R0,#+8
   \   00000200   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000204   0060A0E1           MOV      R6,R0
    676                  REQUEST_DATEANDTIME_GET(SYNC,enddatetime);
   \   00000208   ........           LDR      R0,??DataTable41  ;; SYNC
   \   0000020C   0610A0E1           MOV      R1,R6
   \   00000210   000090E5           LDR      R0,[R0, #+0]
   \   00000214   6E0100EF           SWI      +366
    677                  myList_elem * elem=(myList_elem*)ListElement_Remove(myList,ListElement_Find(myList,temp_elem,myList_Find));
   \   00000218   08079FE5           LDR      R0,??OnCallManager_3  ;; CLBook + 4
   \   0000021C   08279FE5           LDR      R2,??OnCallManager_3+0x4  ;; ??myList_Find
   \   00000220   000090E5           LDR      R0,[R0, #+0]
   \   00000224   0410A0E1           MOV      R1,R4
   \   00000228   AC0100EF           SWI      +428
   \   0000022C   0010A0E1           MOV      R1,R0
   \   00000230   F0069FE5           LDR      R0,??OnCallManager_3  ;; CLBook + 4
   \   00000234   000090E5           LDR      R0,[R0, #+0]
   \   00000238   790100EF           SWI      +377
   \   0000023C   0070A0E1           MOV      R7,R0
    678                  int f;
    679                  int sub;
    680                  int m;
    681                  int s;
    682                  wchar_t fpath[200];
    683                  wchar_t fname[20];
    684                  wchar_t folder[20];
    685                  wchar_t fpath_ini[200];
    686                  fpath[0]=0;
   \   00000240   DD0F8DE2           ADD      R0,SP,#+884
   \   00000244   B080C0E1           STRH     R8,[R0, #+0]
    687                  fname[0]=0;
   \   00000248   B081CDE1           STRH     R8,[SP, #+16]
    688                  folder[0]=0;
   \   0000024C   690E8DE2           ADD      R0,SP,#+1680
   \   00000250   B480C0E1           STRH     R8,[R0, #+4]
    689                  wstrcpy(fpath,GetDir(DIR_OTHER | MEM_EXTERNAL));
   \   00000254   0800A0E3           MOV      R0,#+8
   \   00000258   050100EF           SWI      +261
   \   0000025C   0010A0E1           MOV      R1,R0
   \   00000260   DD0F8DE2           ADD      R0,SP,#+884
   \   00000264   520100EF           SWI      +338
    690                  wstrcat(fpath,L"/Call Logger/");
   \   00000268   6C1F85E2           ADD      R1,R5,#+432
   \   0000026C   DD0F8DE2           ADD      R0,SP,#+884
   \   00000270   540100EF           SWI      +340
    691                  wchar_t buffer_ptr[400];
    692                  wchar_t * buffer=buffer_ptr;
   \   00000274   54808DE2           ADD      R8,SP,#+84
    693                  memset(buffer,0,200);
   \   00000278   C820A0E3           MOV      R2,#+200
   \   0000027C   0010A0E3           MOV      R1,#+0
   \   00000280   54008DE2           ADD      R0,SP,#+84
   \   00000284   120100EF           SWI      +274
    694                  if (!elem->Name[0])
   \   00000288   040097E5           LDR      R0,[R7, #+4]
   \   0000028C   B010D0E1           LDRH     R1,[R0, #+0]
   \   00000290   000051E3           CMP      R1,#+0
   \   00000294   0400001A           BNE      ??OnCallManager_11
    695                  {
    696                    snwprintf(elem->Name,8,L"NoName");
   \   00000298   9C10A0E3           MOV      R1,#+156
   \   0000029C   601E81E3           ORR      R1,R1,#0x600
   \   000002A0   052081E0           ADD      R2,R1,R5
   \   000002A4   0810A0E3           MOV      R1,#+8
   \   000002A8   150100EF           SWI      +277
    697                  }
    698                  if (elem->last_callstate==0)
   \                     ??OnCallManager_11:
   \   000002AC   0C2097E5           LDR      R2,[R7, #+12]
   \   000002B0   080097E5           LDR      R0,[R7, #+8]
   \   000002B4   AC10A0E3           MOV      R1,#+172
   \   000002B8   601E81E3           ORR      R1,R1,#0x600
   \   000002BC   000052E3           CMP      R2,#+0
   \   000002C0   1000001A           BNE      ??OnCallManager_12
    699                  {
    700                    if (elem->first_callstate==2)
   \   000002C4   020050E3           CMP      R0,#+2
   \   000002C8   0200001A           BNE      ??OnCallManager_13
    701                    {
    702                      //Исходящий вызов
    703                      wstrcat(fname,L"out.txt");
   \   000002CC   051081E0           ADD      R1,R1,R5
   \   000002D0   10008DE2           ADD      R0,SP,#+16
   \   000002D4   540100EF           SWI      +340
    704                    }
    705                    if (elem->first_callstate==4)
   \                     ??OnCallManager_13:
   \   000002D8   080097E5           LDR      R0,[R7, #+8]
   \   000002DC   040050E3           CMP      R0,#+4
   \   000002E0   0400001A           BNE      ??OnCallManager_14
    706                    {
    707                      //Пропущенный вызов
    708                      wstrcat(fname,L"missed.txt");
   \   000002E4   BC00A0E3           MOV      R0,#+188
   \   000002E8   600E80E3           ORR      R0,R0,#0x600
   \   000002EC   051080E0           ADD      R1,R0,R5
   \   000002F0   10008DE2           ADD      R0,SP,#+16
   \   000002F4   540100EF           SWI      +340
    709                    }
    710                    m=0;
   \                     ??OnCallManager_14:
   \   000002F8   0010A0E3           MOV      R1,#+0
   \   000002FC   04108DE5           STR      R1,[SP, #+4]
    711                    s=0;
   \   00000300   08108DE5           STR      R1,[SP, #+8]
   \   00000304   310000EA           B        ??OnCallManager_15
    712                  }
    713                  else
    714                  {
    715                    if (elem->first_callstate==2)
   \                     ??OnCallManager_12:
   \   00000308   020050E3           CMP      R0,#+2
   \   0000030C   0200001A           BNE      ??OnCallManager_16
    716                    {
    717                      //Исходящий вызов
    718                      wstrcat(fname,L"out.txt");
   \   00000310   051081E0           ADD      R1,R1,R5
   \   00000314   10008DE2           ADD      R0,SP,#+16
   \   00000318   540100EF           SWI      +340
    719                    }
    720                    if (elem->first_callstate==4)
   \                     ??OnCallManager_16:
   \   0000031C   080097E5           LDR      R0,[R7, #+8]
   \   00000320   040050E3           CMP      R0,#+4
   \   00000324   0400001A           BNE      ??OnCallManager_17
    721                    {
    722                      //Входящий вызов
    723                      wstrcat(fname,L"in.txt");
   \   00000328   D400A0E3           MOV      R0,#+212
   \   0000032C   600E80E3           ORR      R0,R0,#0x600
   \   00000330   051080E0           ADD      R1,R0,R5
   \   00000334   10008DE2           ADD      R0,SP,#+16
   \   00000338   540100EF           SWI      +340
    724                    }
    725                    //Если вызов начался в 23, а закончился в 00, меняем 00 на 24
    726                    if ((elem->begindatetime->time.hour==23)&&(enddatetime->time.hour==0)) enddatetime->time.hour=24;
   \                     ??OnCallManager_17:
   \   0000033C   140097E5           LDR      R0,[R7, #+20]
   \   00000340   0400D0E5           LDRB     R0,[R0, #+4]
   \   00000344   170050E3           CMP      R0,#+23
   \   00000348   0400D605           LDRBEQ   R0,[R6, #+4]
   \   0000034C   00005003           CMPEQ    R0,#+0
   \   00000350   1800A003           MOVEQ    R0,#+24
   \   00000354   0400C605           STRBEQ   R0,[R6, #+4]
    727                    //Получаем время разговора в секундах
    728                    sub=(enddatetime->time.hour-elem->begindatetime->time.hour)*3600+(enddatetime->time.min-elem->begindatetime->time.min)*60+enddatetime->time.sec-elem->begindatetime->time.sec;
   \   00000358   140097E5           LDR      R0,[R7, #+20]
   \   0000035C   0410D6E5           LDRB     R1,[R6, #+4]
   \   00000360   0420D0E5           LDRB     R2,[R0, #+4]
   \   00000364   0530D6E5           LDRB     R3,[R6, #+5]
   \   00000368   0590D0E5           LDRB     R9,[R0, #+5]
   \   0000036C   0600D0E5           LDRB     R0,[R0, #+6]
   \   00000370   021041E0           SUB      R1,R1,R2
   \   00000374   E12EA0E3           MOV      R2,#+3600
   \   00000378   093043E0           SUB      R3,R3,R9
   \   0000037C   3C90A0E3           MOV      R9,#+60
   \   00000380   990303E0           MUL      R3,R9,R3
   \   00000384   923121E0           MLA      R1,R2,R1,R3
   \   00000388   0620D6E5           LDRB     R2,[R6, #+6]
   \   0000038C   011082E0           ADD      R1,R2,R1
    729                    //Выделяем минуты и секунды
    730                    m=sub/60;
   \   00000390   98259FE5           LDR      R2,??OnCallManager_3+0x8  ;; 0xffffffff88888889
   \   00000394   000041E0           SUB      R0,R1,R0
   \   00000398   9230C9E0           SMULL    R3,R9,R2,R0
   \   0000039C   009089E0           ADD      R9,R9,R0
   \   000003A0   C992A0E1           ASR      R9,R9,#+5
   \   000003A4   A02F89E0           ADD      R2,R9,R0, LSR #+31
   \   000003A8   04208DE5           STR      R2,[SP, #+4]
    731                    s=sub%60;
   \   000003AC   7C259FE5           LDR      R2,??OnCallManager_3+0x8  ;; 0xffffffff88888889
   \   000003B0   9032C9E0           SMULL    R3,R9,R0,R2
   \   000003B4   3C30A0E3           MOV      R3,#+60
   \   000003B8   009089E0           ADD      R9,R9,R0
   \   000003BC   C992A0E1           ASR      R9,R9,#+5
   \   000003C0   A09F89E0           ADD      R9,R9,R0, LSR #+31
   \   000003C4   930909E0           MUL      R9,R3,R9
   \   000003C8   090040E0           SUB      R0,R0,R9
   \   000003CC   08008DE5           STR      R0,[SP, #+8]
    732                  }
    733                  //Получаем название папки
    734                  snwprintf(folder,20,L"%04d-%02d-%02d",elem->startdatetime->date.year,elem->startdatetime->date.mon,elem->startdatetime->date.day);
   \                     ??OnCallManager_15:
   \   000003D0   100097E5           LDR      R0,[R7, #+16]
   \   000003D4   732F85E2           ADD      R2,R5,#+460
   \   000003D8   0310D0E5           LDRB     R1,[R0, #+3]
   \   000003DC   02002DE9           PUSH     {R1}
   \   000003E0   0210D0E5           LDRB     R1,[R0, #+2]
   \   000003E4   02002DE9           PUSH     {R1}
   \   000003E8   B030D0E1           LDRH     R3,[R0, #+0]
   \   000003EC   A70F8DE2           ADD      R0,SP,#+668
   \   000003F0   400E80E2           ADD      R0,R0,#+1024
   \   000003F4   1410A0E3           MOV      R1,#+20
   \   000003F8   150100EF           SWI      +277
    735                  //Получаем полный путь
    736                  wstrcat(fpath,folder);
   \   000003FC   A71F8DE2           ADD      R1,SP,#+668
   \   00000400   401E81E2           ADD      R1,R1,#+1024
   \   00000404   DF0F8DE2           ADD      R0,SP,#+892
   \   00000408   540100EF           SWI      +340
    737                  //Проверяем существование файла, если нету то добавляем в буфер хидер юникодного файла
    738                  if (fstat(fpath,fname,0)<0)
   \   0000040C   0020A0E3           MOV      R2,#+0
   \   00000410   18108DE2           ADD      R1,SP,#+24
   \   00000414   DF0F8DE2           ADD      R0,SP,#+892
   \   00000418   1C0100EF           SWI      +284
   \   0000041C   000050E3           CMP      R0,#+0
   \   00000420   08D08DE2           ADD      SP,SP,#+8
   \   00000424   0300005A           BPL      ??OnCallManager_18
    739                  {
    740                    buffer[0]=0xFEFF;
   \   00000428   FF10A0E3           MOV      R1,#+255
   \   0000042C   FE1C81E3           ORR      R1,R1,#0xFE00
   \   00000430   B415CDE1           STRH     R1,[SP, #+84]
    741                    buffer=buffer+1;
   \   00000434   56808DE2           ADD      R8,SP,#+86
    742                  }
    743                  wstrcpy(fpath_ini,GetDir(DIR_INI));
   \                     ??OnCallManager_18:
   \   00000438   1600A0E3           MOV      R0,#+22
   \   0000043C   050100EF           SWI      +261
   \   00000440   0010A0E1           MOV      R1,R0
   \   00000444   410F8DE2           ADD      R0,SP,#+260
   \   00000448   400E80E2           ADD      R0,R0,#+1024
   \   0000044C   520100EF           SWI      +338
    744                  wstrcat(fpath_ini,L"/Call Logger");
   \   00000450   E400A0E3           MOV      R0,#+228
   \   00000454   600E80E3           ORR      R0,R0,#0x600
   \   00000458   051080E0           ADD      R1,R0,R5
   \   0000045C   410F8DE2           ADD      R0,SP,#+260
   \   00000460   400E80E2           ADD      R0,R0,#+1024
   \   00000464   540100EF           SWI      +340
    745                  FSTAT _fstat;
    746                  int reg_flag=0;
   \   00000468   0010A0E3           MOV      R1,#+0
   \   0000046C   0C108DE5           STR      R1,[SP, #+12]
   \   00000470   38208DE2           ADD      R2,SP,#+56
   \   00000474   6C1085E2           ADD      R1,R5,#+108
   \   00000478   410F8DE2           ADD      R0,SP,#+260
   \   0000047C   400E80E2           ADD      R0,R0,#+1024
    747                  if (fstat(fpath_ini,L"regions.ini",&_fstat)>=0)
   \   00000480   1C0100EF           SWI      +284
   \   00000484   000050E3           CMP      R0,#+0
   \   00000488   9000004A           BMI      ??OnCallManager_19
    748                  {
    749                    char * buffer_ini=new char[_fstat.fsize];
   \   0000048C   40009DE5           LDR      R0,[SP, #+64]
   \   00000490   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000494   0090A0E1           MOV      R9,R0
    750                    f=_fopen(fpath_ini,L"regions.ini",0x1,0x180,0);
   \   00000498   0000A0E3           MOV      R0,#+0
   \   0000049C   01002DE9           PUSH     {R0}
   \   000004A0   603FA0E3           MOV      R3,#+384
   \   000004A4   0120A0E3           MOV      R2,#+1
   \   000004A8   6C1085E2           ADD      R1,R5,#+108
   \   000004AC   420F8DE2           ADD      R0,SP,#+264
   \   000004B0   400E80E2           ADD      R0,R0,#+1024
   \   000004B4   160100EF           SWI      +278
    751                    fread(f,buffer_ini,_fstat.fsize);
   \   000004B8   44209DE5           LDR      R2,[SP, #+68]
   \   000004BC   00A0A0E1           MOV      R10,R0
   \   000004C0   0910A0E1           MOV      R1,R9
   \   000004C4   180100EF           SWI      +280
    752                    fclose(f);
   \   000004C8   0A00A0E1           MOV      R0,R10
   \   000004CC   170100EF           SWI      +279
    753                    char * PNUM_str=new char[wstrlen(elem->PNUM)+1];
   \   000004D0   000097E5           LDR      R0,[R7, #+0]
   \   000004D4   570100EF           SWI      +343
   \   000004D8   010080E2           ADD      R0,R0,#+1
   \   000004DC   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   000004E0   00A0A0E1           MOV      R10,R0
    754                    int ptr=0;
    755                    int count=wstrlen(elem->PNUM)/2;
   \   000004E4   000097E5           LDR      R0,[R7, #+0]
   \   000004E8   570100EF           SWI      +343
    756                    wstr2strn(PNUM_str,elem->PNUM,count);
   \   000004EC   001097E5           LDR      R1,[R7, #+0]
   \   000004F0   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   000004F4   C0B0A0E1           ASR      R11,R0,#+1
   \   000004F8   0B20A0E1           MOV      R2,R11
   \   000004FC   0A00A0E1           MOV      R0,R10
   \   00000500   5B0100EF           SWI      +347
    757                    if (strstr(buffer_ini,PNUM_str))
   \   00000504   0A10A0E1           MOV      R1,R10
   \   00000508   0900A0E1           MOV      R0,R9
   \   0000050C   980200EF           SWI      +664
   \   00000510   000050E3           CMP      R0,#+0
   \   00000514   04D08DE2           ADD      SP,SP,#+4
   \   00000518   0F00000A           BEQ      ??OnCallManager_20
    758                    {
    759                      ptr=1;
    760                      while (count<=wstrlen(elem->PNUM))
   \                     ??OnCallManager_21:
   \   0000051C   000097E5           LDR      R0,[R7, #+0]
   \   00000520   570100EF           SWI      +343
   \   00000524   0B0050E1           CMP      R0,R11
   \   00000528   090000BA           BLT      ??OnCallManager_22
    761                      {
    762                        count=count+1;
    763                        wstr2strn(PNUM_str,elem->PNUM,count);
   \   0000052C   001097E5           LDR      R1,[R7, #+0]
   \   00000530   01B08BE2           ADD      R11,R11,#+1
   \   00000534   0B20A0E1           MOV      R2,R11
   \   00000538   0A00A0E1           MOV      R0,R10
   \   0000053C   5B0100EF           SWI      +347
    764                        if (strstr(buffer_ini,PNUM_str)==0) break;
   \   00000540   0A10A0E1           MOV      R1,R10
   \   00000544   0900A0E1           MOV      R0,R9
   \   00000548   980200EF           SWI      +664
   \   0000054C   000050E3           CMP      R0,#+0
   \   00000550   F1FFFF1A           BNE      ??OnCallManager_21
    765                      }
    766                      count=count-1;
   \                     ??OnCallManager_22:
   \   00000554   01B04BE2           SUB      R11,R11,#+1
   \   00000558   0B0000EA           B        ??OnCallManager_23
    767                    }
    768                    else
    769                    {
    770                      while (count>0)
   \                     ??OnCallManager_20:
   \   0000055C   01005BE3           CMP      R11,#+1
   \   00000560   530000BA           BLT      ??OnCallManager_24
    771                      {
    772                        count=count-1;
    773                        wstr2strn(PNUM_str,elem->PNUM,count);
   \   00000564   001097E5           LDR      R1,[R7, #+0]
   \   00000568   01B04BE2           SUB      R11,R11,#+1
   \   0000056C   0B20A0E1           MOV      R2,R11
   \   00000570   0A00A0E1           MOV      R0,R10
   \   00000574   5B0100EF           SWI      +347
    774                        if (strstr(buffer_ini,PNUM_str))
   \   00000578   0A10A0E1           MOV      R1,R10
   \   0000057C   0900A0E1           MOV      R0,R9
   \   00000580   980200EF           SWI      +664
   \   00000584   000050E3           CMP      R0,#+0
   \   00000588   F3FFFF0A           BEQ      ??OnCallManager_20
    775                        {
    776                          ptr=1;
    777                          break;
    778                        }
    779                      }
    780                    }
    781                    if (ptr)
    782                    {
    783                      char * region;
    784                      wstr2strn(PNUM_str,elem->PNUM,count);
   \                     ??OnCallManager_23:
   \   0000058C   001097E5           LDR      R1,[R7, #+0]
   \   00000590   0B20A0E1           MOV      R2,R11
   \   00000594   0A00A0E1           MOV      R0,R10
   \   00000598   5B0100EF           SWI      +347
    785                      if (region=manifest_GetParam(buffer_ini,PNUM_str,0))
   \   0000059C   0020A0E3           MOV      R2,#+0
   \   000005A0   0A10A0E1           MOV      R1,R10
   \   000005A4   0900A0E1           MOV      R0,R9
   \   000005A8   750100EF           SWI      +373
   \   000005AC   00008DE5           STR      R0,[SP, #+0]
   \   000005B0   000050E3           CMP      R0,#+0
   \   000005B4   3E00000A           BEQ      ??OnCallManager_24
    786                      {
    787                        wchar_t * s2ws = new wchar_t[strlen(region)+1];
   \   000005B8   5A0100EF           SWI      +346
   \   000005BC   010080E2           ADD      R0,R0,#+1
   \   000005C0   8000A0E1           LSL      R0,R0,#+1
   \   000005C4   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   000005C8   00B0A0E1           MOV      R11,R0
    788                        win12512unicode(s2ws,region,strlen(region));
   \   000005CC   00009DE5           LDR      R0,[SP, #+0]
   \   000005D0   5A0100EF           SWI      +346
   \   000005D4   00109DE5           LDR      R1,[SP, #+0]
   \   000005D8   0020A0E1           MOV      R2,R0
   \   000005DC   0B00A0E1           MOV      R0,R11
   \   000005E0   ........           BL       ??win12512unicode
    789                        if ((elem->last_callstate==0)&&(elem->first_callstate==4))
   \   000005E4   0C0097E5           LDR      R0,[R7, #+12]
   \   000005E8   000050E3           CMP      R0,#+0
   \   000005EC   08009705           LDREQ    R0,[R7, #+8]
   \   000005F0   04005003           CMPEQ    R0,#+4
   \   000005F4   1200001A           BNE      ??OnCallManager_25
    790                        {
    791                          snwprintf(buffer,390,L"%ls, %ls (%ls) - %02d:%02d:%02d\r\n",elem->Name,s2ws,elem->PNUM,elem->startdatetime->time.hour,elem->startdatetime->time.min,elem->startdatetime->time.sec);
   \   000005F8   100097E5           LDR      R0,[R7, #+16]
   \   000005FC   842085E2           ADD      R2,R5,#+132
   \   00000600   0610D0E5           LDRB     R1,[R0, #+6]
   \   00000604   02002DE9           PUSH     {R1}
   \   00000608   0510D0E5           LDRB     R1,[R0, #+5]
   \   0000060C   02002DE9           PUSH     {R1}
   \   00000610   0400D0E5           LDRB     R0,[R0, #+4]
   \   00000614   8610A0E3           MOV      R1,#+134
   \   00000618   401F81E3           ORR      R1,R1,#0x100
   \   0000061C   01002DE9           PUSH     {R0}
   \   00000620   000097E5           LDR      R0,[R7, #+0]
   \   00000624   01002DE9           PUSH     {R0}
   \   00000628   0B00A0E1           MOV      R0,R11
   \   0000062C   01002DE9           PUSH     {R0}
   \   00000630   043097E5           LDR      R3,[R7, #+4]
   \   00000634   0800A0E1           MOV      R0,R8
   \   00000638   150100EF           SWI      +277
   \   0000063C   14D08DE2           ADD      SP,SP,#+20
   \   00000640   150000EA           B        ??OnCallManager_26
    792                        }
    793                        else
    794                        {
    795                          snwprintf(buffer,390,L"%ls, %ls (%ls) - %02d:%02d:%02d, %02d:%02d\r\n",elem->Name,s2ws,elem->PNUM,elem->startdatetime->time.hour,elem->startdatetime->time.min,elem->startdatetime->time.sec,m,s);
   \                     ??OnCallManager_25:
   \   00000644   100097E5           LDR      R0,[R7, #+16]
   \   00000648   08109DE5           LDR      R1,[SP, #+8]
   \   0000064C   C82085E2           ADD      R2,R5,#+200
   \   00000650   02002DE9           PUSH     {R1}
   \   00000654   08109DE5           LDR      R1,[SP, #+8]
   \   00000658   02002DE9           PUSH     {R1}
   \   0000065C   0610D0E5           LDRB     R1,[R0, #+6]
   \   00000660   02002DE9           PUSH     {R1}
   \   00000664   0510D0E5           LDRB     R1,[R0, #+5]
   \   00000668   02002DE9           PUSH     {R1}
   \   0000066C   0400D0E5           LDRB     R0,[R0, #+4]
   \   00000670   8610A0E3           MOV      R1,#+134
   \   00000674   401F81E3           ORR      R1,R1,#0x100
   \   00000678   01002DE9           PUSH     {R0}
   \   0000067C   000097E5           LDR      R0,[R7, #+0]
   \   00000680   01002DE9           PUSH     {R0}
   \   00000684   0B00A0E1           MOV      R0,R11
   \   00000688   01002DE9           PUSH     {R0}
   \   0000068C   043097E5           LDR      R3,[R7, #+4]
   \   00000690   0800A0E1           MOV      R0,R8
   \   00000694   150100EF           SWI      +277
   \   00000698   1CD08DE2           ADD      SP,SP,#+28
    796                        }
    797                        delete(s2ws);
   \                     ??OnCallManager_26:
   \   0000069C   0B00A0E1           MOV      R0,R11
   \   000006A0   ........           _BLF     `??operator delete`,`??operator delete??rA`
    798                        mfree(region);
   \   000006A4   00009DE5           LDR      R0,[SP, #+0]
   \   000006A8   040100EF           SWI      +260
    799                        reg_flag=1;
   \   000006AC   0110A0E3           MOV      R1,#+1
   \   000006B0   0C108DE5           STR      R1,[SP, #+12]
    800                      }
    801                    }
    802                    delete(buffer_ini);
   \                     ??OnCallManager_24:
   \   000006B4   0900A0E1           MOV      R0,R9
   \   000006B8   ........           _BLF     `??operator delete`,`??operator delete??rA`
    803                    delete(PNUM_str);
   \   000006BC   0A00A0E1           MOV      R0,R10
   \   000006C0   ........           _BLF     `??operator delete`,`??operator delete??rA`
    804                  }
    805                  if (!reg_flag)
   \   000006C4   0C009DE5           LDR      R0,[SP, #+12]
   \   000006C8   000050E3           CMP      R0,#+0
   \   000006CC   2600001A           BNE      ??OnCallManager_27
    806                  {
    807                    if ((elem->last_callstate==0)&&(elem->first_callstate==4))
   \                     ??OnCallManager_19:
   \   000006D0   0C2097E5           LDR      R2,[R7, #+12]
   \   000006D4   043097E5           LDR      R3,[R7, #+4]
   \   000006D8   101097E5           LDR      R1,[R7, #+16]
   \   000006DC   000097E5           LDR      R0,[R7, #+0]
   \   000006E0   000052E3           CMP      R2,#+0
   \   000006E4   08209705           LDREQ    R2,[R7, #+8]
   \   000006E8   04005203           CMPEQ    R2,#+4
   \   000006EC   0D00001A           BNE      ??OnCallManager_28
    808                    {
    809                      
    810                      //Печатаем "отчет о звонке" в буфер без региона
    811                      snwprintf(buffer,390,L"%ls (%ls) - %02d:%02d:%02d\r\n",elem->Name,elem->PNUM,elem->startdatetime->time.hour,elem->startdatetime->time.min,elem->startdatetime->time.sec);
   \   000006F0   0620D1E5           LDRB     R2,[R1, #+6]
   \   000006F4   04002DE9           PUSH     {R2}
   \   000006F8   0520D1E5           LDRB     R2,[R1, #+5]
   \   000006FC   04002DE9           PUSH     {R2}
   \   00000700   0410D1E5           LDRB     R1,[R1, #+4]
   \   00000704   492F85E2           ADD      R2,R5,#+292
   \   00000708   02002DE9           PUSH     {R1}
   \   0000070C   01002DE9           PUSH     {R0}
   \   00000710   8610A0E3           MOV      R1,#+134
   \   00000714   401F81E3           ORR      R1,R1,#0x100
   \   00000718   0800A0E1           MOV      R0,R8
   \   0000071C   150100EF           SWI      +277
   \   00000720   10D08DE2           ADD      SP,SP,#+16
   \   00000724   100000EA           B        ??OnCallManager_27
    812                    }
    813                    else
    814                    {
    815                      snwprintf(buffer,390,L"%ls (%ls) - %02d:%02d:%02d, %02d:%02d\r\n",elem->Name,elem->PNUM,elem->startdatetime->time.hour,elem->startdatetime->time.min,elem->startdatetime->time.sec,m,s);
   \                     ??OnCallManager_28:
   \   00000728   08209DE5           LDR      R2,[SP, #+8]
   \   0000072C   04002DE9           PUSH     {R2}
   \   00000730   08209DE5           LDR      R2,[SP, #+8]
   \   00000734   04002DE9           PUSH     {R2}
   \   00000738   0620D1E5           LDRB     R2,[R1, #+6]
   \   0000073C   04002DE9           PUSH     {R2}
   \   00000740   0520D1E5           LDRB     R2,[R1, #+5]
   \   00000744   04002DE9           PUSH     {R2}
   \   00000748   0410D1E5           LDRB     R1,[R1, #+4]
   \   0000074C   582F85E2           ADD      R2,R5,#+352
   \   00000750   02002DE9           PUSH     {R1}
   \   00000754   01002DE9           PUSH     {R0}
   \   00000758   8610A0E3           MOV      R1,#+134
   \   0000075C   401F81E3           ORR      R1,R1,#0x100
   \   00000760   0800A0E1           MOV      R0,R8
   \   00000764   150100EF           SWI      +277
   \   00000768   18D08DE2           ADD      SP,SP,#+24
    816                    }
    817                  }
    818                  int str_len=(wstrlen(buffer))*2;
   \                     ??OnCallManager_27:
   \   0000076C   0800A0E1           MOV      R0,R8
   \   00000770   570100EF           SWI      +343
   \   00000774   8050A0E1           LSL      R5,R0,#+1
    819                  if (fstat(fpath,fname,0)<0)
   \   00000778   0020A0E3           MOV      R2,#+0
   \   0000077C   10108DE2           ADD      R1,SP,#+16
   \   00000780   DD0F8DE2           ADD      R0,SP,#+884
   \   00000784   1C0100EF           SWI      +284
   \   00000788   000050E3           CMP      R0,#+0
    820                  {
    821                    buffer=buffer-1;
   \   0000078C   02804842           SUBMI    R8,R8,#+2
    822                  }
    823                  if ((fstat(fpath,fname,&_fstat)<0)||(!sort_order))
   \   00000790   38208DE2           ADD      R2,SP,#+56
   \   00000794   10108DE2           ADD      R1,SP,#+16
   \   00000798   DD0F8DE2           ADD      R0,SP,#+884
   \   0000079C   1C0100EF           SWI      +284
   \   000007A0   000050E3           CMP      R0,#+0
   \   000007A4   0300004A           BMI      ??OnCallManager_29
   \   000007A8   ........           LDR      R0,??DataTable36  ;; sort_order
   \   000007AC   000090E5           LDR      R0,[R0, #+0]
   \   000007B0   000050E3           CMP      R0,#+0
   \   000007B4   0B00001A           BNE      ??OnCallManager_30
    824                  {
    825                    f=_fopen(fpath,fname,0x108,0x180,0);
   \                     ??OnCallManager_29:
   \   000007B8   0000A0E3           MOV      R0,#+0
   \   000007BC   01002DE9           PUSH     {R0}
   \   000007C0   603FA0E3           MOV      R3,#+384
   \   000007C4   422FA0E3           MOV      R2,#+264
   \   000007C8   14108DE2           ADD      R1,SP,#+20
   \   000007CC   DE0F8DE2           ADD      R0,SP,#+888
   \   000007D0   160100EF           SWI      +278
   \   000007D4   00A0A0E1           MOV      R10,R0
    826                    fwrite(f,buffer,str_len);
   \   000007D8   0520A0E1           MOV      R2,R5
   \   000007DC   0810A0E1           MOV      R1,R8
   \   000007E0   190100EF           SWI      +281
   \   000007E4   270000EA           B        ??OnCallManager_31
    827                  }
    828                  else
    829                  {
    830                    char * new_buff=new char[_fstat.fsize+str_len];
   \                     ??OnCallManager_30:
   \   000007E8   40009DE5           LDR      R0,[SP, #+64]
   \   000007EC   000085E0           ADD      R0,R5,R0
   \   000007F0   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   000007F4   0090A0E1           MOV      R9,R0
    831                    f=_fopen(fpath,fname,0x104,0x180,0);
   \   000007F8   0000A0E3           MOV      R0,#+0
   \   000007FC   01002DE9           PUSH     {R0}
   \   00000800   603FA0E3           MOV      R3,#+384
   \   00000804   412FA0E3           MOV      R2,#+260
   \   00000808   14108DE2           ADD      R1,SP,#+20
   \   0000080C   DE0F8DE2           ADD      R0,SP,#+888
   \   00000810   160100EF           SWI      +278
   \   00000814   00A0A0E1           MOV      R10,R0
    832                    fread(f,new_buff,2);
   \   00000818   0220A0E3           MOV      R2,#+2
   \   0000081C   0910A0E1           MOV      R1,R9
   \   00000820   180100EF           SWI      +280
    833                    lseek(f,2,0);
   \   00000824   0020A0E3           MOV      R2,#+0
   \   00000828   0210A0E3           MOV      R1,#+2
   \   0000082C   0A00A0E1           MOV      R0,R10
   \   00000830   760100EF           SWI      +374
    834                    memcpy(new_buff+2,buffer,str_len);
   \   00000834   0520A0E1           MOV      R2,R5
   \   00000838   0810A0E1           MOV      R1,R8
   \   0000083C   020089E2           ADD      R0,R9,#+2
   \   00000840   130100EF           SWI      +275
    835                    fread(f,new_buff+2+str_len,_fstat.fsize-2);
   \   00000844   44009DE5           LDR      R0,[SP, #+68]
   \   00000848   022040E2           SUB      R2,R0,#+2
   \   0000084C   090085E0           ADD      R0,R5,R9
   \   00000850   021080E2           ADD      R1,R0,#+2
   \   00000854   0A00A0E1           MOV      R0,R10
   \   00000858   180100EF           SWI      +280
    836                    lseek(f,0,0);
   \   0000085C   0020A0E3           MOV      R2,#+0
   \   00000860   0010A0E3           MOV      R1,#+0
   \   00000864   0A00A0E1           MOV      R0,R10
   \   00000868   760100EF           SWI      +374
    837                    fwrite(f,new_buff,_fstat.fsize+str_len);
   \   0000086C   44009DE5           LDR      R0,[SP, #+68]
   \   00000870   0910A0E1           MOV      R1,R9
   \   00000874   002085E0           ADD      R2,R5,R0
   \   00000878   0A00A0E1           MOV      R0,R10
   \   0000087C   190100EF           SWI      +281
    838                    delete(new_buff);
   \   00000880   0900A0E1           MOV      R0,R9
   \   00000884   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??OnCallManager_31:
   \   00000888   04D08DE2           ADD      SP,SP,#+4
    839                  }
    840                  fclose(f);
   \   0000088C   0A00A0E1           MOV      R0,R10
   \   00000890   170100EF           SWI      +279
    841                  delete(enddatetime);
   \   00000894   0600A0E1           MOV      R0,R6
   \   00000898   ........           _BLF     `??operator delete`,`??operator delete??rA`
    842                  myList_elem_Free(elem);
   \   0000089C   0700A0E1           MOV      R0,R7
   \   000008A0   ........           BL       ??myList_elem_Free
    843                }
    844                if (((CALLMANAGER_EVENT_DATA*)CallManStruct)->CallState==1)
   \                     ??OnCallManager_10:
   \   000008A4   BC069DE5           LDR      R0,[SP, #+1724]
   \   000008A8   0200D0E5           LDRB     R0,[R0, #+2]
   \   000008AC   010050E3           CMP      R0,#+1
   \   000008B0   1500001A           BNE      ??OnCallManager_32
    845                {
    846                  myList_elem * elem=(myList_elem*)ListElement_GetByIndex(myList,ListElement_Find(myList,temp_elem,myList_Find));
   \   000008B4   6C009FE5           LDR      R0,??OnCallManager_3  ;; CLBook + 4
   \   000008B8   6C209FE5           LDR      R2,??OnCallManager_3+0x4  ;; ??myList_Find
   \   000008BC   000090E5           LDR      R0,[R0, #+0]
   \   000008C0   0410A0E1           MOV      R1,R4
   \   000008C4   AC0100EF           SWI      +428
   \   000008C8   0010A0E1           MOV      R1,R0
   \   000008CC   54009FE5           LDR      R0,??OnCallManager_3  ;; CLBook + 4
   \   000008D0   000090E5           LDR      R0,[R0, #+0]
   \   000008D4   AD0100EF           SWI      +429
   \   000008D8   0050A0E1           MOV      R5,R0
    847                  if (elem->last_callstate!=1)
   \   000008DC   0C0095E5           LDR      R0,[R5, #+12]
   \   000008E0   010050E3           CMP      R0,#+1
   \   000008E4   0800000A           BEQ      ??OnCallManager_32
    848                  {
    849                    elem->last_callstate=1;
   \   000008E8   0100A0E3           MOV      R0,#+1
   \   000008EC   0C0085E5           STR      R0,[R5, #+12]
    850                    elem->begindatetime=new DATETIME;
   \   000008F0   0800A0E3           MOV      R0,#+8
   \   000008F4   ........           _BLF     `??operator new`,`??operator new??rA`
   \   000008F8   140085E5           STR      R0,[R5, #+20]
    851                    REQUEST_DATEANDTIME_GET(SYNC,elem->begindatetime);
   \   000008FC   0010A0E1           MOV      R1,R0
   \   00000900   ........           LDR      R0,??DataTable41  ;; SYNC
   \   00000904   000090E5           LDR      R0,[R0, #+0]
   \   00000908   6E0100EF           SWI      +366
    852                  }
    853                }
    854                //Убиваем временный элемент если не засунули в лист
    855                delete(temp_elem->PNUM);
   \                     ??OnCallManager_32:
   \   0000090C   000094E5           LDR      R0,[R4, #+0]
   \   00000910   ........           _BLF     `??operator delete`,`??operator delete??rA`
    856                delete(temp_elem);
   \   00000914   0400A0E1           MOV      R0,R4
   \   00000918   ........           _BLF     `??operator delete`,`??operator delete??rA`
    857              }
    858            }
    859            return(1);
   \                     ??OnCallManager_1:
   \   0000091C   0100A0E3           MOV      R0,#+1
   \   00000920   6CDE8DE2           ADD      SP,SP,#+1728
   \   00000924   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??OnCallManager_3:
   \   00000928   ........           DC32     CLBook + 4
   \   0000092C   ........           DC32     ??myList_Find
   \   00000930   89888888           DC32     0xffffffff88888889
    860          }
    861          
    862          

   \                                 In segment CODE, align 4, keep-with-next
    863          static int ReconfigElf(void *mess ,BOOK *book)
    864          {
   \                     ??ReconfigElf:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    865            RECONFIG_EVENT_DATA *reconf=(RECONFIG_EVENT_DATA *)mess;
    866            int result=0;
    867            if (wstrcmpi(reconf->path,successed_config_path)==0 && wstrcmpi(reconf->name,successed_config_name)==0)
   \   00000008   34009FE5           LDR      R0,??ReconfigElf_1  ;; successed_config_path
   \   0000000C   001090E5           LDR      R1,[R0, #+0]
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   9F0200EF           SWI      +671
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0600001A           BNE      ??ReconfigElf_2
   \   00000020   20009FE5           LDR      R0,??ReconfigElf_1+0x4  ;; successed_config_name
   \   00000024   001090E5           LDR      R1,[R0, #+0]
   \   00000028   800084E2           ADD      R0,R4,#+128
   \   0000002C   9F0200EF           SWI      +671
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0000001A           BNE      ??ReconfigElf_2
    868            {
    869              get_bcfg_key();
   \   00000038   ........           BL       ??get_bcfg_key
    870            }
    871            return(result);
   \                     ??ReconfigElf_2:
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??ReconfigElf_1:
   \   00000044   ........           DC32     successed_config_path
   \   00000048   ........           DC32     successed_config_name
    872          }
    873          

   \                                 In segment DYN_PAGE, align 4, align-sorted
    874          const PAGE_MSG CL_PageEvents[]@ "DYN_PAGE" ={
   \                     CL_PageEvents:
   \   00000000   E5030000....       DC32 997, ??TerminateElf, 998, ??ShowAuthorInfo, 442, ??OnCallManager
   \              ....E6030000
   \              ........BA01
   \              0000........
   \   00000018   D0010000....       DC32 464, ??onSessionEstablished, 465, ??onSessionTerminated, 150
   \              ....D1010000
   \              ........9600
   \              0000        
   \   0000002C   ........E403       DC32 ??onClockChange, 996, ??ReconfigElf, 64, 0H
   \              0000........
   \              400000000000
   \              0000        

   \                                 In segment DATA_I, align 4, align-sorted
   \                     CLBook:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for CLBook>`
   \                     myList:
   \   00000004                      DS8 4
   \   00000008                      REQUIRE `?<Initializer for myList>`
   \                     myList_gprs:
   \   00000008                      DS8 4
   \   0000000C                      REQUIRE `?<Initializer for myList_gprs>`
   \                     cur_date:
   \   0000000C                      DS8 4
   \   00000010                      REQUIRE `?<Initializer for cur_date>`
   \                     Money:
   \   00000010                      DS8 4
   \   00000014                      REQUIRE `?<Initializer for Money>`
    875            ELF_TERMINATE_EVENT , TerminateElf,
    876            ELF_SHOW_INFO_EVENT  , ShowAuthorInfo,
    877            ON_CALLMANAGER_EVENT_TAG, OnCallManager,
    878            UI_CONNECTIONMANAGER_SESSION_ESTABLISHED_EVENT_TAG, onSessionEstablished,
    879            UI_CONNECTIONMANAGER_SESSION_TERMINATED_EVENT_TAG, onSessionTerminated,
    880            CLOCK_DATEANDTIME_IND_EVENT_TAG,onClockChange,
    881            ELF_RECONFIG_EVENT,ReconfigElf,
    882          //  0xD6F,BlackList,
    883            NIL_EVENT_TAG,0
    884          };
    885          
    886          PAGE_DESC base_page ={"CL_BasePage",0,CL_PageEvents};
   \                     base_page:
   \   00000014                      DS8 12
   \   00000020                      REQUIRE `?<Initializer for base_page>`
    887          
    888          

   \                                 In segment CODE, align 4, keep-with-next
    889          void elf_exit(void)
    890          
    891          {
   \                     ??elf_exit:
   \   00000000   00402DE9           PUSH     {LR}
    892            kill_data(&ELF_BEGIN, (void(*)(void*))mfree_adr());
   \   00000004   048100EF           SWI      +33028
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??elf_exit_1  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??elf_exit_1:
   \   00000018   ........           DC32     ELF_BEGIN
    893          }
    894          
    895          

   \                                 In segment CODE, align 4, keep-with-next
    896          void onCloseCLBook(BOOK * CLBook)
    897          {
    898            List_FreeElements(myList,myList_elem_Filter,myList_elem_Free);
   \                     ??onCloseCLBook:
   \   00000000   58209FE5           LDR      R2,??onCloseCLBook_1  ;; ??myList_elem_Free
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   ........           LDR      R4,??DataTable38  ;; CLBook
   \   0000000C   50509FE5           LDR      R5,??onCloseCLBook_1+0x4  ;; ??myList_elem_Filter
   \   00000010   040094E5           LDR      R0,[R4, #+4]
   \   00000014   0510A0E1           MOV      R1,R5
   \   00000018   970200EF           SWI      +663
    899            List_Free(myList);
   \   0000001C   040094E5           LDR      R0,[R4, #+4]
   \   00000020   6A0100EF           SWI      +362
    900            List_FreeElements(myList_gprs,myList_elem_Filter,myList_gprs_elem_Free);
   \   00000024   3C209FE5           LDR      R2,??onCloseCLBook_1+0x8  ;; ??myList_gprs_elem_Free
   \   00000028   080094E5           LDR      R0,[R4, #+8]
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   970200EF           SWI      +663
    901            List_Free(myList_gprs);
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   6A0100EF           SWI      +362
    902            if (Money) delete(Money);
   \   0000003C   100094E5           LDR      R0,[R4, #+16]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0000000A           BEQ      ??onCloseCLBook_2
   \   00000048   ........           _BLF     `??operator delete`,`??operator delete??rA`
    903            delete(cur_date);
   \                     ??onCloseCLBook_2:
   \   0000004C   0C0094E5           LDR      R0,[R4, #+12]
   \   00000050   ........           _BLF     `??operator delete`,`??operator delete??rA`
    904            SUBPROC(elf_exit);
   \   00000054   ........           LDR      R0,??DataTable43  ;; ??elf_exit
   \   00000058   080100EF           SWI      +264
    905          }
   \   0000005C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??onCloseCLBook_1:
   \   00000060   ........           DC32     ??myList_elem_Free
   \   00000064   ........           DC32     ??myList_elem_Filter
   \   00000068   ........           DC32     ??myList_gprs_elem_Free
    906          

   \                                 In segment CODE, align 4, keep-with-next
    907          BOOK * CreateCLBook()
    908          {
   \                     ??CreateCLBook:
   \   00000000   10402DE9           PUSH     {R4,LR}
    909            CLBook=new(BOOK);
   \   00000004   64409FE5           LDR      R4,??CreateCLBook_1  ;; CLBook
   \   00000008   1800A0E3           MOV      R0,#+24
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
    910            CreateBook(CLBook,onCloseCLBook,&base_page,"Call Logger",-1,0);
   \   00000010   ........           LDR      R3,??DataTable42  ;; `?<Constant "Call Logger">`
   \   00000014   58109FE5           LDR      R1,??CreateCLBook_1+0x4  ;; ??onCloseCLBook
   \   00000018   000084E5           STR      R0,[R4, #+0]
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   01002DE9           PUSH     {R0}
   \   00000024   142084E2           ADD      R2,R4,#+20
   \   00000028   0000E0E1           MVN      R0,R0
   \   0000002C   01002DE9           PUSH     {R0}
   \   00000030   000094E5           LDR      R0,[R4, #+0]
   \   00000034   2B0100EF           SWI      +299
    911            myList=List_New();
   \   00000038   690100EF           SWI      +361
   \   0000003C   040084E5           STR      R0,[R4, #+4]
    912            myList_gprs=List_New();
   \   00000040   690100EF           SWI      +361
   \   00000044   080084E5           STR      R0,[R4, #+8]
    913            cur_date=new(DATETIME);
   \   00000048   0800A0E3           MOV      R0,#+8
   \   0000004C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000050   0C0084E5           STR      R0,[R4, #+12]
    914            REQUEST_DATEANDTIME_GET(SYNC,cur_date);
   \   00000054   0010A0E1           MOV      R1,R0
   \   00000058   ........           LDR      R0,??DataTable41  ;; SYNC
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   6E0100EF           SWI      +366
    915            get_bcfg_key();
   \   00000064   ........           BL       ??get_bcfg_key
    916            return(CLBook);
   \   00000068   000094E5           LDR      R0,[R4, #+0]
   \   0000006C   1680BDE8           POP      {R1,R2,R4,PC}    ;; return
   \                     ??CreateCLBook_1:
   \   00000070   ........           DC32     CLBook
   \   00000074   ........           DC32     ??onCloseCLBook
    917          }
    918          
    919          

   \                                 In segment CODE, align 4, keep-with-next
    920          int myFind(BOOK* book)
    921          {
    922                  if(!strcmp(book->xbook->name,"Call Logger")) return(1);
   \                     ??myFind:
   \   00000000   ........           LDR      R1,??DataTable42  ;; `?<Constant "Call Logger">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   040090E5           LDR      R0,[R0, #+4]
   \   00000010   590100EF           SWI      +345
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0100A003           MOVEQ    R0,#+1
   \   0000001C   0080BD08           POPEQ    {PC}
    923                  return(0);
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   0080BDE8           POP      {PC}             ;; return
    924          }
    925          
    926          

   \                                 In segment CODE, align 4, keep-with-next
    927          int main (void)
    928          {
    929            if (FindBook(myFind))
   \                     main:
   \   00000000   68009FE5           LDR      R0,??main_0      ;; ??myFind
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   300100EF           SWI      +304
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1300000A           BEQ      ??main_1
    930            {
    931              MessageBox(0x6fFFFFFF,STR("Already runed"),0, 1 ,5000,0);
   \   00000014   58009FE5           LDR      R0,??main_0+0x4  ;; `?<Constant L"\\x41\\x6c\\x72\\x65\\x61\\x64\\x79\\x20\\`
   \   00000018   FF20A0E3           MOV      R2,#+255
   \   0000001C   FF2C82E3           ORR      R2,R2,#0xFF00
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   5D0100EF           SWI      +349
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   02002DE9           PUSH     {R1}
   \   00000030   0130A0E3           MOV      R3,#+1
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   8810A0E3           MOV      R1,#+136
   \   0000003C   4C1D81E3           ORR      R1,R1,#0x1300
   \   00000040   02002DE9           PUSH     {R1}
   \   00000044   0010A0E1           MOV      R1,R0
   \   00000048   9004E0E3           MVN      R0,#-1879048192
   \   0000004C   570200EF           SWI      +599
    932              SUBPROC(elf_exit);
   \   00000050   ........           LDR      R0,??DataTable43  ;; ??elf_exit
   \   00000054   080100EF           SWI      +264
    933            }
    934            else
    935            {
    936              CreateCLBook();
    937              return(0);
    938            }
    939          }
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   08D08DE2           ADD      SP,SP,#+8
   \   00000060   0080BDE8           POP      {PC}
   \                     ??main_1:
   \   00000064   ........           BL       ??CreateCLBook
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   0080BDE8           POP      {PC}             ;; return
   \                     ??main_0:
   \   00000070   ........           DC32     ??myFind
   \   00000074   ........           DC32     `?<Constant L"\\x41\\x6c\\x72\\x65\\x61\\x64\\x79\\x20\\`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     CLBook

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     `?<Constant L"\\xd\\xa\\x54\\x6f\\x74\\x61\\x6c\\x20\\x6`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   ........           DC32     SYNC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     `?<Constant L"\\xd\\xa\\x54\\x6f\\x74\\x61\\x6c\\x20\\x6`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   ........           DC32     CLBook + 8

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable28:
   \   00000000   1F85EB51           DC32     0x51eb851f

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   ........           DC32     CLBook + 16

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   ........           DC32     TrafDiv

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   ........           DC32     TrafKb

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   ........           DC32     `?<Constant L"\\xd\\xa\\x54\\x6f\\x74\\x61\\x6c\\x20\\x6`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable36:
   \   00000000   ........           DC32     sort_order

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable38:
   \   00000000   ........           DC32     CLBook

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable41:
   \   00000000   ........           DC32     SYNC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   ........           DC32     `?<Constant "Call Logger">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable43:
   \   00000000   ........           DC32     ??elf_exit

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for CLBook>`:
   \   00000000   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for myList>`:
   \   00000004   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for myList_gprs>`:
   \   00000008   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for cur_date>`:
   \   0000000C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Money>`:
   \   00000010   00000000           DC32 0H
   \                     `?<Initializer for base_page>`:
   \   00000014   ........0000       DC32 `?<Constant "CL_BasePage">`, 0H, CL_PageEvents
   \              0000........

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\xd\\xa\\x54\\x6f\\x74\\x61\\x6c\\x20\\x6`:
   \   00000000   0D000A005400       DC8 0DH, 0, 0AH, 0, 54H, 0, 6FH, 0
   \              6F00        
   \   00000008   740061006C00       DC8 74H, 0, 61H, 0, 6CH, 0, 20H, 0
   \              2000        
   \   00000010   63006F007300       DC8 63H, 0, 6FH, 0, 73H, 0, 74H, 0
   \              7400        
   \   00000018   20002D002000       DC8 20H, 0, 2DH, 0, 20H, 0, 25H, 0
   \              2500        
   \   00000020   64002E002500       DC8 64H, 0, 2EH, 0, 25H, 0, 30H, 0
   \              3000        
   \   00000028   320064002000       DC8 32H, 0, 64H, 0, 20H, 0, 25H, 0
   \              2500        
   \   00000030   6C0073000D00       DC8 6CH, 0, 73H, 0, 0DH, 0, 0AH, 0
   \              0A00        
   \   00000038   54006F007400       DC8 54H, 0, 6FH, 0, 74H, 0, 61H, 0
   \              6100        
   \   00000040   6C0020007400       DC8 6CH, 0, 20H, 0, 74H, 0, 72H, 0
   \              7200        
   \   00000048   610066006600       DC8 61H, 0, 66H, 0, 66H, 0, 69H, 0
   \              6900        
   \   00000050   630020002D00       DC8 63H, 0, 20H, 0, 2DH, 0, 20H, 0
   \              2000        
   \   00000058   250064002000       DC8 25H, 0, 64H, 0, 20H, 0, 62H, 0
   \              6200        
   \   00000060   0D000A000D00       DC8 0DH, 0, 0AH, 0, 0DH, 0, 0AH, 0
   \              0A00        
   \   00000068   0000               DC8 0, 0
   \   0000006A   0000               DC8 0, 0
   \   0000006C   720065006700       DC8 72H, 0, 65H, 0, 67H, 0, 69H, 0
   \              6900        
   \   00000074   6F006E007300       DC8 6FH, 0, 6EH, 0, 73H, 0, 2EH, 0
   \              2E00        
   \   0000007C   69006E006900       DC8 69H, 0, 6EH, 0, 69H, 0, 0, 0
   \              0000        
   \   00000084   25006C007300       DC8 25H, 0, 6CH, 0, 73H, 0, 2CH, 0
   \              2C00        
   \   0000008C   200025006C00       DC8 20H, 0, 25H, 0, 6CH, 0, 73H, 0
   \              7300        
   \   00000094   200028002500       DC8 20H, 0, 28H, 0, 25H, 0, 6CH, 0
   \              6C00        
   \   0000009C   730029002000       DC8 73H, 0, 29H, 0, 20H, 0, 2DH, 0
   \              2D00        
   \   000000A4   200025003000       DC8 20H, 0, 25H, 0, 30H, 0, 32H, 0
   \              3200        
   \   000000AC   64003A002500       DC8 64H, 0, 3AH, 0, 25H, 0, 30H, 0
   \              3000        
   \   000000B4   320064003A00       DC8 32H, 0, 64H, 0, 3AH, 0, 25H, 0
   \              2500        
   \   000000BC   300032006400       DC8 30H, 0, 32H, 0, 64H, 0, 0DH, 0
   \              0D00        
   \   000000C4   0A000000           DC8 0AH, 0, 0, 0
   \   000000C8   25006C007300       DC8 25H, 0, 6CH, 0, 73H, 0, 2CH, 0
   \              2C00        
   \   000000D0   200025006C00       DC8 20H, 0, 25H, 0, 6CH, 0, 73H, 0
   \              7300        
   \   000000D8   200028002500       DC8 20H, 0, 28H, 0, 25H, 0, 6CH, 0
   \              6C00        
   \   000000E0   730029002000       DC8 73H, 0, 29H, 0, 20H, 0, 2DH, 0
   \              2D00        
   \   000000E8   200025003000       DC8 20H, 0, 25H, 0, 30H, 0, 32H, 0
   \              3200        
   \   000000F0   64003A002500       DC8 64H, 0, 3AH, 0, 25H, 0, 30H, 0
   \              3000        
   \   000000F8   320064003A00       DC8 32H, 0, 64H, 0, 3AH, 0, 25H, 0
   \              2500        
   \   00000100   300032006400       DC8 30H, 0, 32H, 0, 64H, 0, 2CH, 0
   \              2C00        
   \   00000108   200025003000       DC8 20H, 0, 25H, 0, 30H, 0, 32H, 0
   \              3200        
   \   00000110   64003A002500       DC8 64H, 0, 3AH, 0, 25H, 0, 30H, 0
   \              3000        
   \   00000118   320064000D00       DC8 32H, 0, 64H, 0, 0DH, 0, 0AH, 0
   \              0A00        
   \   00000120   0000               DC8 0, 0
   \   00000122   0000               DC8 0, 0
   \   00000124   25006C007300       DC8 25H, 0, 6CH, 0, 73H, 0, 20H, 0
   \              2000        
   \   0000012C   280025006C00       DC8 28H, 0, 25H, 0, 6CH, 0, 73H, 0
   \              7300        
   \   00000134   290020002D00       DC8 29H, 0, 20H, 0, 2DH, 0, 20H, 0
   \              2000        
   \   0000013C   250030003200       DC8 25H, 0, 30H, 0, 32H, 0, 64H, 0
   \              6400        
   \   00000144   3A0025003000       DC8 3AH, 0, 25H, 0, 30H, 0, 32H, 0
   \              3200        
   \   0000014C   64003A002500       DC8 64H, 0, 3AH, 0, 25H, 0, 30H, 0
   \              3000        
   \   00000154   320064000D00       DC8 32H, 0, 64H, 0, 0DH, 0, 0AH, 0
   \              0A00        
   \   0000015C   0000               DC8 0, 0
   \   0000015E   0000               DC8 0, 0
   \   00000160   25006C007300       DC8 25H, 0, 6CH, 0, 73H, 0, 20H, 0
   \              2000        
   \   00000168   280025006C00       DC8 28H, 0, 25H, 0, 6CH, 0, 73H, 0
   \              7300        
   \   00000170   290020002D00       DC8 29H, 0, 20H, 0, 2DH, 0, 20H, 0
   \              2000        
   \   00000178   250030003200       DC8 25H, 0, 30H, 0, 32H, 0, 64H, 0
   \              6400        
   \   00000180   3A0025003000       DC8 3AH, 0, 25H, 0, 30H, 0, 32H, 0
   \              3200        
   \   00000188   64003A002500       DC8 64H, 0, 3AH, 0, 25H, 0, 30H, 0
   \              3000        
   \   00000190   320064002C00       DC8 32H, 0, 64H, 0, 2CH, 0, 20H, 0
   \              2000        
   \   00000198   250030003200       DC8 25H, 0, 30H, 0, 32H, 0, 64H, 0
   \              6400        
   \   000001A0   3A0025003000       DC8 3AH, 0, 25H, 0, 30H, 0, 32H, 0
   \              3200        
   \   000001A8   64000D000A00       DC8 64H, 0, 0DH, 0, 0AH, 0, 0, 0
   \              0000        
   \   000001B0   2F0043006100       DC8 2FH, 0, 43H, 0, 61H, 0, 6CH, 0
   \              6C00        
   \   000001B8   6C0020004C00       DC8 6CH, 0, 20H, 0, 4CH, 0, 6FH, 0
   \              6F00        
   \   000001C0   670067006500       DC8 67H, 0, 67H, 0, 65H, 0, 72H, 0
   \              7200        
   \   000001C8   2F000000           DC8 2FH, 0, 0, 0
   \   000001CC   250030003400       DC8 25H, 0, 30H, 0, 34H, 0, 64H, 0
   \              6400        
   \   000001D4   2D0025003000       DC8 2DH, 0, 25H, 0, 30H, 0, 32H, 0
   \              3200        
   \   000001DC   64002D002500       DC8 64H, 0, 2DH, 0, 25H, 0, 30H, 0
   \              3000        
   \   000001E4   320064000000       DC8 32H, 0, 64H, 0, 0, 0
   \   000001EA   0000               DC8 0, 0
   \   000001EC   670070007200       DC8 67H, 0, 70H, 0, 72H, 0, 73H, 0
   \              7300        
   \   000001F4   2E0074007800       DC8 2EH, 0, 74H, 0, 78H, 0, 74H, 0
   \              7400        
   \   000001FC   0000               DC8 0, 0
   \   000001FE   0000               DC8 0, 0
   \   00000200   63006F007300       DC8 63H, 0, 6FH, 0, 73H, 0, 74H, 0
   \              7400        
   \   00000208   20002D000000       DC8 20H, 0, 2DH, 0, 0, 0
   \   0000020E   0000               DC8 0, 0
   \   00000210   730065006E00       DC8 73H, 0, 65H, 0, 6EH, 0, 74H, 0
   \              7400        
   \   00000218   20002D000000       DC8 20H, 0, 2DH, 0, 0, 0
   \   0000021E   0000               DC8 0, 0
   \   00000220   720065006300       DC8 72H, 0, 65H, 0, 63H, 0, 65H, 0
   \              6500        
   \   00000228   690076006500       DC8 69H, 0, 76H, 0, 65H, 0, 64H, 0
   \              6400        
   \   00000230   20002D000000       DC8 20H, 0, 2DH, 0, 0, 0
   \   00000236   0000               DC8 0, 0
   \   00000238   0D000A005400       DC8 0DH, 0, 0AH, 0, 54H, 0, 6FH, 0
   \              6F00        
   \   00000240   740061006C00       DC8 74H, 0, 61H, 0, 6CH, 0, 20H, 0
   \              2000        
   \   00000248   63006F007300       DC8 63H, 0, 6FH, 0, 73H, 0, 74H, 0
   \              7400        
   \   00000250   20002D002000       DC8 20H, 0, 2DH, 0, 20H, 0, 25H, 0
   \              2500        
   \   00000258   64002E002500       DC8 64H, 0, 2EH, 0, 25H, 0, 30H, 0
   \              3000        
   \   00000260   320064002000       DC8 32H, 0, 64H, 0, 20H, 0, 25H, 0
   \              2500        
   \   00000268   6C0073000D00       DC8 6CH, 0, 73H, 0, 0DH, 0, 0AH, 0
   \              0A00        
   \   00000270   54006F007400       DC8 54H, 0, 6FH, 0, 74H, 0, 61H, 0
   \              6100        
   \   00000278   6C0020007300       DC8 6CH, 0, 20H, 0, 73H, 0, 65H, 0
   \              6500        
   \   00000280   6E0074002000       DC8 6EH, 0, 74H, 0, 20H, 0, 2DH, 0
   \              2D00        
   \   00000288   200025006400       DC8 20H, 0, 25H, 0, 64H, 0, 2EH, 0
   \              2E00        
   \   00000290   250030003200       DC8 25H, 0, 30H, 0, 32H, 0, 64H, 0
   \              6400        
   \   00000298   20004B006200       DC8 20H, 0, 4BH, 0, 62H, 0, 0DH, 0
   \              0D00        
   \   000002A0   0A0054006F00       DC8 0AH, 0, 54H, 0, 6FH, 0, 74H, 0
   \              7400        
   \   000002A8   61006C002000       DC8 61H, 0, 6CH, 0, 20H, 0, 72H, 0
   \              7200        
   \   000002B0   650063006500       DC8 65H, 0, 63H, 0, 65H, 0, 69H, 0
   \              6900        
   \   000002B8   760065006400       DC8 76H, 0, 65H, 0, 64H, 0, 20H, 0
   \              2000        
   \   000002C0   2D0020002500       DC8 2DH, 0, 20H, 0, 25H, 0, 64H, 0
   \              6400        
   \   000002C8   2E0025003000       DC8 2EH, 0, 25H, 0, 30H, 0, 32H, 0
   \              3200        
   \   000002D0   640020004B00       DC8 64H, 0, 20H, 0, 4BH, 0, 62H, 0
   \              6200        
   \   000002D8   0D000A000D00       DC8 0DH, 0, 0AH, 0, 0DH, 0, 0AH, 0
   \              0A00        
   \   000002E0   0000               DC8 0, 0
   \   000002E2   0000               DC8 0, 0
   \   000002E4   0D000A005400       DC8 0DH, 0, 0AH, 0, 54H, 0, 6FH, 0
   \              6F00        
   \   000002EC   740061006C00       DC8 74H, 0, 61H, 0, 6CH, 0, 20H, 0
   \              2000        
   \   000002F4   63006F007300       DC8 63H, 0, 6FH, 0, 73H, 0, 74H, 0
   \              7400        
   \   000002FC   20002D002000       DC8 20H, 0, 2DH, 0, 20H, 0, 25H, 0
   \              2500        
   \   00000304   64002E002500       DC8 64H, 0, 2EH, 0, 25H, 0, 30H, 0
   \              3000        
   \   0000030C   320064002000       DC8 32H, 0, 64H, 0, 20H, 0, 25H, 0
   \              2500        
   \   00000314   6C0073000D00       DC8 6CH, 0, 73H, 0, 0DH, 0, 0AH, 0
   \              0A00        
   \   0000031C   54006F007400       DC8 54H, 0, 6FH, 0, 74H, 0, 61H, 0
   \              6100        
   \   00000324   6C0020007300       DC8 6CH, 0, 20H, 0, 73H, 0, 65H, 0
   \              6500        
   \   0000032C   6E0074002000       DC8 6EH, 0, 74H, 0, 20H, 0, 2DH, 0
   \              2D00        
   \   00000334   200025006400       DC8 20H, 0, 25H, 0, 64H, 0, 20H, 0
   \              2000        
   \   0000033C   62000D000A00       DC8 62H, 0, 0DH, 0, 0AH, 0, 54H, 0
   \              5400        
   \   00000344   6F0074006100       DC8 6FH, 0, 74H, 0, 61H, 0, 6CH, 0
   \              6C00        
   \   0000034C   200072006500       DC8 20H, 0, 72H, 0, 65H, 0, 63H, 0
   \              6300        
   \   00000354   650069007600       DC8 65H, 0, 69H, 0, 76H, 0, 65H, 0
   \              6500        
   \   0000035C   640020002D00       DC8 64H, 0, 20H, 0, 2DH, 0, 20H, 0
   \              2000        
   \   00000364   250064002000       DC8 25H, 0, 64H, 0, 20H, 0, 62H, 0
   \              6200        
   \   0000036C   0D000A000D00       DC8 0DH, 0, 0AH, 0, 0DH, 0, 0AH, 0
   \              0A00        
   \   00000374   0000               DC8 0, 0
   \   00000376   0000               DC8 0, 0
   \   00000378   740072006100       DC8 74H, 0, 72H, 0, 61H, 0, 66H, 0
   \              6600        
   \   00000380   660069006300       DC8 66H, 0, 69H, 0, 63H, 0, 20H, 0
   \              2000        
   \   00000388   2D000000           DC8 2DH, 0, 0, 0
   \   0000038C   0D000A005400       DC8 0DH, 0, 0AH, 0, 54H, 0, 6FH, 0
   \              6F00        
   \   00000394   740061006C00       DC8 74H, 0, 61H, 0, 6CH, 0, 20H, 0
   \              2000        
   \   0000039C   63006F007300       DC8 63H, 0, 6FH, 0, 73H, 0, 74H, 0
   \              7400        
   \   000003A4   20002D002000       DC8 20H, 0, 2DH, 0, 20H, 0, 25H, 0
   \              2500        
   \   000003AC   64002E002500       DC8 64H, 0, 2EH, 0, 25H, 0, 30H, 0
   \              3000        
   \   000003B4   320064002000       DC8 32H, 0, 64H, 0, 20H, 0, 25H, 0
   \              2500        
   \   000003BC   6C0073000D00       DC8 6CH, 0, 73H, 0, 0DH, 0, 0AH, 0
   \              0A00        
   \   000003C4   54006F007400       DC8 54H, 0, 6FH, 0, 74H, 0, 61H, 0
   \              6100        
   \   000003CC   6C0020007400       DC8 6CH, 0, 20H, 0, 74H, 0, 72H, 0
   \              7200        
   \   000003D4   610066006600       DC8 61H, 0, 66H, 0, 66H, 0, 69H, 0
   \              6900        
   \   000003DC   630020002D00       DC8 63H, 0, 20H, 0, 2DH, 0, 20H, 0
   \              2000        
   \   000003E4   250064002E00       DC8 25H, 0, 64H, 0, 2EH, 0, 25H, 0
   \              2500        
   \   000003EC   300032006400       DC8 30H, 0, 32H, 0, 64H, 0, 20H, 0
   \              2000        
   \   000003F4   4B0062000D00       DC8 4BH, 0, 62H, 0, 0DH, 0, 0AH, 0
   \              0A00        
   \   000003FC   0D000A000000       DC8 0DH, 0, 0AH, 0, 0, 0
   \   00000402   0000               DC8 0, 0
   \   00000404   54006F007400       DC8 54H, 0, 6FH, 0, 74H, 0, 61H, 0
   \              6100        
   \   0000040C   6C0020006300       DC8 6CH, 0, 20H, 0, 63H, 0, 6FH, 0
   \              6F00        
   \   00000414   730074000000       DC8 73H, 0, 74H, 0, 0, 0
   \   0000041A   0000               DC8 0, 0
   \   0000041C   530074006100       DC8 53H, 0, 74H, 0, 61H, 0, 72H, 0
   \              7200        
   \   00000424   740020007400       DC8 74H, 0, 20H, 0, 74H, 0, 69H, 0
   \              6900        
   \   0000042C   6D0065002000       DC8 6DH, 0, 65H, 0, 20H, 0, 2DH, 0
   \              2D00        
   \   00000434   200025003000       DC8 20H, 0, 25H, 0, 30H, 0, 32H, 0
   \              3200        
   \   0000043C   64003A002500       DC8 64H, 0, 3AH, 0, 25H, 0, 30H, 0
   \              3000        
   \   00000444   320064003A00       DC8 32H, 0, 64H, 0, 3AH, 0, 25H, 0
   \              2500        
   \   0000044C   300032006400       DC8 30H, 0, 32H, 0, 64H, 0, 2CH, 0
   \              2C00        
   \   00000454   200073006500       DC8 20H, 0, 73H, 0, 65H, 0, 6EH, 0
   \              6E00        
   \   0000045C   740020002D00       DC8 74H, 0, 20H, 0, 2DH, 0, 20H, 0
   \              2000        
   \   00000464   250064002E00       DC8 25H, 0, 64H, 0, 2EH, 0, 25H, 0
   \              2500        
   \   0000046C   640025006400       DC8 64H, 0, 25H, 0, 64H, 0, 20H, 0
   \              2000        
   \   00000474   4B0062002C00       DC8 4BH, 0, 62H, 0, 2CH, 0, 20H, 0
   \              2000        
   \   0000047C   720065006300       DC8 72H, 0, 65H, 0, 63H, 0, 65H, 0
   \              6500        
   \   00000484   690076006500       DC8 69H, 0, 76H, 0, 65H, 0, 64H, 0
   \              6400        
   \   0000048C   20002D002000       DC8 20H, 0, 2DH, 0, 20H, 0, 25H, 0
   \              2500        
   \   00000494   64002E002500       DC8 64H, 0, 2EH, 0, 25H, 0, 64H, 0
   \              6400        
   \   0000049C   250064002000       DC8 25H, 0, 64H, 0, 20H, 0, 4BH, 0
   \              4B00        
   \   000004A4   62002C002000       DC8 62H, 0, 2CH, 0, 20H, 0, 63H, 0
   \              6300        
   \   000004AC   6F0073007400       DC8 6FH, 0, 73H, 0, 74H, 0, 20H, 0
   \              2000        
   \   000004B4   2D0020002500       DC8 2DH, 0, 20H, 0, 25H, 0, 64H, 0
   \              6400        
   \   000004BC   2E0025006400       DC8 2EH, 0, 25H, 0, 64H, 0, 25H, 0
   \              2500        
   \   000004C4   640020002500       DC8 64H, 0, 20H, 0, 25H, 0, 6CH, 0
   \              6C00        
   \   000004CC   73000D000A00       DC8 73H, 0, 0DH, 0, 0AH, 0, 0, 0
   \              0000        
   \   000004D4   530074006100       DC8 53H, 0, 74H, 0, 61H, 0, 72H, 0
   \              7200        
   \   000004DC   740020007400       DC8 74H, 0, 20H, 0, 74H, 0, 69H, 0
   \              6900        
   \   000004E4   6D0065002000       DC8 6DH, 0, 65H, 0, 20H, 0, 2DH, 0
   \              2D00        
   \   000004EC   200025003000       DC8 20H, 0, 25H, 0, 30H, 0, 32H, 0
   \              3200        
   \   000004F4   64003A002500       DC8 64H, 0, 3AH, 0, 25H, 0, 30H, 0
   \              3000        
   \   000004FC   320064003A00       DC8 32H, 0, 64H, 0, 3AH, 0, 25H, 0
   \              2500        
   \   00000504   300032006400       DC8 30H, 0, 32H, 0, 64H, 0, 2CH, 0
   \              2C00        
   \   0000050C   200073006500       DC8 20H, 0, 73H, 0, 65H, 0, 6EH, 0
   \              6E00        
   \   00000514   740020002D00       DC8 74H, 0, 20H, 0, 2DH, 0, 20H, 0
   \              2000        
   \   0000051C   250064002000       DC8 25H, 0, 64H, 0, 20H, 0, 62H, 0
   \              6200        
   \   00000524   2C0020007200       DC8 2CH, 0, 20H, 0, 72H, 0, 65H, 0
   \              6500        
   \   0000052C   630065006900       DC8 63H, 0, 65H, 0, 69H, 0, 76H, 0
   \              7600        
   \   00000534   650064002000       DC8 65H, 0, 64H, 0, 20H, 0, 2DH, 0
   \              2D00        
   \   0000053C   200025006400       DC8 20H, 0, 25H, 0, 64H, 0, 20H, 0
   \              2000        
   \   00000544   62002C002000       DC8 62H, 0, 2CH, 0, 20H, 0, 63H, 0
   \              6300        
   \   0000054C   6F0073007400       DC8 6FH, 0, 73H, 0, 74H, 0, 20H, 0
   \              2000        
   \   00000554   2D0020002500       DC8 2DH, 0, 20H, 0, 25H, 0, 64H, 0
   \              6400        
   \   0000055C   2E0025006400       DC8 2EH, 0, 25H, 0, 64H, 0, 25H, 0
   \              2500        
   \   00000564   640020002500       DC8 64H, 0, 20H, 0, 25H, 0, 6CH, 0
   \              6C00        
   \   0000056C   73000D000A00       DC8 73H, 0, 0DH, 0, 0AH, 0, 0, 0
   \              0000        
   \   00000574   530074006100       DC8 53H, 0, 74H, 0, 61H, 0, 72H, 0
   \              7200        
   \   0000057C   740020007400       DC8 74H, 0, 20H, 0, 74H, 0, 69H, 0
   \              6900        
   \   00000584   6D0065002000       DC8 6DH, 0, 65H, 0, 20H, 0, 2DH, 0
   \              2D00        
   \   0000058C   200025003000       DC8 20H, 0, 25H, 0, 30H, 0, 32H, 0
   \              3200        
   \   00000594   64003A002500       DC8 64H, 0, 3AH, 0, 25H, 0, 30H, 0
   \              3000        
   \   0000059C   320064003A00       DC8 32H, 0, 64H, 0, 3AH, 0, 25H, 0
   \              2500        
   \   000005A4   300032006400       DC8 30H, 0, 32H, 0, 64H, 0, 2CH, 0
   \              2C00        
   \   000005AC   200074007200       DC8 20H, 0, 74H, 0, 72H, 0, 61H, 0
   \              6100        
   \   000005B4   660066006900       DC8 66H, 0, 66H, 0, 69H, 0, 63H, 0
   \              6300        
   \   000005BC   20002D002000       DC8 20H, 0, 2DH, 0, 20H, 0, 25H, 0
   \              2500        
   \   000005C4   64002E002500       DC8 64H, 0, 2EH, 0, 25H, 0, 64H, 0
   \              6400        
   \   000005CC   250064002000       DC8 25H, 0, 64H, 0, 20H, 0, 4BH, 0
   \              4B00        
   \   000005D4   62002C002000       DC8 62H, 0, 2CH, 0, 20H, 0, 63H, 0
   \              6300        
   \   000005DC   6F0073007400       DC8 6FH, 0, 73H, 0, 74H, 0, 20H, 0
   \              2000        
   \   000005E4   2D0020002500       DC8 2DH, 0, 20H, 0, 25H, 0, 64H, 0
   \              6400        
   \   000005EC   2E0025006400       DC8 2EH, 0, 25H, 0, 64H, 0, 25H, 0
   \              2500        
   \   000005F4   640020002500       DC8 64H, 0, 20H, 0, 25H, 0, 6CH, 0
   \              6C00        
   \   000005FC   73000D000A00       DC8 73H, 0, 0DH, 0, 0AH, 0, 0, 0
   \              0000        
   \   00000604   530074006100       DC8 53H, 0, 74H, 0, 61H, 0, 72H, 0
   \              7200        
   \   0000060C   740020007400       DC8 74H, 0, 20H, 0, 74H, 0, 69H, 0
   \              6900        
   \   00000614   6D0065002000       DC8 6DH, 0, 65H, 0, 20H, 0, 2DH, 0
   \              2D00        
   \   0000061C   200025003000       DC8 20H, 0, 25H, 0, 30H, 0, 32H, 0
   \              3200        
   \   00000624   64003A002500       DC8 64H, 0, 3AH, 0, 25H, 0, 30H, 0
   \              3000        
   \   0000062C   320064003A00       DC8 32H, 0, 64H, 0, 3AH, 0, 25H, 0
   \              2500        
   \   00000634   300032006400       DC8 30H, 0, 32H, 0, 64H, 0, 2CH, 0
   \              2C00        
   \   0000063C   200074007200       DC8 20H, 0, 74H, 0, 72H, 0, 61H, 0
   \              6100        
   \   00000644   660066006900       DC8 66H, 0, 66H, 0, 69H, 0, 63H, 0
   \              6300        
   \   0000064C   20002D002000       DC8 20H, 0, 2DH, 0, 20H, 0, 25H, 0
   \              2500        
   \   00000654   640020006200       DC8 64H, 0, 20H, 0, 62H, 0, 2CH, 0
   \              2C00        
   \   0000065C   200063006F00       DC8 20H, 0, 63H, 0, 6FH, 0, 73H, 0
   \              7300        
   \   00000664   740020002D00       DC8 74H, 0, 20H, 0, 2DH, 0, 20H, 0
   \              2000        
   \   0000066C   250064002E00       DC8 25H, 0, 64H, 0, 2EH, 0, 25H, 0
   \              2500        
   \   00000674   640025006400       DC8 64H, 0, 25H, 0, 64H, 0, 20H, 0
   \              2000        
   \   0000067C   25006C007300       DC8 25H, 0, 6CH, 0, 73H, 0, 0DH, 0
   \              0D00        
   \   00000684   0A000000           DC8 0AH, 0, 0, 0
   \   00000688   45006D006500       DC8 45H, 0, 6DH, 0, 65H, 0, 72H, 0
   \              7200        
   \   00000690   670065006E00       DC8 67H, 0, 65H, 0, 6EH, 0, 63H, 0
   \              6300        
   \   00000698   79000000           DC8 79H, 0, 0, 0
   \   0000069C   4E006F004E00       DC8 4EH, 0, 6FH, 0, 4EH, 0, 61H, 0
   \              6100        
   \   000006A4   6D0065000000       DC8 6DH, 0, 65H, 0, 0, 0
   \   000006AA   0000               DC8 0, 0
   \   000006AC   6F0075007400       DC8 6FH, 0, 75H, 0, 74H, 0, 2EH, 0
   \              2E00        
   \   000006B4   740078007400       DC8 74H, 0, 78H, 0, 74H, 0, 0, 0
   \              0000        
   \   000006BC   6D0069007300       DC8 6DH, 0, 69H, 0, 73H, 0, 73H, 0
   \              7300        
   \   000006C4   650064002E00       DC8 65H, 0, 64H, 0, 2EH, 0, 74H, 0
   \              7400        
   \   000006CC   780074000000       DC8 78H, 0, 74H, 0, 0, 0
   \   000006D2   0000               DC8 0, 0
   \   000006D4   69006E002E00       DC8 69H, 0, 6EH, 0, 2EH, 0, 74H, 0
   \              7400        
   \   000006DC   780074000000       DC8 78H, 0, 74H, 0, 0, 0
   \   000006E2   0000               DC8 0, 0
   \   000006E4   2F0043006100       DC8 2FH, 0, 43H, 0, 61H, 0, 6CH, 0
   \              6C00        
   \   000006EC   6C0020004C00       DC8 6CH, 0, 20H, 0, 4CH, 0, 6FH, 0
   \              6F00        
   \   000006F4   670067006500       DC8 67H, 0, 67H, 0, 65H, 0, 72H, 0
   \              7200        
   \   000006FC   0000               DC8 0, 0
   \   000006FE   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Call Logger">`:
   \   00000000   43616C6C204C       DC8 "Call Logger"
   \              6F6767657200

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "CL_BasePage">`:
   \   00000000   434C5F426173       DC8 "CL_BasePage"
   \              655061676500

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x43\\x61\\x6c\\x6c\\x20\\x4c\\x6f\\x67\\`:
   \   00000000   430061006C00       DC8 43H, 0, 61H, 0, 6CH, 0, 6CH, 0
   \              6C00        
   \   00000008   20004C006F00       DC8 20H, 0, 4CH, 0, 6FH, 0, 67H, 0
   \              6700        
   \   00000010   670065007200       DC8 67H, 0, 65H, 0, 72H, 0, 2CH, 0
   \              2C00        
   \   00000018   200076003200       DC8 20H, 0, 76H, 0, 32H, 0, 2EH, 0
   \              2E00        
   \   00000020   31000A000A00       DC8 31H, 0, 0AH, 0, 0AH, 0, 28H, 0
   \              2800        
   \   00000028   630029002000       DC8 63H, 0, 29H, 0, 20H, 0, 49H, 0
   \              4900        
   \   00000030   72006F006E00       DC8 72H, 0, 6FH, 0, 6EH, 0, 4DH, 0
   \              4D00        
   \   00000038   610073007400       DC8 61H, 0, 73H, 0, 74H, 0, 65H, 0
   \              6500        
   \   00000040   72000000           DC8 72H, 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x41\\x6c\\x72\\x65\\x61\\x64\\x79\\x20\\`:
   \   00000000   41006C007200       DC8 41H, 0, 6CH, 0, 72H, 0, 65H, 0
   \              6500        
   \   00000008   610064007900       DC8 61H, 0, 64H, 0, 79H, 0, 20H, 0
   \              2000        
   \   00000010   720075006E00       DC8 72H, 0, 75H, 0, 6EH, 0, 65H, 0
   \              6500        
   \   00000018   64000000           DC8 64H, 0, 0, 0

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     CreateCLBook()                    16
     OnCallManager(void *, BOOK *)   1792
     ReconfigElf(void *, BOOK *)        8
     ShowAuthorInfo(void *, BOOK *)    16
     TerminateElf(void *, BOOK *)       4
     elf_exit()                         4
     get_bcfg_key()                    12
     main()                            12
     myFind(BOOK *)                     4
     myList_Find(void *, void *)        0
     myList_elem_Filter(void *)         0
     myList_elem_Free(void *)           8
     myList_gprs_Find(void *, void *)
                                        0
     myList_gprs_elem_Free(void *)      8
     onClockChange(void *, BOOK *)   1044
     onCloseCLBook(BOOK *)             12
     onSessionEstablished(void *, BOOK *)
                                       12
     onSessionTerminated(void *, BOOK *)
                                     1392
     win12512unicode(wchar_t *, char *, int)
                                        0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     win12512unicode(wchar_t *, char *, int)
                                     152
     get_bcfg_key()                   88
     myList_Find(void *, void *)      28
     myList_gprs_Find(void *, void *)
                                      28
     myList_elem_Free(void *)         88
     myList_gprs_elem_Free(void *)    28
     myList_elem_Filter(void *)       12
     TerminateElf(void *, BOOK *)     20
     ShowAuthorInfo(void *, BOOK *)   80
     onClockChange(void *, BOOK *)  1844
     onSessionEstablished(void *, BOOK *)
                                      84
     onSessionTerminated(void *, BOOK *)
                                    2212
     OnCallManager(void *, BOOK *)  2356
     ReconfigElf(void *, BOOK *)      76
     CL_PageEvents                    64
     CLBook                           32
     elf_exit()                       28
     onCloseCLBook(BOOK *)           108
     CreateCLBook()                  120
     myFind(BOOK *)                   40
     main()                          120
     ??DataTable0                      4
     ??DataTable2                      4
     ??DataTable18                     4
     ??DataTable21                     4
     ??DataTable22                     4
     ??DataTable28                     4
     ??DataTable29                     4
     ??DataTable30                     4
     ??DataTable31                     4
     ??DataTable33                     4
     ??DataTable36                     4
     ??DataTable38                     4
     ??DataTable41                     4
     ??DataTable42                     4
     ??DataTable43                     4
     ?<Initializer for CLBook>        32
     ?<Constant L"\xd\xa\x54\x6f\x74\x61\x6c\x20\x6
                                    1792
     ?<Constant "Call Logger">        12
     ?<Constant "CL_BasePage">        12
     ?<Constant L"\x43\x61\x6c\x6c\x20\x4c\x6f\x67\
                                      68
     ?<Constant L"\x41\x6c\x72\x65\x61\x64\x79\x20\
                                      28
      Others                         160

 
 7 720 bytes in segment CODE
 1 912 bytes in segment DATA_C
    32 bytes in segment DATA_I
    32 bytes in segment DATA_ID
    64 bytes in segment DYN_PAGE
    12 bytes in segment INITTAB
 
 7 572 bytes of CODE  memory (+ 160 bytes shared)
 2 008 bytes of CONST memory
    32 bytes of DATA  memory

Errors: none
Warnings: none
