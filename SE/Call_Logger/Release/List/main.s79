//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   27/Jan/2009  11:16:24 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\Documents and Settings\Mehanoshin\Рабочий        /
//                       стол\123\Embedded Workbench 4.0                     /
//                       Evaluation\Project\Call_Logger\main.c               /
//    Command line    =  "C:\Documents and Settings\Mehanoshin\Рабочий       /
//                       стол\123\Embedded Workbench 4.0                     /
//                       Evaluation\Project\Call_Logger\main.c" -D NDEBUG    /
//                       -lC "C:\Documents and Settings\Mehanoshin\Рабочий   /
//                       стол\123\Embedded Workbench 4.0                     /
//                       Evaluation\Project\Call_Logger\Release\List\" -lA   /
//                       "C:\Documents and Settings\Mehanoshin\Рабочий       /
//                       стол\123\Embedded Workbench 4.0                     /
//                       Evaluation\Project\Call_Logger\Release\List\" -o    /
//                       "C:\Documents and Settings\Mehanoshin\Рабочий       /
//                       стол\123\Embedded Workbench 4.0                     /
//                       Evaluation\Project\Call_Logger\Release\Obj\" -s9    /
//                       --no_unroll --no_inline --cpu_mode arm --endian     /
//                       little --cpu ARM926EJ-S --stack_align 4             /
//                       --interwork -e --fpu None --eec++ --dlib_config     /
//                       "C:\Documents and Settings\Mehanoshin\Рабочий       /
//                       стол\123\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I "C:\Documents  /
//                       and Settings\Mehanoshin\Рабочий стол\123\Embedded   /
//                       Workbench 4.0 Evaluation\ARM\INC\"                  /
//    List file       =  C:\Documents and Settings\Mehanoshin\Рабочий        /
//                       стол\123\Embedded Workbench 4.0                     /
//                       Evaluation\Project\Call_Logger\Release\List\main.s7 /
//                       9                                                   /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ??divu32_a

        PUBWEAK `?*?DATA_ID`
        PUBLIC ??CreateCLBook
        FUNCTION ??CreateCLBook,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??CreateCLBook??rT
??DataTable1 EQU 0
??DataTable10 EQU 0
??DataTable11 EQU 0
??DataTable12 EQU 0
??DataTable13 EQU 0
??DataTable14 EQU 0
??DataTable15 EQU 0
??DataTable16 EQU 0
??DataTable17 EQU 0
??DataTable19 EQU 0
??DataTable20 EQU 0
??DataTable23 EQU 0
??DataTable24 EQU 0
??DataTable25 EQU 0
??DataTable26 EQU 0
??DataTable27 EQU 0
??DataTable3 EQU 0
??DataTable32 EQU 0
??DataTable34 EQU 0
??DataTable35 EQU 0
??DataTable37 EQU 0
??DataTable39 EQU 0
??DataTable4 EQU 0
??DataTable40 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
??DataTable7 EQU 0
??DataTable8 EQU 0
??DataTable9 EQU 0
        MULTWEAK ??InitConfig??rA
        PUBLIC ??OnCallManager
        FUNCTION ??OnCallManager,0603H
        LOCFRAME CSTACK, 1792, STACK
        MULTWEAK ??OnCallManager??rT
        FUNCTION ??ReconfigElf,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC ??ShowAuthorInfo
        FUNCTION ??ShowAuthorInfo,0603H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??ShowAuthorInfo??rT
        PUBLIC ??TerminateElf
        FUNCTION ??TerminateElf,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??TerminateElf??rT
        PUBLIC ??elf_exit
        FUNCTION ??elf_exit,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??elf_exit??rT
        PUBLIC ??get_bcfg_key
        FUNCTION ??get_bcfg_key,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??get_bcfg_key??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        PUBLIC ??myFind
        FUNCTION ??myFind,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??myFind??rT
        PUBLIC ??myList_Find
        FUNCTION ??myList_Find,0603H
        MULTWEAK ??myList_Find??rT
        PUBLIC ??myList_elem_Filter
        FUNCTION ??myList_elem_Filter,0603H
        MULTWEAK ??myList_elem_Filter??rT
        PUBLIC ??myList_elem_Free
        FUNCTION ??myList_elem_Free,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??myList_elem_Free??rT
        PUBLIC ??myList_gprs_Find
        FUNCTION ??myList_gprs_Find,0603H
        MULTWEAK ??myList_gprs_Find??rT
        PUBLIC ??myList_gprs_elem_Free
        FUNCTION ??myList_gprs_elem_Free,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??myList_gprs_elem_Free??rT
        PUBLIC ??onClockChange
        FUNCTION ??onClockChange,0603H
        LOCFRAME CSTACK, 1044, STACK
        MULTWEAK ??onClockChange??rT
        PUBLIC ??onCloseCLBook
        FUNCTION ??onCloseCLBook,0603H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??onCloseCLBook??rT
        PUBLIC ??onSessionEstablished
        FUNCTION ??onSessionEstablished,0603H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??onSessionEstablished??rT
        PUBLIC ??onSessionTerminated
        FUNCTION ??onSessionTerminated,0603H
        LOCFRAME CSTACK, 1392, STACK
        MULTWEAK ??onSessionTerminated??rT
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        MULTWEAK `??operator new[]??rA`
        MULTWEAK ??rA??divu32_a
        PUBLIC ??win12512unicode
        FUNCTION ??win12512unicode,0203H
        MULTWEAK ??win12512unicode??rT
        PUBWEAK ?init?tab?DATA_I
        PUBLIC CLBook
        PUBLIC Money
        PUBLIC base_page
        PUBLIC cur_date
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC myList
        PUBLIC myList_gprs
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        




kill_data           SYMBOL "kill_data"

??CreateCLBook??rT  SYMBOL "??rT", ??CreateCLBook
??InitConfig??rA    SYMBOL "??rA", ??InitConfig

??OnCallManager??rT SYMBOL "??rT", ??OnCallManager

??ShowAuthorInfo??rT SYMBOL "??rT", ??ShowAuthorInfo

??TerminateElf??rT  SYMBOL "??rT", ??TerminateElf

??elf_exit??rT      SYMBOL "??rT", ??elf_exit

??get_bcfg_key??rT  SYMBOL "??rT", ??get_bcfg_key
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main

??myFind??rT        SYMBOL "??rT", ??myFind

??myList_Find??rT   SYMBOL "??rT", ??myList_Find

??myList_elem_Filter??rT SYMBOL "??rT", ??myList_elem_Filter

??myList_elem_Free??rT SYMBOL "??rT", ??myList_elem_Free

??myList_gprs_Find??rT SYMBOL "??rT", ??myList_gprs_Find

??myList_gprs_elem_Free??rT SYMBOL "??rT", ??myList_gprs_elem_Free

??onClockChange??rT SYMBOL "??rT", ??onClockChange

??onCloseCLBook??rT SYMBOL "??rT", ??onCloseCLBook

??onSessionEstablished??rT SYMBOL "??rT", ??onSessionEstablished

??onSessionTerminated??rT SYMBOL "??rT", ??onSessionTerminated
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`

??win12512unicode??rT SYMBOL "??rT", ??win12512unicode

        EXTERN ??InitConfig
        FUNCTION ??InitConfig,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H
        EXTERN ELF_BEGIN
        EXTERN Hol1
        EXTERN Hol2
        EXTERN SYNC
        EXTERN TimeDay
        EXTERN TimeNight
        EXTERN TrafCost
        EXTERN TrafCostDay
        EXTERN TrafCostHol
        EXTERN TrafCostNight
        EXTERN TrafDiv
        EXTERN TrafKb
        EXTERN TrafRound
        EXTERN kill_data
        FUNCTION kill_data,0202H
        EXTERN sort_order
        EXTERN strMoney
        EXTERN successed_config_name
        EXTERN successed_config_path


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??win12512unicode??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??win12512unicode
// C:\Documents and Settings\Mehanoshin\Рабочий стол\123\Embedded Workbench 4.0 Evaluation\Project\Call_Logger\main.c
//    1 #include "..\\include\Lib_Clara.h"
//    2 #include "..\\include\Dir.h"
//    3 #include "..\\include\cfg_items.h"
//    4 #include "conf_loader.h"
//    5 #include "config_data.h"
//    6 
//    7 /*
//    8 typedef struct
//    9 {
//   10   char dummy[24];
//   11   char * PNUM;
//   12 }MTCALL_EVENT_DATA;
//   13 */
//   14 
//   15 typedef struct
//   16 {
//   17   char pos1;
//   18   char cale_base;
//   19   short pos3;
//   20 }CALE_SET;
//   21 
//   22 typedef struct
//   23 {
//   24   char dummy[0x2C];
//   25   int unkID;
//   26 }ses_est;
//   27 
//   28 typedef struct
//   29 {
//   30   char dummy[0x34];
//   31   int unkID;
//   32 }ses_term;
//   33 
//   34 typedef struct
//   35 {
//   36   wchar_t * PNUM;
//   37   wchar_t * Name;
//   38   int first_callstate;
//   39   int last_callstate;
//   40   DATETIME * startdatetime;
//   41   DATETIME * begindatetime;
//   42   char line;
//   43 }myList_elem;
//   44 
//   45 typedef struct
//   46 {
//   47   int ID;
//   48   DATETIME * SesEst;
//   49 }myList_gprs_elem;
//   50 
//   51 typedef struct
//   52 {
//   53   BOOK * book;
//   54 }MSG;
//   55 
//   56 BOOK * CLBook;
//   57 LIST * myList;
//   58 LIST * myList_gprs;
//   59 DATETIME * cur_date;
//   60 
//   61 wchar_t * Money=0;
//   62 
//   63 //Название говорящее...

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??win12512unicode
        ARM
//   64 void win12512unicode(wchar_t *ws, char *s, int len)
//   65 {
??win12512unicode:
        B        ??win12512unicode_1
//   66   int c;
//   67   while((c=*s++)&&((len--)>0))
//   68   {
//   69     if (c==0xA8) c=0x401;
//   70     if (c==0xAA) c=0x404;
//   71     if (c==0xAF) c=0x407;
//   72     if (c==0xB8) c=0x451;
//   73     if (c==0xBA) c=0x454;
//   74     if (c==0xBF) c=0x457;
//   75     if ((c>=0xC0)&&(c<0x100)) c+=0x350;
??win12512unicode_2:
        CMP      R3,#+192
        BLT      ??win12512unicode_3
        CMP      R3,#+256
        ADDLT    R3,R3,#+848
//   76     *ws++=c;
??win12512unicode_3:
        STRH     R3,[R0], #+2
??win12512unicode_1:
        LDRB     R3,[R1], #+1
        CMP      R3,#+0
        BEQ      ??win12512unicode_4
        MOV      R12,R2
        SUB      R2,R12,#+1
        CMP      R12,#+1
        BLT      ??win12512unicode_4
        CMP      R3,#+168
        BNE      ??win12512unicode_5
        MOV      R3,#+1
??win12512unicode_6:
        ORR      R3,R3,#0x400
        B        ??win12512unicode_3
??win12512unicode_5:
        CMP      R3,#+170
        MOVEQ    R3,#+4
        BEQ      ??win12512unicode_6
        CMP      R3,#+175
        BNE      ??win12512unicode_7
        MOV      R3,#+7
??win12512unicode_8:
        B        ??win12512unicode_6
??win12512unicode_7:
        CMP      R3,#+184
        MOVEQ    R3,#+81
        BEQ      ??win12512unicode_6
        CMP      R3,#+186
        MOVEQ    R3,#+84
        BEQ      ??win12512unicode_6
        CMP      R3,#+191
        BNE      ??win12512unicode_2
        MOV      R3,#+87
        B        ??win12512unicode_6
//   77   }
//   78   *ws=0;
??win12512unicode_4:
        MOV      R1,#+0
        STRH     R1,[R0, #+0]
//   79 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??get_bcfg_key??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??get_bcfg_key
//   80 
//   81 // берем значения из ини-файла

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??get_bcfg_key
        ARM
//   82 void get_bcfg_key(void)
//   83 {
??get_bcfg_key:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//   84   InitConfig();
//   85   if (Money) delete(Money);
        LDR      R4,??DataTable0  ;; CLBook
        _BLF     ??InitConfig,??InitConfig??rA
        LDR      R0,[R4, #+16]
        CMP      R0,#+0
        BEQ      ??get_bcfg_key_1
        _BLF     `??operator delete`,`??operator delete??rA`
//   86   Money=new wchar_t[strlen((char*)strMoney)+1];
??get_bcfg_key_1:
        LDR      R5,??get_bcfg_key_2  ;; strMoney
        MOV      R0,R5
        SWI      +346
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R4, #+16]
//   87   win12512unicode(Money,(char*)strMoney,strlen((char*)strMoney));
        MOV      R0,R5
        SWI      +346
        MOV      R2,R0
        LDR      R0,[R4, #+16]
        MOV      R1,R5
        POP      {R4,R5,LR}       ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        B        ??win12512unicode  ;; tailcall
        DATA
??get_bcfg_key_2:
        DC32     strMoney
        CFI EndBlock cfiBlock3
//   88 
//   89 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable0:
        DC32     CLBook

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??myList_Find??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??myList_Find
//   90 
//   91 
//   92 
//   93 //Функция поиска элемента в листе звонков

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??myList_Find
        ARM
//   94 int myList_Find(void *r0,void *r1)
//   95 {
//   96   if (((myList_elem*)r0)->line==((myList_elem*)r1)->line) return(0);
??myList_Find:
        LDRB     R0,[R0, #+24]
        LDRB     R1,[R1, #+24]
        CMP      R0,R1
        MOVEQ    R0,#+0
        BXEQ     LR
//   97   return(1);
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock5
//   98 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??myList_gprs_Find??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??myList_gprs_Find
//   99 
//  100 //Функция поиска элемента в листе жпрс

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??myList_gprs_Find
        ARM
//  101 int myList_gprs_Find(void *r0,void *r1)
//  102 {
//  103   if (((myList_gprs_elem*)r0)->ID==((myList_gprs_elem*)r1)->ID) return(0);
??myList_gprs_Find:
        LDR      R0,[R0, #+0]
        LDR      R1,[R1, #+0]
        CMP      R0,R1
        MOVEQ    R0,#+0
        BXEQ     LR
//  104   return(1);
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock7
//  105 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??myList_elem_Free??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??myList_elem_Free
//  106 
//  107 //Убийство моего элемента

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??myList_elem_Free
        ARM
//  108 void myList_elem_Free(void * r)
//  109 {
??myList_elem_Free:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOVS     R4,R0
//  110   myList_elem * r0=(myList_elem *)r;
//  111   if (r0)
        POPEQ    {R4,PC}
//  112   {
//  113     if (r0->PNUM)
        LDR      R0,[R4, #+0]
        CMP      R0,#+0
        BEQ      ??myList_elem_Free_1
//  114     {
//  115       delete(r0->PNUM);
        _BLF     `??operator delete`,`??operator delete??rA`
//  116     }
//  117     if (r0->Name)
??myList_elem_Free_1:
        LDR      R0,[R4, #+4]
        CMP      R0,#+0
        BEQ      ??myList_elem_Free_2
//  118     {
//  119       delete(r0->Name);
        _BLF     `??operator delete`,`??operator delete??rA`
//  120     }
//  121     if (r0->startdatetime)
??myList_elem_Free_2:
        LDR      R0,[R4, #+16]
        CMP      R0,#+0
        BEQ      ??myList_elem_Free_3
//  122     {
//  123       delete(r0->startdatetime);
        _BLF     `??operator delete`,`??operator delete??rA`
//  124     }
//  125     if (r0->begindatetime)
??myList_elem_Free_3:
        LDR      R0,[R4, #+20]
        CMP      R0,#+0
        BEQ      ??myList_elem_Free_4
//  126     {
//  127       delete(r0->begindatetime);
        _BLF     `??operator delete`,`??operator delete??rA`
//  128     }    
//  129     delete(r0);
??myList_elem_Free_4:
        MOV      R0,R4
        _BLF     `??operator delete`,`??operator delete??rA`
//  130   }
//  131 }
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??myList_gprs_elem_Free??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??myList_gprs_elem_Free
//  132 
//  133 
//  134 //Убийство моего элемента жпрс

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??myList_gprs_elem_Free
        ARM
//  135 void myList_gprs_elem_Free(void * r)
//  136 {
??myList_gprs_elem_Free:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//  137   myList_gprs_elem * r0=(myList_gprs_elem *)r;
//  138   delete(r0->SesEst);
        LDR      R0,[R4, #+4]
        _BLF     `??operator delete`,`??operator delete??rA`
//  139   delete(r0);
        MOV      R0,R4
        POP      {R4,LR}          ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        _BF      `??operator delete`,`??operator delete??rA`  ;; tailcall
        CFI EndBlock cfiBlock11
//  140 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??myList_elem_Filter??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??myList_elem_Filter
//  141 
//  142 //Фильтр для убийства элементов при убийстве листа (всех ненулевых)

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??myList_elem_Filter
        ARM
//  143 int myList_elem_Filter(void * r0)
//  144 {
//  145   if (r0) return(1);
??myList_elem_Filter:
        CMP      R0,#+0
        MOVNE    R0,#+1
//  146   return(0);
        BX       LR               ;; return
        CFI EndBlock cfiBlock13
//  147 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??TerminateElf??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??TerminateElf
//  148 
//  149 //Убийство эльфа

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??TerminateElf
        ARM
//  150 int TerminateElf(void * ,BOOK * book)
//  151 {
??TerminateElf:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R0,R1
//  152   FreeBook(book);
        SWI      +303
//  153   return(1);
        MOV      R0,#+1
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock15
//  154 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??ShowAuthorInfo??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ??ShowAuthorInfo
//  155 
//  156 //Показать информацию об авторе

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ??ShowAuthorInfo
        ARM
//  157 int ShowAuthorInfo(void *mess ,BOOK * book)
//  158 {
??ShowAuthorInfo:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  159   MSG * msg = (MSG*)mess;
//  160   MessageBox(0x6fFFFFFF,STR("Call Logger, v2.1\n\n(c) IronMaster"),0, 1 ,5000,msg->book);
        MOV      R2,#+255
        ORR      R2,R2,#0xFF00
        MOV      R4,R0
        LDR      R0,??ShowAuthorInfo_1  ;; `?<Constant L"\\x43\\x61\\x6c\\x6c\\x20\\x4c\\x6f\\x67\\`
        MOV      R1,#+0
        SWI      +349
        LDR      R1,[R4, #+0]
        MOV      R3,#+1
        PUSH     {R1}
        CFI CFA R13+12
        MOV      R2,#+0
        MOV      R1,#+136
        ORR      R1,R1,#0x1300
        PUSH     {R1}
        CFI CFA R13+16
        MOV      R1,R0
        MVN      R0,#-1879048192
        SWI      +599
//  161   return(1);
        MOV      R0,#+1
        POP      {R1,R2,R4,PC}    ;; return
        DATA
??ShowAuthorInfo_1:
        DC32     `?<Constant L"\\x43\\x61\\x6c\\x6c\\x20\\x4c\\x6f\\x67\\`
        CFI EndBlock cfiBlock17
//  162 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??onClockChange??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE ??onClockChange
//  163 
//  164 /*
//  165 //Тестируем черный список....
//  166 int BlackList(void * BlackStruct, BOOK *)
//  167 {
//  168   (MTCALL_EVENT_DATA*)BlackStruct;
//  169   return(0);
//  170 }
//  171 */
//  172 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function ??onClockChange
        ARM
//  173 int onClockChange(void * r0, BOOK *)
//  174 {
??onClockChange:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        SUB      SP,SP,#+984
        CFI CFA R13+1020
//  175   DATETIME * datetime=new(DATETIME);
        MOV      R0,#+8
        _BLF     `??operator new`,`??operator new??rA`
        STR      R0,[SP, #+12]
//  176   REQUEST_DATEANDTIME_GET(SYNC,datetime);
        MOV      R1,R0
        LDR      R0,??DataTable18  ;; SYNC
        LDR      R0,[R0, #+0]
        SWI      +366
        LDR      R0,??onClockChange_1  ;; CLBook + 12
        LDR      R1,[SP, #+12]
        LDR      R0,[R0, #+0]
        LDRB     R1,[R1, #+3]
        LDRB     R0,[R0, #+3]
        CMP      R0,R1
        BEQ      ??onClockChange_2
//  177   if (cur_date->date.day!=datetime->date.day)
//  178   {
//  179     FSTAT _fstat;
//  180     wchar_t fpath[200];
//  181     wchar_t folder[20];
//  182     wstrcpy(fpath,GetDir(DIR_OTHER | MEM_EXTERNAL));
//  183     wstrcat(fpath,L"/Call Logger/");
        LDR      R5,??DataTable2  ;; `?<Constant L"\\xd\\xa\\x54\\x6f\\x74\\x61\\x6c\\x20\\x6`
        MOV      R0,#+8
        SWI      +261
        MOV      R1,R0
        ADD      R0,SP,#+544
        SWI      +338
        ADD      R1,R5,#+432
        ADD      R0,SP,#+544
        SWI      +340
//  184     snwprintf(folder,20,L"%04d-%02d-%02d",cur_date->date.year,cur_date->date.mon,cur_date->date.day);
        LDR      R0,??onClockChange_1  ;; CLBook + 12
        ADD      R2,R5,#+460
        LDR      R0,[R0, #+0]
        LDRB     R1,[R0, #+3]
        PUSH     {R1}
        CFI CFA R13+1024
        LDRB     R1,[R0, #+2]
        PUSH     {R1}
        CFI CFA R13+1028
        LDRH     R3,[R0, #+0]
        ADD      R0,SP,#+952
        MOV      R1,#+20
        SWI      +277
//  185     wstrcat(fpath,folder);
        ADD      R1,SP,#+952
        ADD      R0,SP,#+552
        SWI      +340
        ADD      R2,SP,#+124
        ADD      R1,R5,#+492
        ADD      R0,SP,#+552
//  186     if (fstat(fpath,L"gprs.txt",&_fstat)>=0)
        SWI      +284
        CMP      R0,#+0
        ADD      SP,SP,#+8
        CFI CFA R13+1020
        BMI      ??onClockChange_3
//  187     {
//  188       char * buffer_gprs=new char[_fstat.fsize+2];
        LDR      R0,[SP, #+124]
        ADD      R0,R0,#+2
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R6,R0
//  189       memset(buffer_gprs,0,_fstat.fsize+2);
        LDR      R0,[SP, #+124]
        MOV      R1,#+0
        ADD      R2,R0,#+2
        MOV      R0,R6
        SWI      +274
//  190       int f=_fopen(fpath,L"gprs.txt",0x1,0x180,0);
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+1024
        MOV      R3,#+384
        MOV      R2,#+1
        ADD      R1,R5,#+492
        ADD      R0,SP,#+548
        SWI      +278
//  191       fread(f,buffer_gprs,_fstat.fsize);
        LDR      R2,[SP, #+128]
        MOV      R4,R0
        MOV      R1,R6
        SWI      +280
//  192       fclose(f);
        MOV      R0,R4
        SWI      +279
//  193       wchar_t buffer_str[200];
//  194       if (!wstrwstr((wchar_t*)buffer_gprs,L"Total cost"))
        MOV      R0,#+4
        ORR      R0,R0,#0x400
        ADD      R1,R0,R5
        MOV      R0,R6
        SWI      +670
        CMP      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+1020
        BNE      ??onClockChange_4
//  195       {
//  196         int rub=0;
        MOV      R4,#+0
//  197         int kop=0;
        MOV      R7,#+0
//  198         int hex=0;
        MOV      R1,R4
        STR      R1,[SP, #+0]
//  199         int len=0;
//  200         wchar_t temp_buf[50];
//  201         wchar_t * pos=(wchar_t *)buffer_gprs;
        MOV      R8,R6
        B        ??onClockChange_5
//  202         while (pos=wstrwstr(pos,L"cost -"))
//  203         {
//  204           pos=pos+7;
//  205           len=(wstrchr(pos,'.')-pos);
??onClockChange_6:
        MOV      R1,#+46
        ADD      R8,R0,#+14
        MOV      R0,R8
        SWI      +672
        LSR      R0,R0,#+1
        SUB      R11,R0,R8, LSR #+1
//  206           wstrncpy(temp_buf,pos,len);
        MOV      R2,R11
        MOV      R1,R8
        ADD      R0,SP,#+16
        SWI      +339
//  207           wtoi(temp_buf,len,&hex);
        MOV      R2,SP
        MOV      R1,R11
        ADD      R0,SP,#+16
        SWI      +667
//  208           rub=rub+hex;
        LDR      R0,[SP, #+0]
//  209           hex=0;
        MOV      R1,#+0
        ADD      R4,R0,R4
        STR      R1,[SP, #+0]
//  210           pos=wstrchr(pos,'.')+1;
        MOV      R1,#+46
        MOV      R0,R8
        SWI      +672
        ADD      R8,R0,#+2
//  211           wstrncpy(temp_buf,pos,2);
        MOV      R2,#+2
        MOV      R1,R8
        ADD      R0,SP,#+16
        SWI      +339
//  212           wtoi(temp_buf,2,&hex);
        MOV      R2,SP
        MOV      R1,#+2
        ADD      R0,SP,#+16
        SWI      +667
//  213           kop=kop+hex;
        LDR      R0,[SP, #+0]
//  214           hex=0;
        MOV      R1,#+0
        ADD      R7,R0,R7
        STR      R1,[SP, #+0]
//  215         }
??onClockChange_5:
        ADD      R1,R5,#+512
        MOV      R0,R8
        SWI      +670
        MOVS     R8,R0
        BNE      ??onClockChange_6
//  216         rub=rub+kop/100;
        LDR      R1,??DataTable28  ;; 0x51eb851f
//  217         kop=kop%100;
//  218         
//  219         pos=(wchar_t *)buffer_gprs;
//  220         int traf_whole=0;
//  221         int traf_fract=0;
//  222         hex=0;
//  223         len=0;        
//  224         if (TrafDiv)
        LDR      R0,??DataTable30  ;; TrafDiv
        SMULL    R2,R3,R1,R7
        MOV      R9,#+0
        ASR      R3,R3,#+5
        ADD      R1,R3,R7, LSR #+31
        ADD      R1,R1,R4
        STR      R1,[SP, #+4]
        LDR      R1,??DataTable28  ;; 0x51eb851f
        MOV      R4,R6
        SMULL    R2,R3,R7,R1
        MOV      R2,#+100
        ASR      R3,R3,#+5
        ADD      R3,R3,R7, LSR #+31
        MUL      R3,R2,R3
        SUB      R1,R7,R3
        STR      R1,[SP, #+8]
        MOV      R7,#+0
        MOV      R1,R7
        STR      R1,[SP, #+0]
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??onClockChange_7
//  225         {
//  226           int traf_whole_sent=0;
//  227           int traf_fract_sent=0;
//  228           int traf_whole_rec=0;
//  229           int traf_fract_rec=0;          
        LDR      R0,??DataTable31  ;; TrafKb
        MOV      R10,#+0
        LDR      R0,[R0, #+0]
        MOV      R8,R1
        CMP      R0,#+0
        BNE      ??onClockChange_8
        B        ??onClockChange_9
//  230           if (TrafKb)
//  231           {
//  232             while (pos=wstrwstr(pos,L"sent -"))
//  233             {
//  234               pos=pos+7;
//  235               len=(wstrchr(pos,'.')-pos);
??onClockChange_10:
        MOV      R1,#+46
        ADD      R4,R0,#+14
        MOV      R0,R4
        SWI      +672
        LSR      R0,R0,#+1
        SUB      R11,R0,R4, LSR #+1
//  236               wstrncpy(temp_buf,pos,len);
        MOV      R2,R11
        MOV      R1,R4
        ADD      R0,SP,#+16
        SWI      +339
//  237               wtoi(temp_buf,len,&hex);
        MOV      R2,SP
        MOV      R1,R11
        ADD      R0,SP,#+16
        SWI      +667
//  238               traf_whole_sent=traf_whole_sent+hex;
        LDR      R0,[SP, #+0]
//  239               hex=0;
        MOV      R1,#+0
        ADD      R7,R0,R7
        STR      R1,[SP, #+0]
//  240               pos=wstrchr(pos,'.')+1;
        MOV      R1,#+46
        MOV      R0,R4
        SWI      +672
        ADD      R4,R0,#+2
//  241               wstrncpy(temp_buf,pos,2);
        MOV      R2,#+2
        MOV      R1,R4
        ADD      R0,SP,#+16
        SWI      +339
//  242               wtoi(temp_buf,2,&hex);
        MOV      R2,SP
        MOV      R1,#+2
        ADD      R0,SP,#+16
        SWI      +667
//  243               traf_fract_sent=traf_fract_sent+hex;
        LDR      R0,[SP, #+0]
//  244               hex=0;
        MOV      R1,R8
        ADD      R10,R0,R10
        STR      R1,[SP, #+0]
//  245             }
??onClockChange_8:
        ADD      R1,R5,#+528
        MOV      R0,R4
        SWI      +670
        MOVS     R4,R0
        BNE      ??onClockChange_10
//  246             traf_whole_sent=traf_whole_sent+traf_fract_sent/100;
        LDR      R0,??DataTable28  ;; 0x51eb851f
//  247             traf_fract_sent=traf_fract_sent%100;
//  248             pos=(wchar_t *)buffer_gprs;
        MOV      R4,R6
        SMULL    R1,R2,R0,R10
        ASR      R2,R2,#+5
        ADD      R0,R2,R10, LSR #+31
        ADD      R7,R0,R7
        LDR      R0,??DataTable28  ;; 0x51eb851f
        SMULL    R1,R2,R10,R0
        MOV      R1,#+100
        ASR      R2,R2,#+5
        ADD      R2,R2,R10, LSR #+31
        MUL      R2,R1,R2
        SUB      R10,R10,R2
        B        ??onClockChange_11
//  249             while (pos=wstrwstr(pos,L"received -"))
//  250             {
//  251               pos=pos+11;
//  252               len=(wstrchr(pos,'.')-pos);
??onClockChange_12:
        MOV      R1,#+46
        ADD      R4,R0,#+22
        MOV      R0,R4
        SWI      +672
        LSR      R0,R0,#+1
        SUB      R11,R0,R4, LSR #+1
//  253               wstrncpy(temp_buf,pos,len);
        MOV      R2,R11
        MOV      R1,R4
        ADD      R0,SP,#+16
        SWI      +339
//  254               wtoi(temp_buf,len,&hex);
        MOV      R2,SP
        MOV      R1,R11
        ADD      R0,SP,#+16
        SWI      +667
//  255               traf_whole_rec=traf_whole_rec+hex;
        LDR      R0,[SP, #+0]
//  256               hex=0;
        MOV      R1,#+0
        ADD      R8,R0,R8
        STR      R1,[SP, #+0]
//  257               pos=wstrchr(pos,'.')+1;
        MOV      R1,#+46
        MOV      R0,R4
        SWI      +672
        ADD      R4,R0,#+2
//  258               wstrncpy(temp_buf,pos,2);
        MOV      R2,#+2
        MOV      R1,R4
        ADD      R0,SP,#+16
        SWI      +339
//  259               wtoi(temp_buf,2,&hex);
        MOV      R2,SP
        MOV      R1,#+2
        ADD      R0,SP,#+16
        SWI      +667
//  260               traf_fract_rec=traf_fract_rec+hex;
        LDR      R0,[SP, #+0]
//  261               hex=0;
        MOV      R1,#+0
        ADD      R9,R0,R9
        STR      R1,[SP, #+0]
//  262             }
??onClockChange_11:
        ADD      R1,R5,#+544
        MOV      R0,R4
        SWI      +670
        MOVS     R4,R0
        BNE      ??onClockChange_12
//  263             traf_whole_rec=traf_whole_rec+traf_fract_rec/100;
//  264             traf_fract_rec=traf_fract_rec%100;
//  265             snwprintf(buffer_str,400,L"\r\nTotal cost - %d.%02d %ls\r\nTotal sent - %d.%02d Kb\r\nTotal received - %d.%02d Kb\r\n\r\n",rub,kop,Money,traf_whole_sent,traf_fract_sent,traf_whole_rec,traf_fract_rec);
        LDR      R0,??DataTable28  ;; 0x51eb851f
        SMULL    R1,R2,R9,R0
        MOV      R1,#+100
        ASR      R2,R2,#+5
        ADD      R2,R2,R9, LSR #+31
        MUL      R2,R1,R2
        SUB      R0,R9,R2
        PUSH     {R0}
        CFI CFA R13+1024
        LDR      R0,??DataTable28  ;; 0x51eb851f
        SMULL    R1,R2,R0,R9
        MOV      R1,#+400
        ASR      R2,R2,#+5
        ADD      R0,R2,R9, LSR #+31
        ADD      R0,R0,R8
        PUSH     {R0}
        CFI CFA R13+1028
        LDR      R0,??DataTable29  ;; CLBook + 16
        PUSH     {R10}
        CFI CFA R13+1032
        PUSH     {R7}
        CFI CFA R13+1036
        LDR      R0,[R0, #+0]
        ADD      R2,R5,#+568
        PUSH     {R0}
        CFI CFA R13+1040
        LDR      R0,[SP, #+28]
        PUSH     {R0}
        CFI CFA R13+1044
        LDR      R3,[SP, #+28]
        ADD      R0,SP,#+168
        SWI      +277
        ADD      SP,SP,#+24
        CFI CFA R13+1020
        B        ??onClockChange_13
//  266           }
//  267           else
//  268           {
//  269             while (pos=wstrwstr(pos,L"sent -"))
//  270             {
//  271               pos=pos+7;
//  272               len=(wstrchr(pos,' ')-pos);
??onClockChange_14:
        MOV      R1,#+32
        ADD      R4,R0,#+14
        MOV      R0,R4
        SWI      +672
        LSR      R0,R0,#+1
        SUB      R11,R0,R4, LSR #+1
//  273               wstrncpy(temp_buf,pos,len);
        MOV      R2,R11
        MOV      R1,R4
        ADD      R0,SP,#+16
        SWI      +339
//  274               wtoi(temp_buf,len,&hex);
        MOV      R2,SP
        MOV      R1,R11
        ADD      R0,SP,#+16
        SWI      +667
//  275               traf_whole_sent=traf_whole_sent+hex;
        LDR      R0,[SP, #+0]
//  276               hex=0;
        MOV      R1,#+0
        ADD      R7,R0,R7
        STR      R1,[SP, #+0]
//  277             }
??onClockChange_9:
        ADD      R1,R5,#+528
        MOV      R0,R4
        SWI      +670
        MOVS     R4,R0
        BNE      ??onClockChange_14
//  278             pos=(wchar_t *)buffer_gprs;
        MOV      R4,R6
        B        ??onClockChange_15
//  279             while (pos=wstrwstr(pos,L"received -"))
//  280             {
//  281               pos=pos+11;
//  282               len=(wstrchr(pos,' ')-pos);
??onClockChange_16:
        MOV      R1,#+32
        ADD      R4,R0,#+22
        MOV      R0,R4
        SWI      +672
        LSR      R0,R0,#+1
        SUB      R11,R0,R4, LSR #+1
//  283               wstrncpy(temp_buf,pos,len);
        MOV      R2,R11
        MOV      R1,R4
        ADD      R0,SP,#+16
        SWI      +339
//  284               wtoi(temp_buf,len,&hex);
        MOV      R2,SP
        MOV      R1,R11
        ADD      R0,SP,#+16
        SWI      +667
//  285               traf_whole_rec=traf_whole_rec+hex;
        LDR      R0,[SP, #+0]
//  286               hex=0;
        MOV      R1,#+0
        ADD      R8,R0,R8
        STR      R1,[SP, #+0]
//  287             }
??onClockChange_15:
        ADD      R1,R5,#+544
        MOV      R0,R4
        SWI      +670
        MOVS     R4,R0
        BNE      ??onClockChange_16
//  288             snwprintf(buffer_str,400,L"\r\nTotal cost - %d.%02d %ls\r\nTotal sent - %d b\r\nTotal received - %d b\r\n\r\n",rub,kop,Money,traf_whole_sent,traf_whole_rec);
        LDR      R0,??DataTable29  ;; CLBook + 16
        PUSH     {R8}
        CFI CFA R13+1024
        PUSH     {R7}
        CFI CFA R13+1028
        LDR      R0,[R0, #+0]
        ADD      R2,R5,#+740
??onClockChange_17:
        PUSH     {R0}
        CFI CFA R13+1032
        LDR      R0,[SP, #+20]
        PUSH     {R0}
        CFI CFA R13+1036
        LDR      R3,[SP, #+20]
        MOV      R1,#+400
        ADD      R0,SP,#+160
        SWI      +277
        ADD      SP,SP,#+16
        CFI CFA R13+1020
        B        ??onClockChange_13
//  289           }
//  290         }
//  291         else
//  292         {
//  293           if (TrafKb)
??onClockChange_7:
        LDR      R0,??DataTable31  ;; TrafKb
        MOV      R8,#+888
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BNE      ??onClockChange_18
        B        ??onClockChange_19
//  294           {
//  295             while (pos=wstrwstr(pos,L"traffic -"))
//  296             {
//  297               pos=pos+10;
//  298               len=(wstrchr(pos,'.')-pos);
??onClockChange_20:
        MOV      R1,#+46
        ADD      R4,R0,#+20
        MOV      R0,R4
        SWI      +672
        LSR      R0,R0,#+1
        SUB      R11,R0,R4, LSR #+1
//  299               wstrncpy(temp_buf,pos,len);
        MOV      R2,R11
        MOV      R1,R4
        ADD      R0,SP,#+16
        SWI      +339
//  300               wtoi(temp_buf,len,&hex);
        MOV      R2,SP
        MOV      R1,R11
        ADD      R0,SP,#+16
        SWI      +667
//  301               traf_whole=traf_whole+hex;
        LDR      R0,[SP, #+0]
//  302               hex=0;
        MOV      R1,#+0
        ADD      R7,R0,R7
        STR      R1,[SP, #+0]
//  303               pos=wstrchr(pos,'.')+1;
        MOV      R1,#+46
        MOV      R0,R4
        SWI      +672
        ADD      R4,R0,#+2
//  304               wstrncpy(temp_buf,pos,2);
        MOV      R2,#+2
        MOV      R1,R4
        ADD      R0,SP,#+16
        SWI      +339
//  305               wtoi(temp_buf,2,&hex);
        MOV      R2,SP
        MOV      R1,#+2
        ADD      R0,SP,#+16
        SWI      +667
//  306               traf_fract=traf_fract+hex;
        LDR      R0,[SP, #+0]
//  307               hex=0;
        MOV      R1,#+0
        ADD      R9,R0,R9
        STR      R1,[SP, #+0]
//  308             }
??onClockChange_18:
        ADD      R1,R8,R5
        MOV      R0,R4
        SWI      +670
        MOVS     R4,R0
        BNE      ??onClockChange_20
//  309             traf_whole=traf_whole+traf_fract/100;
//  310             traf_fract=traf_fract%100;
//  311             snwprintf(buffer_str,400,L"\r\nTotal cost - %d.%02d %ls\r\nTotal traffic - %d.%02d Kb\r\n\r\n",rub,kop,Money,traf_whole,traf_fract);
        LDR      R0,??DataTable28  ;; 0x51eb851f
        SMULL    R1,R2,R9,R0
        MOV      R1,#+100
        ASR      R2,R2,#+5
        ADD      R2,R2,R9, LSR #+31
        MUL      R2,R1,R2
        SUB      R0,R9,R2
        PUSH     {R0}
        CFI CFA R13+1024
        LDR      R0,??DataTable28  ;; 0x51eb851f
        SMULL    R1,R2,R0,R9
        ASR      R2,R2,#+5
        ADD      R0,R2,R9, LSR #+31
        ADD      R0,R0,R7
        PUSH     {R0}
        CFI CFA R13+1028
        LDR      R0,??DataTable29  ;; CLBook + 16
        ADD      R2,R5,#+908
        LDR      R0,[R0, #+0]
        B        ??onClockChange_17
        CFI CFA R13+1020
//  312           }
//  313           else
//  314           {
//  315             while (pos=wstrwstr(pos,L"traffic -"))
//  316             {
//  317               pos=pos+10;
//  318               len=(wstrchr(pos,' ')-pos);
??onClockChange_21:
        MOV      R1,#+32
        ADD      R4,R0,#+20
        MOV      R0,R4
        SWI      +672
        LSR      R0,R0,#+1
        SUB      R11,R0,R4, LSR #+1
//  319               wstrncpy(temp_buf,pos,len);
        MOV      R2,R11
        MOV      R1,R4
        ADD      R0,SP,#+16
        SWI      +339
//  320               wtoi(temp_buf,len,&hex);
        MOV      R2,SP
        MOV      R1,R11
        ADD      R0,SP,#+16
        SWI      +667
//  321               traf_whole=traf_whole+hex;
        LDR      R0,[SP, #+0]
//  322               hex=0;
        MOV      R1,#+0
        ADD      R7,R0,R7
        STR      R1,[SP, #+0]
//  323             }
??onClockChange_19:
        ADD      R1,R8,R5
        MOV      R0,R4
        SWI      +670
        MOVS     R4,R0
        BNE      ??onClockChange_21
//  324             snwprintf(buffer_str,400,L"\r\nTotal cost - %d.%02d %ls\r\nTotal traffic - %d b\r\n\r\n",rub,kop,Money,traf_whole);
        LDR      R0,??DataTable29  ;; CLBook + 16
        PUSH     {R7}
        CFI CFA R13+1024
        LDR      R0,[R0, #+0]
        MOV      R2,R5
        PUSH     {R0}
        CFI CFA R13+1028
        LDR      R0,[SP, #+16]
        MOV      R1,#+400
        PUSH     {R0}
        CFI CFA R13+1032
        LDR      R3,[SP, #+16]
        ADD      R0,SP,#+156
        SWI      +277
        ADD      SP,SP,#+12
        CFI CFA R13+1020
//  325           }
//  326         }
//  327         f=_fopen(fpath,L"gprs.txt",0x108,0x180,0);
??onClockChange_13:
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+1024
        MOV      R3,#+384
        MOV      R2,#+264
        ADD      R1,R5,#+492
        ADD      R0,SP,#+548
        SWI      +278
        MOV      R4,R0
//  328         fwrite(f,buffer_str,wstrlen(buffer_str)*2);
        ADD      R0,SP,#+148
        SWI      +343
        LSL      R2,R0,#+1
        ADD      R1,SP,#+148
        MOV      R0,R4
        SWI      +281
//  329         fclose(f);
        MOV      R0,R4
        SWI      +279
        ADD      SP,SP,#+4
        CFI CFA R13+1020
//  330       }
//  331       delete(buffer_gprs);
??onClockChange_4:
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
//  332     }
//  333     memcpy(cur_date,datetime,7);
??onClockChange_3:
        LDR      R0,??onClockChange_1  ;; CLBook + 12
        LDR      R1,[SP, #+12]
        LDR      R0,[R0, #+0]
        MOV      R2,#+7
        SWI      +275
//  334   }
//  335   delete(datetime);
??onClockChange_2:
        LDR      R0,[SP, #+12]
        _BLF     `??operator delete`,`??operator delete??rA`
//  336   return(0);
        MOV      R0,#+0
        ADD      SP,SP,#+984
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        DATA
??onClockChange_1:
        DC32     CLBook + 12
        CFI EndBlock cfiBlock19
//  337 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable2:
        DC32     `?<Constant L"\\xd\\xa\\x54\\x6f\\x74\\x61\\x6c\\x20\\x6`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??onSessionEstablished??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE ??onSessionEstablished
//  338 
//  339 //Ловим создание содинения

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function ??onSessionEstablished
        ARM
//  340 int onSessionEstablished(void * r0, BOOK *)
//  341 {
??onSessionEstablished:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOVS     R4,R0
//  342   if (r0)
        BEQ      ??onSessionEstablished_1
//  343   {
//  344     myList_gprs_elem * elem_gprs=new(myList_gprs_elem);
        MOV      R0,#+8
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R5,R0
//  345     elem_gprs->ID=((ses_est*)r0)->unkID;
        LDR      R0,[R4, #+44]
        STR      R0,[R5, #+0]
//  346     elem_gprs->SesEst=new(DATETIME);
        MOV      R0,#+8
        _BLF     `??operator new`,`??operator new??rA`
        STR      R0,[R5, #+4]
//  347     REQUEST_DATEANDTIME_GET(SYNC,elem_gprs->SesEst);
        MOV      R1,R0
        LDR      R0,??DataTable18  ;; SYNC
        LDR      R0,[R0, #+0]
        SWI      +366
//  348     ListElement_AddtoTop(myList_gprs,elem_gprs);
        LDR      R0,??DataTable22  ;; CLBook + 8
        MOV      R1,R5
        LDR      R0,[R0, #+0]
        SWI      +363
//  349   }
//  350   return(0);
??onSessionEstablished_1:
        MOV      R0,#+0
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock21
//  351 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable18:
        DC32     SYNC

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??onSessionTerminated??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE ??onSessionTerminated
//  352 
//  353 //Ловим окончание содинения

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function ??onSessionTerminated
        ARM
//  354 int onSessionTerminated(void * r0, BOOK *)
//  355 {
??onSessionTerminated:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        SUB      SP,SP,#+284
        CFI CFA R13+320
        SUB      SP,SP,#+1024
        CFI CFA R13+1344
        MOVS     R4,R0
//  356   if (r0)
        BEQ      ??onSessionTerminated_1
//  357   {
//  358     int f;
//  359     wchar_t fpath_gprs[200];
//  360     wchar_t folder_gprs[20];
//  361     wchar_t buffer_gprs_ptr[400];
//  362     wchar_t * buffer_gprs=buffer_gprs_ptr;
        ADD      R5,SP,#+68
//  363     GPRS_SESSION_INFO * buf_ses=new(GPRS_SESSION_INFO);
        MOV      R0,#+12
        _BLF     `??operator new`,`??operator new??rA`
        STR      R0,[SP, #+8]
//  364     GPRS_GetLastSessionInfo(0,buf_ses);
        MOV      R1,R0
        MOV      R0,#+0
        SWI      +665
//  365     
//  366     myList_gprs_elem * temp_elem_gprs=new(myList_gprs_elem);
        MOV      R0,#+8
        _BLF     `??operator new`,`??operator new??rA`
//  367     temp_elem_gprs->ID=((ses_term*)r0)->unkID;
        LDR      R2,??onSessionTerminated_2  ;; ??myList_gprs_Find
        STR      R0,[SP, #+28]
        LDR      R1,[R4, #+52]
        STR      R1,[R0, #+0]
        LDR      R0,??DataTable22  ;; CLBook + 8
        LDR      R1,[SP, #+28]
        LDR      R0,[R0, #+0]
//  368     int pos=ListElement_Find(myList_gprs,temp_elem_gprs,myList_gprs_Find);
        SWI      +428
//  369     if (pos!=0xFFFF)
        MOV      R1,#+255
        ORR      R1,R1,#0xFF00
        CMP      R0,R1
        BEQ      ??onSessionTerminated_3
//  370     {
//  371       myList_gprs_elem * elem_gprs=(myList_gprs_elem*)ListElement_Remove(myList_gprs,pos);
//  372       wstrcpy(fpath_gprs,GetDir(DIR_OTHER | MEM_EXTERNAL));
//  373       wstrcat(fpath_gprs,L"/Call Logger/");
        LDR      R4,??DataTable21  ;; `?<Constant L"\\xd\\xa\\x54\\x6f\\x74\\x61\\x6c\\x20\\x6`
        MOV      R1,R0
        LDR      R0,??DataTable22  ;; CLBook + 8
        LDR      R0,[R0, #+0]
        SWI      +377
        STR      R0,[SP, #+12]
        MOV      R0,#+8
        SWI      +261
        MOV      R1,R0
        ADD      R0,SP,#+868
        SWI      +338
        ADD      R1,R4,#+432
        ADD      R0,SP,#+868
        SWI      +340
//  374       snwprintf(folder_gprs,20,L"%04d-%02d-%02d",elem_gprs->SesEst->date.year,elem_gprs->SesEst->date.mon,elem_gprs->SesEst->date.day);
        LDR      R0,[SP, #+12]
        ADD      R2,R4,#+460
        LDR      R0,[R0, #+4]
        LDRB     R1,[R0, #+3]
        PUSH     {R1}
        CFI CFA R13+1348
        LDRB     R1,[R0, #+2]
        PUSH     {R1}
        CFI CFA R13+1352
        LDRH     R3,[R0, #+0]
        ADD      R0,SP,#+252
        ADD      R0,R0,#+1024
        MOV      R1,#+20
        SWI      +277
//  375       wstrcat(fpath_gprs,folder_gprs);
        ADD      R1,SP,#+252
        ADD      R1,R1,#+1024
        ADD      R0,SP,#+876
        SWI      +340
        MOV      R2,#+0
        ADD      R1,R4,#+492
        ADD      R0,SP,#+876
//  376       if (fstat(fpath_gprs,L"gprs.txt",0)<0)
        SWI      +284
        CMP      R0,#+0
        ADD      SP,SP,#+8
        CFI CFA R13+1344
        BPL      ??onSessionTerminated_4
//  377       {
//  378         buffer_gprs[0]=0xFEFF;
        MOV      R1,#+255
        ORR      R1,R1,#0xFE00
        STRH     R1,[SP, #+68]
//  379         buffer_gprs=buffer_gprs+1;
        ADD      R5,SP,#+70
//  380       }
//  381       int traf=buf_ses->SentBytes+buf_ses->RcvBytes;
??onSessionTerminated_4:
        LDR      R0,[SP, #+8]
        LDR      R1,[SP, #+8]
        LDR      R0,[R0, #+4]
        LDR      R1,[R1, #+8]
        ADD      R0,R1,R0
//  382       if (traf/1024<=TrafRound)
        ASR      R1,R0,#+9
        ADD      R0,R0,R1, LSR #+22
        ASR      R9,R0,#+10
        LDR      R0,??onSessionTerminated_2+0x4  ;; TrafRound
        LDR      R2,[R0, #+0]
        CMP      R2,R9
//  383       {
//  384         traf=TrafRound;
        MOVCS    R9,R2
        BCS      ??onSessionTerminated_5
//  385       }
//  386       else
//  387       {
//  388         if (traf/1024%TrafRound>0)
        MOV      R0,R9
        MOV      R1,R2
        _BLF     ??divu32_a,??rA??divu32_a
        CMP      R0,#+0
        BEQ      ??onSessionTerminated_5
//  389         {
//  390           traf=traf/1024/TrafRound*TrafRound+TrafRound;
        MOV      R0,R9
        MOV      R1,R2
        _BLF     ??divu32_a,??rA??divu32_a
        MLA      R9,R2,R1,R2
//  391         }
//  392         else
//  393         {
//  394           traf=traf/1024;
//  395         }
//  396       }
//  397       int traf_cost;
//  398       int cost_rub;
//  399       int cost_kop1;
//  400       int cost_kop2;
//  401       if (!TimeDay)
??onSessionTerminated_5:
        LDR      R0,??onSessionTerminated_2+0x8  ;; TimeDay
        LDR      R1,[R0, #+0]
        CMP      R1,#+0
        BNE      ??onSessionTerminated_6
//  402       {
//  403         traf_cost=traf*TrafCost/1024;
        LDR      R0,??onSessionTerminated_2+0xC  ;; TrafCost
//  404         if (traf*TrafCost%1024*10/1024>=5) traf_cost=traf_cost+1;
        MOV      R2,#+10
        LDR      R0,[R0, #+0]
        MUL      R1,R0,R9
        LSR      R0,R1,#+10
        LSL      R1,R1,#+22
        LSR      R1,R1,#+22
        MUL      R1,R2,R1
        LSR      R1,R1,#+10
        CMP      R1,#+5
//  405         cost_rub=traf_cost/100;
??onSessionTerminated_7:
        LDR      R1,??DataTable28  ;; 0x51eb851f
        ADDCS    R0,R0,#+1
        SMULL    R2,R3,R1,R0
        ASR      R3,R3,#+5
        ADD      R6,R3,R0, LSR #+31
//  406         cost_kop1=traf_cost%100*10/100;
        SMULL    R2,R3,R0,R1
        MOV      R2,#+100
        ASR      R3,R3,#+5
        ADD      R3,R3,R0, LSR #+31
        MUL      R3,R2,R3
        MOV      R1,#+10
        SUB      R0,R0,R3
        MUL      R0,R1,R0
        LDR      R1,??DataTable28  ;; 0x51eb851f
        SMULL    R2,R3,R1,R0
        ASR      R3,R3,#+5
        ADD      R7,R3,R0, LSR #+31
//  407         cost_kop2=traf_cost%100*10%100*10/100;
        SMULL    R2,R3,R0,R1
        MOV      R2,#+100
        ASR      R3,R3,#+5
        ADD      R3,R3,R0, LSR #+31
        MUL      R3,R2,R3
        MOV      R1,#+10
        SUB      R0,R0,R3
        MUL      R0,R1,R0
        LDR      R1,??DataTable28  ;; 0x51eb851f
        SMULL    R2,R3,R1,R0
//  408       }
//  409       else
//  410       {
//  411         int cur_time;
//  412         if (!elem_gprs->SesEst->time.hour)
//  413         {
//  414           cur_time=24;
//  415         }
//  416         else
//  417         {
//  418           cur_time=elem_gprs->SesEst->time.hour;
//  419         }
//  420         if (TimeDay<TimeNight)
//  421         {          
//  422           if ((cur_time>=TimeDay)&&(cur_time<TimeNight))
//  423           {
//  424             traf_cost=traf*TrafCostDay/1024;
//  425             if (traf*TrafCostDay%1024*10/1024>=5) traf_cost=traf_cost+1;
//  426             cost_rub=traf_cost/100;
//  427             cost_kop1=traf_cost%100*10/100;
//  428             cost_kop2=traf_cost%100*10%100*10/100;
//  429           }
//  430           else
//  431           {
//  432             traf_cost=traf*TrafCostNight/1024;
//  433             if (traf*TrafCostNight%1024*10/1024>=5) traf_cost=traf_cost+1;
//  434             cost_rub=traf_cost/100;
//  435             cost_kop1=traf_cost%100*10/100;
//  436             cost_kop2=traf_cost%100*10%100*10/100;
//  437           }
//  438         }
//  439         else
//  440         {
//  441           if (TimeNight<TimeDay)
//  442           {
//  443             if ((cur_time>=TimeNight)&&(cur_time<TimeDay))
//  444             {
//  445               traf_cost=traf*TrafCostNight/1024;
//  446               if (traf*TrafCostNight%1024*10/1024>=5) traf_cost=traf_cost+1;
//  447               cost_rub=traf_cost/100;
//  448               cost_kop1=traf_cost%100*10/100;
//  449               cost_kop2=traf_cost%100*10%100*10/100;
//  450             }
//  451             else
//  452             {
//  453               traf_cost=traf*TrafCostDay/1024;
//  454               if (traf*TrafCostDay%1024*10/1024>=5) traf_cost=traf_cost+1;
//  455               cost_rub=traf_cost/100;
//  456               cost_kop1=traf_cost%100*10/100;
//  457               cost_kop2=traf_cost%100*10%100*10/100;
//  458             }
//  459           }
//  460           else
//  461           {
//  462             if ((cur_time>=TimeDay)&&(cur_time<TimeNight))
//  463             {
//  464               traf_cost=traf*TrafCostDay/1024;
//  465               if (traf*TrafCostDay%1024*10/1024>=5) traf_cost=traf_cost+1;
//  466               cost_rub=traf_cost/100;
//  467               cost_kop1=traf_cost%100*10/100;
//  468               cost_kop2=traf_cost%100*10%100*10/100;
//  469 
//  470             }
//  471             else
//  472             {
//  473               traf_cost=traf*TrafCostNight/1024;
//  474               if (traf*TrafCostNight%1024*10/1024>=5) traf_cost=traf_cost+1;
//  475               cost_rub=traf_cost/100;
//  476               cost_kop1=traf_cost%100*10/100;
//  477               cost_kop2=traf_cost%100*10%100*10/100;
//  478             }
//  479           }
//  480         }
//  481       }
//  482       if ((Hol1)||(Hol2))
        LDR      R1,??onSessionTerminated_2+0x10  ;; Hol2
        ASR      R3,R3,#+5
        LDR      R1,[R1, #+0]
        ADD      R8,R3,R0, LSR #+31
        STR      R1,[SP, #+0]
        LDR      R1,??onSessionTerminated_2+0x14  ;; Hol1
        LDR      R1,[R1, #+0]
        STR      R1,[SP, #+4]
        CMP      R1,#+0
        LDREQ    R0,[SP, #+0]
        CMPEQ    R0,#+0
        BEQ      ??onSessionTerminated_8
//  483       {
//  484         int cur_day;
//  485         char weekday;
//  486         CALE_SET * baseday=new(CALE_SET);
        MOV      R0,#+4
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R10,R0
//  487         DATE_GetWeekDay((DATE*)elem_gprs->SesEst,&weekday);
        LDR      R0,[SP, #+12]
        ADD      R1,SP,#+16
        LDR      R0,[R0, #+4]
        SWI      +668
//  488         Cale_GetSettings(3,baseday);
        MOV      R1,R10
        MOV      R0,#+3
        SWI      +669
//  489         if (weekday>=baseday->cale_base)
        LDRB     R0,[R10, #+1]
        LDRB     R1,[SP, #+16]
        CMP      R1,R0
        ADDCC    R1,R1,#+7
//  490         {
//  491           cur_day=weekday-baseday->cale_base+1;
        B        ??onSessionTerminated_9
??onSessionTerminated_6:
        LDR      R0,[SP, #+12]
        MOV      R6,#+10
        LDR      R0,[R0, #+4]
        MOV      R8,#+10
        LDRB     R2,[R0, #+4]
        LDR      R0,??onSessionTerminated_2+0x18  ;; TrafCostDay
        CMP      R2,#+0
        LDR      R3,[R0, #+0]
        MOVEQ    R2,#+24
        MUL      R0,R3,R9
        LSL      R3,R0,#+22
        LSR      R3,R3,#+22
        MUL      R3,R6,R3
        LDR      R6,??onSessionTerminated_2+0x1C  ;; TrafCostNight
        LSR      R3,R3,#+10
        LDR      R7,[R6, #+0]
        LSR      R0,R0,#+10
        MUL      R6,R7,R9
        LSL      R7,R6,#+22
        LSR      R7,R7,#+22
        MUL      R7,R8,R7
        LDR      R8,??onSessionTerminated_2+0x20  ;; TimeNight
        LSR      R7,R7,#+10
        LDR      R8,[R8, #+0]
        LSR      R6,R6,#+10
        CMP      R1,R8
        BCS      ??onSessionTerminated_10
        CMP      R2,R1
        BCC      ??onSessionTerminated_11
        CMP      R2,R8
        BCS      ??onSessionTerminated_11
??onSessionTerminated_12:
        CMP      R3,#+5
        B        ??onSessionTerminated_7
??onSessionTerminated_11:
        MOV      R0,R6
        CMP      R7,#+5
        B        ??onSessionTerminated_7
??onSessionTerminated_10:
        CMP      R8,R1
        BCS      ??onSessionTerminated_13
        CMP      R2,R8
        BCC      ??onSessionTerminated_12
        CMP      R2,R1
        BCS      ??onSessionTerminated_12
        B        ??onSessionTerminated_11
??onSessionTerminated_13:
        CMP      R2,R1
        BCC      ??onSessionTerminated_11
        CMP      R2,R8
        BCS      ??onSessionTerminated_11
        CMP      R3,#+5
        B        ??onSessionTerminated_7
??onSessionTerminated_9:
        SUB      R0,R1,R0
        ADD      R11,R0,#+1
//  492         }
//  493         else
//  494         {
//  495           cur_day=7+weekday-baseday->cale_base+1;
//  496         }
//  497         delete(baseday);
        MOV      R0,R10
        _BLF     `??operator delete`,`??operator delete??rA`
//  498         if ((Hol1==cur_day)||(Hol2==cur_day))
        LDR      R0,[SP, #+4]
        CMP      R0,R11
        LDRNE    R0,[SP, #+0]
        CMPNE    R0,R11
        BNE      ??onSessionTerminated_8
//  499         {
//  500           traf_cost=traf*TrafCostHol/1024;
        LDR      R0,??onSessionTerminated_2+0x24  ;; TrafCostHol
//  501           if (traf*TrafCostHol%1024*10/1024>=5) traf_cost=traf_cost+1;
        MOV      R2,#+10
        LDR      R0,[R0, #+0]
        MUL      R1,R0,R9
        LSR      R0,R1,#+10
        LSL      R1,R1,#+22
        LSR      R1,R1,#+22
        MUL      R1,R2,R1
        LSR      R1,R1,#+10
        CMP      R1,#+5
//  502           cost_rub=traf_cost/100;
        LDR      R1,??DataTable28  ;; 0x51eb851f
        ADDCS    R0,R0,#+1
        SMULL    R2,R3,R1,R0
        ASR      R3,R3,#+5
        ADD      R6,R3,R0, LSR #+31
//  503           cost_kop1=traf_cost%100*10/100;
        SMULL    R2,R3,R0,R1
        MOV      R2,#+100
        ASR      R3,R3,#+5
        ADD      R3,R3,R0, LSR #+31
        MUL      R3,R2,R3
        MOV      R1,#+10
        SUB      R0,R0,R3
        MUL      R0,R1,R0
        LDR      R1,??DataTable28  ;; 0x51eb851f
        SMULL    R2,R3,R1,R0
        ASR      R3,R3,#+5
        ADD      R7,R3,R0, LSR #+31
//  504           cost_kop2=traf_cost%100*10%100*10/100;
        SMULL    R2,R3,R0,R1
        MOV      R2,#+100
        ASR      R3,R3,#+5
        ADD      R3,R3,R0, LSR #+31
        MUL      R3,R2,R3
        MOV      R1,#+10
        SUB      R0,R0,R3
        MUL      R0,R1,R0
        LDR      R1,??DataTable28  ;; 0x51eb851f
        SMULL    R2,R3,R1,R0
        ASR      R3,R3,#+5
        ADD      R8,R3,R0, LSR #+31
//  505         }
//  506       }
//  507       
//  508       if (TrafDiv)
??onSessionTerminated_8:
        LDR      R1,??DataTable29  ;; CLBook + 16
        LDR      R9,??DataTable30  ;; TrafDiv
        LDR      R2,[R1, #+0]
        LDR      R1,[SP, #+8]
        LDR      R0,[SP, #+12]
        LDR      R10,[R1, #+8]
        LDR      R3,[R1, #+4]
        LDR      R1,??DataTable31  ;; TrafKb
        LDR      R9,[R9, #+0]
        LDR      R0,[R0, #+4]
        LDR      R11,[R1, #+0]
        MOV      R1,#+134
        ORR      R1,R1,#0x100
        CMP      R9,#+0
        BEQ      ??onSessionTerminated_14
//  509       {
//  510         if (TrafKb)
        CMP      R11,#+0
        BEQ      ??onSessionTerminated_15
//  511         {
//  512           int sent=buf_ses->SentBytes;
//  513           int Kb_s=sent/1024;
        ASR      R9,R3,#+9
        ADD      R9,R3,R9, LSR #+22
        ASR      R9,R9,#+10
        STR      R9,[SP, #+20]
//  514           int b_s1=sent%1024*10/1024;
        SUB      R3,R3,R9, LSL #+10
        MOV      R9,#+10
        MUL      R11,R9,R3
//  515           int b_s2=sent%1024*10%1024*10/1024;
        MOV      LR,#+10
        ASR      R3,R11,#+9
        ADD      R3,R11,R3, LSR #+22
        ASR      R9,R3,#+10
        SUB      R3,R11,R9, LSL #+10
        MUL      R12,LR,R3
        STR      R11,[SP, #+0]
        ASR      R3,R12,#+9
        ADD      R3,R12,R3, LSR #+22
        ASR      R3,R3,#+10
//  516           if (sent%1024*10%1024*10%1024*10/1024>=5) b_s2=b_s2+1;
        STR      R11,[SP, #+0]
        STR      R11,[SP, #+0]
        SUB      LR,R12,R3, LSL #+10
        MOV      R11,#+10
        MUL      LR,R11,LR
        ASR      R11,LR,#+9
        ADD      R11,LR,R11, LSR #+22
        ASR      R11,R11,#+10
        CMP      R11,#+5
        ADDGE    R3,R3,#+1
//  517           if (b_s2==10)
        CMP      R3,#+10
//  518           {
//  519             b_s1=b_s1+1;
        ADDEQ    R9,R9,#+1
//  520             b_s2=0;
        MOVEQ    R3,#+0
//  521           }
//  522           if (b_s1==10)
        CMP      R9,#+10
        BNE      ??onSessionTerminated_16
//  523           {
//  524             Kb_s=Kb_s+1;
        LDR      R11,[SP, #+20]
//  525             b_s1=0;
        MOV      R9,#+0
        ADD      R11,R11,#+1
        STR      R11,[SP, #+20]
//  526           }
//  527           
//  528           int rec=buf_ses->RcvBytes;
//  529           int Kb_r=rec/1024;
??onSessionTerminated_16:
        ASR      R11,R10,#+9
        ADD      R11,R10,R11, LSR #+22
        ASR      R11,R11,#+10
        STR      R11,[SP, #+24]
//  530           int b_r1=rec%1024*10/1024;
        SUB      R10,R10,R11, LSL #+10
        MOV      R11,#+10
        MUL      R10,R11,R10
//  531           int b_r2=rec%1024*10%1024*10/1024;
        MOV      R12,#+10
        ASR      R11,R10,#+9
        ADD      R11,R10,R11, LSR #+22
        ASR      R11,R11,#+10
        SUB      LR,R10,R11, LSL #+10
        MUL      LR,R12,LR
        STR      R10,[SP, #+0]
        STR      LR,[SP, #+4]
//  532           if (rec%1024*10%1024*10%1024*10/1024>=5) b_r2=b_r2+1;
        STR      R10,[SP, #+0]
        STR      R10,[SP, #+0]
        LDR      R10,[SP, #+4]
        MOV      R12,LR
        ASR      LR,R12,#+9
        ADD      R12,R12,LR, LSR #+22
        ASR      LR,R12,#+10
        STR      R10,[SP, #+0]
        SUB      R12,R10,LR, LSL #+10
        MOV      R10,#+10
        MUL      R12,R10,R12
        ASR      R10,R12,#+9
        ADD      R10,R12,R10, LSR #+22
        ASR      R10,R10,#+10
        CMP      R10,#+5
        ADDGE    LR,LR,#+1
//  533           if (b_r2==10)
        CMP      LR,#+10
//  534           {
//  535             b_r1=b_r1+1;
        ADDEQ    R11,R11,#+1
//  536             b_r2=0;
        MOVEQ    LR,#+0
//  537           }
//  538           if (b_r1==10)
        CMP      R11,#+10
        BNE      ??onSessionTerminated_17
//  539           {
//  540             Kb_r=Kb_r+1;
        LDR      R11,[SP, #+24]
        ADD      R11,R11,#+1
        STR      R11,[SP, #+24]
//  541             b_r1=0;
        MOV      R11,#+0
//  542           }
//  543           snwprintf(buffer_gprs,390,L"Start time - %02d:%02d:%02d, sent - %d.%d%d Kb, received - %d.%d%d Kb, cost - %d.%d%d %ls\r\n",elem_gprs->SesEst->time.hour,elem_gprs->SesEst->time.min,elem_gprs->SesEst->time.sec,Kb_s,b_s1,b_s2,Kb_r,b_r1,b_r2,cost_rub,cost_kop1,cost_kop2,Money);
??onSessionTerminated_17:
        PUSH     {R2}
        CFI CFA R13+1348
        PUSH     {R8}
        CFI CFA R13+1352
        PUSH     {R7}
        CFI CFA R13+1356
        PUSH     {R6}
        CFI CFA R13+1360
        PUSH     {LR}
        CFI CFA R13+1364
        PUSH     {R11}
        CFI CFA R13+1368
        LDR      R2,[SP, #+48]
        PUSH     {R2}
        CFI CFA R13+1372
        PUSH     {R3}
        CFI CFA R13+1376
        PUSH     {R9}
        CFI CFA R13+1380
        LDR      R2,[SP, #+56]
        PUSH     {R2}
        CFI CFA R13+1384
        LDRB     R2,[R0, #+6]
        PUSH     {R2}
        CFI CFA R13+1388
        LDRB     R2,[R0, #+5]
        PUSH     {R2}
        CFI CFA R13+1392
        LDRB     R3,[R0, #+4]
        MOV      R0,#+28
        ORR      R0,R0,#0x400
        ADD      R2,R0,R4
        MOV      R0,R5
        SWI      +277
        ADD      SP,SP,#+48
        CFI CFA R13+1344
        B        ??onSessionTerminated_18
//  544         }
//  545         else
//  546         {
//  547           snwprintf(buffer_gprs,390,L"Start time - %02d:%02d:%02d, sent - %d b, received - %d b, cost - %d.%d%d %ls\r\n",elem_gprs->SesEst->time.hour,elem_gprs->SesEst->time.min,elem_gprs->SesEst->time.sec,buf_ses->SentBytes,buf_ses->RcvBytes,cost_rub,cost_kop1,cost_kop2,Money);
??onSessionTerminated_15:
        PUSH     {R2}
        CFI CFA R13+1348
        PUSH     {R8}
        CFI CFA R13+1352
        PUSH     {R7}
        CFI CFA R13+1356
        PUSH     {R6}
        CFI CFA R13+1360
        PUSH     {R10}
        CFI CFA R13+1364
        PUSH     {R3}
        CFI CFA R13+1368
        LDRB     R2,[R0, #+6]
        PUSH     {R2}
        CFI CFA R13+1372
        LDRB     R2,[R0, #+5]
        PUSH     {R2}
        CFI CFA R13+1376
        LDRB     R3,[R0, #+4]
        MOV      R0,#+212
        ORR      R0,R0,#0x400
        ADD      R2,R0,R4
        MOV      R0,R5
        SWI      +277
        ADD      SP,SP,#+32
        CFI CFA R13+1344
        B        ??onSessionTerminated_18
//  548         }
//  549       }
//  550       else
//  551       {
//  552         traf=buf_ses->SentBytes+buf_ses->RcvBytes;
??onSessionTerminated_14:
        ADD      R9,R10,R3
//  553         if (TrafKb)
        CMP      R11,#+0
        BEQ      ??onSessionTerminated_19
//  554         {
//  555           int Kb=traf/1024;
        ASR      R3,R9,#+9
        ADD      R3,R9,R3, LSR #+22
        ASR      R3,R3,#+10
//  556           int b1=traf%1024*10/1024;
        SUB      R9,R9,R3, LSL #+10
        MOV      R10,#+10
        MUL      R9,R10,R9
//  557           int b2=traf%1024*10%1024*10/1024;
        MOV      R11,#+10
        STR      R9,[SP, #+0]
//  558           if (traf%1024*10%1024*10%1024*10/1024>=5) b2=b2+1;
        STR      R9,[SP, #+0]
        STR      R9,[SP, #+0]
//  559           if (b2==10)
//  560           {
//  561             b1=b1+1;
//  562             b2=0;
//  563           }
//  564           if (b1==10)
//  565           {
//  566             Kb=Kb+1;
//  567             b1=0;
//  568           }
//  569           snwprintf(buffer_gprs,390,L"Start time - %02d:%02d:%02d, traffic - %d.%d%d Kb, cost - %d.%d%d %ls\r\n",elem_gprs->SesEst->time.hour,elem_gprs->SesEst->time.min,elem_gprs->SesEst->time.sec,Kb,b1,b2,cost_rub,cost_kop1,cost_kop2,Money);
        PUSH     {R2}
        CFI CFA R13+1348
        ASR      R10,R9,#+9
        ADD      R10,R9,R10, LSR #+22
        ASR      R12,R10,#+10
        SUB      R10,R9,R12, LSL #+10
        MUL      LR,R11,R10
        MOV      R9,#+10
        ASR      R10,LR,#+9
        ADD      R10,LR,R10, LSR #+22
        ASR      R11,R10,#+10
        SUB      R10,LR,R11, LSL #+10
        MUL      R10,R9,R10
        PUSH     {R8}
        CFI CFA R13+1352
        ASR      R9,R10,#+9
        ADD      R9,R10,R9, LSR #+22
        ASR      R9,R9,#+10
        CMP      R9,#+5
        ADDGE    R11,R11,#+1
        CMP      R11,#+10
        ADDEQ    R12,R12,#+1
        MOVEQ    R11,#+0
        CMP      R12,#+10
        ADDEQ    R3,R3,#+1
        MOVEQ    R12,#+0
        PUSH     {R7}
        CFI CFA R13+1356
        PUSH     {R6}
        CFI CFA R13+1360
        PUSH     {R11}
        CFI CFA R13+1364
        PUSH     {R12}
        CFI CFA R13+1368
        PUSH     {R3}
        CFI CFA R13+1372
        LDRB     R2,[R0, #+6]
        PUSH     {R2}
        CFI CFA R13+1376
        LDRB     R2,[R0, #+5]
        PUSH     {R2}
        CFI CFA R13+1380
        LDRB     R3,[R0, #+4]
        MOV      R0,#+116
        ORR      R0,R0,#0x500
        ADD      R2,R0,R4
        MOV      R0,R5
        SWI      +277
        ADD      SP,SP,#+36
        CFI CFA R13+1344
        B        ??onSessionTerminated_18
//  570         }
//  571         else
//  572         {
//  573           snwprintf(buffer_gprs,390,L"Start time - %02d:%02d:%02d, traffic - %d b, cost - %d.%d%d %ls\r\n",elem_gprs->SesEst->time.hour,elem_gprs->SesEst->time.min,elem_gprs->SesEst->time.sec,traf,cost_rub,cost_kop1,cost_kop2,Money);
??onSessionTerminated_19:
        PUSH     {R2}
        CFI CFA R13+1348
        PUSH     {R8}
        CFI CFA R13+1352
        PUSH     {R7}
        CFI CFA R13+1356
        PUSH     {R6}
        CFI CFA R13+1360
        PUSH     {R9}
        CFI CFA R13+1364
        LDRB     R2,[R0, #+6]
        PUSH     {R2}
        CFI CFA R13+1368
        LDRB     R2,[R0, #+5]
        PUSH     {R2}
        CFI CFA R13+1372
        LDRB     R3,[R0, #+4]
        MOV      R0,#+4
        ORR      R0,R0,#0x600
        ADD      R2,R0,R4
        MOV      R0,R5
        SWI      +277
        ADD      SP,SP,#+28
        CFI CFA R13+1344
//  574         }
//  575       }
//  576       int str_len=(wstrlen(buffer_gprs))*2;
??onSessionTerminated_18:
        MOV      R0,R5
        SWI      +343
        LSL      R6,R0,#+1
//  577       if (fstat(fpath_gprs,L"gprs.txt",0)<0)
        MOV      R2,#+0
        ADD      R1,R4,#+492
        ADD      R0,SP,#+868
        SWI      +284
        CMP      R0,#+0
//  578       {
//  579         buffer_gprs=buffer_gprs-1;
        SUBMI    R5,R5,#+2
//  580       }
//  581       FSTAT _fstat;
//  582       if ((fstat(fpath_gprs,L"gprs.txt",&_fstat)<0)||(!sort_order))
        ADD      R2,SP,#+40
        ADD      R1,R4,#+492
        ADD      R0,SP,#+868
        SWI      +284
        CMP      R0,#+0
        BMI      ??onSessionTerminated_20
        LDR      R0,??DataTable36  ;; sort_order
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BNE      ??onSessionTerminated_21
//  583       {
//  584         f=_fopen(fpath_gprs,L"gprs.txt",0x108,0x180,0);
??onSessionTerminated_20:
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+1348
        MOV      R3,#+384
        MOV      R2,#+264
        ADD      R1,R4,#+492
        ADD      R0,SP,#+872
        SWI      +278
        MOV      R4,R0
//  585         fwrite(f,buffer_gprs,str_len);
        MOV      R2,R6
        MOV      R1,R5
        SWI      +281
        B        ??onSessionTerminated_22
        CFI CFA R13+1344
//  586       }
//  587       else
//  588       {
//  589         char * new_buff=new char[_fstat.fsize+str_len];
??onSessionTerminated_21:
        LDR      R0,[SP, #+48]
        ADD      R0,R6,R0
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R7,R0
//  590         f=_fopen(fpath_gprs,L"gprs.txt",0x4,0x180,0);
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+1348
        MOV      R3,#+384
        MOV      R2,#+4
        ADD      R1,R4,#+492
        ADD      R0,SP,#+872
        SWI      +278
        MOV      R4,R0
//  591         fread(f,new_buff,2);
        MOV      R2,#+2
        MOV      R1,R7
        SWI      +280
//  592         lseek(f,2,0);
        MOV      R2,#+0
        MOV      R1,#+2
        MOV      R0,R4
        SWI      +374
//  593         memcpy(new_buff+2,buffer_gprs,str_len);
        MOV      R2,R6
        MOV      R1,R5
        ADD      R0,R7,#+2
        SWI      +275
//  594         fread(f,new_buff+2+str_len,_fstat.fsize-2);
        LDR      R0,[SP, #+52]
        SUB      R2,R0,#+2
        ADD      R0,R6,R7
        ADD      R1,R0,#+2
        MOV      R0,R4
        SWI      +280
//  595         lseek(f,0,0);
        MOV      R2,#+0
        MOV      R1,#+0
        MOV      R0,R4
        SWI      +374
//  596         fwrite(f,new_buff,_fstat.fsize+str_len);
        LDR      R0,[SP, #+52]
        MOV      R1,R7
        ADD      R2,R6,R0
        MOV      R0,R4
        SWI      +281
//  597         delete(new_buff);
        MOV      R0,R7
        _BLF     `??operator delete`,`??operator delete??rA`
??onSessionTerminated_22:
        ADD      SP,SP,#+4
        CFI CFA R13+1344
//  598       }
//  599       fclose(f);
        MOV      R0,R4
        SWI      +279
//  600       myList_gprs_elem_Free(elem_gprs);
        LDR      R0,[SP, #+12]
        BL       ??myList_gprs_elem_Free
//  601     }
//  602     delete(buf_ses);
??onSessionTerminated_3:
        LDR      R0,[SP, #+8]
        _BLF     `??operator delete`,`??operator delete??rA`
//  603     delete(temp_elem_gprs);
        LDR      R0,[SP, #+28]
        _BLF     `??operator delete`,`??operator delete??rA`
//  604   }
//  605   return(0);
??onSessionTerminated_1:
        MOV      R0,#+0
        ADD      SP,SP,#+284
        CFI CFA R13+1060
        ADD      SP,SP,#+1024
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        DATA
??onSessionTerminated_2:
        DC32     ??myList_gprs_Find
        DC32     TrafRound
        DC32     TimeDay
        DC32     TrafCost
        DC32     Hol2
        DC32     Hol1
        DC32     TrafCostDay
        DC32     TrafCostNight
        DC32     TimeNight
        DC32     TrafCostHol
        CFI EndBlock cfiBlock23
//  606 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable21:
        DC32     `?<Constant L"\\xd\\xa\\x54\\x6f\\x74\\x61\\x6c\\x20\\x6`

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable22:
        DC32     CLBook + 8

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable28:
        DC32     0x51eb851f

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable29:
        DC32     CLBook + 16

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable30:
        DC32     TrafDiv

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable31:
        DC32     TrafKb

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnCallManager??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE ??OnCallManager
//  607   
//  608 //Оновное действо.... Все в куче....

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function ??OnCallManager
        ARM
//  609 int OnCallManager(void * CallManStruct, BOOK *)
//  610 {
??OnCallManager:
        PUSH     {R0,R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+40
        SUB      SP,SP,#+700
        CFI CFA R13+740
        SUB      SP,SP,#+1024
        CFI CFA R13+1764
//  611   //Ловим всех кроме idle
//  612   if (((CALLMANAGER_EVENT_DATA*)CallManStruct)->CallState)
        LDRB     R0,[R0, #+2]
        CMP      R0,#+0
        BEQ      ??OnCallManager_1
//  613   {
//  614     //Создаем структурку
//  615     myList_elem* temp_elem=new(myList_elem);
        MOV      R0,#+28
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R4,R0
//  616     int length=PNUM_len(((CALLMANAGER_EVENT_DATA*)CallManStruct)->PNUM);
        LDR      R0,[SP, #+1724]
        MOV      R8,#+0
        LDR      R0,[R0, #+4]
        SWI      +358
        MOV      R5,R0
        LDR      R0,[SP, #+1724]
        LDRB     R0,[R0, #+0]
        CMP      R0,#+255
        BNE      ??OnCallManager_2
//  617     //Проверяем наличие элемента в листе
//  618     if (((CALLMANAGER_EVENT_DATA*)CallManStruct)->CallID==0xFF)
//  619     {
//  620       if (myList->FirstFree)
        LDR      R0,??OnCallManager_3  ;; CLBook + 4
        LDR      R0,[R0, #+0]
        LDRH     R0,[R0, #+2]
        CMP      R0,#+0
        BEQ      ??OnCallManager_4
//  621       {
//  622         temp_elem->line=1;
        MOV      R0,#+1
        B        ??OnCallManager_4
//  623       }
//  624       else
//  625       {
//  626         temp_elem->line=0;
//  627       }
//  628     }
//  629     else
//  630     {
//  631       temp_elem->line=((CALLMANAGER_EVENT_DATA*)CallManStruct)->CallID;
??OnCallManager_2:
        LDR      R0,[SP, #+1724]
        LDRB     R0,[R0, #+0]
//  632     }
//  633     temp_elem->PNUM=new wchar_t[length+1];
??OnCallManager_4:
        ADD      R6,R5,#+1
        STRB     R0,[R4, #+24]
        LSL      R0,R6,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R4, #+0]
//  634     char * sp=new char[length+1];
        MOV      R0,R6
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R7,R0
//  635     memset(sp,0,length+1);
        MOV      R2,R6
        MOV      R1,#+0
        SWI      +274
//  636     PNUM2str(sp,((CALLMANAGER_EVENT_DATA*)CallManStruct)->PNUM,length,length+1);
        LDR      R0,[SP, #+1724]
        MOV      R3,R6
        LDR      R1,[R0, #+4]
        MOV      R2,R5
//  637     str2wstr(temp_elem->PNUM,sp);
//  638     delete(sp);
//  639     if (ListElement_Find(myList,temp_elem,myList_Find)==0xFFFF)
        LDR      R5,??DataTable33  ;; `?<Constant L"\\xd\\xa\\x54\\x6f\\x74\\x61\\x6c\\x20\\x6`
        MOV      R0,R7
        SWI      +359
        LDR      R0,[R4, #+0]
        MOV      R1,R7
        SWI      +344
        MOV      R0,R7
        _BLF     `??operator delete`,`??operator delete??rA`
        LDR      R0,??OnCallManager_3  ;; CLBook + 4
        LDR      R2,??OnCallManager_3+0x4  ;; ??myList_Find
        LDR      R0,[R0, #+0]
        MOV      R1,R4
        SWI      +428
        MOV      R1,#+255
        ORR      R1,R1,#0xFF00
        CMP      R0,R1
        BNE      ??OnCallManager_5
//  640     {
//  641       temp_elem->startdatetime=new DATETIME;
        MOV      R0,#+8
        _BLF     `??operator new`,`??operator new??rA`
        STR      R0,[R4, #+16]
//  642       REQUEST_DATEANDTIME_GET(SYNC,temp_elem->startdatetime);
        MOV      R1,R0
        LDR      R0,??DataTable41  ;; SYNC
        LDR      R0,[R0, #+0]
        SWI      +366
//  643       temp_elem->first_callstate=((CALLMANAGER_EVENT_DATA*)CallManStruct)->CallState;
        LDR      R0,[SP, #+1724]
        LDRB     R0,[R0, #+2]
        STR      R0,[R4, #+8]
//  644       temp_elem->last_callstate=0;
        STR      R8,[R4, #+12]
//  645       if (CallStatusDesc_GetName(CallID_GetCallStatusDesc(temp_elem->line)))
        LDRB     R0,[R4, #+24]
        SWI      +661
        SWI      +662
        CMP      R0,#+0
        BEQ      ??OnCallManager_6
//  646       {
//  647         if (CallStatusDesc_GetName(CallID_GetCallStatusDesc(temp_elem->line))[0])
        LDRB     R0,[R4, #+24]
        SWI      +661
        SWI      +662
        LDRH     R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??OnCallManager_7
//  648         {
//  649           temp_elem->Name=new wchar_t[wstrlen(CallStatusDesc_GetName(CallID_GetCallStatusDesc(temp_elem->line))+1)];
        LDRB     R0,[R4, #+24]
        SWI      +661
        SWI      +662
        ADD      R0,R0,#+2
        SWI      +343
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R4, #+4]
//  650           wstrcpy(temp_elem->Name,CallStatusDesc_GetName(CallID_GetCallStatusDesc(temp_elem->line))+2);
        LDRB     R0,[R4, #+24]
        SWI      +661
        SWI      +662
        ADD      R1,R0,#+4
        LDR      R0,[R4, #+4]
        B        ??OnCallManager_8
//  651         }
//  652         else
//  653         {
//  654           temp_elem->Name=new wchar_t[14];
??OnCallManager_7:
        MOV      R0,#+28
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R4, #+4]
//  655           temp_elem->Name[0]=0;
        STRH     R8,[R0, #+0]
        B        ??OnCallManager_9
//  656         }
//  657       }
//  658       else
//  659       {
//  660         temp_elem->Name=new wchar_t[20];
??OnCallManager_6:
        MOV      R0,#+40
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R4, #+4]
//  661         temp_elem->Name[0]=0;
        STRH     R8,[R0, #+0]
//  662         wstrcpy(temp_elem->Name,L"Emergency");
        MOV      R1,#+136
        ORR      R1,R1,#0x600
        ADD      R1,R1,R5
??OnCallManager_8:
        SWI      +338
//  663       }
//  664         
//  665       temp_elem->begindatetime=new DATETIME;
??OnCallManager_9:
        MOV      R0,#+8
        _BLF     `??operator new`,`??operator new??rA`
        STR      R0,[R4, #+20]
//  666       temp_elem->begindatetime->time.hour=0;
        STRB     R8,[R0, #+4]
//  667       temp_elem->begindatetime->time.min=0;
        LDR      R0,[R4, #+20]
//  668       temp_elem->begindatetime->time.sec=0;
//  669       ListElement_AddtoTop(myList,temp_elem);
        MOV      R1,R4
        STRB     R8,[R0, #+5]
        LDR      R0,[R4, #+20]
        STRB     R8,[R0, #+6]
        LDR      R0,??OnCallManager_3  ;; CLBook + 4
        LDR      R0,[R0, #+0]
        SWI      +363
        MOV      R0,#+1
        ADD      SP,SP,#+1728
        CFI CFA R13+36
        POP      {R4-R11,PC}
        CFI CFA R13+1764
//  670     }
//  671     else
//  672     {
//  673       if (((CALLMANAGER_EVENT_DATA*)CallManStruct)->CallState==6)
??OnCallManager_5:
        LDR      R0,[SP, #+1724]
        LDRB     R0,[R0, #+2]
        CMP      R0,#+6
        BNE      ??OnCallManager_10
//  674       {
//  675         DATETIME * enddatetime=new DATETIME;
        MOV      R0,#+8
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R6,R0
//  676         REQUEST_DATEANDTIME_GET(SYNC,enddatetime);
        LDR      R0,??DataTable41  ;; SYNC
        MOV      R1,R6
        LDR      R0,[R0, #+0]
        SWI      +366
//  677         myList_elem * elem=(myList_elem*)ListElement_Remove(myList,ListElement_Find(myList,temp_elem,myList_Find));
        LDR      R0,??OnCallManager_3  ;; CLBook + 4
        LDR      R2,??OnCallManager_3+0x4  ;; ??myList_Find
        LDR      R0,[R0, #+0]
        MOV      R1,R4
        SWI      +428
        MOV      R1,R0
        LDR      R0,??OnCallManager_3  ;; CLBook + 4
        LDR      R0,[R0, #+0]
        SWI      +377
        MOV      R7,R0
//  678         int f;
//  679         int sub;
//  680         int m;
//  681         int s;
//  682         wchar_t fpath[200];
//  683         wchar_t fname[20];
//  684         wchar_t folder[20];
//  685         wchar_t fpath_ini[200];
//  686         fpath[0]=0;
        ADD      R0,SP,#+884
        STRH     R8,[R0, #+0]
//  687         fname[0]=0;
        STRH     R8,[SP, #+16]
//  688         folder[0]=0;
        ADD      R0,SP,#+1680
        STRH     R8,[R0, #+4]
//  689         wstrcpy(fpath,GetDir(DIR_OTHER | MEM_EXTERNAL));
        MOV      R0,#+8
        SWI      +261
        MOV      R1,R0
        ADD      R0,SP,#+884
        SWI      +338
//  690         wstrcat(fpath,L"/Call Logger/");
        ADD      R1,R5,#+432
        ADD      R0,SP,#+884
        SWI      +340
//  691         wchar_t buffer_ptr[400];
//  692         wchar_t * buffer=buffer_ptr;
        ADD      R8,SP,#+84
//  693         memset(buffer,0,200);
        MOV      R2,#+200
        MOV      R1,#+0
        ADD      R0,SP,#+84
        SWI      +274
//  694         if (!elem->Name[0])
        LDR      R0,[R7, #+4]
        LDRH     R1,[R0, #+0]
        CMP      R1,#+0
        BNE      ??OnCallManager_11
//  695         {
//  696           snwprintf(elem->Name,8,L"NoName");
        MOV      R1,#+156
        ORR      R1,R1,#0x600
        ADD      R2,R1,R5
        MOV      R1,#+8
        SWI      +277
//  697         }
//  698         if (elem->last_callstate==0)
??OnCallManager_11:
        LDR      R2,[R7, #+12]
        LDR      R0,[R7, #+8]
        MOV      R1,#+172
        ORR      R1,R1,#0x600
        CMP      R2,#+0
        BNE      ??OnCallManager_12
//  699         {
//  700           if (elem->first_callstate==2)
        CMP      R0,#+2
        BNE      ??OnCallManager_13
//  701           {
//  702             //Исходящий вызов
//  703             wstrcat(fname,L"out.txt");
        ADD      R1,R1,R5
        ADD      R0,SP,#+16
        SWI      +340
//  704           }
//  705           if (elem->first_callstate==4)
??OnCallManager_13:
        LDR      R0,[R7, #+8]
        CMP      R0,#+4
        BNE      ??OnCallManager_14
//  706           {
//  707             //Пропущенный вызов
//  708             wstrcat(fname,L"missed.txt");
        MOV      R0,#+188
        ORR      R0,R0,#0x600
        ADD      R1,R0,R5
        ADD      R0,SP,#+16
        SWI      +340
//  709           }
//  710           m=0;
??OnCallManager_14:
        MOV      R1,#+0
        STR      R1,[SP, #+4]
//  711           s=0;
        STR      R1,[SP, #+8]
        B        ??OnCallManager_15
//  712         }
//  713         else
//  714         {
//  715           if (elem->first_callstate==2)
??OnCallManager_12:
        CMP      R0,#+2
        BNE      ??OnCallManager_16
//  716           {
//  717             //Исходящий вызов
//  718             wstrcat(fname,L"out.txt");
        ADD      R1,R1,R5
        ADD      R0,SP,#+16
        SWI      +340
//  719           }
//  720           if (elem->first_callstate==4)
??OnCallManager_16:
        LDR      R0,[R7, #+8]
        CMP      R0,#+4
        BNE      ??OnCallManager_17
//  721           {
//  722             //Входящий вызов
//  723             wstrcat(fname,L"in.txt");
        MOV      R0,#+212
        ORR      R0,R0,#0x600
        ADD      R1,R0,R5
        ADD      R0,SP,#+16
        SWI      +340
//  724           }
//  725           //Если вызов начался в 23, а закончился в 00, меняем 00 на 24
//  726           if ((elem->begindatetime->time.hour==23)&&(enddatetime->time.hour==0)) enddatetime->time.hour=24;
??OnCallManager_17:
        LDR      R0,[R7, #+20]
        LDRB     R0,[R0, #+4]
        CMP      R0,#+23
        LDRBEQ   R0,[R6, #+4]
        CMPEQ    R0,#+0
        MOVEQ    R0,#+24
        STRBEQ   R0,[R6, #+4]
//  727           //Получаем время разговора в секундах
//  728           sub=(enddatetime->time.hour-elem->begindatetime->time.hour)*3600+(enddatetime->time.min-elem->begindatetime->time.min)*60+enddatetime->time.sec-elem->begindatetime->time.sec;
        LDR      R0,[R7, #+20]
        LDRB     R1,[R6, #+4]
        LDRB     R2,[R0, #+4]
        LDRB     R3,[R6, #+5]
        LDRB     R9,[R0, #+5]
        LDRB     R0,[R0, #+6]
        SUB      R1,R1,R2
        MOV      R2,#+3600
        SUB      R3,R3,R9
        MOV      R9,#+60
        MUL      R3,R9,R3
        MLA      R1,R2,R1,R3
        LDRB     R2,[R6, #+6]
        ADD      R1,R2,R1
//  729           //Выделяем минуты и секунды
//  730           m=sub/60;
        LDR      R2,??OnCallManager_3+0x8  ;; 0xffffffff88888889
        SUB      R0,R1,R0
        SMULL    R3,R9,R2,R0
        ADD      R9,R9,R0
        ASR      R9,R9,#+5
        ADD      R2,R9,R0, LSR #+31
        STR      R2,[SP, #+4]
//  731           s=sub%60;
        LDR      R2,??OnCallManager_3+0x8  ;; 0xffffffff88888889
        SMULL    R3,R9,R0,R2
        MOV      R3,#+60
        ADD      R9,R9,R0
        ASR      R9,R9,#+5
        ADD      R9,R9,R0, LSR #+31
        MUL      R9,R3,R9
        SUB      R0,R0,R9
        STR      R0,[SP, #+8]
//  732         }
//  733         //Получаем название папки
//  734         snwprintf(folder,20,L"%04d-%02d-%02d",elem->startdatetime->date.year,elem->startdatetime->date.mon,elem->startdatetime->date.day);
??OnCallManager_15:
        LDR      R0,[R7, #+16]
        ADD      R2,R5,#+460
        LDRB     R1,[R0, #+3]
        PUSH     {R1}
        CFI CFA R13+1768
        LDRB     R1,[R0, #+2]
        PUSH     {R1}
        CFI CFA R13+1772
        LDRH     R3,[R0, #+0]
        ADD      R0,SP,#+668
        ADD      R0,R0,#+1024
        MOV      R1,#+20
        SWI      +277
//  735         //Получаем полный путь
//  736         wstrcat(fpath,folder);
        ADD      R1,SP,#+668
        ADD      R1,R1,#+1024
        ADD      R0,SP,#+892
        SWI      +340
//  737         //Проверяем существование файла, если нету то добавляем в буфер хидер юникодного файла
//  738         if (fstat(fpath,fname,0)<0)
        MOV      R2,#+0
        ADD      R1,SP,#+24
        ADD      R0,SP,#+892
        SWI      +284
        CMP      R0,#+0
        ADD      SP,SP,#+8
        CFI CFA R13+1764
        BPL      ??OnCallManager_18
//  739         {
//  740           buffer[0]=0xFEFF;
        MOV      R1,#+255
        ORR      R1,R1,#0xFE00
        STRH     R1,[SP, #+84]
//  741           buffer=buffer+1;
        ADD      R8,SP,#+86
//  742         }
//  743         wstrcpy(fpath_ini,GetDir(DIR_INI));
??OnCallManager_18:
        MOV      R0,#+22
        SWI      +261
        MOV      R1,R0
        ADD      R0,SP,#+260
        ADD      R0,R0,#+1024
        SWI      +338
//  744         wstrcat(fpath_ini,L"/Call Logger");
        MOV      R0,#+228
        ORR      R0,R0,#0x600
        ADD      R1,R0,R5
        ADD      R0,SP,#+260
        ADD      R0,R0,#+1024
        SWI      +340
//  745         FSTAT _fstat;
//  746         int reg_flag=0;
        MOV      R1,#+0
        STR      R1,[SP, #+12]
        ADD      R2,SP,#+56
        ADD      R1,R5,#+108
        ADD      R0,SP,#+260
        ADD      R0,R0,#+1024
//  747         if (fstat(fpath_ini,L"regions.ini",&_fstat)>=0)
        SWI      +284
        CMP      R0,#+0
        BMI      ??OnCallManager_19
//  748         {
//  749           char * buffer_ini=new char[_fstat.fsize];
        LDR      R0,[SP, #+64]
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R9,R0
//  750           f=_fopen(fpath_ini,L"regions.ini",0x1,0x180,0);
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+1768
        MOV      R3,#+384
        MOV      R2,#+1
        ADD      R1,R5,#+108
        ADD      R0,SP,#+264
        ADD      R0,R0,#+1024
        SWI      +278
//  751           fread(f,buffer_ini,_fstat.fsize);
        LDR      R2,[SP, #+68]
        MOV      R10,R0
        MOV      R1,R9
        SWI      +280
//  752           fclose(f);
        MOV      R0,R10
        SWI      +279
//  753           char * PNUM_str=new char[wstrlen(elem->PNUM)+1];
        LDR      R0,[R7, #+0]
        SWI      +343
        ADD      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R10,R0
//  754           int ptr=0;
//  755           int count=wstrlen(elem->PNUM)/2;
        LDR      R0,[R7, #+0]
        SWI      +343
//  756           wstr2strn(PNUM_str,elem->PNUM,count);
        LDR      R1,[R7, #+0]
        ADD      R0,R0,R0, LSR #+31
        ASR      R11,R0,#+1
        MOV      R2,R11
        MOV      R0,R10
        SWI      +347
//  757           if (strstr(buffer_ini,PNUM_str))
        MOV      R1,R10
        MOV      R0,R9
        SWI      +664
        CMP      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+1764
        BEQ      ??OnCallManager_20
//  758           {
//  759             ptr=1;
//  760             while (count<=wstrlen(elem->PNUM))
??OnCallManager_21:
        LDR      R0,[R7, #+0]
        SWI      +343
        CMP      R0,R11
        BLT      ??OnCallManager_22
//  761             {
//  762               count=count+1;
//  763               wstr2strn(PNUM_str,elem->PNUM,count);
        LDR      R1,[R7, #+0]
        ADD      R11,R11,#+1
        MOV      R2,R11
        MOV      R0,R10
        SWI      +347
//  764               if (strstr(buffer_ini,PNUM_str)==0) break;
        MOV      R1,R10
        MOV      R0,R9
        SWI      +664
        CMP      R0,#+0
        BNE      ??OnCallManager_21
//  765             }
//  766             count=count-1;
??OnCallManager_22:
        SUB      R11,R11,#+1
        B        ??OnCallManager_23
//  767           }
//  768           else
//  769           {
//  770             while (count>0)
??OnCallManager_20:
        CMP      R11,#+1
        BLT      ??OnCallManager_24
//  771             {
//  772               count=count-1;
//  773               wstr2strn(PNUM_str,elem->PNUM,count);
        LDR      R1,[R7, #+0]
        SUB      R11,R11,#+1
        MOV      R2,R11
        MOV      R0,R10
        SWI      +347
//  774               if (strstr(buffer_ini,PNUM_str))
        MOV      R1,R10
        MOV      R0,R9
        SWI      +664
        CMP      R0,#+0
        BEQ      ??OnCallManager_20
//  775               {
//  776                 ptr=1;
//  777                 break;
//  778               }
//  779             }
//  780           }
//  781           if (ptr)
//  782           {
//  783             char * region;
//  784             wstr2strn(PNUM_str,elem->PNUM,count);
??OnCallManager_23:
        LDR      R1,[R7, #+0]
        MOV      R2,R11
        MOV      R0,R10
        SWI      +347
//  785             if (region=manifest_GetParam(buffer_ini,PNUM_str,0))
        MOV      R2,#+0
        MOV      R1,R10
        MOV      R0,R9
        SWI      +373
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BEQ      ??OnCallManager_24
//  786             {
//  787               wchar_t * s2ws = new wchar_t[strlen(region)+1];
        SWI      +346
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R11,R0
//  788               win12512unicode(s2ws,region,strlen(region));
        LDR      R0,[SP, #+0]
        SWI      +346
        LDR      R1,[SP, #+0]
        MOV      R2,R0
        MOV      R0,R11
        BL       ??win12512unicode
//  789               if ((elem->last_callstate==0)&&(elem->first_callstate==4))
        LDR      R0,[R7, #+12]
        CMP      R0,#+0
        LDREQ    R0,[R7, #+8]
        CMPEQ    R0,#+4
        BNE      ??OnCallManager_25
//  790               {
//  791                 snwprintf(buffer,390,L"%ls, %ls (%ls) - %02d:%02d:%02d\r\n",elem->Name,s2ws,elem->PNUM,elem->startdatetime->time.hour,elem->startdatetime->time.min,elem->startdatetime->time.sec);
        LDR      R0,[R7, #+16]
        ADD      R2,R5,#+132
        LDRB     R1,[R0, #+6]
        PUSH     {R1}
        CFI CFA R13+1768
        LDRB     R1,[R0, #+5]
        PUSH     {R1}
        CFI CFA R13+1772
        LDRB     R0,[R0, #+4]
        MOV      R1,#+134
        ORR      R1,R1,#0x100
        PUSH     {R0}
        CFI CFA R13+1776
        LDR      R0,[R7, #+0]
        PUSH     {R0}
        CFI CFA R13+1780
        MOV      R0,R11
        PUSH     {R0}
        CFI CFA R13+1784
        LDR      R3,[R7, #+4]
        MOV      R0,R8
        SWI      +277
        ADD      SP,SP,#+20
        CFI CFA R13+1764
        B        ??OnCallManager_26
//  792               }
//  793               else
//  794               {
//  795                 snwprintf(buffer,390,L"%ls, %ls (%ls) - %02d:%02d:%02d, %02d:%02d\r\n",elem->Name,s2ws,elem->PNUM,elem->startdatetime->time.hour,elem->startdatetime->time.min,elem->startdatetime->time.sec,m,s);
??OnCallManager_25:
        LDR      R0,[R7, #+16]
        LDR      R1,[SP, #+8]
        ADD      R2,R5,#+200
        PUSH     {R1}
        CFI CFA R13+1768
        LDR      R1,[SP, #+8]
        PUSH     {R1}
        CFI CFA R13+1772
        LDRB     R1,[R0, #+6]
        PUSH     {R1}
        CFI CFA R13+1776
        LDRB     R1,[R0, #+5]
        PUSH     {R1}
        CFI CFA R13+1780
        LDRB     R0,[R0, #+4]
        MOV      R1,#+134
        ORR      R1,R1,#0x100
        PUSH     {R0}
        CFI CFA R13+1784
        LDR      R0,[R7, #+0]
        PUSH     {R0}
        CFI CFA R13+1788
        MOV      R0,R11
        PUSH     {R0}
        CFI CFA R13+1792
        LDR      R3,[R7, #+4]
        MOV      R0,R8
        SWI      +277
        ADD      SP,SP,#+28
        CFI CFA R13+1764
//  796               }
//  797               delete(s2ws);
??OnCallManager_26:
        MOV      R0,R11
        _BLF     `??operator delete`,`??operator delete??rA`
//  798               mfree(region);
        LDR      R0,[SP, #+0]
        SWI      +260
//  799               reg_flag=1;
        MOV      R1,#+1
        STR      R1,[SP, #+12]
//  800             }
//  801           }
//  802           delete(buffer_ini);
??OnCallManager_24:
        MOV      R0,R9
        _BLF     `??operator delete`,`??operator delete??rA`
//  803           delete(PNUM_str);
        MOV      R0,R10
        _BLF     `??operator delete`,`??operator delete??rA`
//  804         }
//  805         if (!reg_flag)
        LDR      R0,[SP, #+12]
        CMP      R0,#+0
        BNE      ??OnCallManager_27
//  806         {
//  807           if ((elem->last_callstate==0)&&(elem->first_callstate==4))
??OnCallManager_19:
        LDR      R2,[R7, #+12]
        LDR      R3,[R7, #+4]
        LDR      R1,[R7, #+16]
        LDR      R0,[R7, #+0]
        CMP      R2,#+0
        LDREQ    R2,[R7, #+8]
        CMPEQ    R2,#+4
        BNE      ??OnCallManager_28
//  808           {
//  809             
//  810             //Печатаем "отчет о звонке" в буфер без региона
//  811             snwprintf(buffer,390,L"%ls (%ls) - %02d:%02d:%02d\r\n",elem->Name,elem->PNUM,elem->startdatetime->time.hour,elem->startdatetime->time.min,elem->startdatetime->time.sec);
        LDRB     R2,[R1, #+6]
        PUSH     {R2}
        CFI CFA R13+1768
        LDRB     R2,[R1, #+5]
        PUSH     {R2}
        CFI CFA R13+1772
        LDRB     R1,[R1, #+4]
        ADD      R2,R5,#+292
        PUSH     {R1}
        CFI CFA R13+1776
        PUSH     {R0}
        CFI CFA R13+1780
        MOV      R1,#+134
        ORR      R1,R1,#0x100
        MOV      R0,R8
        SWI      +277
        ADD      SP,SP,#+16
        CFI CFA R13+1764
        B        ??OnCallManager_27
//  812           }
//  813           else
//  814           {
//  815             snwprintf(buffer,390,L"%ls (%ls) - %02d:%02d:%02d, %02d:%02d\r\n",elem->Name,elem->PNUM,elem->startdatetime->time.hour,elem->startdatetime->time.min,elem->startdatetime->time.sec,m,s);
??OnCallManager_28:
        LDR      R2,[SP, #+8]
        PUSH     {R2}
        CFI CFA R13+1768
        LDR      R2,[SP, #+8]
        PUSH     {R2}
        CFI CFA R13+1772
        LDRB     R2,[R1, #+6]
        PUSH     {R2}
        CFI CFA R13+1776
        LDRB     R2,[R1, #+5]
        PUSH     {R2}
        CFI CFA R13+1780
        LDRB     R1,[R1, #+4]
        ADD      R2,R5,#+352
        PUSH     {R1}
        CFI CFA R13+1784
        PUSH     {R0}
        CFI CFA R13+1788
        MOV      R1,#+134
        ORR      R1,R1,#0x100
        MOV      R0,R8
        SWI      +277
        ADD      SP,SP,#+24
        CFI CFA R13+1764
//  816           }
//  817         }
//  818         int str_len=(wstrlen(buffer))*2;
??OnCallManager_27:
        MOV      R0,R8
        SWI      +343
        LSL      R5,R0,#+1
//  819         if (fstat(fpath,fname,0)<0)
        MOV      R2,#+0
        ADD      R1,SP,#+16
        ADD      R0,SP,#+884
        SWI      +284
        CMP      R0,#+0
//  820         {
//  821           buffer=buffer-1;
        SUBMI    R8,R8,#+2
//  822         }
//  823         if ((fstat(fpath,fname,&_fstat)<0)||(!sort_order))
        ADD      R2,SP,#+56
        ADD      R1,SP,#+16
        ADD      R0,SP,#+884
        SWI      +284
        CMP      R0,#+0
        BMI      ??OnCallManager_29
        LDR      R0,??DataTable36  ;; sort_order
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BNE      ??OnCallManager_30
//  824         {
//  825           f=_fopen(fpath,fname,0x108,0x180,0);
??OnCallManager_29:
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+1768
        MOV      R3,#+384
        MOV      R2,#+264
        ADD      R1,SP,#+20
        ADD      R0,SP,#+888
        SWI      +278
        MOV      R10,R0
//  826           fwrite(f,buffer,str_len);
        MOV      R2,R5
        MOV      R1,R8
        SWI      +281
        B        ??OnCallManager_31
        CFI CFA R13+1764
//  827         }
//  828         else
//  829         {
//  830           char * new_buff=new char[_fstat.fsize+str_len];
??OnCallManager_30:
        LDR      R0,[SP, #+64]
        ADD      R0,R5,R0
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R9,R0
//  831           f=_fopen(fpath,fname,0x104,0x180,0);
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+1768
        MOV      R3,#+384
        MOV      R2,#+260
        ADD      R1,SP,#+20
        ADD      R0,SP,#+888
        SWI      +278
        MOV      R10,R0
//  832           fread(f,new_buff,2);
        MOV      R2,#+2
        MOV      R1,R9
        SWI      +280
//  833           lseek(f,2,0);
        MOV      R2,#+0
        MOV      R1,#+2
        MOV      R0,R10
        SWI      +374
//  834           memcpy(new_buff+2,buffer,str_len);
        MOV      R2,R5
        MOV      R1,R8
        ADD      R0,R9,#+2
        SWI      +275
//  835           fread(f,new_buff+2+str_len,_fstat.fsize-2);
        LDR      R0,[SP, #+68]
        SUB      R2,R0,#+2
        ADD      R0,R5,R9
        ADD      R1,R0,#+2
        MOV      R0,R10
        SWI      +280
//  836           lseek(f,0,0);
        MOV      R2,#+0
        MOV      R1,#+0
        MOV      R0,R10
        SWI      +374
//  837           fwrite(f,new_buff,_fstat.fsize+str_len);
        LDR      R0,[SP, #+68]
        MOV      R1,R9
        ADD      R2,R5,R0
        MOV      R0,R10
        SWI      +281
//  838           delete(new_buff);
        MOV      R0,R9
        _BLF     `??operator delete`,`??operator delete??rA`
??OnCallManager_31:
        ADD      SP,SP,#+4
        CFI CFA R13+1764
//  839         }
//  840         fclose(f);
        MOV      R0,R10
        SWI      +279
//  841         delete(enddatetime);
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
//  842         myList_elem_Free(elem);
        MOV      R0,R7
        BL       ??myList_elem_Free
//  843       }
//  844       if (((CALLMANAGER_EVENT_DATA*)CallManStruct)->CallState==1)
??OnCallManager_10:
        LDR      R0,[SP, #+1724]
        LDRB     R0,[R0, #+2]
        CMP      R0,#+1
        BNE      ??OnCallManager_32
//  845       {
//  846         myList_elem * elem=(myList_elem*)ListElement_GetByIndex(myList,ListElement_Find(myList,temp_elem,myList_Find));
        LDR      R0,??OnCallManager_3  ;; CLBook + 4
        LDR      R2,??OnCallManager_3+0x4  ;; ??myList_Find
        LDR      R0,[R0, #+0]
        MOV      R1,R4
        SWI      +428
        MOV      R1,R0
        LDR      R0,??OnCallManager_3  ;; CLBook + 4
        LDR      R0,[R0, #+0]
        SWI      +429
        MOV      R5,R0
//  847         if (elem->last_callstate!=1)
        LDR      R0,[R5, #+12]
        CMP      R0,#+1
        BEQ      ??OnCallManager_32
//  848         {
//  849           elem->last_callstate=1;
        MOV      R0,#+1
        STR      R0,[R5, #+12]
//  850           elem->begindatetime=new DATETIME;
        MOV      R0,#+8
        _BLF     `??operator new`,`??operator new??rA`
        STR      R0,[R5, #+20]
//  851           REQUEST_DATEANDTIME_GET(SYNC,elem->begindatetime);
        MOV      R1,R0
        LDR      R0,??DataTable41  ;; SYNC
        LDR      R0,[R0, #+0]
        SWI      +366
//  852         }
//  853       }
//  854       //Убиваем временный элемент если не засунули в лист
//  855       delete(temp_elem->PNUM);
??OnCallManager_32:
        LDR      R0,[R4, #+0]
        _BLF     `??operator delete`,`??operator delete??rA`
//  856       delete(temp_elem);
        MOV      R0,R4
        _BLF     `??operator delete`,`??operator delete??rA`
//  857     }
//  858   }
//  859   return(1);
??OnCallManager_1:
        MOV      R0,#+1
        ADD      SP,SP,#+1728
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        DATA
??OnCallManager_3:
        DC32     CLBook + 4
        DC32     ??myList_Find
        DC32     0xffffffff88888889
        CFI EndBlock cfiBlock25
//  860 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable33:
        DC32     `?<Constant L"\\xd\\xa\\x54\\x6f\\x74\\x61\\x6c\\x20\\x6`

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable36:
        DC32     sort_order

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??ReconfigElf??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE ??ReconfigElf
//  861 
//  862 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function ??ReconfigElf
        ARM
//  863 static int ReconfigElf(void *mess ,BOOK *book)
//  864 {
??ReconfigElf:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//  865   RECONFIG_EVENT_DATA *reconf=(RECONFIG_EVENT_DATA *)mess;
//  866   int result=0;
//  867   if (wstrcmpi(reconf->path,successed_config_path)==0 && wstrcmpi(reconf->name,successed_config_name)==0)
        LDR      R0,??ReconfigElf_1  ;; successed_config_path
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        SWI      +671
        CMP      R0,#+0
        BNE      ??ReconfigElf_2
        LDR      R0,??ReconfigElf_1+0x4  ;; successed_config_name
        LDR      R1,[R0, #+0]
        ADD      R0,R4,#+128
        SWI      +671
        CMP      R0,#+0
        BNE      ??ReconfigElf_2
//  868   {
//  869     get_bcfg_key();
        BL       ??get_bcfg_key
//  870   }
//  871   return(result);
??ReconfigElf_2:
        MOV      R0,#+0
        POP      {R4,PC}          ;; return
        DATA
??ReconfigElf_1:
        DC32     successed_config_path
        DC32     successed_config_name
        CFI EndBlock cfiBlock27
//  872 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??elf_exit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE ??elf_exit
//  873 

        RSEG DYN_PAGE:CONST:SORT:NOROOT(2)
//  874 const PAGE_MSG CL_PageEvents[]@ "DYN_PAGE" ={
CL_PageEvents:
        DATA
        DC32 997, ??TerminateElf, 998, ??ShowAuthorInfo, 442, ??OnCallManager
        DC32 464, ??onSessionEstablished, 465, ??onSessionTerminated, 150
        DC32 ??onClockChange, 996, ??ReconfigElf, 64, 0H

        RSEG DATA_I:DATA:SORT:NOROOT(2)
CLBook:
        DS8 4
        REQUIRE `?<Initializer for CLBook>`
myList:
        DS8 4
        REQUIRE `?<Initializer for myList>`
myList_gprs:
        DS8 4
        REQUIRE `?<Initializer for myList_gprs>`
cur_date:
        DS8 4
        REQUIRE `?<Initializer for cur_date>`
Money:
        DS8 4
        REQUIRE `?<Initializer for Money>`
//  875   ELF_TERMINATE_EVENT , TerminateElf,
//  876   ELF_SHOW_INFO_EVENT  , ShowAuthorInfo,
//  877   ON_CALLMANAGER_EVENT_TAG, OnCallManager,
//  878   UI_CONNECTIONMANAGER_SESSION_ESTABLISHED_EVENT_TAG, onSessionEstablished,
//  879   UI_CONNECTIONMANAGER_SESSION_TERMINATED_EVENT_TAG, onSessionTerminated,
//  880   CLOCK_DATEANDTIME_IND_EVENT_TAG,onClockChange,
//  881   ELF_RECONFIG_EVENT,ReconfigElf,
//  882 //  0xD6F,BlackList,
//  883   NIL_EVENT_TAG,0
//  884 };
//  885 
//  886 PAGE_DESC base_page ={"CL_BasePage",0,CL_PageEvents};
base_page:
        DS8 12
        REQUIRE `?<Initializer for base_page>`
//  887 
//  888 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function ??elf_exit
        ARM
//  889 void elf_exit(void)
//  890 
//  891 {
??elf_exit:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  892   kill_data(&ELF_BEGIN, (void(*)(void*))mfree_adr());
        SWI      +33028
        MOV      R1,R0
        LDR      R0,??elf_exit_1  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??elf_exit_1:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock29
//  893 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        THUMB
??onCloseCLBook??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock30
        REQUIRE ??onCloseCLBook
//  894 
//  895 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI Function ??onCloseCLBook
        ARM
//  896 void onCloseCLBook(BOOK * CLBook)
//  897 {
//  898   List_FreeElements(myList,myList_elem_Filter,myList_elem_Free);
??onCloseCLBook:
        LDR      R2,??onCloseCLBook_1  ;; ??myList_elem_Free
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        LDR      R4,??DataTable38  ;; CLBook
        LDR      R5,??onCloseCLBook_1+0x4  ;; ??myList_elem_Filter
        LDR      R0,[R4, #+4]
        MOV      R1,R5
        SWI      +663
//  899   List_Free(myList);
        LDR      R0,[R4, #+4]
        SWI      +362
//  900   List_FreeElements(myList_gprs,myList_elem_Filter,myList_gprs_elem_Free);
        LDR      R2,??onCloseCLBook_1+0x8  ;; ??myList_gprs_elem_Free
        LDR      R0,[R4, #+8]
        MOV      R1,R5
        SWI      +663
//  901   List_Free(myList_gprs);
        LDR      R0,[R4, #+8]
        SWI      +362
//  902   if (Money) delete(Money);
        LDR      R0,[R4, #+16]
        CMP      R0,#+0
        BEQ      ??onCloseCLBook_2
        _BLF     `??operator delete`,`??operator delete??rA`
//  903   delete(cur_date);
??onCloseCLBook_2:
        LDR      R0,[R4, #+12]
        _BLF     `??operator delete`,`??operator delete??rA`
//  904   SUBPROC(elf_exit);
        LDR      R0,??DataTable43  ;; ??elf_exit
        SWI      +264
//  905 }
        POP      {R4,R5,PC}       ;; return
        DATA
??onCloseCLBook_1:
        DC32     ??myList_elem_Free
        DC32     ??myList_elem_Filter
        DC32     ??myList_gprs_elem_Free
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable38:
        DC32     CLBook

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon0
        CFI NoFunction
        THUMB
??CreateCLBook??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock32
        REQUIRE ??CreateCLBook
//  906 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI Function ??CreateCLBook
        ARM
//  907 BOOK * CreateCLBook()
//  908 {
??CreateCLBook:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  909   CLBook=new(BOOK);
        LDR      R4,??CreateCLBook_1  ;; CLBook
        MOV      R0,#+24
        _BLF     `??operator new`,`??operator new??rA`
//  910   CreateBook(CLBook,onCloseCLBook,&base_page,"Call Logger",-1,0);
        LDR      R3,??DataTable42  ;; `?<Constant "Call Logger">`
        LDR      R1,??CreateCLBook_1+0x4  ;; ??onCloseCLBook
        STR      R0,[R4, #+0]
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+12
        ADD      R2,R4,#+20
        MVN      R0,R0
        PUSH     {R0}
        CFI CFA R13+16
        LDR      R0,[R4, #+0]
        SWI      +299
//  911   myList=List_New();
        SWI      +361
        STR      R0,[R4, #+4]
//  912   myList_gprs=List_New();
        SWI      +361
        STR      R0,[R4, #+8]
//  913   cur_date=new(DATETIME);
        MOV      R0,#+8
        _BLF     `??operator new`,`??operator new??rA`
        STR      R0,[R4, #+12]
//  914   REQUEST_DATEANDTIME_GET(SYNC,cur_date);
        MOV      R1,R0
        LDR      R0,??DataTable41  ;; SYNC
        LDR      R0,[R0, #+0]
        SWI      +366
//  915   get_bcfg_key();
        BL       ??get_bcfg_key
//  916   return(CLBook);
        LDR      R0,[R4, #+0]
        POP      {R1,R2,R4,PC}    ;; return
        DATA
??CreateCLBook_1:
        DC32     CLBook
        DC32     ??onCloseCLBook
        CFI EndBlock cfiBlock33
//  917 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable41:
        DC32     SYNC

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        THUMB
??myFind??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock34
        REQUIRE ??myFind
//  918 
//  919 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI Function ??myFind
        ARM
//  920 int myFind(BOOK* book)
//  921 {
//  922         if(!strcmp(book->xbook->name,"Call Logger")) return(1);
??myFind:
        LDR      R1,??DataTable42  ;; `?<Constant "Call Logger">`
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R0,[R0, #+0]
        LDR      R0,[R0, #+4]
        SWI      +345
        CMP      R0,#+0
        MOVEQ    R0,#+1
        POPEQ    {PC}
//  923         return(0);
        MOV      R0,#+0
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock35
//  924 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable42:
        DC32     `?<Constant "Call Logger">`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock36 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock36
        REQUIRE main
//  925 
//  926 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock37 Using cfiCommon1
        CFI Function main
        ARM
//  927 int main (void)
//  928 {
//  929   if (FindBook(myFind))
main:
        LDR      R0,??main_0      ;; ??myFind
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +304
        CMP      R0,#+0
        BEQ      ??main_1
//  930   {
//  931     MessageBox(0x6fFFFFFF,STR("Already runed"),0, 1 ,5000,0);
        LDR      R0,??main_0+0x4  ;; `?<Constant L"\\x41\\x6c\\x72\\x65\\x61\\x64\\x79\\x20\\`
        MOV      R2,#+255
        ORR      R2,R2,#0xFF00
        MOV      R1,#+0
        SWI      +349
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+8
        MOV      R3,#+1
        MOV      R2,#+0
        MOV      R1,#+136
        ORR      R1,R1,#0x1300
        PUSH     {R1}
        CFI CFA R13+12
        MOV      R1,R0
        MVN      R0,#-1879048192
        SWI      +599
//  932     SUBPROC(elf_exit);
        LDR      R0,??DataTable43  ;; ??elf_exit
        SWI      +264
//  933   }
//  934   else
//  935   {
//  936     CreateCLBook();
//  937     return(0);
//  938   }
//  939 }
        MOV      R0,#+0
        ADD      SP,SP,#+8
        CFI CFA R13+4
        POP      {PC}
??main_1:
        BL       ??CreateCLBook
        MOV      R0,#+0
        POP      {PC}             ;; return
        DATA
??main_0:
        DC32     ??myFind
        DC32     `?<Constant L"\\x41\\x6c\\x72\\x65\\x61\\x64\\x79\\x20\\`
        CFI EndBlock cfiBlock37

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable43:
        DC32     ??elf_exit

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock38 Using cfiCommon1
        CFI NoFunction
        ARM
??InitConfig??rA:
        LDR      R12,??Subroutine19_0  ;; ??InitConfig
        BX       R12
        DATA
??Subroutine19_0:
        DC32     ??InitConfig
        CFI EndBlock cfiBlock38

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock39 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine20_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine20_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock39

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock40 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine21_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine21_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock40

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock41 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine22_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine22_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock41

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock42 Using cfiCommon1
        CFI NoFunction
        ARM
??rA??divu32_a:
        LDR      R12,??Subroutine23_0  ;; ??divu32_a
        MOV      PC,R12
        DATA
??Subroutine23_0:
        DC32     ??divu32_a
        CFI EndBlock cfiBlock42

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock43 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine24_0  ;; kill_data
        BX       R12
        DATA
??Subroutine24_0:
        DC32     kill_data
        CFI EndBlock cfiBlock43

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for CLBook>`:
        DATA
        DC8 0, 0, 0, 0
`?<Initializer for myList>`:
        DC8 0, 0, 0, 0
`?<Initializer for myList_gprs>`:
        DC8 0, 0, 0, 0
`?<Initializer for cur_date>`:
        DC8 0, 0, 0, 0
`?<Initializer for Money>`:
        DC32 0H
`?<Initializer for base_page>`:
        DC32 `?<Constant "CL_BasePage">`, 0H, CL_PageEvents

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\xd\\xa\\x54\\x6f\\x74\\x61\\x6c\\x20\\x6`:
        DATA
        DC8 0DH, 0, 0AH, 0, 54H, 0, 6FH, 0
        DC8 74H, 0, 61H, 0, 6CH, 0, 20H, 0
        DC8 63H, 0, 6FH, 0, 73H, 0, 74H, 0
        DC8 20H, 0, 2DH, 0, 20H, 0, 25H, 0
        DC8 64H, 0, 2EH, 0, 25H, 0, 30H, 0
        DC8 32H, 0, 64H, 0, 20H, 0, 25H, 0
        DC8 6CH, 0, 73H, 0, 0DH, 0, 0AH, 0
        DC8 54H, 0, 6FH, 0, 74H, 0, 61H, 0
        DC8 6CH, 0, 20H, 0, 74H, 0, 72H, 0
        DC8 61H, 0, 66H, 0, 66H, 0, 69H, 0
        DC8 63H, 0, 20H, 0, 2DH, 0, 20H, 0
        DC8 25H, 0, 64H, 0, 20H, 0, 62H, 0
        DC8 0DH, 0, 0AH, 0, 0DH, 0, 0AH, 0
        DC8 0, 0
        DC8 0, 0
        DC8 72H, 0, 65H, 0, 67H, 0, 69H, 0
        DC8 6FH, 0, 6EH, 0, 73H, 0, 2EH, 0
        DC8 69H, 0, 6EH, 0, 69H, 0, 0, 0
        DC8 25H, 0, 6CH, 0, 73H, 0, 2CH, 0
        DC8 20H, 0, 25H, 0, 6CH, 0, 73H, 0
        DC8 20H, 0, 28H, 0, 25H, 0, 6CH, 0
        DC8 73H, 0, 29H, 0, 20H, 0, 2DH, 0
        DC8 20H, 0, 25H, 0, 30H, 0, 32H, 0
        DC8 64H, 0, 3AH, 0, 25H, 0, 30H, 0
        DC8 32H, 0, 64H, 0, 3AH, 0, 25H, 0
        DC8 30H, 0, 32H, 0, 64H, 0, 0DH, 0
        DC8 0AH, 0, 0, 0
        DC8 25H, 0, 6CH, 0, 73H, 0, 2CH, 0
        DC8 20H, 0, 25H, 0, 6CH, 0, 73H, 0
        DC8 20H, 0, 28H, 0, 25H, 0, 6CH, 0
        DC8 73H, 0, 29H, 0, 20H, 0, 2DH, 0
        DC8 20H, 0, 25H, 0, 30H, 0, 32H, 0
        DC8 64H, 0, 3AH, 0, 25H, 0, 30H, 0
        DC8 32H, 0, 64H, 0, 3AH, 0, 25H, 0
        DC8 30H, 0, 32H, 0, 64H, 0, 2CH, 0
        DC8 20H, 0, 25H, 0, 30H, 0, 32H, 0
        DC8 64H, 0, 3AH, 0, 25H, 0, 30H, 0
        DC8 32H, 0, 64H, 0, 0DH, 0, 0AH, 0
        DC8 0, 0
        DC8 0, 0
        DC8 25H, 0, 6CH, 0, 73H, 0, 20H, 0
        DC8 28H, 0, 25H, 0, 6CH, 0, 73H, 0
        DC8 29H, 0, 20H, 0, 2DH, 0, 20H, 0
        DC8 25H, 0, 30H, 0, 32H, 0, 64H, 0
        DC8 3AH, 0, 25H, 0, 30H, 0, 32H, 0
        DC8 64H, 0, 3AH, 0, 25H, 0, 30H, 0
        DC8 32H, 0, 64H, 0, 0DH, 0, 0AH, 0
        DC8 0, 0
        DC8 0, 0
        DC8 25H, 0, 6CH, 0, 73H, 0, 20H, 0
        DC8 28H, 0, 25H, 0, 6CH, 0, 73H, 0
        DC8 29H, 0, 20H, 0, 2DH, 0, 20H, 0
        DC8 25H, 0, 30H, 0, 32H, 0, 64H, 0
        DC8 3AH, 0, 25H, 0, 30H, 0, 32H, 0
        DC8 64H, 0, 3AH, 0, 25H, 0, 30H, 0
        DC8 32H, 0, 64H, 0, 2CH, 0, 20H, 0
        DC8 25H, 0, 30H, 0, 32H, 0, 64H, 0
        DC8 3AH, 0, 25H, 0, 30H, 0, 32H, 0
        DC8 64H, 0, 0DH, 0, 0AH, 0, 0, 0
        DC8 2FH, 0, 43H, 0, 61H, 0, 6CH, 0
        DC8 6CH, 0, 20H, 0, 4CH, 0, 6FH, 0
        DC8 67H, 0, 67H, 0, 65H, 0, 72H, 0
        DC8 2FH, 0, 0, 0
        DC8 25H, 0, 30H, 0, 34H, 0, 64H, 0
        DC8 2DH, 0, 25H, 0, 30H, 0, 32H, 0
        DC8 64H, 0, 2DH, 0, 25H, 0, 30H, 0
        DC8 32H, 0, 64H, 0, 0, 0
        DC8 0, 0
        DC8 67H, 0, 70H, 0, 72H, 0, 73H, 0
        DC8 2EH, 0, 74H, 0, 78H, 0, 74H, 0
        DC8 0, 0
        DC8 0, 0
        DC8 63H, 0, 6FH, 0, 73H, 0, 74H, 0
        DC8 20H, 0, 2DH, 0, 0, 0
        DC8 0, 0
        DC8 73H, 0, 65H, 0, 6EH, 0, 74H, 0
        DC8 20H, 0, 2DH, 0, 0, 0
        DC8 0, 0
        DC8 72H, 0, 65H, 0, 63H, 0, 65H, 0
        DC8 69H, 0, 76H, 0, 65H, 0, 64H, 0
        DC8 20H, 0, 2DH, 0, 0, 0
        DC8 0, 0
        DC8 0DH, 0, 0AH, 0, 54H, 0, 6FH, 0
        DC8 74H, 0, 61H, 0, 6CH, 0, 20H, 0
        DC8 63H, 0, 6FH, 0, 73H, 0, 74H, 0
        DC8 20H, 0, 2DH, 0, 20H, 0, 25H, 0
        DC8 64H, 0, 2EH, 0, 25H, 0, 30H, 0
        DC8 32H, 0, 64H, 0, 20H, 0, 25H, 0
        DC8 6CH, 0, 73H, 0, 0DH, 0, 0AH, 0
        DC8 54H, 0, 6FH, 0, 74H, 0, 61H, 0
        DC8 6CH, 0, 20H, 0, 73H, 0, 65H, 0
        DC8 6EH, 0, 74H, 0, 20H, 0, 2DH, 0
        DC8 20H, 0, 25H, 0, 64H, 0, 2EH, 0
        DC8 25H, 0, 30H, 0, 32H, 0, 64H, 0
        DC8 20H, 0, 4BH, 0, 62H, 0, 0DH, 0
        DC8 0AH, 0, 54H, 0, 6FH, 0, 74H, 0
        DC8 61H, 0, 6CH, 0, 20H, 0, 72H, 0
        DC8 65H, 0, 63H, 0, 65H, 0, 69H, 0
        DC8 76H, 0, 65H, 0, 64H, 0, 20H, 0
        DC8 2DH, 0, 20H, 0, 25H, 0, 64H, 0
        DC8 2EH, 0, 25H, 0, 30H, 0, 32H, 0
        DC8 64H, 0, 20H, 0, 4BH, 0, 62H, 0
        DC8 0DH, 0, 0AH, 0, 0DH, 0, 0AH, 0
        DC8 0, 0
        DC8 0, 0
        DC8 0DH, 0, 0AH, 0, 54H, 0, 6FH, 0
        DC8 74H, 0, 61H, 0, 6CH, 0, 20H, 0
        DC8 63H, 0, 6FH, 0, 73H, 0, 74H, 0
        DC8 20H, 0, 2DH, 0, 20H, 0, 25H, 0
        DC8 64H, 0, 2EH, 0, 25H, 0, 30H, 0
        DC8 32H, 0, 64H, 0, 20H, 0, 25H, 0
        DC8 6CH, 0, 73H, 0, 0DH, 0, 0AH, 0
        DC8 54H, 0, 6FH, 0, 74H, 0, 61H, 0
        DC8 6CH, 0, 20H, 0, 73H, 0, 65H, 0
        DC8 6EH, 0, 74H, 0, 20H, 0, 2DH, 0
        DC8 20H, 0, 25H, 0, 64H, 0, 20H, 0
        DC8 62H, 0, 0DH, 0, 0AH, 0, 54H, 0
        DC8 6FH, 0, 74H, 0, 61H, 0, 6CH, 0
        DC8 20H, 0, 72H, 0, 65H, 0, 63H, 0
        DC8 65H, 0, 69H, 0, 76H, 0, 65H, 0
        DC8 64H, 0, 20H, 0, 2DH, 0, 20H, 0
        DC8 25H, 0, 64H, 0, 20H, 0, 62H, 0
        DC8 0DH, 0, 0AH, 0, 0DH, 0, 0AH, 0
        DC8 0, 0
        DC8 0, 0
        DC8 74H, 0, 72H, 0, 61H, 0, 66H, 0
        DC8 66H, 0, 69H, 0, 63H, 0, 20H, 0
        DC8 2DH, 0, 0, 0
        DC8 0DH, 0, 0AH, 0, 54H, 0, 6FH, 0
        DC8 74H, 0, 61H, 0, 6CH, 0, 20H, 0
        DC8 63H, 0, 6FH, 0, 73H, 0, 74H, 0
        DC8 20H, 0, 2DH, 0, 20H, 0, 25H, 0
        DC8 64H, 0, 2EH, 0, 25H, 0, 30H, 0
        DC8 32H, 0, 64H, 0, 20H, 0, 25H, 0
        DC8 6CH, 0, 73H, 0, 0DH, 0, 0AH, 0
        DC8 54H, 0, 6FH, 0, 74H, 0, 61H, 0
        DC8 6CH, 0, 20H, 0, 74H, 0, 72H, 0
        DC8 61H, 0, 66H, 0, 66H, 0, 69H, 0
        DC8 63H, 0, 20H, 0, 2DH, 0, 20H, 0
        DC8 25H, 0, 64H, 0, 2EH, 0, 25H, 0
        DC8 30H, 0, 32H, 0, 64H, 0, 20H, 0
        DC8 4BH, 0, 62H, 0, 0DH, 0, 0AH, 0
        DC8 0DH, 0, 0AH, 0, 0, 0
        DC8 0, 0
        DC8 54H, 0, 6FH, 0, 74H, 0, 61H, 0
        DC8 6CH, 0, 20H, 0, 63H, 0, 6FH, 0
        DC8 73H, 0, 74H, 0, 0, 0
        DC8 0, 0
        DC8 53H, 0, 74H, 0, 61H, 0, 72H, 0
        DC8 74H, 0, 20H, 0, 74H, 0, 69H, 0
        DC8 6DH, 0, 65H, 0, 20H, 0, 2DH, 0
        DC8 20H, 0, 25H, 0, 30H, 0, 32H, 0
        DC8 64H, 0, 3AH, 0, 25H, 0, 30H, 0
        DC8 32H, 0, 64H, 0, 3AH, 0, 25H, 0
        DC8 30H, 0, 32H, 0, 64H, 0, 2CH, 0
        DC8 20H, 0, 73H, 0, 65H, 0, 6EH, 0
        DC8 74H, 0, 20H, 0, 2DH, 0, 20H, 0
        DC8 25H, 0, 64H, 0, 2EH, 0, 25H, 0
        DC8 64H, 0, 25H, 0, 64H, 0, 20H, 0
        DC8 4BH, 0, 62H, 0, 2CH, 0, 20H, 0
        DC8 72H, 0, 65H, 0, 63H, 0, 65H, 0
        DC8 69H, 0, 76H, 0, 65H, 0, 64H, 0
        DC8 20H, 0, 2DH, 0, 20H, 0, 25H, 0
        DC8 64H, 0, 2EH, 0, 25H, 0, 64H, 0
        DC8 25H, 0, 64H, 0, 20H, 0, 4BH, 0
        DC8 62H, 0, 2CH, 0, 20H, 0, 63H, 0
        DC8 6FH, 0, 73H, 0, 74H, 0, 20H, 0
        DC8 2DH, 0, 20H, 0, 25H, 0, 64H, 0
        DC8 2EH, 0, 25H, 0, 64H, 0, 25H, 0
        DC8 64H, 0, 20H, 0, 25H, 0, 6CH, 0
        DC8 73H, 0, 0DH, 0, 0AH, 0, 0, 0
        DC8 53H, 0, 74H, 0, 61H, 0, 72H, 0
        DC8 74H, 0, 20H, 0, 74H, 0, 69H, 0
        DC8 6DH, 0, 65H, 0, 20H, 0, 2DH, 0
        DC8 20H, 0, 25H, 0, 30H, 0, 32H, 0
        DC8 64H, 0, 3AH, 0, 25H, 0, 30H, 0
        DC8 32H, 0, 64H, 0, 3AH, 0, 25H, 0
        DC8 30H, 0, 32H, 0, 64H, 0, 2CH, 0
        DC8 20H, 0, 73H, 0, 65H, 0, 6EH, 0
        DC8 74H, 0, 20H, 0, 2DH, 0, 20H, 0
        DC8 25H, 0, 64H, 0, 20H, 0, 62H, 0
        DC8 2CH, 0, 20H, 0, 72H, 0, 65H, 0
        DC8 63H, 0, 65H, 0, 69H, 0, 76H, 0
        DC8 65H, 0, 64H, 0, 20H, 0, 2DH, 0
        DC8 20H, 0, 25H, 0, 64H, 0, 20H, 0
        DC8 62H, 0, 2CH, 0, 20H, 0, 63H, 0
        DC8 6FH, 0, 73H, 0, 74H, 0, 20H, 0
        DC8 2DH, 0, 20H, 0, 25H, 0, 64H, 0
        DC8 2EH, 0, 25H, 0, 64H, 0, 25H, 0
        DC8 64H, 0, 20H, 0, 25H, 0, 6CH, 0
        DC8 73H, 0, 0DH, 0, 0AH, 0, 0, 0
        DC8 53H, 0, 74H, 0, 61H, 0, 72H, 0
        DC8 74H, 0, 20H, 0, 74H, 0, 69H, 0
        DC8 6DH, 0, 65H, 0, 20H, 0, 2DH, 0
        DC8 20H, 0, 25H, 0, 30H, 0, 32H, 0
        DC8 64H, 0, 3AH, 0, 25H, 0, 30H, 0
        DC8 32H, 0, 64H, 0, 3AH, 0, 25H, 0
        DC8 30H, 0, 32H, 0, 64H, 0, 2CH, 0
        DC8 20H, 0, 74H, 0, 72H, 0, 61H, 0
        DC8 66H, 0, 66H, 0, 69H, 0, 63H, 0
        DC8 20H, 0, 2DH, 0, 20H, 0, 25H, 0
        DC8 64H, 0, 2EH, 0, 25H, 0, 64H, 0
        DC8 25H, 0, 64H, 0, 20H, 0, 4BH, 0
        DC8 62H, 0, 2CH, 0, 20H, 0, 63H, 0
        DC8 6FH, 0, 73H, 0, 74H, 0, 20H, 0
        DC8 2DH, 0, 20H, 0, 25H, 0, 64H, 0
        DC8 2EH, 0, 25H, 0, 64H, 0, 25H, 0
        DC8 64H, 0, 20H, 0, 25H, 0, 6CH, 0
        DC8 73H, 0, 0DH, 0, 0AH, 0, 0, 0
        DC8 53H, 0, 74H, 0, 61H, 0, 72H, 0
        DC8 74H, 0, 20H, 0, 74H, 0, 69H, 0
        DC8 6DH, 0, 65H, 0, 20H, 0, 2DH, 0
        DC8 20H, 0, 25H, 0, 30H, 0, 32H, 0
        DC8 64H, 0, 3AH, 0, 25H, 0, 30H, 0
        DC8 32H, 0, 64H, 0, 3AH, 0, 25H, 0
        DC8 30H, 0, 32H, 0, 64H, 0, 2CH, 0
        DC8 20H, 0, 74H, 0, 72H, 0, 61H, 0
        DC8 66H, 0, 66H, 0, 69H, 0, 63H, 0
        DC8 20H, 0, 2DH, 0, 20H, 0, 25H, 0
        DC8 64H, 0, 20H, 0, 62H, 0, 2CH, 0
        DC8 20H, 0, 63H, 0, 6FH, 0, 73H, 0
        DC8 74H, 0, 20H, 0, 2DH, 0, 20H, 0
        DC8 25H, 0, 64H, 0, 2EH, 0, 25H, 0
        DC8 64H, 0, 25H, 0, 64H, 0, 20H, 0
        DC8 25H, 0, 6CH, 0, 73H, 0, 0DH, 0
        DC8 0AH, 0, 0, 0
        DC8 45H, 0, 6DH, 0, 65H, 0, 72H, 0
        DC8 67H, 0, 65H, 0, 6EH, 0, 63H, 0
        DC8 79H, 0, 0, 0
        DC8 4EH, 0, 6FH, 0, 4EH, 0, 61H, 0
        DC8 6DH, 0, 65H, 0, 0, 0
        DC8 0, 0
        DC8 6FH, 0, 75H, 0, 74H, 0, 2EH, 0
        DC8 74H, 0, 78H, 0, 74H, 0, 0, 0
        DC8 6DH, 0, 69H, 0, 73H, 0, 73H, 0
        DC8 65H, 0, 64H, 0, 2EH, 0, 74H, 0
        DC8 78H, 0, 74H, 0, 0, 0
        DC8 0, 0
        DC8 69H, 0, 6EH, 0, 2EH, 0, 74H, 0
        DC8 78H, 0, 74H, 0, 0, 0
        DC8 0, 0
        DC8 2FH, 0, 43H, 0, 61H, 0, 6CH, 0
        DC8 6CH, 0, 20H, 0, 4CH, 0, 6FH, 0
        DC8 67H, 0, 67H, 0, 65H, 0, 72H, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Call Logger">`:
        DATA
        DC8 "Call Logger"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "CL_BasePage">`:
        DATA
        DC8 "CL_BasePage"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x43\\x61\\x6c\\x6c\\x20\\x4c\\x6f\\x67\\`:
        DATA
        DC8 43H, 0, 61H, 0, 6CH, 0, 6CH, 0
        DC8 20H, 0, 4CH, 0, 6FH, 0, 67H, 0
        DC8 67H, 0, 65H, 0, 72H, 0, 2CH, 0
        DC8 20H, 0, 76H, 0, 32H, 0, 2EH, 0
        DC8 31H, 0, 0AH, 0, 0AH, 0, 28H, 0
        DC8 63H, 0, 29H, 0, 20H, 0, 49H, 0
        DC8 72H, 0, 6FH, 0, 6EH, 0, 4DH, 0
        DC8 61H, 0, 73H, 0, 74H, 0, 65H, 0
        DC8 72H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41\\x6c\\x72\\x65\\x61\\x64\\x79\\x20\\`:
        DATA
        DC8 41H, 0, 6CH, 0, 72H, 0, 65H, 0
        DC8 61H, 0, 64H, 0, 79H, 0, 20H, 0
        DC8 72H, 0, 75H, 0, 6EH, 0, 65H, 0
        DC8 64H, 0, 0, 0

        END
// 
// 7 720 bytes in segment CODE
// 1 912 bytes in segment DATA_C
//    32 bytes in segment DATA_I
//    32 bytes in segment DATA_ID
//    64 bytes in segment DYN_PAGE
//    12 bytes in segment INITTAB
// 
// 7 572 bytes of CODE  memory (+ 160 bytes shared)
// 2 008 bytes of CONST memory
//    32 bytes of DATA  memory
//
//Errors: none
//Warnings: none
