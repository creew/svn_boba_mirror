;W880 SW-R8BA024
;Библиотека функций
;v221207
;(c) Hussein , IronMaster
;

+45D07C00
0448: 00000000 B8521444 ; 112: __arm void memset(void *mem,char chr,int size);
044C: 00000000 10463F44 ; 113: __arm int memcpy(void *dest,const void *source,int cnt);
0450: 00000000 69AE6744 ; 114: __thumb int sprintf(char *buf, const char *fmt, ...);
0454: 00000000 31B46744 ; 115: __thumb int snwprintf(wchar_t* buffer, int size, const wchar_t* fmt, ...);
0458: 00000000 49F0FA44 ; 116: __thumb int _fopen(const wchar_t *filpath, const wchar_t *filname,unsigned int mode , unsigned int rights, unsigned int __0);
045C: 00000000 1506FB44 ; 117: __thumb int fclose(int file);
0460: 00000000 9D08FB44 ; 118: __thumb int fread(int file , void *ptr, int size);
0464: 00000000 690AFB44 ; 119: __thumb int fwrite(int file , const void *ptr, int size);
0468: 00000000 A1D49844 ; 11A: __thumb int _wstat(short *path, void *statbuf);
046C: 00000000 25E12C45 ; 11B: __thumb int fputs(const char *s, int file);
0470: 00000000 DDF9FA44 ; 11C: __thumb int fstat(const wchar_t * path, const wchar_t *fname , FSTAT * fstat_stuct);
0474: 00000000 FDCFFA44 ; 11D: __thumb DIR_HANDLE * AllocDirHandle(const wchar_t * path);
0478: 00000000 BDD1FA44 ; 11E: __thumb FILELISTITEM *GetFname(DIR_HANDLE *, FILELISTITEM *);
047C: 00000000 25C7FE44 ; 11F: __thumb void * DataBrowserDesc_Create(void);
0480: 00000000 E9C9FE44 ; 120: __thumb void DataBrowserDesc_SetStyle(void * db , int style);
0484: 00000000 19CAFE44 ; 121: __thumb void DataBrowserDesc_SetHeaderText(void * db , int StrID);
0488: 00000000 01CAFE44 ; 122: __thumb void DataBrowserDesc_SetFolders(void * db , wchar_t const ** FolderList);
048C: 00000000 21CAFE44 ; 123: __thumb void DataBrowserDesc_SetOKSoftKeyText(void * db , int StrID);
0490: 00000000 758FFE44 ; 124: __thumb void DataBrowser_Create(void * db);
0494: 00000000 D9C7FE44 ; 125: __thumb void DataBrowserDesc_Destroy(void * db);
0498: 00000000 2D21FB44 ; 126: __thumb wchar_t * getFileExtention(wchar_t * fnane);
049C: 00000000 29D4FA44 ; 127: __thumb int DataBrowser_isFileInListExt(const wchar_t * ext_table,const wchar_t * path ,const wchar_t *fname );
04A0: 00000000 75383C45 ; 128: __thumb void Timer_ReSet(u16 * timer ,int time, void (*onTimer)(u16 timerID, LPARAM lparam), LPARAM lparam);
04A4: 00000000 41383C45 ; 129: __thumb u16 Timer_Set(int time, void (*onTimer)(u16 timerID, LPARAM lparam), LPARAM lparam);
04A8: 00000000 CD383C45 ; 12A: __thumb void Timer_Kill(u16 *timerID);
04AC: 00000000 756B3C45 ; 12B: __thumb int CreateBook(void * mem, void (* onClose)(BOOK*), const PAGE_DESC * bp, const char * name, int __0xFFFFFFFF,int __0);
04B0: 00000000 9D6C3C45 ; 12C: __thumb void BookObj_KillBook(void *Book);
04B4: 00000000 F1683C45 ; 12D: __thumb void BookObj_GotoPage(BOOK * book, const PAGE_DESC * page);
04B8: 00000000 596A3C45 ; 12E: __thumb void BookObj_ReturnPage(BOOK * ,int);
04BC: 00000000 91713C45 ; 12F: __thumb void FreeBook ( BOOK *book);
04C0: 00000000 35523C45 ; 130: __thumb BOOK * FindBook(IS_NEEDED_BOOK);
04C4: 00000000 FDA03D45 ; 131: __unknown BOOK * Find_StandbyBook(void);
04C8: 00000000 216E3C45 ; 132: __thumb void BookObj_SetFocus(void *,int focus);
04CC: 00000000 49CB4745 ; 133: void GuiObject_SetTitleText (void * gui , int StrID);
04D0: 00000000 19C64745 ; 134: void ShowWindow (void * gui);
04D4: 00000000 7D5B4345 ; 135: void SetCursorToItem ( void *obj , int item);
04D8: 00000000 69C64745 ; 136: __thumb void GUI_SetStyle(GUI *,int style);
04DC: 00000000 CD664345 ; 137: __thumb int GUIonMessage_GetCreatedItemIndex ( void *msg);
04E0: 00000000 D9664345 ; 138: __thumb char SetMenuItemText0 ( GUI_MESSAGE *, int StrID);
04E4: 00000000 09674345 ; 139: __thumb char SetMenuItemText1 ( GUI_MESSAGE *, int StrID);
04E8: 00000000 E9664345 ; 13A: __thumb char SetMenuItemText2 ( GUI_MESSAGE *, int StrID);
04EC: 00000000 F9664345 ; 13B: __thumb char SetMenuItemText3 ( GUI_MESSAGE *, int StrID);
04F0: 00000000 51674345 ; 13C: __thumb void SetListObjectItemIcon ( void *msg , int align , wchar_t iconID);
04F4: 00000000 05134745 ; 13D: __thumb void DispObject_SetTitleText(DISP_OBJ* DispObj , int StrID);
04F8: 00000000 915B4345 ; 13E: __thumb int ListMenu_GetSelectedItem(GUI_LIST * );
04FC: 00000000 E15B4345 ; 13F: __thumb void SetMenuItemStyle( void *obj , int style);
0500: 00000000 6DA94745 ; 140: __thumb void putchar( void *xx , int x, int y, int _zero, int zero1 , short wchar);
0504: 00000000 B1B24A45 ;8141: __thumb IS_NEEDED_BOOK isScreenSaverBook(void);
0508: 00000000 C9C14845 ; 142: __thumb void StatusIndication_SetItemText(void *gui,int item,int StrID);
050C: 00000000 21BD3D45 ; 143: __thumb void StatusIndication_ShowNotes(int StrID);
0510: 00000000 B1DC4045 ; 144: __thumb GUI * CreateStringInput(int,...);
0514: 00000000 317B4345 ; 145: __thumb GUI_ONEOFMANY * CreateOneOfMany(BOOK *);
0518: 00000000 F97C4345 ; 146: __unknown void OneOfMany_SetItemCount(GUI_ONEOFMANY * , int count);
051C: 00000000 157D4345 ; 147: __unknown void OneOfMany_SetChecked(GUI_ONEOFMANY * , int checked);
0520: 00000000 497D4345 ; 148: void OneOfMany_SetTexts(GUI_ONEOFMANY * , int * StrID , int Count);
0524: 00000000 257D4345 ; 149: int OneOfMany_GetSelected(GUI_ONEOFMANY * rb);
0528: 00000000 51BC3D45 ; 14A: __thumb void StatusIndication_Item8_SetText(int StrID);
052C: 00000000 118F4945 ; 14B: __thumb void GUIObject_Softkey_SetAction(void * gui,u16 actionID,void (*proc)(BOOK *,void*)); //BOOK *,GUI ? *
0530: 00000000 898F4945 ; 14C: __thumb void GUIObject_Softkey_SetText(void * gui,u16 actionID , int StrID);
0534: 00000000 45904945 ; 14D: __thumb void GUIObject_SoftKey_SetEnable(void *gui,u16 actionID,int ena);
0538: 00000000 FD8F4945 ; 14E: __thumb void GUIObject_SoftKey_AddErrorStr(void *gui,u16 actionID,int StrID);
053C: 00000000 D58E4945 ; 14F: __thumb void GUIObject_SoftKey_RemoveItem(void *gui,u16 actionID);
0540: 00000000 D98F4945 ; 150: __thumb void GUIObject_SoftKey_SetVisible(void *gui,u16 actionID,int visible);
0544: 00000000 49924945 ; 151: __thumb void GUIObject_SoftKey_SuppressDefaultAction(void *gui,u16 actionID);
0548: 00000000 3DBB6744 ; 152: __thumb wchar_t* wstrcpy(wchar_t * dest, const wchar_t * source);
054C: 00000000 E9BB6744 ; 153: __thumb wchar_t* wstrncpy(wchar_t * dest, const wchar_t * source, int maxlen);
0550: 00000000 E1BA6744 ; 154: __thumb wchar_t* wstrcat(wchar_t * wstr, const wchar_t * subwstr);
0554: 00000000 89BB6744 ; 155: __thumb wchar_t *wstrncat(wchar_t *wstr, const wchar_t *subwstr , int maxlen);
0558: 00000000 15BB6744 ; 156: __thumb int wstrcmp(const wchar_t *wstr1, const wchar_t *wstr2);
055C: 00000000 BDF3F644 ; 157: __thumb int wstrlen(const wchar_t * wstr);
0560: 00000000 8506F744 ; 158: __thumb wchar_t * str2wstr(wchar_t * wstr, const char * str);
0564: 00000000 15B26744 ; 159: __thumb int strcmp(const char * str1, const char * str2);
0568: 00000000 71B26744 ; 15A: __thumb int strlen(const char *str);
056C: 00000000 DDF4F644 ; 15B: __thumb char * wstr2strn (char * str , const wchar_t * wstr, int maxlen);
0570: 00000000 A1E84545 ; 15C: __thumb int int2strID (int num);
0574: 00000000 55EB4545 ; 15D: __thumb int Str2ID(const void * wstr , int flag , int len);
0578: 00000000 E9EF4545 ; 15E: __thumb void StrID2Str(int StrID,char * str,int maxlen);
057C: 00000000 D9EE4545 ; 15F: __thumb int TextID2wstr(int StrID,wchar_t * str,int maxlen);
0580: 00000000 B9ED4545 ; 160: __thumb int TextGetLength(int StrID);
0584: 00000000 1DED4545 ; 161: __thumb void TextFree(int StrID);
0588: 00000000 79ECF044 ; 162: __thumb int AB_DEFAULTNBR_GET(int rec_num, void * mem_0x30, int * unk);
058C: 00000000 193CF144 ; 163: __thumb int AB_READSTRING(AB_STR_ITEM *,int rec_num, int field_ID);
0590: 00000000 E53CF144 ; 164: __thumb int AB_READPHONENBR(AB_NUM_ITEM *,int rec_num, int field_ID);
0594: 00000000 9D3DF144 ; 165: __thumb int AB_GETNBROFITEMS(int get_from,int unk_0);
0598: 00000000 C5E14545 ; 166: __thumb int PNUM_len(void *pnum);
059C: 00000000 6DED3445 ; 167: __thumb void PNUM2str(char *str,void *pnum,int len, int max_len);
05A0: 00000000 19C44745 ; 168: __thumb DISP_OBJ * GUIObj_GetDISPObj (void * gui);
05A4: 00000000 D5082D45 ; 169: __thumb LIST *List_New(void);
05A8: 00000000 11092D45 ; 16A: __thumb void List_Free(LIST *lst);
05AC: 00000000 850A2D45 ; 16B: __unknown void ListElement_AddtoTop(LIST *lst,void *newElement);
05B0: 00000000 094EF644 ; 16C: __thumb int Gif2ID(u16 IMAGEHANDLE,const wchar_t * path, const wchar_t * fname,wchar_t * ID);
05B4: 00000000 E188F644 ; 16D: __thumb int REQUEST_IMAGEHANDLER_INTERNAL_GETHANDLE(const int * __zero,u16 * IMAGEHANDLE,char * unk);
05B8: 00000000 A90CE744 ; 16E: __unknown void REQUEST_DATEANDTIME_GET(const int * __zero , DATETIME *dt);
05BC: 00000000 F1844A45 ; 16F: void IndicationDevice_Backlight_FadeToLevel(int unk_zero ,int bl_level);
05C0: 00000000 C93E0A45 ; 170: __thumb int GetFreeBytesOnHeap(void);
05C4: 00000000 496E3C45 ; 171: __thumb void BookObj_Hide(BOOK *,int display_type);
05C8: 00000000 596E3C45 ; 172: __thumb void BookObj_Show(BOOK *,int display_type);
05CC: 00000000 B9A23D45 ; 173: __thumb void StartAPP (const wchar_t * appname);
05D0: 00000000 D15C4345 ; 174: __thumb void ListMenu_SetOnMessages (GUI_LIST * , int (*proc)(GUI_MESSAGE *));
05D4: 00000000 5D783945 ; 175: __thumb char * manifest_GetParam(const char *buf, const char *param_name,int unk);
05D8: 00000000 110CFB44 ; 176: __thumb int lseek(int file,int offset,int mode);
05DC: 00000000 1F251444 ;8177: int get_VBUFFER(void); //nullsub(void)
05E0: 00000000 27734B45 ; 178: void SetLampLevel (int level); //nullsub(ret 0)
05E4: 00000000 110A2D45 ; 179: __thumb void * ListElement_Remove(LIST *lst,int index);
05E8: 00000000 694C3E44 ; 17A: __thumb int GetCurrentPID(void);
05EC: 00000000 450A2D45 ; 17B: __thumb int ListElement_Prt2NumElement(LIST *lst,void *ptr);
05F0: 00000000 A0D44244 ; 17C: __arm union SIGNAL *alloc(OSBUFSIZE size,SIGSELECT signo);
05F4: 00000000 BCD44244 ; 17D: __arm union SIGNAL *receive(const SIGSELECT *sigsel);
05F8: 00000000 ACD44244 ; 17E: __arm void send(union SIGNAL **sig,PROCESS to);
05FC: 00000000 0CD54244 ; 17F: __arm PROCESS sender(union SIGNAL **sig);
0600: 00000000 CCD44244 ; 180: __arm void free_buf(union SIGNAL **sig);
0604: 00000000 98D54244 ; 181: __unknown PROCESS create_process(int proc_type,char *name,OSENTRYPOINT *entrypoint,OSADDRESS stack_size,OSPRIORITY priority,OSTIME timeslice,PROCESS pid_block,void *redir_table,OSVECTOR vector,OSUSER user);
0608: 00000000 B8D74244 ; 182: __arm void start(PROCESS pid);
060C: 00000000 68D64244 ; 183: __arm int get_ptype(PROCESS pid);
0610: 00000000 B4D54244 ; 184: __arm PROCESS current_process(void);
0614: 00000000 ECD44244 ; 185: __arm void delay(OSTIME timeout);
0618: 00000000 B4D64244 ; 186: OSBOOLEAN hunt(const char *name, OSUSER user, PROCESS *name_, union SIGNAL **hunt_sig);
061C: 00000000 E0D64244 ; 187: void kill_proc(PROCESS pid);
;0620: xxxxxxxx yyyyyyyy ; 188:
;0624: xxxxxxxx yyyyyyyy ; 189: union SIGNAL *receive_w_tmo (OSTIME timeout, SIGSELECT *sel);
;0628: xxxxxxxx yyyyyyyy ; 18A:
;062C: xxxxxxxx yyyyyyyy ; 18B: void stop(PROCESS pid);
;0630: xxxxxxxx yyyyyyyy ; 18C: OSBOOLEAN get_mem(PROCESS pid, OSADDRESS from, void* to, OSADDRESS size);
;0634: xxxxxxxx yyyyyyyy ; 18D: OSADDRESS get_envp (PROCESS pid, char *name);
;0638: xxxxxxxx yyyyyyyy ; 18E: OSBOOLEAN set_envp (PROCESS pid, char *name, OSADDRESS value);
;063C: xxxxxxxx yyyyyyyy ; 18F: PROCESS get_bid (PROCESS pid);
;0640: xxxxxxxx yyyyyyyy ; 190:
;0644: xxxxxxxx yyyyyyyy ; 191:
;0648: xxxxxxxx yyyyyyyy ; 192:
;064C: xxxxxxxx yyyyyyyy ; 193:
;0650: xxxxxxxx yyyyyyyy ; 194:
;0654: xxxxxxxx yyyyyyyy ; 195:
;0658: xxxxxxxx yyyyyyyy ; 196:
;065C: xxxxxxxx yyyyyyyy ; 197:
;0660: xxxxxxxx yyyyyyyy ; 198:
;0664: xxxxxxxx yyyyyyyy ; 199:
;0668: xxxxxxxx yyyyyyyy ; 19A:
;066C: xxxxxxxx yyyyyyyy ; 19B:
;0670: xxxxxxxx yyyyyyyy ; 19C:
;0674: xxxxxxxx yyyyyyyy ; 19D:
;0678: xxxxxxxx yyyyyyyy ; 19E:
;067C: xxxxxxxx yyyyyyyy ; 19F:
0680: 00000000 3DB26744 ; 1A0: __thumb char* strcpy(char * dest, const char * source);
0684: 00000000 A96D1245 ; 1A1: __thumb void *CreateMessage(int size,int ev,char *name);
0688: 00000000 FD6D1245 ; 1A2: __thumb void SendMessage(void **signal,int PID);
068C: 00000000 856E1245 ; 1A3: __unknown void * WaitMessage(void *SIGSEL);
0690: 00000000 996E1245 ; 1A4: __thumb int FreeMessage(void **Mess);
0694: 00000000 ADE40E45 ; 1A5: __thumb void SendDispatchMessage(int id, int unk_zero, int size,void *mess);
0698: 00000000 51413C45 ; 1A6: __thumb char * UIEventName(int event);
069C: 00000000 14E61620 ;81A7: __thumb int * MissedEvents(void);
06A0: 00000000 FD553C45 ; 1A8: __thumb void UI_Event(int event);
06A4: 00000000 0D563C45 ; 1A9: __thumb void UI_Event_wData(int event,void *message,void (*mfree)(void*));
06A8: 00000000 55563C45 ; 1AA: __thumb void UI_Event_toBookID(int event,int BookID);
06AC: 00000000 69563C45 ; 1AB: __thumb void UI_Event_toBookIDwData(int event,int BookID,void *message,void (*mfree)(void*));
06B0: 00000000 A50C2D45 ; 1AC: __thumb int ListElement_Find(LIST *lst,void *element, int (*cmp_proc)(void *,void *));
06B4: 00000000 A90B2D45 ; 1AD: __thumb void * ListElement_GetByIndex(LIST * , int index);
06B8: 00000000 3DBC6744 ; 1AE: __thumb wchar_t* wstrrchr(const wchar_t* wstr, wchar_t wchar);
06BC: 00000000 65693C45 ; 1AF: __thumb void BookObj_CallSubroutine(BOOK * , BOOK_SUBROUTINE *subr);
06C0: 00000000 8D0A2D45 ; 1B0: __unknown void ListElement_Add(LIST *lst,void *newElement);
06C4: 00000000 A9A42C44 ; 1B1: __thumb void debug_printf(const char * fmt,...);
06C8: 00000000 315D1345 ; 1B2: __thumb int PlayFile(const wchar_t * path, const wchar_t * fname);
;06CC: xxxxxxxx yyyyyyyy ; 1B3:
06D0: 00000000 B9D33F45 ; 1B4: int REQUEST_PROFILE_GETACTIVEPROFILE(const int *__zero , int *level);
06D4: 00000000 01EC3E45 ; 1B5: int Profile_SetActive(int NUMprof,int set_in_gdfs_flag);
06D8: 00000000 C15F3F45 ; 1B6: void SetBrightnessOfScreen(int br);
06DC: 00000000 39AF4A45 ; 1B7: __thumb int isKeylocked(void);
06E0: 00000000 7D690745 ;81B8: IS_NEEDED_BOOK isMediaPlayerVideoBook(void);
;06E4: xxxxxxxx yyyyyyyy ; 1B9:
06E8: 00000000 93613D45 ; 1BA: void ShuttingDown(void);
06EC: 00000000 F97E0F45 ; 1BB: void Vibra(int t1, int t2, int t3);
06F0: 00000000 890EE744 ; 1BC: int REQUEST_DATEFORMAT_GET(const int *SYNC, char *DateFormat);
06F4: 00000000 1D0FE744 ; 1BD: int REQUEST_TIMEFORMAT_GET(const int *SYNC, char *TimeFormat);
06F8: 00000000 1D2A3C45 ; 1BE: __thumb int Date2ID(DATE *, int TimeFormat,int);
06FC: 00000000 45293C45 ; 1BF: __thumb int Time2ID(TIME *, char TimeFormat,int isSec);
0700: 00000000 75594345 ; 1C0: __thumb GUI_LIST * CreateListObject(BOOK * , void * unk);
0704: 00000000 A55B4345 ; 1C1: __thumb void SetNumOfMenuItem(void * , int item_count);
0708: 00000000 748A1620 ;81C2: __unknown LIST ** ROOT_APP(void); //Application session list
070C: 00000000 758F4945 ; 1C3: __thumb void SoftKey_AddHelpStr(void *gui,int msg,int StrID);
0710: 00000000 69904945 ; 1C4: __unknown void SoftKey_SetItemAsSubItem(void *gui,int item,int subitem);
0714: 00000000 9DCC3D45 ; 1C5: __thumb int REQUEST_SYSTEM_SHUTDOWN(void);
0718: 00000000 ADCCFF44 ; 1C6: __thumb int REQUEST_SYSTEM_RESTART(void);
071C: 00000000 AD8F4945 ; 1C7: __thumb void SoftKeys_SetText(void *gui,int msg,int StrID,int StrID1);
0720: 00000000 C1284A45 ; 1C8: __unknown int isRightNowBook(BOOK *);
0724: 00000000 D9963D45 ; 1C9: __unknown int isVolumeControllerBook(BOOK *);
0728: 00000000 81D44745 ; 1CA: __thumb GUI_TABMENUBAR * CreateTabMenuBar(BOOK *);
072C: 00000000 55D54745 ; 1CB: __thumb void TabMenuBar_SetTabCount(GUI_TABMENUBAR * , int count);
0730: 00000000 09D64745 ; 1CC: __thumb void TabMenuBar_AssignGuiObj(GUI_TABMENUBAR * , int tab , GUI *);
0734: 00000000 45D64745 ; 1CD: void TabMenuBar_SetTabIcon(GUI_TABMENUBAR *,int tab, wchar_t icon , int for_state);
0738: 00000000 A9C34745 ; 1CE: __thumb GUI *GUI_Free(GUI*);
073C: 00000000 C1E64045 ; 1CF: __thumb void InputFeedback_SetIcon(GUI *gui, wchar_t icon);
0740: 00000000 51E54045 ; 1D0: __thumb int StringInput_GetStringAndLen (GUI*,wchar_t**,u16*);
0744: 00000000 BC581620 ;81D1: PAudioControl* GetAudioControlPtr();
0748: 00000000 21E7D744 ; 1D2: int AudioControl_Vibrate(PAudioControl pIAudioControl, int vibratime, int pausetime, int totaltime);
074C: 00000000 491EFB44 ; 1D3: __unknown int GetVolumeSize(wchar_t *root_folder, VOLUMESIZE *);
0750: 00000000 71754345 ; 1D4: __thumb GUI_NOFMANY * CreateNOfMany(BOOK *);
0754: 00000000 B1774345 ; 1D5: __thumb void NOfMany_SetTexts(GUI_NOFMANY * , int * StrIDtable, int items_count);
0758: 00000000 35774345 ; 1D6: __thumb void NOfMany_SetChecked(GUI_NOFMANY * , u16 * checked_table, int items_count);
075C: 00000000 FD764345 ; 1D7: __thumb void NOfMany_SetCursor(GUI_NOFMANY * , int item);
0760: 00000000 59774345 ; 1D8: __thumb int NOfMany_GetCheckedCount(GUI_NOFMANY *);
0764: 00000000 49774345 ; 1D9: __thumb int NOfMany_GetChecked(GUI_NOFMANY * , u16 * buffer );
0768: 00000000 A9774345 ; 1DA: __thumb void NOfMany_SetonMessage(GUI_NOFMANY * , void * proc );
;076C: xxxxxxxx yyyyyyyy ; 1DB:
;0770: xxxxxxxx yyyyyyyy ; 1DC:
;0774: xxxxxxxx yyyyyyyy ; 1DD:
;0778: xxxxxxxx yyyyyyyy ; 1DE:
077C: 00000000 815E1345 ; 1DF: PAudioControl AudioControl_Init();
0780: 00000000 DD7C4345 ; 1E0: __thumb void OneOfMany_SetFocused(GUI_ONEOFMANY * , int item);
0784: 00000000 417D4345 ; 1E1: __thumb void OneOfMany_SetonMessage(GUI_ONEOFMANY * , int (*proc)(GUI_MESSAGE *));
0788: 00000000 C1503D45 ; 1E2: __unknown GUI_FEEDBACK * CreateFeedBack (int,...);
078C: 00000000 8D513D45 ; 1E3: __thumb void FeedBack_SetText(GUI_FEEDBACK*,int);
0790: 00000000 11FAAE44 ; 1E4: __thumb int GetBattaryState(const int * , BATT *);
0794: 00000000 959E4745 ; 1E5: __thumb void * get_DisplayGC (void);
0798: 00000000 99274745 ; 1E6: __thumb void GetGuiRect(void*,RECT*);
079C: 00000000 6DA54745 ; 1E7: __thumb void get_GC_RECT(void*,RECT*);
07A0: 00000000 71A84745 ; 1E8: __thumb int get_GC_xx(void * GC);
07A4: 00000000 65A84745 ; 1E9: __thumb void *set_GC_xx(void * GC, int);
07A8: 00000000 1DA54745 ; 1EA: __thumb void GC_validate_RECT(void * GC , RECT*);
07AC: 00000000 D56E3C45 ; 1EB: __thumb void addGui2book(BOOK*,GUI*);
07B0: 00000000 25504745 ; 1EC: __thumb void DrawRect(int x1, int y1,int x2 ,int y2,int pen_color,int brush_color);
07B4: 00000000 25534745 ; 1ED: __thumb void DrawString(int StrID,int align,int x1,int y1,int x2,int y2,int unk,int unk1,int pen_color ,int brush_color);
07B8: 00000000 B1733C45 ; 1EE: void addGui2XGuiList (void* xguilist , GUI*);
07BC: 00000000 05264745 ; 1EF: __thumb void InvalidateRect(DISP_OBJ *,RECT*);
07C0: 00000000 CDC24745 ; 1F0: int CreateObject(GUI*,void (*)(DISP_DESC *),void (*)(DISP_DESC *),BOOK *,void(*)(),int,int size_obj);
07C4: 00000000 815D4745 ; 1F1: __thumb int SetFont(int);
07C8: 00000000 34D81620 ;81F2: __unknown DISP_OBJ ** StatusRow_p(void);
07CC: 00000000 35533C45 ; 1F3: int root_list_get_session_count(void);
07D0: 00000000 41533C45 ; 1F4: UI_APP_SESSION *root_list_get_session(int num_session);
07D4: 00000000 3D4C3C45 ; 1F5: BOOK *SESSION_GetTopBook(UI_APP_SESSION *);
07D8: 00000000 1D553D45 ; 1F6: int MainInput_getVisible(GUI *);
07DC: 00000000 29553D45 ; 1F7: int MainInput_strlen(GUI *);
07E0: 00000000 41553D45 ; 1F8: char * MainInput_getPNUM(GUI *);
07E4: 00000000 F54C3D45 ; 1F9: int MainInput_isPlus(GUI *);
07E8: 00000000 51723C45 ; 1FA: int BOOK_GetBookID(BOOK * );
07EC: 00000000 B5BB6744 ; 1FB: __thumb int wstrncmp(const wchar_t*,const wchar_t*,int);
07F0: 00000000 E5374745 ; 1FC: int DISP_OBJ_GetAbsoluteXPos(DISP_OBJ *);
07F4: 00000000 19384745 ; 1FD: int DISP_OBJ_GetAbsoluteYPos(DISP_OBJ *);
07F8: 00000000 B52A4745 ; 1FE: WINDOW * DISP_OBJ_GetWindow(DISP_OBJ *);
07FC: 00000000 91BB4945 ; 1FF: int GetThemeColor(int , int);
0800: 00000000 91CC3F45 ; 200: int REQUEST_SETTING_SILENCE_SET(const int * __zero,u16 profile,u16 value);
0804: 00000000 39CC3F45 ; 201: int REQUEST_SETTING_SILENCE_GET(const int * __zero,u16 profile, char * silence_mode);
0808: 00000000 216DF044 ; 202: __thumb void VCALL_Init (void* vc);
080C: 00000000 196EF044 ; 203: __thumb void VCALL_SetName (void * vc , wchar_t * name ,unsigned short name_len);
0810: 00000000 796EF044 ; 204: __thumb void VCALL_SetNameIcon (void * vc , wchar_t icon);
0814: 00000000 396EF044 ; 205: __thumb void VCALL_SetNumber (void * vc , wchar_t * number , unsigned short num_len);
0818: 00000000 5D6EF044 ; 206: __thumb void VCALL_SetHZ1 (void * vc, int , u16 );
081C: 00000000 696EF044 ; 207: __thumb void VCALL_SetHZ2 (void * vc , u16 );
0820: 00000000 7968F044 ; 208: __thumb void MakeVoiceCall (int SessioID , void * vc ,int flag);
0824: 00000000 F37A3345 ; 209: int isDirectory (wchar_t * path ,wchar_t * filename , int * error );
0828: 00000000 21FBFA44 ; 20A: __thumb void FileDelete (wchar_t * path ,wchar_t * filename , int * error );
082C: 00000000 C5C54745 ; 20B: void SetFocus (GUI * , int);
0830: 00000000 61991545 ; 20C: __thumb int CreateSMSCont (int, void*);
0834: 00000000 01A01545 ; 20D: __thumb int FreeSMSCont (void*);
0838: 00000000 399B1545 ; 20E: __thumb int PrepareSMSCont (void*,wchar_t*,wchar_t*,int,int);
083C: 00000000 619F1545 ; 20F: __thumb int CteateNewMessage (int,void*,int);
0840: 00000000 C8F6BD45 ;8210: __unknown void * get_APP_DESC_TABLE(void);
0844: 00000000 C9954745 ; 211: __thumb C_INTERFACE *Window_GetComponentInterface(WINDOW*);
0848: 00000000 753FF144 ; 212: __thumb int AB_POSITIONNBR_GET(void * ab_name,char * ,u16 * ,void * ab_num);
084C: 00000000 9D3EF144 ; 213: __thumb int AB_NAME_ITEM2StrID(AB_STR_ITEM * ab_name);
0850: 00000000 E53EF144 ; 214: __thumb int AB_NUM_ITEM2StrID(AB_NUM_ITEM * ab_num_item);
0854: 00000000 BB051444 ; 215: __thumb int GetABRecNum(AB_GET_STRUCT *); //nullsub(void)
0858: 00000000 9058B945 ;8216: AB_ITEM_DESC * get_AB_ITEMS_DESC();
085C: 00000000 7D49B944 ; 217: GUI * SBY_GetMainInput(BOOK * StandBy); // !!!!! не настоящий !!!!!!
0860: 00000000 7949B944 ; 218: GUI * SBY_GetStatusIndication(BOOK * StandBy); // !!!!! не настоящий !!!!!!
0864: 00000000 DDE7E844 ; 219: int REQUEST_PHONEBOOK_ACCESSSTATUS_TOTAL_GET(const int * __zero, int *);
0868: 00000000 7C3C0820 ;821A: __thumb int * PID_MMI(void);
;086C: xxxxxxxx yyyyyyyy ; 21B:
;0870: xxxxxxxx yyyyyyyy ; 21C: GUI * DISP_OBJ_GetGUI(DISP_OBJ *);
0874: 00000000 E51E4745 ; 21D: DISP_OBJ* DISPBASE_GetFocused(int display);
0878: 00000000 99244745 ; 21E: char DISP_OBJ_getVisible(DISP_OBJ*);
087C: 00000000 B593A144 ; 21F: __thumb DISP_DESC* DISP_OBJ_GetDESC (DISP_OBJ* obj); // !!!!! не настоящий !!!!!!
0880: 00000000 EDDF4645 ; 220: __thumb void DISP_DESC_SetName (DISP_DESC* , const char * name);
0884: 00000000 A5354745 ; 221: __thumb char* DISP_OBJ_GetName (DISP_OBJ *);
0888: 00000000 F1DF4645 ; 222: __thumb void DISP_DESC_SetSize (DISP_DESC* , u16 size);
;088C: xxxxxxxx yyyyyyyy ; 223: u16 DISP_DESC_GetSize (DISP_OBJ *);
0890: 00000000 F5DF4645 ; 224: __thumb void DISP_DESC_SetOnCreate (DISP_DESC* , DISP_OBJ_ONCREATE_METHOD);
0894: 00000000 7DE04645 ; 225: __thumb DISP_OBJ_ONCREATE_METHOD DISP_OBJ_GetOnCreate (DISP_OBJ *);
0898: 00000000 F9DF4645 ; 226: __thumb void DISP_DESC_SetOnClose (DISP_DESC* , DISP_OBJ_ONCLOSE_METHOD);
089C: 00000000 99E04645 ; 227: __thumb DISP_OBJ_ONCLOSE_METHOD DISP_OBJ_GetOnClose (DISP_OBJ *);
08A0: 00000000 FDDF4645 ; 228: __thumb void DISP_DESC_SetOnRedraw (DISP_DESC* , DISP_OBJ_ONREDRAW_METHOD);
08A4: 00000000 B5E04645 ; 229: __thumb DISP_OBJ_ONREDRAW_METHOD DISP_OBJ_GetOnRedraw (DISP_OBJ *);
08A8: 00000000 05E04645 ; 22A: __thumb void DISP_DESC_SetOnKey (DISP_DESC* , DISP_OBJ_ONKEY_METHOD);
08AC: 00000000 EDE04645 ; 22B: __thumb DISP_OBJ_ONKEY_METHOD DISP_OBJ_GetOnKey (DISP_OBJ *);
08B0: 00000000 01E04645 ; 22C: void DISP_DESC_SetonRefresh (DISP_DESC* ,DISP_OBJ_METHOD);
08B4: 00000000 D1E04645 ; 22D: DISP_OBJ_METHOD DISP_OBJ_GetonRefresh (DISP_OBJ *);
;08B8: xxxxxxxx yyyyyyyy ; 22E: void DISP_DESC_SetMethod04 (DISP_DESC* ,void (*)(void*));
;08BC: xxxxxxxx yyyyyyyy ; 22F: DISP_OBJ_METHOD DISP_OBJ_GetMethod04 (DISP_OBJ *);
;08C0: xxxxxxxx yyyyyyyy ; 230: void DISP_DESC_SetMethod05 (DISP_DESC* ,void (*)(void*));
;08C4: xxxxxxxx yyyyyyyy ; 231: DISP_OBJ_METHOD DISP_OBJ_GetMethod05 (DISP_OBJ *);
08C8: 00000000 09E04645 ; 232: __thumb void DISP_DESC_SetMethod06 (DISP_DESC* ,DISP_OBJ_METHOD);
08CC: 00000000 09E14645 ; 233: __thumb DISP_OBJ_METHOD DISP_OBJ_GetMethod06 (DISP_OBJ *);
;08D0: xxxxxxxx yyyyyyyy ; 234: void DISP_DESC_SetMethod07 (DISP_DESC* ,void (*)(void*));
;08D4: xxxxxxxx yyyyyyyy ; 235: DISP_OBJ_METHOD DISP_OBJ_GetMethod07 (DISP_OBJ *);
08D8: 00000000 11E04645 ; 236: __thumb void DISP_DESC_SetMethod08 (DISP_DESC* ,DISP_OBJ_METHOD);
08DC: 00000000 41E14645 ; 237: __thumb DISP_OBJ_METHOD DISP_OBJ_GetMethod08 (DISP_OBJ *);
08E0: 00000000 15E04645 ; 238: void DISP_DESC_SetMethod09 (DISP_DESC* ,void (*)(void*));
;08E4: xxxxxxxx yyyyyyyy ; 239: DISP_OBJ_METHOD DISP_OBJ_GetMethod09 (DISP_OBJ *);
;08E8: xxxxxxxx yyyyyyyy ; 23A: void DISP_DESC_SetMethod0A (DISP_DESC* ,void (*)(void*));
;08EC: xxxxxxxx yyyyyyyy ; 23B: DISP_OBJ_METHOD DISP_OBJ_GetMethod0A (DISP_OBJ *);
;08F0: xxxxxxxx yyyyyyyy ; 23C: void DISP_DESC_SetMethod0B (DISP_DESC* ,void (*)(void*));
;08F4: xxxxxxxx yyyyyyyy ; 23D: DISP_OBJ_METHOD DISP_OBJ_GetMethod0B (DISP_OBJ *);
;08F8: xxxxxxxx yyyyyyyy ; 23E: void DISP_DESC_SetMethod0C (DISP_DESC* ,void (*)(void*));
;08FC: xxxxxxxx yyyyyyyy ; 23F: DISP_OBJ_METHOD DISP_OBJ_GetMethod0C (DISP_OBJ *);
0900: 00000000 EBB31145 ; 240: void JavaSession_Manager (int cmd); //nullsub(void)
0904: 00000000 E9B31145 ; 241: int JavaSession_GetName(void); //nullsub(ret 0)
0908: 00000000 85EC4545 ; 242: __thumb int TextCopyId(int);
090C: 00000000 F1713C45 ; 243: __thumb UI_APP_SESSION *Book_GetSession(BOOK*);
0910: 00000000 69674345 ; 244: __thumb void List2lineSetAsSubitem (void* msg,int unk,int n_sub_items);
0914: 00000000 E1674345 ; 245: __thumb void List2lineSubitemAddText(void* msg,int StrID);
0918: 00000000 D5674345 ; 246: __thumb int GUIonMessage_GetCreatedSubItemParrentIndex(void * msg);
091C: 00000000 C5103345 ; 247: void GoMusic(void);
0920: 00000000 CD7F0F45 ; 248: void Vibra_Off (int t1);
;0924: xxxxxxxx yyyyyyyy ; 249:
0928: 00000000 355D1345 ; 24A: int PlayFileV(const wchar_t * path,const wchar_t * fname, int vol);
092C: 00000000 E1730F45 ; 24B: int GetSilent(void);
0930: 00000000 594C0F45 ; 24C: int GetVibrator(int ignorevibrator,int ignoresilent);
0934: 00000000 45820F45 ; 24D: int GetAudioSettings(int what, char* retvalue);
0938: 00000000 DD8D2C44 ; 24E: int GetChipID(void);
;093C: xxxxxxxx yyyyyyyy ; 24F:
;0940: xxxxxxxx yyyyyyyy ; 250:
;0944: xxxxxxxx yyyyyyyy ; 251:
0948: 00000000 C9674345 ; 252: __thumb int List2LineGetCurrentIndex(void * msg);
094C: 00000000 BD674345 ; 253: __thumb int GUIonMessage_GetCurrentItemIndex(void * msg);
0950: 00000000 39D3FA44 ; 254: __thumb void DestroyDirHandle(DIR_HANDLE *handle);
0954: 00000000 441DBB45 ;8255: DB_EXT *LastExtDB(void);
0958: 00000000 F533FE44 ; 256: void GetOtherExtMethods(FILESUBROUTINE **);
095C: 00000000 B11D3D45 ; 257: void MessageBox(int HeaderStrID,int MessageStrID,wchar_t IconID, int style /*1 or 2*/,int time,BOOK * unk);
0960: 00000000 ADF64845 ; 258: int Display_GetHeight(int Display);
0964: 00000000 B9F64845 ; 259: int Display_GetWidth(int Display);
0968: 00000000 E15C1345 ; 25A: void PlaySystemSound (int SndNumber);
;096C: xxxxxxxx yyyyyyyy ; 25B:
;0970: xxxxxxxx yyyyyyyy ; 25C:
0974: 00000000 49D54745 ; 25D: int TabMenuBar_GetFocusedTabIndex(GUI_TABMENUBAR * );
0978: 00000000 39D54745 ; 25E: void TabMenuBar_SetTabFocused(GUI_TABMENUBAR * , int tab_num);
097C: 00000000 79A74745 ; 25F: int GC_GetPenColor (void* GC);
0980: 00000000 3DA74745 ; 260: void GC_SetPenColor(void* GC , int pen_color);
0984: 00000000 7DA34745 ; 261: void GC_SetPixel (void* GC,int x1,int y1,int color);
0988: 00000000 F5AE4745 ; 262: void GC_DrawLine(void* GC,int x1, int y1, int x2, int y2);
098C: 00000000 81B04745 ; 263: void GC_DrawFRect (void* GC,int color,int x1,int y1,int x2 ,int y2);
0990: 00000000 49A44745 ; 264: int GC_DrawBitmap(void *GC, int x1, int y1, int x2, int y2, int * bmp);
0994: 00000000 F956C144 ; 265: __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
0998: 00000000 4558C144 ; 266: __thumb void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
099C: 00000000 9D3EC144 ; 267: __thumb png_infop png_create_info_struct(png_structp png_ptr);
09A0: 00000000 D13EC144 ; 268: __thumb void png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr);
09A4: 00000000 D156C144 ; 269: __thumb void png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr, png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn, png_progressive_end_ptr end_fn);
09A8: 00000000 9146C144 ; 26A: __thumb void png_process_data(png_structp png_ptr, png_infop info_ptr, png_bytep buffer, png_size_t buffer_size);
09AC: 00000000 1958C144 ; 26B: __thumb void png_read_update_info(png_structp png_ptr, png_infop info_ptr);
09B0: 00000000 F556C144 ; 26C: __thumb png_voidp png_get_progressive_ptr(png_structp png_ptr);
09B4: 00000000 5943C144 ; 26D: __thumb png_uint_32 png_get_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
09B8: 00000000 E559C144 ; 26E: __thumb void png_set_strip_16(png_structp png_ptr);
09BC: 00000000 F159C144 ; 26F: __thumb void png_set_gray_1_2_4_to_8(png_structp png_ptr);
09C0: 00000000 155AC144 ; 270: __thumb void png_set_gray_to_rgb(png_structp png_ptr);
09C4: 00000000 2D43C144 ; 271: __thumb png_uint_32 png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag);
09C8: 00000000 095AC144 ; 272: __thumb void png_set_tRNS_to_alpha(png_structp png_ptr);
09CC: 00000000 4D87C144 ; 273: __thumb void png_set_filler(png_structp png_ptr, png_uint_32 filler, int flags);
09D0: 00000000 F159C144 ; 274: __thumb void png_set_palette_to_rgb(png_structp png_ptr);
09D4: 00000000 4543C144 ; 275: __thumb png_uint_32 png_get_rowbytes(png_structp png_ptr, png_infop info_ptr);
09D8: 00000000 B156C144 ; 276: __thumb void png_progressive_combine_row(png_structp png_ptr, png_bytep old_row, png_bytep new_row);
09DC: 00000000 953DC144 ; 277: __thumb int png_sig_cmp(png_bytep sig, png_size_t start, png_size_t num_to_check);
09E0: 00000000 34893F44 ; 278: __arm int setjmp(jmp_buf jmpbuf);
09E4: 00000000 58893F44 ; 279: __arm void longjmp(jmp_buf, int);
09E8: 00000000 B193C144 ; 27A: __thumb int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size);
09EC: 00000000 5195C144 ; 27B: __thumb int inflate (z_streamp strm, int flush);
09F0: 00000000 B1A7C144 ; 27C: __thumb int inflateEnd (z_streamp strm);
09F4: 00000000 0C310020 ; 27D: int memcmp (const void *m1,const void *m2,int n);
09F8: 00000000 ADB26744 ; 27E: __thumb int strncmp(const char *s1, const char *s2, int len);
09FC: 00000000 E1B26744 ; 27F: __thumb char *strncpy (char *dest,const char *source,int maxlen);
0A00: 00000000 DDB16744 ; 280: __thumb char *strcat(char *dest, const char *src);
0A04: 00000000 2DCB4745 ; 281: __thumb void GuiObject_SetTitleType(GUI *gui, int type);
0A08: 00000000 75674345 ; 282: __thumb void GUIonMessage_SetItemDisabled (void * msg, int Disabled);
0A0C: 00000000 4989F644 ; 283: __thumb int REQUEST_IMAGEHANDLER_INTERNAL_REGISTER(const int * __zero,u16 ImageHandle,wchar_t *path,wchar_t *fname,int unk, wchar_t * ImageID ,char * error);
0A10: 00000000 F989F644 ; 284: __thumb int REQUEST_IMAGEHANDLER_INTERNAL_UNREGISTER (const int * __zero,u16 ImageHandle,u16* ,u16* ,wchar_t ImageID, int unk_1,char * error);
0A14: 00000000 40CA2E20 ;8285: SURFACE ** get_Surfaces(void);
0A18: 00000000 7D0DD644 ; 286: int iconidname2id(const wchar_t* idname,int maxnamelen,int *id);
0A1C: 00000000 3D8CE644 ; 287: int textidname2id(const wchar_t* idname,int maxnamelen,int* id);
0A20: 00000000 755D4345 ; 288: void ListMenu_SetNoItemText(GUI_LIST *, int str);
;0A24: xxxxxxxx yyyyyyyy ; 289:
0A28: 00000000 798CFC44 ;828A: IS_NEEDED_BOOK isFmRadioBook(void); //nullsub(ret 0)
0A2C: 00000000 BDCC0545 ;828B: IS_NEEDED_BOOK isAudioPlayerBook(void);
0A30: 00000000 F1130645 ; 28C: void PlayerControl(BOOK *AudioPlayerBook, int);
0A34: 00000000 FD172D44 ; 28D: void SwitchRadioStationFromList(BOOK *FmRadioBook, int); //nullsub(void)
0A38: 00000000 49674A45 ; 28E: void Shortcut_Run (wchar_t * shortcut_name);
0A3C: 00000000 85C5FA44 ; 28F: int mkdir(const wchar_t* path);
0A40: 00000000 71CCFA44 ; 290: int rmdir(const wchar_t* path, int zero);
0A44: 00000000 51FAFA44 ; 291: int chmod(const wchar_t* path, const wchar_t* fname, int amode);
0A48: 00000000 4100FB44 ; 292: int rename(const wchar_t* oldpath, const wchar_t* oldfname, const wchar_t* newpath, const wchar_t* newfname, int zero);
0A4C: 00000000 3D644745 ; 293: int GetImageWidth(wchar_t ImageID);
0A50: 00000000 51644745 ; 294: int GetImageHeight(wchar_t ImageID);
0A54: 00000000 5574ED44 ; 295: void * CallID_GetCallStatusDesc(int CallID);
0A58: 00000000 05CA7444 ; 296: wchar_t * CallStatusDesc_GetName(void * CallStatusDesc);
0A5C: 00000000 E90C2D45 ; 297: void List_FreeElements(LIST *,int (*cmp_proc)(void * elem_from_list),void (*freefunc)(void * elem_from_list));
0A60: 00000000 79B36744 ; 298: char * strstr(const char * str1,const char * str2);
0A64: 00000000 A5DE4C45 ; 299: int GPRS_GetLastSessionInfo(int,GPRS_SESSION_INFO *);
0A68: 00000000 9D07F744 ; 29A: int wstrcmpni(const wchar_t * wstr1,const wchar_t * wstr2,int len);
0A6C: 00000000 21323C45 ; 29B: int wtoi(const wchar_t * wstr,int len,int * dest);
0A70: 00000000 61791245 ; 29C: void DATE_GetWeekDay(DATE *,char * dest);
0A74: 00000000 9DC2E944 ; 29D: void Cale_GetSettings(int setID,void *);
0A78: 00000000 7DBC6744 ; 29E: wchar_t * wstrwstr(const wchar_t * wstr1,const wchar_t * wstr2);
0A7C: 00000000 E107F744 ; 29F: int wstrcmpi(const wchar_t *ws1, const wchar_t *ws2);
0A80: 00000000 FDBA6744 ; 2A0: wchar_t * wstrchr(const wchar_t * source,wchar_t chr);
0A84: 00000000 95924945 ; 2A1: void GUIObject_HideSoftkeys(void *gui);
0A88: 00000000 A1924945 ; 2A2: void GUIObject_ShowSoftkeys(void *gui);
0A8C: 00000000 257A4945 ; 2A3: DISP_OBJ* DispObject_SoftKeys_Get(void);
0A90: 00000000 21AF4645 ; 2A4: int StandbyBackground_SetImage(int type,int,int,const wchar_t* path,const wchar_t* fname,int);
0A94: 00000000 21D04845 ; 2A5: GUI *CreateYesNoQuestionVA(int zero, ...);
0A98: 00000000 995F4345 ; 2A6: void ListMenu_SetSecondLineText(GUI_LIST *,int elem_num,int StrID);
0A9C: 00000000 6168FD44 ; 2A7: void _REQUEST_OAF_START_APPLICATION(const int * __one,int __zero,MIDP_DESC *,int ___zero);
0AA0: 00000000 311CFB44 ; 2A8: __thumb int FSX_isNameInvalid(wchar_t * name);
0AA4: 00000000 09CAFE44 ; 2A9: __thumb void DataBrowserDesc_SetFoldersNumber(void * DataBrowserDesc,int state);
0AA8: 00000000 E1C9FE44 ; 2AA: __thumb void DataBrowserDesc_SetActions(void * DataBrowserDesc,char * actions);
0AAC: 00000000 59C9FE44 ; 2AB: __thumb void DataBrowserDesc_SetSelectAction(void * DataBrowserDesc,int state);
0AB0: 00000000 61C9FE44 ; 2AC: __thumb void DataBrowserDesc_SetSelectActionOnFolders(void * DataBrowserDesc,int state);
0AB4: 00000000 35C9FE44 ; 2AD: __thumb void DataBrowserDesc_SetBookID(void * DataBrowserDesc,int BookID);
0AB8: 00000000 DDC8FE44 ; 2AE: __thumb void DataBrowserDesc_SetItemFilter(void * DataBrowserDesc,DB_FILE_FILTER);
0ABC: 00000000 39CAFE44 ; 2AF: __thumb void DataBrowserDesc_SetOption(void * DataBrowserDesc,char * option);
0AC0: 00000000 CDCAFE44 ; 2B0: __thumb void DataBrowserDesc_SetOpenEmptyFolder(void * DataBrowserDesc,int state);
0AC4: 00000000 E5C8FE44 ; 2B1: __thumb void DataBrowserDesc_SetFileExtList(void * DataBrowserDesc,const wchar_t * ExtList);
0AC8: 00000000 356CFF44 ; 2B2: __thumb void FSX_RemoveIllegalSymbolsName(FILEITEM *);
0ACC: 00000000 9D64FF44 ; 2B3: __thumb FILEITEM * FILEITEM_Create(void);
0AD0: 00000000 8D65FF44 ; 2B4: __thumb void FILEITEM_Destroy(FILEITEM *);
0AD4: 00000000 51B44845 ; 2B5: __thumb GUI *CreateDateInputVA(int zero, ...);
0AD8: 00000000 49CC4845 ; 2B6: __thumb GUI *CreateTimeInputVA(int zero, ...);
0ADC: 00000000 9DE54045 ; 2B7: __thumb void StringInput_SetCursorPosition(GUI *,u16 curs_pos,char unk);
0AE0: 00000000 F1693C45 ; 2B8: __thumb void BookObj_CallPage(BOOK * book, const PAGE_DESC * page);
0AE4: 00000000 55B64845 ; 2B9: __thumb unsigned int DateInput_GetDateInt(void *dateinp_msg);
0AE8: 00000000 91CE4845 ; 2BA: __thumb unsigned int TimeInput_GetTimeInt(void *timeinp_msg);
0AEC: 00000000 9CDB1620 ;82BB: FONT_DESC *GetFontDesc(void);
0AF0: 00000000 30DE1620 ;82BC: int *GetFontCount();
0AF4: 00000000 59A84745 ; 2BD: __thumb int GC_GetBrushColor(void* GC);
0AF8: 00000000 19A84745 ; 2BE: __thumb void GC_SetBrushColor(void* GC , int brush_color);
0AFC: 00000000 C9B04745 ; 2BF: __thumb void GC_DrawRoundRect(void* GC ,RECT *,int arcWidth,int arcHeight,int border_flag,int fill_flag);
0B00: 00000000 F1DF4945 ; 2C0: __thumb BOOK * MenuBook_Desktop(int mode,int BookID);
0B04: 00000000 85E14945 ; 2C1: __thumb wchar_t * MenuBook_Desktop_GetSelectedItemID(BOOK * MenuBook_Desktop);
0B08: 00000000 F9404945 ; 2C2: __thumb void BookObj_Softkey_SetAction(BOOK *,int actionID,void (*proc)(BOOK *,void*));
0B0C: 00000000 31414945 ; 2C3: __thumb void BookObj_Softkey_SetText(BOOK *,int actionID,int StrID);
0B10: 00000000 01523C45 ; 2C4: __thumb BOOK * FindBookByID(int BookID);
0B14: 00000000 C9C44845 ; 2C5: __thumb GUI_FEEDBACK *TextFeedbackWindow(BOOK *bk, int zero);
0B18: 00000000 01C94845 ; 2C6: __thumb void Feedback_SetKeyHook(GUI_FEEDBACK *, void (*hook)(BOOK *bk, int key, int unk, int unk2));
0B1C: 00000000 A1C84845 ; 2C7: __thumb void Feedback_SetOnClose(GUI_FEEDBACK *, void (*OnClose)(BOOK *bk));
0B20: 00000000 C1C74845 ; 2C8: __thumb void Feedback_SetTimeout(GUI_FEEDBACK *, int time_ms);
0B24: 00000000 65C94845 ; 2C9: __thumb void Feedback_SetTextExtended(GUI_FEEDBACK *, STRID text, int where);
0B28: 00000000 9DD64745 ; 2CA: __thumb void TabMenuBar_SetOnTabSwitch(GUI_TABMENUBAR *,void (*proc)(BOOK *,int act_tab));
0B2C: 00000000 45EC1445 ; 2CB: __thumb STRID KeyCode2Name(int key_code);
0B30: 00000000 3540F644 ; 2CC: __thumb int ImageID_Get(const wchar_t * fpath,const wchar_t * fname,wchar_t * imageID);
0B34: 00000000 2940F644 ; 2CD: __thumb void ImageID_Free(wchar_t imageID);
0B38: 00000000 2171FD44 ; 2CE: __thumb SUB_EXECUTE *DataBrowser_CreateSubExecute(int BookID, FILEITEM *f);
0B3C: 00000000 417BFD44 ; 2CF: __thumb int DataBrowser_ExecuteSubroutine(SUB_EXECUTE *sub, int action, u16 *unk);
0B40: 00000000 8966FF44 ; 2D0: __thumb int FILEITEM_SetFname(FILEITEM *f, const wchar_t *fname);
0B44: 00000000 996AFF44 ; 2D1: __thumb int FILEITEM_SetPath(FILEITEM *f, const wchar_t *fpath);
0B48: 00000000 916AFF44 ; 2D2: __thumb wchar_t *FILEITEM_GetFname(FILEITEM *f);
0B4C: 00000000 456BFF44 ; 2D3: __thumb wchar_t *FILEITEM_GetPath(FILEITEM *f);
0B50: 00000000 1167FF44 ; 2D4: __thumb int FILEITEM_SetFnameAndContentType(FILEITEM *f, const wchar_t *fname);
0B54: 00000000 1D6BFF44 ; 2D5: __thumb int FILEITEM_SetPathAndContentType(FILEITEM *f, const wchar_t *fpath);
0B58: 00000000 9D50FC44 ; 2D6: __thumb int JavaDialog_Open(int unk1,char * unk2,void ** JavaDesc);
0B5C: 00000000 518BFC44 ; 2D7: __thumb void JavaDialog_Close(int unk1);
0B60: 00000000 158DFC44 ; 2D8: __thumb int JavaAppDesc_Get(int unk1,void ** JavaDesc);
0B64: 00000000 B9EAFB44 ; 2D9: __thumb int JavaAppDesc_GetFirstApp(void * JavaDesc);
0B68: 00000000 C1EAFB44 ; 2DA: __thumb int JavaAppDesc_GetNextApp(void * JavaDesc);
0B6C: 00000000 D9E6FB44 ; 2DB: __thumb int JavaAppDesc_GetJavaAppInfo(void * JavaDesc,int ID,wchar_t ** wstr);
0B70: 00000000 27734B45 ; 2DC: __unknown void OrangeLED_Control(int _free_val, int or_LED_ID, int level, int fade_time); //nullsub(ret 0)
0B74: 00000000 C9204745 ; 2DD: __thumb void DispObject_SetRefreshTimer(DISP_OBJ *,int time);
0B78: 00000000 49214745 ; 2DE: __thumb void DispObject_KillRefreshTimer(DISP_OBJ *);
0B7C: 00000000 8997FE44 ; 2DF: int isDataBrowserBook(BOOK *);
0B80: 00000000 F54FFE44 ; 2E0: SUB_EXECUTE * BrowserItem_Get_SUB_EXECUTE(BOOK * BrowserItemBook);
0B84: 00000000 7D534A45 ; 2E1: __thumb int Shortcut_Get_MenuItemName(SHORTCUT *);
0B88: 00000000 A1E24945 ; 2E2: __thumb int Shortcut_Get_MenuItemIconID(SHORTCUT *);
0B8C: 00000000 CD633C45 ; 2E3: __thumb BOOK * FindBookEx(int (*cmp_proc)(BOOK* book_from_list ,int * param), int * param);
0B90: 00000000 DD64FF44 ; 2E4: __thumb FILEITEM *FILEITEM_CreateCopy (FILEITEM *);
0B94: 00000000 19633C45 ; 2E5: __thumb ACTION *ActionCreate(int (*PROC)(void *msg,BOOK*), int BookID, u16 event, APP_DESC *app_desc, PAGE_DESC *pag_desc);
0B98: 00000000 41713C45 ; 2E6: int BOOK_GetSessionID(BOOK *);
0B9C: 00000000 21563C45 ; 2E7: __thumb void UI_Event_toSID(int event, int sess_id);
0BA0: 00000000 F90E2C44 ; 2E8: char *GetIMSI(void);
0BA4: 00000000 B5613D45 ; 2E9: void UI_CONTROLLED_SHUTDOWN_RESPONSE(int book_id);
0BA8: 00000000 35553D45 ; 2EA: __thumb int MainInput_getCurPos(GUI*);
0BAC: 00000000 05553D45 ; 2EB: __thumb void MainInput_Hide(GUI*);
0BB0: 00000000 25594945 ; 2EC: __thumb void DispObject_SoftKey_RestoreDefaultAction(DISP_OBJ*,int action);
0BB4: 00000000 A134F044 ; 2ED: __thumb STRID PNUM2Name(void *pnum, int isIconNeeded, int only_full_number_flag);
0BB8: 00000000 750EF244 ; 2EE: __thumb int SpeedDial_GetPNUM(int _zero,char charter0__9, void * PNUM);
0BBC: 00000000 91F33445 ; 2EF: __thumb void * MetaData_Desc_Create(wchar_t * path,wchar_t * name);
0BC0: 00000000 51F43445 ; 2F0: __thumb void MetaData_Desc_Destroy(void * MetaData_Desc);
0BC4: 00000000 91F43445 ; 2F1: __thumb wchar_t * MetaData_Desc_GetTags(void * MetaData_Desc,int tagID);
0BC8: 00000000 F1F43445 ; 2F2: __thumb int MetaData_Desc_GetTrackNum(void * MetaData_Desc,int __NULL);
0BCC: 00000000 65374745 ; 2F3: __thumb int DISP_OBJ_GetWindowWidth(DISP_OBJ *);
0BD0: 00000000 85374745 ; 2F4: __thumb int DISP_OBJ_GetWindowHeight(DISP_OBJ *);
0BD4: 00000000 A5C33E45 ; 2F5: __thumb int get_system_langID(void);
0BD8: 00000000 75AA4145 ; 2F6: __thumb char * lang_get_name(int langID);
0BDC: 00000000 AD270B45 ; 2F7: __thumb int w_chdir(const wchar_t *path);
0BE0: 00000000 E9D39844 ; 2F8: __thumb int w_fopen(const wchar_t *name, int attr, int rights, int err);
0BE4: 00000000 A1D49844 ; 2F9: __thumb int w_fstat(const wchar_t *name, W_FSTAT *);
0BE8: 00000000 31D49844 ; 2FA: __thumb int w_fwrite(int f, void *buf, int size);
0BEC: 00000000 19D49844 ; 2FB: __thumb int w_fread(int f, void *buf, int size);
0BF0: 00000000 D1E22C45 ; 2FC: __thumb int w_lseek(int f, int offs, int mode);
0BF4: 00000000 49D49844 ; 2FD: __thumb int w_fclose(int f);
0BF8: 00000000 D9460B45 ; 2FE: __thumb int w_mkdir(const wchar_t *path, int mode);
0BFC: 00000000 99D3FA44 ; 2FF: __thumb int DirHandle_SetFilterStr(DIR_HANDLE *, const wchar_t *filter);
0C00: 00000000 D9644745 ; 300: __thumb int Disp_GetStrIdWidth(STRID , int len);
0C04: 00000000 3DF53445 ; 301: __thumb int MetaData_Desc_GetCoverInfo(void * MetaData_Desc,char * cover_type,int * size,int * cover_offset);
0C08: 00000000 5942F644 ; 302: __thumb int ImageID_GetIndirect(void * buf_image,int size,int __NULL,wchar_t * image_type,wchar_t * imageID);
0C0C: 00000000 79771245 ; 303: void unixtime2datetime(int, DATETIME * );
0C10: 00000000 51092D45 ; 304: void ListElement_Insert(LIST *lst, int i, void *new_item);
0C14: 00000000 1DFEFA44 ; 305: int FileCopy(wchar_t *src_path, wchar_t *src_name, wchar_t *dest_path, wchar_t *dest_name, int);
0C18: 00000000 4100FB44 ; 306: int FileMove(wchar_t *src_path, wchar_t *src_name, wchar_t *dest_path, wchar_t *dest_name, int);
0C1C: 00000000 05822C44 ; 307: void RedLED_On(int __NULL);
0C20: 00000000 51822C44 ; 308: void RedLED_Off(int __NULL);
0C24: 00000000 E5444745 ; 309: void DispObject_SetLayerColor(DISP_OBJ *,int color);
0C28: 00000000 718CFC44 ; 30A: __thumb int JavaAppDesc_GetJavaAppID(void * JavaDesc);
0C2C: 00000000 3DBC0945 ; 30B: __thumb void REQUEST_UI_OAF_START_APPLICATION(const int *ASYNC,int appID,char * flag);
0C30: 00000000 31150945 ; 30C: __thumb int JavaApp_LogoImageID_Get(wchar_t * fullpath,wchar_t * imageID);
0C34: 00000000 1DBB4845 ; 30D: GUI * CreateProgressBar(BOOK*,int);
0C38: 00000000 81421745 ; 30E: void ProgressBar_SetText(GUI*,STRID text);
0C3C: 00000000 59BF4845 ; 30F: void ProgressBar_SetIcon(GUI*,u16 icon_id);
0C40: 00000000 21BE4845 ; 310: void ProgressBar_SetPercentValue(GUI*,int value);
0C44: 00000000 89421745 ; 311: void ProgressBar_SetBarDisabled(GUI*,int disabled);
0C48: 00000000 F1434045 ; 312: void StringInput_DispObject_SetText(DISP_OBJ *,int StrID);
0C4C: 00000000 E9CB4745 ; 313: void GuiObject_SetTitleImage(void *gui, wchar_t imageID);
0C50: 00000000 81CB4745 ; 314: void GuiObject_SetTitleIcon(void *gui, wchar_t imageID);
0C54: 00000000 FD714345 ; 315: void GuiObject_SetHighlightImage(void *gui, wchar_t imageID);
0C58: 00000000 0D724345 ; 316: void GuiObject_SetBackgroundImage(void *gui, wchar_t imageID);
0C5C: 00000000 356B4945 ; 317: void *DispObject_Softkeys_GetParams(DISP_OBJ *);
0C60: 00000000 7D6B4945 ; 318: LIST *DispObject_Softkeys_GetList(DISP_OBJ *, BOOK *bk, char __zero);
0C64: 00000000 59733C45 ; 319: int BookObj_GetDisplayOrientation(BOOK *bk);
0C68: 00000000 B5723C45 ; 31A: void BookObj_SetDisplayOrientation(BOOK *bk, int orientation);
0C6C: 00000000 E1633C45 ; 31B: BOOK *DISPLAY_GetTopBook(int display);
0C70: 00000000 39D94745 ; 31C: void DISPLAY_SetBrightness(int display, int brightness);
0C74: 00000000 B9D94745 ; 31D: int DISPLAY_GetBrightness(int display);
0C78: 00000000 3DC9FE44 ; 31E: void DataBrowserDesc_Menu_AddFSFunctions(void * db , int);
0C7C: 00000000 C1C9FE44 ; 31F: void DataBrowserDesc_Menu_AddNewFolder(void * db , int);
0C80: 00000000 C9C9FE44 ; 320: void DataBrowserDesc_Menu_AddMarkFiles(void * db , int);
0C84: 00000000 1D9F4945 ; 321: void SetTheme(wchar_t*path, wchar_t*name, int bookid, int unk_1);
0C88: 00000000 718A4945 ; 322: void Softkeys_GetLabel(DISP_OBJ *softkeys, SKLABEL *lbl, int id);
0C8C: 00000000 35864945 ; 323: void Softkeys_Update(DISP_OBJ *softkeys);
0C90: 00000000 60571720 ;8324: void * get_CellData(void);
0C94: 00000000 19F0ED44 ; 325: void * IncommingCall_Reject(BOOK* book);
0C98: 00000000 292A0145 ; 326: void * IncommingCall_Mute(BOOK* book);
0C9C: 00000000 B5311B44 ; 327: int GetRadioState(char* level, char* flag);
0CA0: 00000000 C1AEEA44 ; 328: int Bluetooth_GetState(void);
0CA4: 00000000 89AEEA44 ; 329: int Bluetooth_GetPhoneVisibility(void);
0CA8: 00000000 49AFEA44 ; 32A: int Bluetooth_isBusy(void);
0CAC: 00000000 492D2E45 ; 32B: int USB_isConnected(void);
0CB0: 00000000 93480B45 ; 32C: void *w_diropen(const wchar_t *dir); 91;
0CB4: 00000000 89D02B44 ; 32D: wchar_t *w_dirread(void *);
0CB8: 00000000 FD4B0B45 ; 32E: int w_dirclose(void *);
0CBC: 00000000 3DBBFD44 ; 32F: int w_rename(const wchar_t *dst, const wchar_t *src);
0CC0: 00000000 19EA2C45 ; 330: int w_remove(const wchar_t *dir);
0CC4: 00000000 814E2E45 ; 331: int ConnectionManager_Connection_GetState(void);
0CC8: 00000000 C1311B44 ; 332: int GetSignalQuality(char *rssi,char *ber);
0CCC: 00000000 85F11345 ;8333: IS_NEEDED_BOOK isCameraBook(void);
0CD0: 00000000 35DF0745 ;8334: IS_NEEDED_BOOK isSoundRecorderBook(void);
0CD4: 00000000 ADE64045 ; 335: void StringInput_MenuItem_SetPriority(GUI * strinp, int prio, int actionID);
0CD8: 00000000 B1890745 ; 336: void VideoPlayerControl(BOOK *VideoPlayerBook, int);
0CDC: 00000000 2D800745 ; 337: void Video_ActionBack(BOOK *VideoPlayerBook, void*);
0CE0: 00000000 F1990745 ; 338: void Video_ExtractFrame(BOOK *VideoPlayerBook, void*);
0CE4: 00000000 E5830745 ; 339: void Video_ZoomOn(BOOK *VideoPlayerBook, void*);
0CE8: 00000000 BD304A45 ; 33A: void RightNow_SetActive(int flag);
0CEC: 00000000 39830745 ; 33B: void VideoResize_AutomateMode(BOOK *VideoPlayerBook, u16 VideoWidth, u16 VideoHeight, u16* NewWidth, u16* NewHeight);
0CF0: 00000000 D1820745 ; 33C: void VideoResize_AllScreenMode(BOOK *VideoPlayerBook, u16 VideoWidth, u16 VideoHeight, u16* NewWidth, u16* NewHeight);
0CF4: 00000000 A1930745 ; 33D: int Video_GetCurrentSkinID(BOOK *VideoPlayerBook);
0CF8: 00000000 19670745 ; 33E: void Video_SetSkin(GUI* VideoPlayerGUI, int skinID);
0CFC: 00000000 61820745 ; 33F: int Video_SetPermit(BOOK *VideoPlayerBook, u16 NewWidth, u16 NewHeight);
0D00: 00000000 017E0745 ; 340: int Video_Refresh(BOOK *VideoPlayerBook, GUI* VideoPlayerGUI);
0D04: 00000000 AD800745 ; 341: void Video_Play(BOOK *VideoPlayerBook, void*);
0D08: 00000000 E5810745 ; 342: void Video_Pause(BOOK *VideoPlayerBook, void*);
0D0C: 00000000 B1810745 ; 343: void Video_Stop(BOOK *VideoPlayerBook, void*);
0D10: 00000000 F5DD0545 ; 344: void Audio_Pause(BOOK *);
0D14: 00000000 2DDB0545 ; 345: void Audio_Play(BOOK *);
0D18: 00000000 81B74845 ; 346: GUI * CreatePercentInputVA(int zero, ...);
0D1C: 00000000 21B94845 ; 347: int PercentInput_GetPercent(GUI * PercentInput);
0D20: 00000000 8D674345 ; 348: void GUIonMessage_SetLineSeparator(GUI_MESSAGE *,int _unk1);
;0D24: xxxxxxxx yyyyyyyy ; 349:
;0D28: xxxxxxxx yyyyyyyy ; 34A:
0D2C: 00000000 B9924945 ; 34B: void GUIObject_Softkeys_RemoveBackground(void *gui);
0D30: 00000000 C5924945 ; 34C: void GUIObject_Softkeys_RestoreBackground(void *gui);
0D34: 00000000 01BF3D45 ; 34D: void SetTrayIcon(wchar_t iconID, char mode);
0D38: 00000000 41C83F45 ; 34E: int REQUEST_SETTING_RINGVOLUME_SET(const int *sync, int unk, int null, int vol);
0D3C: 00000000 31CB3F45 ; 34F: int REQUEST_SETTING_VIBRATOR_SET(const int *sync, int unk, int mode);
0D40: 00000000 31CA3F45 ; 350: int REQUEST_SETTING_RINGTYPESOUNDFILE_SET(const int *sync, int null, wchar_t *path, wchar_t *name);
0D44: 00000000 CDCF3F45 ; 351: int REQUEST_SETTING_ANSWERINGMODE_SET(const int *sync, int unk, int mode);
0D48: 00000000 FDC83F45 ; 352: int REQUEST_SETTING_INCREASINGRING_SET(const int *sync, int unk, int unk2, int mode);
0D4C: 00000000 A1CD3F45 ; 353: int REQUEST_SETTING_ALLOWEDCALLERS_SET(const int *sync, int unk, int mode);
0D50: 00000000 39DDFB44 ; 354: int JavaAppDesc_GetJavaAppFullpath(void * JavaDesc,JavaAppFullpath *);
;0D54: xxxxxxxx yyyyyyyy ; 355: void *SoundRecorderDesc_Create(void);
;0D58: xxxxxxxx yyyyyyyy ; 356: void SoundRecorderDesc_Destroy(void * desc);
;0D5C: xxxxxxxx yyyyyyyy ; 357: int SoundRecorderDesc_SetBookID(void * desc,int BookID);
;0D60: xxxxxxxx yyyyyyyy ; 358: int SoundRecorderDesc_SetType(void * desc,const int type);
;0D64: xxxxxxxx yyyyyyyy ; 359: int SoundRecorderDesc_SetFolder(void * desc,const wchar_t * fpath);
;0D68: xxxxxxxx yyyyyyyy ; 35A: int SoundRecorderDesc_SetFname(void * desc,const wchar_t * fname);
;0D6C: xxxxxxxx yyyyyyyy ; 35B: int SoundRecorderDesc_SetRecordSize(void * desc,const int size);
;0D70: xxxxxxxx yyyyyyyy ; 35C: int SoundRecorder_Create(void * desc);
;0D74: xxxxxxxx yyyyyyyy ; 35D: int SoundRecorder_RecordCall(BOOK * OngoingCallBook);
0D78: 00000000 25ECF344 ; 35E: int Browser_OpenURI(BOOK *, char * URI, int mode);
0D7C: 00000000 A1DB3445 ; 35F: char * GetURIScheme (int schemeID);
0D80: 00000000 39E03445 ; 360: char * CreateURI (wchar_t * fpath, wchar_t * fname, char * URIScheme);
0D84: 00000000 F1C9FE44 ; 361: void DataBrowserDesc_SetViewModeAndSortOrder(void * db,int view_sort_ID);
;0D88: xxxxxxxx yyyyyyyy ; 362: int Alarm_GetCurrentTypeAndAlarmID(char *type, wchar_t *AlarmID);
;0D8C: xxxxxxxx yyyyyyyy ; 363: int Alarm_GetState(char *state, int AlarmID);
;0D90: xxxxxxxx yyyyyyyy ; 364: int Alarm_GetTIME(TIME *AlarmTime, int AlarmID);
;0D94: xxxxxxxx yyyyyyyy ; 365: int Alarm_GetWeekSettings(void* week,int AlarmID);
;0D98: xxxxxxxx yyyyyyyy ; 366: int IrDa_GetState(char *state);
;0D9C: xxxxxxxx yyyyyyyy ; 367: void REQUEST_SETTING_ALLOWEDCALLERS_GET(const int *sync, int ProfileNum, char *state);
;0DA0: xxxxxxxx yyyyyyyy ; 368: void * IncommingCall_Accept(BOOK* book);
;0DA4: xxxxxxxx yyyyyyyy ; 369: void MediaPlayer_SoftKey_SetText(void *player_gui,int actionID , int StrID);
;0DA8: xxxxxxxx yyyyyyyy ; 36A: void MediaPlayer_SoftKey_SetAction(void *player_gui,int actionID ,void (*proc)(BOOK *,void*));
;0DAC: xxxxxxxx yyyyyyyy ; 36B: void MediaPlayer_SoftKey_SetItemAsSubItem(void *player_gui,int item,int subitem);
;0DB0: xxxxxxxx yyyyyyyy ; 36C: void MediaPlayer_SoftKey_AddHelpStr(void *player_gui,int item,int StrID);
;0DB4: xxxxxxxx yyyyyyyy ; 36D: void MediaPlayer_ShowNowPlaying(DISP_OBJ*disp_obj, int);
;0DB8: xxxxxxxx yyyyyyyy ; 36E: void DispObject_Show(DISP_OBJ *disp_obj, int mode);
;0DBC: xxxxxxxx yyyyyyyy ; 36F: int Request_EventChannel_Subscribe(const int *SYNC, int mode, int event);
;0DC0: xxxxxxxx yyyyyyyy ; 370: void GUIObject_Softkey_ExecuteAction(void *gui, u16 actionID);
;0DC4: xxxxxxxx yyyyyyyy ; 371: int Request_ICA_ShutdownAllConnections(const int *sync);
;0DC8: xxxxxxxx yyyyyyyy ; 372: int REQUEST_PROFILE_GETPROFILENAME(const int *SYNC,int unk,STRID_DATA *,char *error);
;0DCC: xxxxxxxx yyyyyyyy ; 373: int DataBrowserDesc_SetFocusToFILEITEM(void *DataBrowserDesc, FILEITEM *fi);
;0DD0: xxxxxxxx yyyyyyyy ; 374: int GUIonMessage_GetMsg ( void *msg);
;0DD4: xxxxxxxx yyyyyyyy ; 375: BOOK *GUIonMessage_GetBook ( void *msg);
;0DD8: xxxxxxxx yyyyyyyy ; 376: GUI *GUIonMessage_GetGui ( void *msg);
;0DDC: xxxxxxxx yyyyyyyy ; 377: int GUIonMessage_GetSelectedItem ( void *msg);
;0DE0: xxxxxxxx yyyyyyyy ; 378: int GUIonMessage_GetPrevSelectedItem ( void *msg);
;0DE4: xxxxxxxx yyyyyyyy ; 379: void ObexSendFile (SEND_OBEX_STRUCT *);
;0DE8: xxxxxxxx yyyyyyyy ; 37A: void Feedback_SetManualScrollingText(DISP_OBJ* feedback_disp_obj,int);
;0DEC: xxxxxxxx yyyyyyyy ; 37B: int EqualizerGain_Set (int AudioSessionID,int Band,int Level);
;0DF0: xxxxxxxx yyyyyyyy ; 37C: int CANVAS_Get_GviGC(PCANVAS pcanvas, GVI_GC* dest);
;0DF4: xxxxxxxx yyyyyyyy ; 37D: void GVI_BitBlt(GVI_GC destgc, int destx, int desty, int destxsize, int destysize, GVI_GC srcgc, int srcx, int srcy, int _204, int _0, int _0_2, int _0_3);
;0DF8: xxxxxxxx yyyyyyyy ; 37E: void GVI_StretchBlt(GVI_GC destgc, int destx, int desty, int destxsize, int destysize, GVI_GC srcgc, int srcx, int srcy, int srcxsize, int srcysize, int _204, int _0, int _0_2, int _0_3);
;0DFC: xxxxxxxx yyyyyyyy ; 37F: void GVI_TransformBlt(GVI_GC destgc, int destx, int desty, GVI_GC srcgc, int srcx, int srcy, int srcxsize, int srcysize, int orientation, int _0);
;0E00: xxxxxxxx yyyyyyyy ; 380: GVI_PEN GVI_CreatePen(char thikness, int color);
;0E04: xxxxxxxx yyyyyyyy ; 381: GVI_PEN GVI_CreateDashedPen(char thikness, int color, int bitmask, int step, int offset);
;0E08: xxxxxxxx yyyyyyyy ; 382: GVI_BRUSH GVI_CreateSolidBrush(int color);
;0E0C: xxxxxxxx yyyyyyyy ; 383: BOOL GVI_Delete_GVI_Object(GVI_OBJ*);
;0E10: xxxxxxxx yyyyyyyy ; 384: void GVI_DrawEllipse(GVI_GC destgc, int x1, int y1, int x2, int y2, GVI_PEN pen);
;0E14: xxxxxxxx yyyyyyyy ; 385: void GVI_DrawLine(GVI_GC, int x1, int y1, int x2, int y2, GVI_PEN pen);
;0E18: xxxxxxxx yyyyyyyy ; 386: void GVI_DrawLines(GVI_GC gc, POINT* points, int count, GVI_PEN pen);
;0E1C: xxxxxxxx yyyyyyyy ; 387: void GVI_DrawPolyLine(GVI_GC gc, POINT* points, int count, GVI_PEN pen, int is_closed);
;0E20: xxxxxxxx yyyyyyyy ; 388: void GVI_DrawRectangle(GVI_GC gc, int x, int y, int w, int h, GVI_PEN pen);
;0E24: xxxxxxxx yyyyyyyy ; 389: void GVI_DrawRoundRect(GVI_GC destgc, int x, int y, int w, int h, int arcw, int arch, GVI_PEN pen);
;0E28: xxxxxxxx yyyyyyyy ; 38A: void GVI_DrawSolidLines(GVI_GC gc, POINT* points, int count, int color, int width);
;0E2C: xxxxxxxx yyyyyyyy ; 38B: void GVI_DrawSolidPolyLine(GVI_GC gc, POINT* points, int count, int is_closed, int color, int width);
;0E30: xxxxxxxx yyyyyyyy ; 38C: void GVI_DrawSolidRectangle(GVI_GC gc, int x, int y, int w, int h, int color, int width);
;0E34: xxxxxxxx yyyyyyyy ; 38D: void GVI_FillEllipse(GVI_GC destgc, int x, int y, int w, int h, GVI_BRUSH brush);
;0E38: xxxxxxxx yyyyyyyy ; 38E: void GVI_FillPolygon(GVI_GC destgc, POINT *pp, int count, GVI_BRUSH brush);
;0E3C: xxxxxxxx yyyyyyyy ; 38F: void GVI_FillRectangle(GVI_GC , int x, int y, int w, int h, GVI_BRUSH brush);
;0E40: xxxxxxxx yyyyyyyy ; 390: void GVI_FillRectangles(GVI_GC , GVI_XYWH *rcs, int count, GVI_BRUSH brush);
;0E44: xxxxxxxx yyyyyyyy ; 391: void GVI_FillSolidEllipse(GVI_GC destgc, int x1, int y1, int x2, int y2, int color);
;0E48: xxxxxxxx yyyyyyyy ; 392: void GVI_FillSolidRectangle(GVI_GC , int x, int y, int w, int h, int color);
;0E4C: xxxxxxxx yyyyyyyy ; 393: int GVI_FillSolidRoundRect(GVI_GC destgc, int x, int y, int w, int h, int arcx, int arcy, int color);
;0E50: xxxxxxxx yyyyyyyy ; 394: void GVI_FillSolidTriangle(GVI_GC destgc, int x1, int y1, int x2, int y2, int x3, int y3, int color);
;0E54: xxxxxxxx yyyyyyyy ; 395: GC* GC_CreateMemoryGC(int xsize, int ysize, int bpp, int unk, void* somefn , int unk2);
;0E58: xxxxxxxx yyyyyyyy ; 396: void GC_FreeGC(GC* gc);
;0E5C: xxxxxxxx yyyyyyyy ; 397: void REQUEST_ALARMCLOCKSTATUS_GET(const int *SYNC, char * alarm_status);
;0E60: xxxxxxxx yyyyyyyy ; 398: void REQUEST_ALARMCLOCKTIME_GET(const int *SYNC, TIME *t);
;0E64: xxxxxxxx yyyyyyyy ; 399: void REQUEST_ALARMDATEANDTIMESTATUS_GET(const int *SYNC, DATETIME *);
;0E68: xxxxxxxx yyyyyyyy ; 39A: int Settings_ShowNumber_Get(char *state);
;0E6C: xxxxxxxx yyyyyyyy ; 39B: GVI_BMP GVI_CreateBitmap(int xsize, int ysize, int bpp);
;0E70: xxxxxxxx yyyyyyyy ; 39C: GVI_GC GVI_CreateMemoryGC(GVI_BMP bitmap);
;0E74: xxxxxxxx yyyyyyyy ; 39D: void GVI_DeleteMemoryGC(GVI_GC srcgc);
;0E78: xxxxxxxx yyyyyyyy ; 39E: int StringInput_DispObject_SetLanguage(DISP_OBJ_STRING_INPUT *,int langID,int flag);
;0E7C: xxxxxxxx yyyyyyyy ; 39F: int ListElement_InsertSorted(LIST * list, void * pelem, int (*compare)(void *, void *));
;0E80: xxxxxxxx yyyyyyyy ; 3A0: int ListMenu_SetItemIcon(GUI_LIST *,int Item,wchar_t unk_FFFF,int mode,wchar_t ImageID);
;0E84: xxxxxxxx yyyyyyyy ; 3A1: void wstrnupr(wchar_t * wstr, int maxlen);
;0E88: xxxxxxxx yyyyyyyy ; 3A2: void wstrnlwr(wchar_t * wstr, int maxlen);
;0E8C: xxxxxxxx yyyyyyyy ; 3A3: int ListMenu_SetItemTextScroll(GUI_LIST *, int scroll);
;0E90: xxxxxxxx yyyyyyyy ; 3A4: void GuiObject_SetTitleTextColor(void *gui, int color);
;0E94: xxxxxxxx yyyyyyyy ; 3A5: void GuiObject_SetListTextColor(void *gui, int unk1, int list_color, int unk2,int unk3,int list_select_color,int unk4,int _zerro);
;0E98: xxxxxxxx yyyyyyyy ; 3A6: void DISP_OBJ_SetTitleTextColor(void *disp_obj, int color);
;0E9C: xxxxxxxx yyyyyyyy ; 3A7: void DISP_OBJ_SetListTextColor(void *disp_obj, int unk1, int list_color, int unk2,int unk3,int list_select_color,int unk4,int _zerro);
;0EA0: xxxxxxxx yyyyyyyy ; 3A8: void DISP_OBJ_SetHighlightImage(void *disp_obj, wchar_t imageID);
;0EA4: xxxxxxxx yyyyyyyy ; 3A9: void DISP_OBJ_SetBackgroundImage(void *disp_obj, wchar_t imageID);
;0EA8: xxxxxxxx yyyyyyyy ; 3AA: void DISP_OBJ_SetTitleImage(void *disp_obj, wchar_t imageID);
;0EAC: xxxxxxxx yyyyyyyy ; 3AB: void TabMenuBar_SetTabTitle(GUI_TABMENUBAR*,int tab_num,int strID);





;locale=Russian_Russia.1251
