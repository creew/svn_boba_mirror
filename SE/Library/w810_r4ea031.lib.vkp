;W810 SW-R4EA031
;Библиотека функций
;v
;(c) Hussein , IronMaster
;

+456BFC00
0440: FFFFFFFF A93A4545 ; 110: void *memalloc(int size,int f1,int f2,const char *fname,int fline)
0444: FFFFFFFF E1474545 ; 111: void memfree(void * mem,const char * fname ,int fline)
0448: FFFFFFFF 6143E244 ; 112: void memset(void *mem,char chr,int size);
044C: FFFFFFFF 78E81844 ; 113: int memcpy(void *dest,const void *source,int cnt);
0450: FFFFFFFF 894EE244 ; 114: int sprintf(char *buf, char *str, ...);
0454: FFFFFFFF 6955E244 ; 115: int snwprintf(u16* buffer, int size, const u16* fmt, ...);
0458: FFFFFFFF 69425B45 ; 116: int _fopen(const unsigned short *filpath, const unsigned short *filname,unsigned int mode , unsigned int rights, unsigned int __0);
045C: FFFFFFFF A1545B45 ; 117: int fclose(int file);
0460: FFFFFFFF 01575B45 ; 118: int fread(int file , void *ptr, int size);
0464: FFFFFFFF E5585B45 ; 119: int fwrite(int file , const void *ptr, int size);
0468: FFFFFFFF 654BB244 ; 11A: int _wstat(short *path, void *statbuf)
046C: FFFFFFFF E9A01045 ; 11B: int fputs(const char *s, int file)
0470: FFFFFFFF DD4A5B45 ; 11C: int isFileExist(u16 * pach, u16 *fname , FSTAT * fstat_stuct);
0474: FFFFFFFF B9255B45 ; 11D: void * AllocDirHandle(u16 * path);
0478: FFFFFFFF 3D275B45 ; 11E: void *GetFname(void *, void*);
047C: FFFFFFFF E5A52445 ; 11F: void * CreateDataBrowser(void);
0480: FFFFFFFF 3DA52445 ; 120: void DataBrowser_SetStyle(void * db , int style);
0484: FFFFFFFF 5DA52445 ; 121: void DataBrowser_SetHeaderText(void * db , int StrID);
0488: FFFFFFFF 4DA52445 ; 122: void DataBrowser_SetFolders(void * db , int * FolderList);
048C: FFFFFFFF 65A52445 ; 123: void DataBrowser_SetOKSoftKeyText(void * db , int StrID);
0490: FFFFFFFF 399B2445 ; 124: void DataBrowser_Show(void * db);
0494: FFFFFFFF 6DA62445 ; 125: void DataBrowser_XXX(void * db);
0498: FFFFFFFF C16D5B45 ; 126: unsigned short * getFileExtention(unsigned short * fnane);
049C: FFFFFFFF 71295B45 ; 127: int DataBrowser_isFileInListExt(unsigned short * ext_table,unsigned short * patch ,unsigned short * fname );
04A0: FFFFFFFF E5EA2945 ; 128: void Timer_ReSet(u16 *timerID ,int time, void (*onTimer)(u16 *timerID, void *), void *);
04A4: FFFFFFFF C1EA2945 ; 129: u16 Timer_Set(int time, void (*onTimer)(u16 *timerID, void *), void *);
04A8: FFFFFFFF 11EB2945 ; 12A: void Timer_Kill(u16 *timerID);
04AC: FFFFFFFF 51F72945 ; 12B: int CreateBook(void * mem, void (* onClose)(BOOK*), const PAGE_DESC * bp, const char * name, int __0xFFFFFFFF,int __0);
04B0: FFFFFFFF 49F82945 ; 12C: void BookObj_KillBook(void *Book);
04B4: FFFFFFFF CDF42945 ; 12D: void BookObj_GotoPage(BOOK * book, const PAGE_DESC * page);
04B8: FFFFFFFF 49F62945 ; 12E: void BookObj_ReturnPage(BOOK * ,int);
04BC: FFFFFFFF 79FC2945 ; 12F: void FreeBook ( void *book);
04C0: FFFFFFFF 61115345 ; 130: BOOK * FindBook(IS_NEEDED_BOOK);
04C4: FFFFFFFF B9C72A45 ; 131: BOOK * Find_StandbyBook(void);
04C8: FFFFFFFF 95F92945 ; 132: void BookObj_SetFocus(void *,int focus);
04CC: FFFFFFFF 7D3F1945 ; 133: void GuiObject_SetTitleText (void * gui , int StrID);
04D0: FFFFFFFF 653E1945 ; 134: void ShowWindow (void * gui);
04D4: FFFFFFFF 71081745 ; 135: void SetCursorToItem ( void *obj , int item);
04D8: FFFFFFFF C53E1945 ; 136: void GUI_SetStyle(GUI_NOFMANY *,int style);
04DC: FFFFFFFF A5131745 ; 137: int GUIonMessage_GetCreatedItemIndex ( void *msg);
04E0: FFFFFFFF B5131745 ; 138: char SetMenuItemText0 ( GUI_MESSAGE *, int StrID);
04E4: FFFFFFFF E5131745 ; 139: char SetMenuItemText1 ( GUI_MESSAGE *, int StrID);
04E8: FFFFFFFF C5131745 ; 13A: char SetMenuItemText2 ( GUI_MESSAGE *, int StrID);
04EC: FFFFFFFF D5131745 ; 13B: char SetMenuItemText3 ( GUI_MESSAGE *, int StrID);
04F0: FFFFFFFF F5131745 ; 13C: void SetListObjectItemIcon ( void *msg , int align , int iconID);
04F4: FFFFFFFF 354A3045 ; 13D: void SetHeaderText( void *obj , int StrID);
04F8: FFFFFFFF 85081745 ; 13E: int GetFocusetListObjectItem( void *obj);
04FC: FFFFFFFF E9081745 ; 13F: void SetMenuItemStyle( void *obj , int style);
0500: FFFFFFFF BD251945 ; 140: void putchar( void *xx , int x, int y, int _zero, int zero1 , short wchar);
0504: FFFFFFFF EDA01545 ;8141: IS_NEEDED_BOOK isScreenSaverBook(void);
0508: FFFFFFFF C5411545 ; 142: void StatusIndication_SetItemText(void *gui,int item,int StrID);
050C: FFFFFFFF 45E52A45 ; 143: void StatusIndication_ShowNotes(int StrID);
0510: FFFFFFFF DD5B1645 ; 144: void * CreateStringInput(int,...);
0514: FFFFFFFF 0D251745 ; 145: GUI_ONEOFMANY * CreateOneOfMany(BOOK *);
0518: FFFFFFFF A1261745 ; 146: void OneOfMany_SetItemCount(GUI_ONEOFMANY * , int count);
051C: FFFFFFFF C5261745 ; 147: void OneOfMany_SetChecked(GUI_ONEOFMANY * , int checked);
0520: FFFFFFFF F9261745 ; 148: void OneOfMany_SetTexts(GUI_ONEOFMANY * , int * StrID , int Count);
0524: FFFFFFFF D5261745 ; 149: int OneOfMany_GetSelected(GUI_ONEOFMANY * rb);
0528: FFFFFFFF 61E42A45 ; 14A: void StatusIndication_Item8_SetText(int StrID);
052C: FFFFFFFF 25B81945 ; 14B: void AddMSGHook(void * menu,short msg,void (*proc)(BOOK *,void*));
0530: FFFFFFFF 0DB91945 ; 14C: void AddCommand(void * menu,int cmd , int StrID);
0534: FFFFFFFF 79BA1945 ; 14D: void SoftKey_SetEnable(void *gui,int msg,int ena);
0538: FFFFFFFF E9B91945 ; 14E: void SoftKey_AddErrorStr(void *gui,int msg,int StrID);
053C: FFFFFFFF B5B71945 ; 14F: void SoftKey_RemoveItem(void *gui,u16 action);
0540: FFFFFFFF A5B91945 ; 150: void SoftKey_SetVisible(void *gui,int action,int visible);
0544: FFFFFFFF 21BE1945 ; 151: void SoftKey_SuppressDefaultAction(void *gui,int action);
0548: FFFFFFFF 355CE244 ; 152: u16* wstrcpy(u16 * dest, u16 * source);
054C: FFFFFFFF E95CE244 ; 153: u16* wstrncpy(u16 * dest, u16 * source, int maxlen);
0550: FFFFFFFF D55BE244 ; 154: u16* wstrcat(u16 * wstr, u16 * subwstr);
0554: FFFFFFFF 855CE244 ; 155: short* wstrncat(short * wstr, short * subwstr , int maxlen);
0558: FFFFFFFF 055CE244 ; 156: int wstrcmp(unsigned short * wstr1, unsigned short * wstr2);
055C: FFFFFFFF 715CE244 ; 157: int wstrlen(u16 * wstr);
0560: FFFFFFFF 4DAEFE44 ; 158: u16 * str2wstr(u16 * wstr,char * str);
0564: FFFFFFFF ED52E244 ; 159: int strcmp(char * str1, char * str2);
0568: FFFFFFFF 5553E244 ; 15A: int strlen(char *str);
056C: FFFFFFFF 459CFE44 ; 15B: char * wstr2strn (char * str , u16 * wstr, int maxlen);
0570: FFFFFFFF 01E32F45 ; 15C: int int2strID (int num);
0574: FFFFFFFF 9DE62F45 ; 15D: int Str2ID(const void * wstr , int flag , int len);
0578: FFFFFFFF 49F22F45 ; 15E: void StrID2Str(int StrID,char * str,int maxlen);
057C: FFFFFFFF 1DEA2F45 ; 15F: void TextID2wstr(int StrID,u16 * str,int maxlen);
0580: FFFFFFFF FDE82F45 ; 160: int TextGetLength(int StrID);
0584: FFFFFFFF 6DE82F45 ; 161: void TextFree(int StrID);
0588: FFFFFFFF 0D432145 ; 162: int AB_DEFAULTNBR_GET(int rec_num, void * mem_0x30, int * unk);
058C: FFFFFFFF AD962145 ; 163: int AB_READSTRING(void * mem_0x30,int rec_num, int rec_item_num);
0590: FFFFFFFF 55972145 ; 164: int AB_READPHONENBR(void * mem_0x30,int rec_num, int rec_item_num);
0594: FFFFFFFF F5972145 ; 165: int AB_GETNBROFITEMS(int get_from,int unk_0);
0598: FFFFFFFF 81DF2F45 ; 166: int PNUM_len(void *pnum);
059C: FFFFFFFF E1364045 ; 167: void PNUM2str(char *str,void *pnum,int len, int max_len);
05A0: FFFFFFFF 413C1945 ; 168: DISP_OBJ * GUIObj_GetDISPObj (void * gui);
05A4: FFFFFFFF ADEF2745 ; 169: LIST *List_New(void);
05A8: FFFFFFFF C5EF2745 ; 16A: void List_Free(LIST *lst);
05AC: FFFFFFFF C1F02745 ; 16B: void ListElement_AddtoTop(LIST *lst,void *newElement);
05B0: FFFFFFFF 9D784245 ; 16C: int Gif2ID(u16 IMAGEHANDLE,u16 * path, u16 * fname,u16 * ID);
05B4: FFFFFFFF D1DD5A45 ; 16D: int REQUEST_IMAGEHANDLER_INTERNAL_GETHANDLE(const int * __zero,u16 * IMAGEHANDLE,char * unk);
05B8: FFFFFFFF A5535945 ; 16E: void REQUEST_DATEANDTIME_GET(const int * __zero , DATETIME *dt);
05BC: FFFFFFFF 252E5445 ; 16F: void IndicationDevice_Backlight_FadeToLevel(int unk_zero ,int bl_level);
05C0: FFFFFFFF 35574545 ; 170: int GetFreeBytesOnHeap(void);
05C4: FFFFFFFF C5F92945 ; 171: void Hide(void * udata, int zero);
05C8: FFFFFFFF D9F92945 ; 172: void Show(void * udata, int zero);
05CC: FFFFFFFF 95C92A45 ; 173: void StartAPP (u16 * appname);
05D0: FFFFFFFF D9091745 ; 174: void ListMenu_SetOnMessages (GUI_LIST * , void * onMessage);
05D4: FFFFFFFF 955E5645 ; 175: char * manifest_GetParam(char *buf,char *param_name,int unk);
05D8: FFFFFFFF A95A5B45 ; 176: int lseek(int file,int offset,int mode);
05DC: FFFFFFFF 5C1F064C ;8177: int get_VBUFFER(void);
05E0: FFFFFFFF 65245F45 ; 178: void SetLampLevel (int level);
05E4: FFFFFFFF 49F02745 ; 179: void * ListElement_Remove(LIST *lst,int index);
05E8: FFFFFFFF 159F1444 ; 17A: int GetCurrentPID(void);
05EC: FFFFFFFF 81F02745 ; 17B: int ListElement_Prt2NumElement(LIST *lst,void *ptr);
05F0: FFFFFFFF DCD71844 ; 17C: union SIGNAL *alloc(OSBUFSIZE size,SIGSELECT signo);
05F4: FFFFFFFF F8D71844 ; 17D: union SIGNAL *receive(const SIGSELECT *sigsel);
05F8: FFFFFFFF E8D71844 ; 17E: void send(union SIGNAL **sig,PROCESS to);
05FC: FFFFFFFF 38D81844 ; 17F: PROCESS sender(union SIGNAL **sig);
0600: FFFFFFFF 08D81844 ; 180: void free_buf(union SIGNAL **sig);
0604: FFFFFFFF D4D81844 ; 181: PROCESS create_process(int proc_type,char *name,OSENTRYPOINT *entrypoint,OSADDRESS stack_size,OSPRIORITY priority,OSTIME timeslice,PROCESS pid_block,void *redir_table,OSVECTOR vector,OSUSER user);
0608: FFFFFFFF F4DA1844 ; 182: void start(PROCESS pid);
060C: FFFFFFFF A4D91844 ; 183: int get_ptype(PROCESS pid);
0610: FFFFFFFF F0D81844 ; 184: PROCESS current_process(void);
0614: FFFFFFFF 28D81844 ; 185: void delay(OSTIME timeout);
0618: FFFFFFFF F0D91844 ; 186: OSBOOLEAN hunt(const char *name, OSUSER user, PROCESS *name_, union SIGNAL **hunt_sig);
061C: FFFFFFFF 10DA1844 ; 187: void kill_proc(PROCESS pid);
0680: FFFFFFFF 1D53E244 ; 1A0: char* strcpy(char * dest, char * source);
0684: FFFFFFFF 51870945 ; 1A1: void *CreateMessage(int size,int ev,char *name);
0688: FFFFFFFF A5870945 ; 1A2: void SendMessage(void **signal,int PID);
068C: FFFFFFFF 35880945 ; 1A3: void * WaitMessage(void *SIGSEL);
0690: FFFFFFFF 55880945 ; 1A4: int FreeMessage(void **Mess);
0694: FFFFFFFF D56A2645 ; 1A5: void SendDispatchMessage(int id, int unk_zero, int size,void *mess);
0698: FFFFFFFF D5D16345 ; 1A6: char * UIEventName(int event);
069C: FFFFFFFF 6F662E4C ;81A7: int * MissedEvents(void);
06A0: FFFFFFFF 7D125345 ; 1A8: void UI_Event(int event);
06A4: FFFFFFFF 89125345 ; 1A9: void UI_Event_wData(int event,void *message,void (*mfree)(void*));
06A8: FFFFFFFF AD125345 ; 1AA: void UI_Event_toSID(int event,int SessionID);
06AC: FFFFFFFF BD125345 ; 1AB: void UI_Event_toSIDwData(int event,int SedionID,void *message,void (*mfree)(void*));
06B0: FFFFFFFF 71F32745 ; 1AC: int ListElement_Find(LIST *lst,void *element, int (*cmp_proc)(void *,void *));
06B4: FFFFFFFF 51F22745 ; 1AD: void * ListElement_GetByIndex(LIST * , int index);
06B8: FFFFFFFF 395DE244 ; 1AE: u16* wstrrchr(u16*wstr, u16 wchar);
06BC: FFFFFFFF 49F52945 ; 1AF: void BookObj_CallSubroutine(BOOK * , void * SubProcDesc);
06C0: FFFFFFFF D1F02745 ; 1B0: void ListElement_Add(LIST *lst,void *newElement);
06C4: FFFFFFFF 3DE1C944 ; 1B1: void debug_printf(char * fmt,...);
06C8: FFFFFFFF F13E1545 ; 1B2: int PlayFile(u16 * path, u16 * fname);
06D0: FFFFFFFF 71D66445 ; 1B4: int REQUEST_PROFILE_GETACTIVEPROFILE(const int *__zero , int *level);
06D4: FFFFFFFF CDD66445 ; 1B5: void REQUEST_PROFILE_SETACTIVEPROFILE(const int *__zero , int NUMprof);
06D8: FFFFFFFF B1812B45 ; 1B6: void SetBrightnessOfScreen(int br);
06DC: FFFFFFFF C5821545 ; 1B7: int isKeylocked(void);
06E0: FFFFFFFF 71504445 ;81B8: IS_NEEDED_BOOK isMediaPlayerVideoBook(void);
06E4: FFFFFFFF DD654445 ; 1B9: void VideoOnWholeScreen(BOOK * MediaPlayer_Video_Book);
06E8: FFFFFFFF C99A1545 ; 1BA: void ShuttingDown(void);
06EC: FFFFFFFF 41d04545 ; 1BB: void Vibra(int t1, int t2, int t3);
06F0: FFFFFFFF BD555945 ; 1BC: char REQUEST_DATEFORMAT_GET(const int *SYNC, char *DateFormat);
06F4: FFFFFFFF 5D565945 ; 1BD: char REQUEST_TIMEFORMAT_GET(const int *SYNC, char *TimeFormat);
06F8: FFFFFFFF E10B1545 ; 1BE: int Date2ID(DATE *, int TimeFormat,int);
06FC: FFFFFFFF F90A1545 ; 1BF: int Time2ID(TIME *, char TimeFormat,int);
0700: FFFFFFFF 75061745 ; 1C0: GUI_LIST * CreateListObject(BOOK * , void * unk);
0704: FFFFFFFF 9D081745 ; 1C1: void SetNumOfMenuItem(void * , int item_count);
0708: FFFFFFFF 94C72D4C ;81C2: LIST ** ROOT_APP(void);
070C: FFFFFFFF D1B81945 ; 1C3: void SoftKey_AddHelpStr(void *gui,int msg,int StrID);
0710: FFFFFFFF C1BA1945 ; 1C4: void SoftKey_SetItemAsSubItem(void *gui,int item,int subitem);
0714: FFFFFFFF B13F6445 ; 1C5: int REQUEST_SYSTEM_SHUTDOWN(void);
0718: FFFFFFFF C13F6445 ; 1C6: int REQUEST_SYSTEM_RESTART(void);
071C: FFFFFFFF 0DB91945 ; 1C7: void SoftKeys_SetText(void *gui,int msg,int StrID,int StrID1);
0720: FFFFFFFF CDE66345 ; 1C8: int isRightNowBook(BOOK *);
0724: FFFFFFFF C13C6445 ; 1C9: int isVolumeControllerBook(BOOK *);
0728: FFFFFFFF 59371545 ; 1CA: GUI_TABMENUBAR * CreateTabMenuBar(BOOK *);
072C: FFFFFFFF 69381545 ; 1CB: void TabMenuBar_SetTabCount(GUI_TABMENUBAR * , int count);
0730: FFFFFFFF 4D391545 ; 1CC: void TabMenuBar_AssignGuiObj(GUI_TABMENUBAR * , int tab , GUI_NOFMANY *);
0734: FFFFFFFF 293A1545 ; 1CD: void TabMenuBar_SetTabIcon(GUI_TABMENUBAR *,int tab, u16 icon , int for_state);
0738: FFFFFFFF E53B1945 ; 1CE: void GUI_Free(GUI*);
073C: FFFFFFFF 4D401945 ; 1CF: void GUI_SetIcon(GUI* , int icon);
0740: FFFFFFFF 85641645 ; 1D0: int StringInput_GetStringAndLen (GUI*,u16**,u16*);
074C: FFFFFFFF B16B5B45 ; 1D3: int GetVolumeSize(char * volume, VOLUMESIZE *);
0750: FFFFFFFF 511F1745 ; 1D4: GUI_NOFMANY * CreateNOfMany(BOOK *);
0754: FFFFFFFF 91211745 ; 1D5: void NOfMany_SetTexts(GUI_NOFMANY * , int * StrIDtable, int items_count);
0758: FFFFFFFF FD201745 ; 1D6: void NOfMany_SetChecked(GUI_NOFMANY * , u16 * checked_table, int items_count);
075C: FFFFFFFF BD201745 ; 1D7: void NOfMany_SetCursor(GUI_NOFMANY * , int item);
0760: FFFFFFFF 25211745 ; 1D8: int NOfMany_GetCheckedCount(GUI_NOFMANY *);
0764: FFFFFFFF 11211745 ; 1D9: int NOfMany_GetChecked(GUI_NOFMANY * , u16 * buffer );
0768: FFFFFFFF 89211745 ; 1DA: void NOfMany_SetonMessage(GUI_NOFMANY * , void * proc );
0780: FFFFFFFF 85261745 ; 1E0: void OneOfMany_SetFocused(GUI_ONEOFMANY * , int item);
0784: FFFFFFFF F1261745 ; 1E1: void OneOfMany_SetonMessage(GUI_ONEOFMANY * , void * proc);
0788: FFFFFFFF 918A1545 ; 1E2: GUI_FEEDBACK * CreateFeedBack (int,...);
078C: FFFFFFFF 2D8B1545 ; 1E3: void FeedBack_SetText(GUI_FEEDBACK*,int);
0790: FFFFFFFF FDA9A244 ; 1E4: int GetBattaryState(const int * , BATT *);
0794: FFFFFFFF 991A1945 ; 1E5: void * get_DisplayGC (void);
0798: FFFFFFFF 0D2C3045 ; 1E6: void GetGuiRect(void*,RECT*);
079C: FFFFFFFF AD201945 ; 1E7: void get_GC_RECT(void*,RECT*);
07A0: FFFFFFFF C1231945 ; 1E8: int get_GC_xx(void * GC);
07A4: FFFFFFFF B5231945 ; 1E9: void *set_GC_xx(void * GC, int);
07A8: FFFFFFFF 59201945 ; 1EA: void GC_validate_RECT(void * GC , RECT*);
07AC: FFFFFFFF 5DFA2945 ; 1EB: void addGui2book(BOOK*,GUI*);
07B0: FFFFFFFF 41693045 ; 1EC: void DrawRect(int x1, int y1,int x2 ,int y2,int pen_color,int brush_color);
07B4: FFFFFFFF 496D3045 ; 1ED: void DrawString(int StrID,int align,int x1,int y1,int x2,int y2,int unk,int unk1,int pen_color ,int brush_color);
07B8: FFFFFFFF 457F2A45 ; 1EE: void addGui2XGuiList (void* xguilist , GUI*);
07BC: FFFFFFFF 712A3045 ; 1EF: void InvalidateRect(DISP_OBJ *,RECT*);
07C0: FFFFFFFF 193B1945 ; 1F0: int CreateObject(GUI*,void (*)(DISP_DESC *),void (*)(DISP_DESC *),BOOK *,void(*)(),int,int size_obj);
07C4: FFFFFFFF 89783045 ; 1F1: int SetFont(int);
07C8: FFFFFFFF ACF72D4C ;81F2: DISP_OBJ ** StatusRow_p(void);
07CC: FFFFFFFF 55125345 ; 1F3: int root_list_get_session_count(void);
07D0: FFFFFFFF 69125345 ; 1F4: UI_APP_SESSION *root_list_get_session(int num_session);
07D4: FFFFFFFF 350B5345 ; 1F5: BOOK *SESSION_GetTopBook(UI_APP_SESSION *);
07D8: FFFFFFFF 498E1545 ; 1F6: int MainInput_getVisible(GUI *);
07DC: FFFFFFFF 558E1545 ; 1F7: int MainInput_strlen(GUI *);
07E0: FFFFFFFF 758E1545 ; 1F8: char * MainInput_getPNUM(GUI *);
07E4: FFFFFFFF 818E1545 ; 1F9: int MainInput_isPlus(GUI *);
07E8: FFFFFFFF 0DFD2945 ; 1FA: int BOOK_GetSessionID(BOOK * );
07EC: FFFFFFFF AD5CE244 ; 1FB: int wstrncmp(u16*,u16*,int);
07F0: FFFFFFFF 89483045 ; 1FC: int DISP_OBJ_GetAbsoluteXPos(DISP_OBJ *);
07F4: FFFFFFFF C1483045 ; 1FD: int DISP_OBJ_GetAbsoluteYPos(DISP_OBJ *);
07F8: FFFFFFFF 15313045 ; 1FE: WINDOW * DISP_OBJ_GetWindow(DISP_OBJ *);
07FC: FFFFFFFF 312A5345 ; 1FF: int GetThemeColor(int , int);
0800: FFFFFFFF 45CE6445 ; 200: int REQUEST_SETTING_SILENCE_SET(const int * __zero,u16 profile,u16 value);
0804: FFFFFFFF E9CD6445 ; 201: int REQUEST_SETTING_SILENCE_GET(const int * __zero,u16 profile, char * silence_mode);
0808: FFFFFFFF 79D52045 ; 202: void VCALL_Init (void* vc);
080C: FFFFFFFF 6DD62045 ; 203: void VCALL_SetName (void * vc , u16 * name ,unsigned short name_len);
0810: FFFFFFFF D1D62045 ; 204: void VCALL_SetNameIcon (void * vc , u16 icon);
0814: FFFFFFFF 8DD62045 ; 205: void VCALL_SetNumber (void * vc , u16 * number , unsigned short num_len);
0818: FFFFFFFF B5D62045 ; 206: void VCALL_SetHZ1 (void * vc, int , u16 );
081C: FFFFFFFF C1D62045 ; 207: void VCALL_SetHZ2 (void * vc , u16 );
0820: FFFFFFFF B1CD2045 ; 208: void MakeVoiceCall (int SessioID , void * vc ,int flag);
0824: FFFFFFFF 8D621345 ; 209: int isDirectory (u16 * path ,u16 * filename , int * error );
0828: FFFFFFFF F54B5B45 ; 20A: void FileDelete (u16 * path ,u16 * filename , int * error );
082C: FFFFFFFF 0D3E1945 ; 20B: void SetFocus (GUI * , int);
0830: FFFFFFFF D9444745 ; 20C: int CreateSMSCont (int, void*);
0834: FFFFFFFF E9494745 ; 20D: int FreeSMSCont (void*);
0838: FFFFFFFF 39464745 ; 20E: int PrepareSMSCont (void*,u16*,u16*,int,int);
083C: FFFFFFFF 39494745 ; 20F: int CteateNewMessage (int,void*,int);
0840: FFFFFFFF C0475044 ;8210: void * get_APP_DESC_TABLE(void);
0844: FFFFFFFF AD545445 ; 211: C_INTERFACE *Window_GetComponentInterface(WINDOW*);
0848: FFFFFFFF 259A2145 ; 212: int AB_POSITIONNBR_GET(void * ab_name,char * ,u16 * ,void * ab_num);
084C: FFFFFFFF C5982145 ; 213: int AB_NAME_ITEM2StrID(void * ab_name);
0850: FFFFFFFF 19992145 ; 214: int AB_NUM_ITEM2StrID(void * ab_num_item);
0854: FFFFFFFF FDA96445 ; 215: int GetABRecNum(AB_GET_STRUCT *);
0858: FFFFFFFF 20CA4D44 ;8216: AB_ITEM_DESC * get_AB_ITEMS_DESC();
085C: FFFFFFFF 4D95D744 ; 217: GUI * SBY_GetMainInput(BOOK * StandBy)
0860: FFFFFFFF 4995D744 ; 218: GUI * SBY_GetStatusIndication(BOOK * StandBy)
0864: FFFFFFFF D17C5945 ; 219: int REQUEST_PHONEBOOK_ACCESSSTATUS_TOTAL_GET(const int * __zero, int *);
0868: FFFFFFFF A4CC0B4C ;821A: int * PID_MMI(void);
0874: FFFFFFFF D5233045 ; 21D: DISP_OBJ* DISPBASE_GetFocused(int display);
0878: FFFFFFFF F5283045 ; 21E: char DISP_OBJ_getVisible(DISP_OBJ*);
087C: FFFFFFFF 79E63145 ; 21F: DISP_DESC* DISP_OBJ_GetDESC (DISP_OBJ*);
0880: FFFFFFFF 0D1D3045 ; 220: void DISP_DESC_SetName (DISP_DESC* , const char * name);
0884: FFFFFFFF 91463045 ; 221: char* DISP_OBJ_GetName (DISP_OBJ *);
0888: FFFFFFFF 1D1D3045 ; 222: void DISP_DESC_SetSize (DISP_DESC* , u16 size);
;088C: xxxxxxxx yyyyyyyy ; 223: u16 DISP_DESC_GetSize (DISP_OBJ *);
0890: FFFFFFFF 211D3045 ; 224: void DISP_DESC_SetOnCreate (DISP_DESC* , DISP_OBJ_ONCREATE_METHOD);
0894: FFFFFFFF 4D1F3045 ; 225: DISP_OBJ_ONCREATE_METHOD DISP_OBJ_GetOnCreate (DISP_OBJ *);
0898: FFFFFFFF 251D3045 ; 226: void DISP_DESC_SetOnClose (DISP_DESC* , DISP_OBJ_ONCLOSE_METHOD);
089C: FFFFFFFF 6D1F3045 ; 227: DISP_OBJ_ONCLOSE_METHOD DISP_OBJ_GetOnClose (DISP_OBJ *);
08A0: FFFFFFFF 291D3045 ; 228: void DISP_DESC_SetOnRedraw (DISP_DESC* , DISP_OBJ_ONREDRAW_METHOD);
08A4: FFFFFFFF 8D1F3045 ; 229: DISP_OBJ_ONREDRAW_METHOD DISP_OBJ_GetOnRedraw (DISP_OBJ *);
08A8: FFFFFFFF 311D3045 ; 22A: void DISP_DESC_SetOnKey (DISP_DESC* , DISP_OBJ_ONKEY_METHOD);
08AC: FFFFFFFF CD1F3045 ; 22B: DISP_OBJ_ONKEY_METHOD DISP_OBJ_GetOnKey (DISP_OBJ *);
;08B0: xxxxxxxx yyyyyyyy ; 22C: void DISP_DESC_SetMethod03 (DISP_DESC* ,void (*)(void*));
;08B4: xxxxxxxx yyyyyyyy ; 22D: DISP_OBJ_METHOD DISP_OBJ_GetMethod03 (DISP_OBJ *);
;08B8: xxxxxxxx yyyyyyyy ; 22E: void DISP_DESC_SetMethod04 (DISP_DESC* ,void (*)(void*));
;08BC: xxxxxxxx yyyyyyyy ; 22F: DISP_OBJ_METHOD DISP_OBJ_GetMethod04 (DISP_OBJ *);
;08C0: xxxxxxxx yyyyyyyy ; 230: void DISP_DESC_SetMethod05 (DISP_DESC* ,void (*)(void*));
;08C4: xxxxxxxx yyyyyyyy ; 231: DISP_OBJ_METHOD DISP_OBJ_GetMethod05 (DISP_OBJ *);
08C8: FFFFFFFF 351D3045 ; 232: void DISP_DESC_SetMethod06 (DISP_DESC* ,DISP_OBJ_METHOD);
08CC: FFFFFFFF ED1F3045 ; 233: DISP_OBJ_METHOD DISP_OBJ_GetMethod06 (DISP_OBJ *);
;08D0: xxxxxxxx yyyyyyyy ; 234: void DISP_DESC_SetMethod07 (DISP_DESC* ,void (*)(void*));
;08D4: xxxxxxxx yyyyyyyy ; 235: DISP_OBJ_METHOD DISP_OBJ_GetMethod07 (DISP_OBJ *);
08D8: FFFFFFFF 3D1D3045 ; 236: void DISP_DESC_SetMethod08 (DISP_DESC* ,DISP_OBJ_METHOD);
08DC: FFFFFFFF 2D203045 ; 237: DISP_OBJ_METHOD DISP_OBJ_GetMethod08 (DISP_OBJ *);
;08E0: xxxxxxxx yyyyyyyy ; 238: void DISP_DESC_SetMethod09 (DISP_DESC* ,void (*)(void*));
;08E4: xxxxxxxx yyyyyyyy ; 239: DISP_OBJ_METHOD DISP_OBJ_GetMethod09 (DISP_OBJ *);
;08E8: xxxxxxxx yyyyyyyy ; 23A: void DISP_DESC_SetMethod0A (DISP_DESC* ,void (*)(void*));
;08EC: xxxxxxxx yyyyyyyy ; 23B: DISP_OBJ_METHOD DISP_OBJ_GetMethod0A (DISP_OBJ *);
;08F0: xxxxxxxx yyyyyyyy ; 23C: void DISP_DESC_SetMethod0B (DISP_DESC* ,void (*)(void*));
;08F4: xxxxxxxx yyyyyyyy ; 23D: DISP_OBJ_METHOD DISP_OBJ_GetMethod0B (DISP_OBJ *);
;08F8: xxxxxxxx yyyyyyyy ; 23E: void DISP_DESC_SetMethod0C (DISP_DESC* ,void (*)(void*));
;08FC: xxxxxxxx yyyyyyyy ; 23F: DISP_OBJ_METHOD DISP_OBJ_GetMethod0C (DISP_OBJ *);
0900: FFFFFFFF 4D166445 ; 240: void JavaSession_Manager (int cmd);
0904: FFFFFFFF 95156445 ; 241: int JavaSession_GetName(void);
0908: FFFFFFFF D1E72F45 ; 242: int TextCopyId(int);
090C: FFFFFFFF B1FC2945 ; 243: UI_APP_SESSION *Book_GetSession(BOOK*);
0910: FFFFFFFF 41141745 ; 244: void List2lineSetAsSubitem (void* msg,int unk,int n_sub_items);
0914: FFFFFFFF CD141745 ; 245: void List2lineSubitemAddText(void* msg,int StrID);
0918: FFFFFFFF BD141745 ; 246: int GUIonMessage_GetCreatedSubItemParrentIndex(void * msg);
0920: FFFFFFFF 19d14545 ; 248: void Vibra_Off (int t1);
;0928: xxxxxxxx yyyyyyyy ; 24A: int PlayFileV(u16 * path, u16 * fname, int vol);
;092C: xxxxxxxx yyyyyyyy ; 24B: int GetSilent(void);
;0930: xxxxxxxx yyyyyyyy ; 24C: int GetVibrator(int ignorevibrator,int ignoresilent);
;0934: xxxxxxxx yyyyyyyy ; 24D: int GetAudioSettings(int what, char* retvalue);
0938: FFFFFFFF FD0FDD44 ; 24E: int GetChipID(void);
0948: FFFFFFFF AD141745 ; 252: int List2LineGetCurrentIndex(void * msg);
094C: FFFFFFFF 9D141745 ; 253: int GUIonMessage_GetCurrentItemIndex(void * msg);
0950: FFFFFFFF C5285B45 ; 254: void DestroyDirHandle(void *handle);
0954: FFFFFFFF B8E04E44 ;8255: DB_EXT *LastExtDB(void);
0958: FFFFFFFF 793C5C45 ; 256: void GetOtherExtMethods(FILESUBROUTINE **);
095C: FFFFFFFF 953C5345 ; 257: void MessageBox(int HeaderStrID,int MessageStrID,int IconID, int style /*1 or 2*/,int time,BOOK * unk);
0960: FFFFFFFF 75795445 ; 258: int Display_GetHeight(int Display);
0964: FFFFFFFF 85795445 ; 259: int Display_GetWidth(int Display);
0968: FFFFFFFF 093E1545 ; 25A: void PlaySystemSound (int SndNumber);
0974: ffffffff 45381545 ; 25D: int TabMenuBar_GetFocusedTabIndex(GUI * );
0978: ffffffff 1D381545 ; 25E: void TabMenuBar_SetTabFocused(GUI_TABMENUBAR * , int tab_num);
097C: FFFFFFFF C1221945 ; 25F: int GC_GetPenColor (void* GC);
0980: FFFFFFFF 81221945 ; 260: void GC_SetPenColor(void* GC , int pen_color);
0984: FFFFFFFF FF1E1945 ; 261: void GC_SetPixel (void* GC,int x1,int y1,int color);
0988: FFFFFFFF D12C1945 ; 262: void GC_DrawLine(void* GC,int x1, int y1, int x2, int y2);
098C: FFFFFFFF 652E1945 ; 263: void GC_DrawFRect (void* GC,int color,int x1,int y1,int x2 ,int y2);
0990: FFFFFFFF 7D1F1945 ; 264: int GC_DrawBitmap(void *GC, int x1, int y1, int x2, int y2, int * bmp);
;0994: xxxxxxxx yyyyyyyy ; 265: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
;0998: xxxxxxxx yyyyyyyy ; 266: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
;099C: xxxxxxxx yyyyyyyy ; 267: png_infop png_create_info_struct(png_structp png_ptr);
;09A0: xxxxxxxx yyyyyyyy ; 268: void png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr);
;09A4: xxxxxxxx yyyyyyyy ; 269: void png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr, png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn, png_progressive_end_ptr end_fn);
;09A8: xxxxxxxx yyyyyyyy ; 26A: void png_process_data(png_structp png_ptr, png_infop info_ptr, png_bytep buffer, png_size_t buffer_size);
;09AC: xxxxxxxx yyyyyyyy ; 26B: void png_read_update_info(png_structp png_ptr, png_infop info_ptr);
;09B0: xxxxxxxx yyyyyyyy ; 26C: png_voidp png_get_progressive_ptr(png_structp png_ptr);
;09B4: xxxxxxxx yyyyyyyy ; 26D: png_uint_32 png_get_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
;09B8: xxxxxxxx yyyyyyyy ; 26E: void png_set_strip_16(png_structp png_ptr);
;09BC: xxxxxxxx yyyyyyyy ; 26F: void png_set_gray_1_2_4_to_8(png_structp png_ptr);
;09C0: xxxxxxxx yyyyyyyy ; 270: void png_set_gray_to_rgb(png_structp png_ptr);
;09C4: xxxxxxxx yyyyyyyy ; 271: png_uint_32 png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag);
;09C8: xxxxxxxx yyyyyyyy ; 272: void png_set_tRNS_to_alpha(png_structp png_ptr);
;09CC: xxxxxxxx yyyyyyyy ; 273: void png_set_filler(png_structp png_ptr, png_uint_32 filler, int flags);
;09D0: xxxxxxxx yyyyyyyy ; 274: void png_set_palette_to_rgb(png_structp png_ptr);
;09D4: xxxxxxxx yyyyyyyy ; 275: png_uint_32 png_get_rowbytes(png_structp png_ptr, png_infop info_ptr);
;09D8: xxxxxxxx yyyyyyyy ; 276: void png_progressive_combine_row(png_structp png_ptr, png_bytep old_row, png_bytep new_row);
;09DC: xxxxxxxx yyyyyyyy ; 277: int png_sig_cmp(png_bytep sig, png_size_t start, png_size_t num_to_check);
;09E0: xxxxxxxx yyyyyyyy ; 278: int setjmp(jmp_buf jmpbuf);
;09E4: xxxxxxxx yyyyyyyy ; 279: void longjmp(jmp_buf, int);
;09E8: xxxxxxxx yyyyyyyy ; 27A: int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size);
;09EC: xxxxxxxx yyyyyyyy ; 27B: int inflate (z_streamp strm, int flush);
;09F0: xxxxxxxx yyyyyyyy ; 27C: int inflateEnd (z_streamp strm);
;09F4: xxxxxxxx yyyyyyyy ; 27D: int memcmp (const void *m1,const void *m2,int n);
;09F8: xxxxxxxx yyyyyyyy ; 27E: int strncmp(const char *s1, const char *s2, int len);
;09FC: xxxxxxxx yyyyyyyy ; 27F: char *strncpy (char *dest,const char *source,int maxlen);
;0A00: xxxxxxxx yyyyyyyy ; 280: char *strcat(char *dest, const char *src);
0A04: FFFFFFFF 593F1945 ; 281: void GuiObject_SetTitleType(GUI *gui, int type);
0A08: FFFFFFFF 4D141745 ; 282: void GUIonMessage_SetItemDisabled (void * msg, int Disabled);
0A0C: FFFFFFFF 51DE5A45 ; 283: int REQUEST_IMAGEHANDLER_INTERNAL_REGISTER(const int * __zero,u16 ImageHandle,u16*,u16*,int unk, u16 * ImageID ,char * error);
0A10: FFFFFFFF E5DE5A45 ; 284: int REQUEST_IMAGEHANDLER_INTERNAL_UNREGISTER (const int * __zero,u16 ImageHandle,u16* ,u16* ,int ImageID, int unk_1,char * error);
;0A14: xxxxxxxx yyyyyyyy ;8285: SURFACE ** get_Surfaces(void);
0A18: FFFFFFFF 11913245 ; 286: int iconidname2id(u16* idname,int maxnamelen,int* id);
0A1C: FFFFFFFF 9D871E45 ; 287: int textidname2id(u16* idname,int maxnamelen,int* id);





;locale=Russian_Russia.1251
