;W760 SW-R3EF001
;Библиотека функций
;v221207
;(c) Hussein , IronMaster
;
;pAtChFiLe=/boot/phone_app.cxc

+12789C00
0448: 00000000 AC10B04B ; 112: void memset(void *mem,char chr,int size);
044C: 00000000 98781410 ; 113: int memcpy(void *dest,const void *source,int cnt);
0450: 00000000 A15D7910 ; 114: int sprintf(char *buf, const char *fmt, ...);
0454: 00000000 55627910 ; 115: int snwprintf(wchar_t* buffer, int size, const wchar_t* fmt, ...);
0458: 00000000 5D309F10 ; 116: int _fopen(const wchar_t *filpath, const wchar_t *filname,unsigned int mode , unsigned int rights, unsigned int __0);
045C: 00000000 957E7A11 ; 117: int fclose(int file);
0460: 00000000 F1499F10 ; 118: int fread(int file , void *ptr, int size);
0464: 00000000 BD4B9F10 ; 119: int fwrite(int file , const void *ptr, int size);
0468: 00000000 D5493311 ; 11A: int _wstat(short *path, void *statbuf)
046C: 00000000 1176AF11 ; 11B: int fputs(const char *s, int file)
0470: 00000000 C1399F10 ; 11C: int fstat(const wchar_t * path, const wchar_t *fname , FSTAT * fstat_stuct);
0474: 00000000 AD0E9F10 ; 11D: DIR_HANDLE * AllocDirHandle(const wchar_t * path);
0478: 00000000 7D109F10 ; 11E: FILELISTITEM *GetFname(DIR_HANDLE *, FILELISTITEM *);
047C: 00000000 5DA78911 ; 11F: void * DataBrowserDesc_Create(void);
0480: 00000000 0D8ECE10 ; 120: void DataBrowserDesc_SetStyle(void * db , int style);
0484: 00000000 0DAA8911 ; 121: void DataBrowserDesc_SetHeaderText(void * db , int StrID);
0488: 00000000 F5A98911 ; 122: void DataBrowserDesc_SetFolders(void * db , wchar_t const ** FolderList);
048C: 00000000 15AA8911 ; 123: void DataBrowserDesc_SetOKSoftKeyText(void * db , int StrID);
0490: 00000000 A5698911 ; 124: void DataBrowser_Create(void * db);
0494: 00000000 0DA88911 ; 125: void DataBrowserDesc_Destroy(void * db);
0498: 00000000 CD669F10 ; 126: wchar_t * getFileExtention(wchar_t * fnane);
049C: 00000000 E1129F10 ; 127: int DataBrowser_isFileInListExt(const wchar_t * ext_table,const wchar_t * path ,const wchar_t *fname );
04A0: 00000000 FD81E810 ; 128: void Timer_ReSet(u16 * timer ,int time, void (*onTimer)(u16 timerID, LPARAM lparam), LPARAM lparam);
04A4: 00000000 C981E810 ; 129: u16 Timer_Set(int time, void (*onTimer)(u16 timerID, LPARAM lparam), LPARAM lparam);
04A8: 00000000 5582E810 ; 12A: void Timer_Kill(u16 *timerID);
04AC: 00000000 E9BBE810 ; 12B: int CreateBook(void * mem, void (* onClose)(BOOK*), const PAGE_DESC * bp, const char * name, int __0xFFFFFFFF,int __0);
04B0: 00000000 FDBCE810 ; 12C: void BookObj_KillBook(void *Book);
04B4: 00000000 F9B8E810 ; 12D: void BookObj_GotoPage(BOOK * book, const PAGE_DESC * page);
04B8: 00000000 B1BAE810 ; 12E: void BookObj_ReturnPage(BOOK * ,int);
04BC: 00000000 69C2E810 ; 12F: void FreeBook ( BOOK *book);
04C0: 00000000 B1B6E810 ; 130: BOOK * FindBook(IS_NEEDED_BOOK);
04C4: 00000000 2D8CE210 ; 131: BOOK * Find_StandbyBook(void);
04C8: 00000000 99BEE810 ; 132: void BookObj_SetFocus(void *,int focus);
04CC: 00000000 89D7A610 ; 133: void GuiObject_SetTitleText (void * gui , int StrID);
04D0: 00000000 75D5A610 ; 134: void ShowWindow (void * gui);
04D4: 00000000 414DB211 ; 135: void SetCursorToItem ( void *obj , int item);
04D8: 00000000 CDD5A610 ; 136: void GUI_SetStyle(GUI *,int style);
04DC: 00000000 1559B211 ; 137: int GUIonMessage_GetCreatedItemIndex ( void *msg);
04E0: 00000000 2159B211 ; 138: char SetMenuItemText0 ( GUI_MESSAGE *, int StrID);
04E4: 00000000 5159B211 ; 139: char SetMenuItemText1 ( GUI_MESSAGE *, int StrID);
04E8: 00000000 3159B211 ; 13A: char SetMenuItemText2 ( GUI_MESSAGE *, int StrID);
04EC: 00000000 4159B211 ; 13B: char SetMenuItemText3 ( GUI_MESSAGE *, int StrID);
04F0: 00000000 6159B211 ; 13C: void SetListObjectItemIcon ( void *msg , int align , wchar_t iconID);
04F4: 00000000 F928A610 ; 13D: void DispObject_SetTitleText(DISP_OBJ* DispObj , int StrID);
04F8: 00000000 554DB211 ; 13E: int ListMenu_GetSelectedItem(GUI_LIST * );
04FC: 00000000 A54DB211 ; 13F: void SetMenuItemStyle( void *obj , int style);
0500: 00000000 0DBEA610 ; 140: void putchar( void *xx , int x, int y, int _zero, int zero1 , short wchar);
0504: 00000000 15369810 ;8141: IS_NEEDED_BOOK isScreenSaverBook(void);
0508: 00000000 D181E210 ; 142: void StatusIndication_SetItemText(void *gui,int item,int StrID);
050C: 00000000 D99DE210 ; 143: void StatusIndication_ShowNotes(int StrID);
0510: 00000000 D51A9310 ; 144: GUI * CreateStringInput(int,...);
0514: 00000000 1971B211 ; 145: GUI_ONEOFMANY * CreateOneOfMany(BOOK *);
0518: 00000000 A572B211 ; 146: void OneOfMany_SetItemCount(GUI_ONEOFMANY * , int count);
051C: 00000000 C172B211 ; 147: void OneOfMany_SetChecked(GUI_ONEOFMANY * , int checked);
0520: 00000000 F572B211 ; 148: void OneOfMany_SetTexts(GUI_ONEOFMANY * , int * StrID , int Count);
0524: 00000000 D172B211 ; 149: int OneOfMany_GetSelected(GUI_ONEOFMANY * rb);
0528: 00000000 E59CE210 ; 14A: void StatusIndication_Item8_SetText(int StrID);
052C: 00000000 95BE8A10 ; 14B: void GUIObject_Softkey_SetAction(void * gui,u16 actionID,void (*proc)(BOOK *,void*));
0530: 00000000 0DBF8A10 ; 14C: void GUIObject_Softkey_SetText(void * gui,u16 actionID , int StrID);
0534: 00000000 FDBF8A10 ; 14D: void GUIObject_SoftKey_SetEnable(void *gui,u16 actionID,int ena);
0538: 00000000 B5BF8A10 ; 14E: void GUIObject_SoftKey_AddErrorStr(void *gui,u16 actionID,int StrID);
053C: 00000000 49BE8A10 ; 14F: void GUIObject_SoftKey_RemoveItem(void *gui,u16 actionID);
0540: 00000000 91BF8A10 ; 150: void GUIObject_SoftKey_SetVisible(void *gui,u16 actionID,int visible);
0544: 00000000 01C28A10 ; 151: void GUIObject_SoftKey_SuppressDefaultAction(void *gui,u16 actionID);
0548: 00000000 0911E010 ; 152: wchar_t* wstrcpy(wchar_t * dest, const wchar_t * source);
054C: 00000000 2111E010 ; 153: wchar_t* wstrncpy(wchar_t * dest, const wchar_t * source, int maxlen);
0550: 00000000 15697910 ; 154: wchar_t* wstrcat(wchar_t * wstr, const wchar_t * subwstr);
0554: 00000000 6911E010 ; 155: wchar_t *wstrncat(wchar_t *wstr, const wchar_t *subwstr , int maxlen);
0558: 00000000 D910E010 ; 156: int wstrcmp(const wchar_t *wstr1, const wchar_t *wstr2);
055C: 00000000 C510E010 ; 157: int wstrlen(const wchar_t * wstr);
0560: 00000000 8D23E010 ; 158: wchar_t * str2wstr(wchar_t * wstr, const char * str);
0564: 00000000 29607910 ; 159: int strcmp(const char * str1, const char * str2);
0568: 00000000 85607910 ; 15A: int strlen(const char *str);
056C: 00000000 E511E010 ; 15B: char * wstr2strn (char * str , const wchar_t * wstr, int maxlen);
0570: 00000000 7DF9FF10 ; 15C: int int2strID (int num);
0574: 00000000 51FBFF10 ; 15D: int Str2ID(const void * wstr , int flag , int len);
0578: 00000000 5D020011 ; 15E: void StrID2Str(int StrID,char * str,int maxlen);
057C: 00000000 E5000011 ; 15F: int TextID2wstr(int StrID,wchar_t * str,int maxlen);
0580: 00000000 95FFFF10 ; 160: int TextGetLength(int StrID);
0584: 00000000 8DFEFF10 ; 161: void TextFree(int StrID);
0588: 00000000 D5FDBF10 ; 162: int AB_DEFAULTNBR_GET(int rec_num, void * mem_0x30, int * unk);
;058C: xxxxxxxx yyyyyyyy ; 163: int AB_READSTRING(AB_STR_ITEM *,int rec_num, int field_ID);
0590: 00000000 AD61C010 ; 164: int AB_READPHONENBR(AB_NUM_ITEM *,int rec_num, int field_ID);
0594: 00000000 6562C010 ; 165: int AB_GETNBROFITEMS(int get_from,int unk_0);
0598: 00000000 51F1FF10 ; 166: int PNUM_len(void *pnum);
059C: 00000000 45409D10 ; 167: void PNUM2str(char *str,void *pnum,int len, int max_len);
05A0: 00000000 0DD4A610 ; 168: DISP_OBJ * GUIObj_GetDISPObj (void * gui);
05A4: 00000000 1DB3B611 ; 169: LIST *List_New(void);
05A8: 00000000 45B3B611 ; 16A: void List_Free(LIST *lst);
05AC: 00000000 91B4B611 ; 16B: void ListElement_AddtoTop(LIST *lst,void *newElement);
;05B0: xxxxxxxx yyyyyyyy ; 16C: int Gif2ID(u16 IMAGEHANDLE,const wchar_t * path, const wchar_t * fname,wchar_t * ID);
;05B4: xxxxxxxx yyyyyyyy ; 16D: int REQUEST_IMAGEHANDLER_INTERNAL_GETHANDLE(const int * __zero,u16 * IMAGEHANDLE,char * unk);
05B8: 00000000 3DB08410 ; 16E: void REQUEST_DATEANDTIME_GET(const int * __zero , DATETIME *dt);
05BC: 00000000 312CF010 ; 16F: void IndicationDevice_Backlight_FadeToLevel(int unk_zero ,int bl_level);
05C0: 00000000 F006B04B ; 170: int GetFreeBytesOnHeap(void);
05C4: 00000000 C1BEE810 ; 171: void BookObj_Hide(BOOK *,int display_type);
05C8: 00000000 D1BEE810 ; 172: void BookObj_Show(BOOK *,int display_type);
05CC: 00000000 198EE210 ; 173: void StartAPP (const wchar_t * appname);
05D0: 00000000 794EB211 ; 174: void ListMenu_SetOnMessages (GUI_LIST * , int (*proc)(GUI_MESSAGE *));
05D4: 00000000 690DBA10 ; 175: char * manifest_GetParam(const char *buf, const char *param_name,int unk);
05D8: 00000000 654D9F10 ; 176: int lseek(int file,int offset,int mode);
05DC: 00000000 2B590010 ;8177: int get_VBUFFER(void); //nullsub(ret 0)
05E0: 00000000 2B590010 ; 178: void SetLampLevel (int level); //nullsub(ret 0)
05E4: 00000000 0DB5B611 ; 179: void * ListElement_Remove(LIST *lst,int index);
05E8: 00000000 595E0010 ; 17A: int GetCurrentPID(void);
05EC: 00000000 51B4B611 ; 17B: int ListElement_Prt2NumElement(LIST *lst,void *ptr);
05F0: 00000000 E8CA1710 ; 17C: union SIGNAL *alloc(OSBUFSIZE size,SIGSELECT signo);
05F4: 00000000 04CB1710 ; 17D: union SIGNAL *receive(const SIGSELECT *sigsel);
05F8: 00000000 F4CA1710 ; 17E: void send(union SIGNAL **sig,PROCESS to);
05FC: 00000000 44CB1710 ; 17F: PROCESS sender(union SIGNAL **sig);
0600: 00000000 14CB1710 ; 180: void free_buf(union SIGNAL **sig);
0604: 00000000 E0CB1710 ; 181: PROCESS create_process(int proc_type,char *name,OSENTRYPOINT *entrypoint,OSADDRESS stack_size,OSPRIORITY priority,OSTIME timeslice,PROCESS pid_block,void *redir_table,OSVECTOR vector,OSUSER user);
0608: 00000000 00CE1710 ; 182: void start(PROCESS pid);
060C: 00000000 B0CC1710 ; 183: int get_ptype(PROCESS pid);
0610: 00000000 FCCB1710 ; 184: PROCESS current_process(void);
0614: 00000000 34CB1710 ; 185: void delay(OSTIME timeout);
0618: 00000000 FCCC1710 ; 186: OSBOOLEAN hunt(const char *name, OSUSER user, PROCESS *name_, union SIGNAL **hunt_sig);
061C: 00000000 28CD1710 ; 187: void kill_proc(PROCESS pid);
;0620: xxxxxxxx yyyyyyyy ; 188:
0624: 00000000 60CB1710 ; 189: union SIGNAL *receive_w_tmo (OSTIME timeout, SIGSELECT *sel);
;0628: xxxxxxxx yyyyyyyy ; 18A:
062C: 00000000 10CE1710 ; 18B: void stop(PROCESS pid);
0630: 00000000 7CCC1710 ; 18C: OSBOOLEAN get_mem(PROCESS pid, OSADDRESS from, void* to, OSADDRESS size);
0634: 00000000 395C0010 ; 18D: OSADDRESS get_envp (PROCESS pid, char *name);
0638: 00000000 4D5C0010 ; 18E: OSBOOLEAN set_envp (PROCESS pid, char *name, OSADDRESS value);
063C: 00000000 34CC1710 ; 18F: PROCESS get_bid (PROCESS pid);
;0640: xxxxxxxx yyyyyyyy ; 190:
;0644: xxxxxxxx yyyyyyyy ; 191:
;0648: xxxxxxxx yyyyyyyy ; 192:
;064C: xxxxxxxx yyyyyyyy ; 193:
;0650: xxxxxxxx yyyyyyyy ; 194:
;0654: xxxxxxxx yyyyyyyy ; 195:
;0658: xxxxxxxx yyyyyyyy ; 196:
;065C: xxxxxxxx yyyyyyyy ; 197:
;0660: xxxxxxxx yyyyyyyy ; 198:
;0664: xxxxxxxx yyyyyyyy ; 199:
;0668: xxxxxxxx yyyyyyyy ; 19A:
;066C: xxxxxxxx yyyyyyyy ; 19B:
;0670: xxxxxxxx yyyyyyyy ; 19C:
;0674: xxxxxxxx yyyyyyyy ; 19D:
;0678: xxxxxxxx yyyyyyyy ; 19E:
;067C: xxxxxxxx yyyyyyyy ; 19F:
0680: 00000000 51607910 ; 1A0: char* strcpy(char * dest, const char * source);
0684: 00000000 41ABEA10 ; 1A1: void *CreateMessage(int size,int ev,char *name);
0688: 00000000 95ABEA10 ; 1A2: void SendMessage(void **signal,int PID);
068C: 00000000 1DACEA10 ; 1A3: void * WaitMessage(void *SIGSEL);
0690: 00000000 31ACEA10 ; 1A4: int FreeMessage(void **Mess);
0694: 00000000 2D41C710 ; 1A5: void SendDispatchMessage(int id, int unk_zero, int size,void *mess);
0698: 00000000 E585E810 ; 1A6: char * UIEventName(int event);
069C: 00000000 A0E4B94B ;81A7: int * MissedEvents(void);
06A0: 00000000 89A9E810 ; 1A8: void UI_Event(int event);
06A4: 00000000 99A9E810 ; 1A9: void UI_Event_wData(int event,void *message,void (*mfree)(void*));
06A8: 00000000 E1A9E810 ; 1AA: void UI_Event_toBookID(int event,int BookID);
06AC: 00000000 F5A9E810 ; 1AB: void UI_Event_toBookIDwData(int event,int BookID,void *message,void (*mfree)(void*));
06B0: 00000000 EDB5B611 ; 1AC: int ListElement_Find(LIST *lst,void *element, int (*cmp_proc)(void *,void *));
06B4: 00000000 3DB5B611 ; 1AD: void * ListElement_GetByIndex(LIST * , int index);
06B8: 00000000 4924E010 ; 1AE: wchar_t* wstrrchr(const wchar_t* wstr, wchar_t wchar);
06BC: 00000000 89B9E810 ; 1AF: void BookObj_CallSubroutine(BOOK * , BOOK_SUBROUTINE *subr);
06C0: 00000000 99B4B611 ; 1B0: void ListElement_Add(LIST *lst,void *newElement);
06C4: 00000000 F1A2B34B ; 1B1: void debug_printf(const char * fmt,...);
06C8: 00000000 3572A811 ; 1B2: int PlayFile(const wchar_t * path, const wchar_t * fname);
;06CC: xxxxxxxx yyyyyyyy ; 1B3:
06D0: 00000000 0921B411 ; 1B4: int REQUEST_PROFILE_GETACTIVEPROFILE(const int *__zero , int *level);
06D4: 00000000 4124B711 ; 1B5: int Profile_SetActive(int NUMprof,int set_in_gdfs_flag);
;06D8: xxxxxxxx yyyyyyyy ; 1B6:
06DC: 00000000 01349810 ; 1B7: int isKeylocked(void);
06E0: 00000000 51EEEA10 ;81B8: IS_NEEDED_BOOK isMediaPlayerVideoBook(void);
;06E4: xxxxxxxx yyyyyyyy ; 1B9:
;06E8: xxxxxxxx yyyyyyyy ; 1BA:
06EC: 00000000 9D65A811 ; 1BB: void Vibra(int t1, int t2, int t3);
06F0: 00000000 1DB28410 ; 1BC: int REQUEST_DATEFORMAT_GET(const int *SYNC, char *DateFormat);
06F4: 00000000 01B38410 ; 1BD: int REQUEST_TIMEFORMAT_GET(const int *SYNC, char *TimeFormat);
06F8: 00000000 25F8AF11 ; 1BE: int Date2ID(DATE *, int TimeFormat,int);
06FC: 00000000 41F7AF11 ; 1BF: int Time2ID(TIME *, char TimeFormat,int isSec);
0700: 00000000 554BB211 ; 1C0: GUI_LIST * CreateListObject(BOOK * , void * unk);
0704: 00000000 694DB211 ; 1C1: void SetNumOfMenuItem(void * , int item_count);
0708: 00000000 C8A8BA4B ;81C2: LIST ** ROOT_APP(void);
070C: 00000000 F9BE8A10 ; 1C3: void SoftKey_AddHelpStr(void *gui,int msg,int StrID);
0710: 00000000 31C08A10 ; 1C4: void SoftKey_SetItemAsSubItem(void *gui,int item,int subitem);
0714: 00000000 E92DB011 ; 1C5: int REQUEST_SYSTEM_SHUTDOWN(void);
0718: 00000000 F92DB011 ; 1C6: int REQUEST_SYSTEM_RESTART(void);
071C: 00000000 65BF8A10 ; 1C7: void SoftKeys_SetText(void *gui,int msg,int StrID,int StrID1);
0720: 00000000 85DBBC10 ; 1C8: int isRightNowBook(BOOK *);
0724: 00000000 59E8B511 ; 1C9: int isVolumeControllerBook(BOOK *);
0728: 00000000 812C8211 ; 1CA: GUI_TABMENUBAR * CreateTabMenuBar(BOOK *);
072C: 00000000 D92E8211 ; 1CB: void TabMenuBar_SetTabCount(GUI_TABMENUBAR * , int count);
0730: 00000000 512D8211 ; 1CC: void TabMenuBar_AssignGuiObj(GUI_TABMENUBAR * , int tab , GUI *);
0734: 00000000 D12D8211 ; 1CD: void TabMenuBar_SetTabIcon(GUI_TABMENUBAR *,int tab, wchar_t icon , int for_state);
0738: 00000000 81D3A610 ; 1CE: GUI *GUI_Free(GUI*);
073C: 00000000 49D6A610 ; 1CF: void InputFeedback_SetIcon(GUI *gui, wchar_t icon);
0740: 00000000 85239310 ; 1D0: int StringInput_GetStringAndLen (GUI*,wchar_t**,u16*);
0744: 00000000 0C7ABC4B ;81D1: PAudioControl* GetAudioControlPtr();
0748: 00000000 D92D5F11 ; 1D2: int AudioControl_Vibrate(PAudioControl pIAudioControl, int vibratime, int pausetime, int totaltime);
074C: 00000000 E5639F10 ; 1D3: int GetVolumeSize(wchar_t *root_folder, VOLUMESIZE *);
0750: 00000000 256BB211 ; 1D4: GUI_NOFMANY * CreateNOfMany(BOOK *);
0754: 00000000 296DB211 ; 1D5: void NOfMany_SetTexts(GUI_NOFMANY * , int * StrIDtable, int items_count);
0758: 00000000 AD6CB211 ; 1D6: void NOfMany_SetChecked(GUI_NOFMANY * , u16 * checked_table, int items_count);
075C: 00000000 756CB211 ; 1D7: void NOfMany_SetCursor(GUI_NOFMANY * , int item);
0760: 00000000 D16CB211 ; 1D8: int NOfMany_GetCheckedCount(GUI_NOFMANY *);
0764: 00000000 C16CB211 ; 1D9: int NOfMany_GetChecked(GUI_NOFMANY * , u16 * buffer );
0768: 00000000 216DB211 ; 1DA: void NOfMany_SetonMessage(GUI_NOFMANY * , void * proc );
;076C: xxxxxxxx yyyyyyyy ; 1DB:
;0770: xxxxxxxx yyyyyyyy ; 1DC:
;0774: xxxxxxxx yyyyyyyy ; 1DD:
;0778: xxxxxxxx yyyyyyyy ; 1DE:
077C: 00000000 8173A811 ; 1DF: PAudioControl AudioControl_Init();
0780: 00000000 8972B211 ; 1E0: void OneOfMany_SetFocused(GUI_ONEOFMANY * , int item);
0784: 00000000 ED72B211 ; 1E1: void OneOfMany_SetonMessage(GUI_ONEOFMANY * , int (*proc)(GUI_MESSAGE *));
0788: 00000000 09E4AF11 ; 1E2: GUI_FEEDBACK * CreateFeedBack (int,...);
078C: 00000000 C1E4AF11 ; 1E3: void FeedBack_SetText(GUI_FEEDBACK*,int);
0790: 00000000 21FC1111 ; 1E4: int GetBattaryState(const int * , BATT *);
0794: 00000000 D1B3A610 ; 1E5: void * get_DisplayGC (void);
0798: 00000000 C93FA610 ; 1E6: void GetGuiRect(void*,RECT*);
079C: 00000000 15BAA610 ; 1E7: void get_GC_RECT(void*,RECT*);
07A0: 00000000 11BDA610 ; 1E8: int get_GC_xx(void * GC);
07A4: 00000000 05BDA610 ; 1E9: void *set_GC_xx(void * GC, int);
07A8: 00000000 C5B9A610 ; 1EA: void GC_validate_RECT(void * GC , RECT*);
07AC: 00000000 79BFE810 ; 1EB: void addGui2book(BOOK*,GUI*);
07B0: 00000000 1D71A610 ; 1EC: void DrawRect(int x1, int y1,int x2 ,int y2,int pen_color,int brush_color);
07B4: 00000000 6974A610 ; 1ED: void DrawString(int StrID,int align,int x1,int y1,int x2,int y2,int unk,int unk1,int pen_color ,int brush_color);
07B8: 00000000 79C4E810 ; 1EE: void addGui2XGuiList (void* xguilist , GUI*);
07BC: 00000000 593DA610 ; 1EF: void InvalidateRect(DISP_OBJ *,RECT*);
07C0: 00000000 BDD1A610 ; 1F0: int CreateObject(GUI*,void (*)(DISP_DESC *),void (*)(DISP_DESC *),BOOK *,void(*)(),int,int size_obj);
07C4: 00000000 2980A610 ; 1F1: int SetFont(int);
07C8: 00000000 785CBC4B ;81F2: DISP_OBJ ** StatusRow_p(void);
07CC: 00000000 219FE810 ; 1F3: int root_list_get_session_count(void);
07D0: 00000000 319FE810 ; 1F4: UI_APP_SESSION *root_list_get_session(int num_session);
07D4: 00000000 0197E810 ; 1F5: BOOK *SESSION_GetTopBook(UI_APP_SESSION *);
;07D8: xxxxxxxx yyyyyyyy ; 1F6: int MainInput_getVisible(GUI *);
;07DC: xxxxxxxx yyyyyyyy ; 1F7: int MainInput_strlen(GUI *);
;07E0: xxxxxxxx yyyyyyyy ; 1F8: char * MainInput_getPNUM(GUI *);
;07E4: xxxxxxxx yyyyyyyy ; 1F9: int MainInput_isPlus(GUI *);
07E8: 00000000 55C3E810 ; 1FA: int BOOK_GetBookID(BOOK * );
07EC: 00000000 E9697910 ; 1FB: int wstrncmp(const wchar_t*,const wchar_t*,int);
07F0: 00000000 CD51A610 ; 1FC: int DISP_OBJ_GetAbsoluteXPos(DISP_OBJ *);
07F4: 00000000 0152A610 ; 1FD: int DISP_OBJ_GetAbsoluteYPos(DISP_OBJ *);
07F8: 00000000 DD42A610 ; 1FE: WINDOW * DISP_OBJ_GetWindow(DISP_OBJ *);
07FC: 00000000 4DADEF10 ; 1FF: int GetThemeColor(int , int);
0800: 00000000 3D1BB411 ; 200: int REQUEST_SETTING_SILENCE_SET(const int * __zero,u16 profile,u16 value);
0804: 00000000 E51AB411 ; 201: int REQUEST_SETTING_SILENCE_GET(const int * __zero,u16 profile, char * silence_mode);
0808: 00000000 1540BF10 ; 202: void VCALL_Init (void* vc);
080C: 00000000 0D41BF10 ; 203: void VCALL_SetName (void * vc , wchar_t * name ,unsigned short name_len);
0810: 00000000 6D41BF10 ; 204: void VCALL_SetNameIcon (void * vc , wchar_t icon);
0814: 00000000 2D41BF10 ; 205: void VCALL_SetNumber (void * vc , wchar_t * number , unsigned short num_len);
0818: 00000000 5141BF10 ; 206: void VCALL_SetHZ1 (void * vc, int , u16 );
081C: 00000000 5D41BF10 ; 207: void VCALL_SetHZ2 (void * vc , u16 );
0820: 00000000 AD3BBF10 ; 208: void MakeVoiceCall (int SessioID , void * vc ,int flag);
;0824: xxxxxxxx yyyyyyyy ; 209: int isDirectory (wchar_t * path ,wchar_t * filename , int * error );
0828: 00000000 513C9F10 ; 20A: void FileDelete (wchar_t * path ,wchar_t * filename , int * error );
082C: 00000000 39D5A610 ; 20B: void SetFocus (GUI * , int);
0830: 00000000 F554AB11 ; 20C: int CreateSMSCont (int, void*);
0834: 00000000 395CAB11 ; 20D: int FreeSMSCont (void*);
0838: 00000000 D556AB11 ; 20E: int PrepareSMSCont (void*,wchar_t*,wchar_t*,int,int);
083C: 00000000 615BAB11 ; 20F: int CteateNewMessage (int,void*,int);
0840: 00000000 1C36C211 ;8210: void * get_APP_DESC_TABLE(void);
0844: 00000000 7DADA610 ; 211: C_INTERFACE *Window_GetComponentInterface(WINDOW*);
0848: 00000000 5164C010 ; 212: int AB_POSITIONNBR_GET(void * ab_name,char * ,u16 * ,void * ab_num);
084C: 00000000 6563C010 ; 213: int AB_NAME_ITEM2StrID(AB_STR_ITEM * ab_name);
0850: 00000000 C963C010 ; 214: int AB_NUM_ITEM2StrID(AB_NUM_ITEM * ab_num_item);
0854: 00000000 4D64C010 ; 215: int GetABRecNum(AB_GET_STRUCT *); //nullsub(void)
0858: 00000000 F0BAC011 ;8216: AB_ITEM_DESC * get_AB_ITEMS_DESC();
085C: 00000000 5D2F9410 ; 217: GUI * SBY_GetMainInput(BOOK * StandBy); // !!!!! не настоящий !!!!!!
0860: 00000000 E9728010 ; 218: GUI * SBY_GetStatusIndication(BOOK * StandBy); // !!!!! не настоящий !!!!!!
0864: 00000000 25B9AE10 ; 219: int REQUEST_PHONEBOOK_ACCESSSTATUS_TOTAL_GET(const int * __zero, int *);
0868: 00000000 048FBA4B ;821A: int * PID_MMI(void);
;086C: xxxxxxxx yyyyyyyy ; 21B:
;0870: xxxxxxxx yyyyyyyy ; 21C: GUI * DISP_OBJ_GetGUI(DISP_OBJ *);
0874: 00000000 8935A610 ; 21D: DISP_OBJ* DISPBASE_GetFocused(int display);
0878: 00000000 FD3BA610 ; 21E: char DISP_OBJ_getVisible(DISP_OBJ*);
087C: 00000000 994E0110 ; 21F: DISP_DESC* DISP_OBJ_GetDESC (DISP_OBJ* obj); // !!!!! не настоящий !!!!!!
0880: 00000000 3908A610 ; 220: void DISP_DESC_SetName (DISP_DESC* , const char * name);
0884: 00000000 254FA610 ; 221: char* DISP_OBJ_GetName (DISP_OBJ *);
0888: 00000000 3D08A610 ; 222: void DISP_DESC_SetSize (DISP_DESC* , u16 size);
;088C: xxxxxxxx yyyyyyyy ; 223: u16 DISP_DESC_GetSize (DISP_OBJ *);
0890: 00000000 4108A610 ; 224: void DISP_DESC_SetOnCreate (DISP_DESC* , DISP_OBJ_ONCREATE_METHOD);
0894: 00000000 BD08A610 ; 225: DISP_OBJ_ONCREATE_METHOD DISP_OBJ_GetOnCreate (DISP_OBJ *);
0898: 00000000 4508A610 ; 226: void DISP_DESC_SetOnClose (DISP_DESC* , DISP_OBJ_ONCLOSE_METHOD);
089C: 00000000 D908A610 ; 227: DISP_OBJ_ONCLOSE_METHOD DISP_OBJ_GetOnClose (DISP_OBJ *);
08A0: 00000000 4908A610 ; 228: void DISP_DESC_SetOnRedraw (DISP_DESC* , DISP_OBJ_ONREDRAW_METHOD);
08A4: 00000000 F508A610 ; 229: DISP_OBJ_ONREDRAW_METHOD DISP_OBJ_GetOnRedraw (DISP_OBJ *);
08A8: 00000000 5108A610 ; 22A: void DISP_DESC_SetOnKey (DISP_DESC* , DISP_OBJ_ONKEY_METHOD);
08AC: 00000000 2D09A610 ; 22B: DISP_OBJ_ONKEY_METHOD DISP_OBJ_GetOnKey (DISP_OBJ *);
08B0: 00000000 4D08A610 ; 22C: void DISP_DESC_SetonRefresh (DISP_DESC* ,DISP_OBJ_METHOD);
08B4: 00000000 1109A610 ; 22D: DISP_OBJ_METHOD DISP_OBJ_GetonRefresh (DISP_OBJ *);
;08B8: xxxxxxxx yyyyyyyy ; 22E: void DISP_DESC_SetMethod04 (DISP_DESC* ,void (*)(void*));
;08BC: xxxxxxxx yyyyyyyy ; 22F: DISP_OBJ_METHOD DISP_OBJ_GetMethod04 (DISP_OBJ *);
;08C0: xxxxxxxx yyyyyyyy ; 230: void DISP_DESC_SetMethod05 (DISP_DESC* ,void (*)(void*));
;08C4: xxxxxxxx yyyyyyyy ; 231: DISP_OBJ_METHOD DISP_OBJ_GetMethod05 (DISP_OBJ *);
08C8: 00000000 5508A610 ; 232: void DISP_DESC_SetMethod06 (DISP_DESC* ,DISP_OBJ_METHOD);
08CC: 00000000 4909A610 ; 233: DISP_OBJ_METHOD DISP_OBJ_GetMethod06 (DISP_OBJ *);
;08D0: xxxxxxxx yyyyyyyy ; 234: void DISP_DESC_SetMethod07 (DISP_DESC* ,void (*)(void*));
;08D4: xxxxxxxx yyyyyyyy ; 235: DISP_OBJ_METHOD DISP_OBJ_GetMethod07 (DISP_OBJ *);
08D8: 00000000 5D08A610 ; 236: void DISP_DESC_SetMethod08 (DISP_DESC* ,DISP_OBJ_METHOD);
08DC: 00000000 8109A610 ; 237: DISP_OBJ_METHOD DISP_OBJ_GetMethod08 (DISP_OBJ *);
;08E0: xxxxxxxx yyyyyyyy ; 238: void DISP_DESC_SetMethod09 (DISP_DESC* ,void (*)(void*));
;08E4: xxxxxxxx yyyyyyyy ; 239: DISP_OBJ_METHOD DISP_OBJ_GetMethod09 (DISP_OBJ *);
;08E8: xxxxxxxx yyyyyyyy ; 23A: void DISP_DESC_SetMethod0A (DISP_DESC* ,void (*)(void*));
;08EC: xxxxxxxx yyyyyyyy ; 23B: DISP_OBJ_METHOD DISP_OBJ_GetMethod0A (DISP_OBJ *);
;08F0: xxxxxxxx yyyyyyyy ; 23C: void DISP_DESC_SetMethod0B (DISP_DESC* ,void (*)(void*));
;08F4: xxxxxxxx yyyyyyyy ; 23D: DISP_OBJ_METHOD DISP_OBJ_GetMethod0B (DISP_OBJ *);
;08F8: xxxxxxxx yyyyyyyy ; 23E: void DISP_DESC_SetMethod0C (DISP_DESC* ,void (*)(void*));
;08FC: xxxxxxxx yyyyyyyy ; 23F: DISP_OBJ_METHOD DISP_OBJ_GetMethod0C (DISP_OBJ *);
;0900: xxxxxxxx yyyyyyyy ; 240: void JavaSession_Manager (int cmd);
0904: 00000000 2B590010 ; 241: int JavaSession_GetName(void); //nullsub(ret 0)
0908: 00000000 31FDFF10 ; 242: int TextCopyId(int);
090C: 00000000 B5C2E810 ; 243: UI_APP_SESSION *Book_GetSession(BOOK*);
0910: 00000000 BD59B211 ; 244: void List2lineSetAsSubitem (void* msg,int unk,int n_sub_items);
0914: 00000000 295AB211 ; 245: void List2lineSubitemAddText(void* msg,int StrID);
0918: 00000000 1D5AB211 ; 246: int GUIonMessage_GetCreatedSubItemParrentIndex(void * msg);
091C: 00000000 9D23EC10 ; 247: void GoMusic(void);
0920: 00000000 7166A811 ; 248: void Vibra_Off (int t1);
;0924: xxxxxxxx yyyyyyyy ; 249:
0928: 00000000 3972A811 ; 24A: int PlayFileV(const wchar_t * path,const wchar_t * fname, int vol);
092C: 00000000 0957A811 ; 24B: int GetSilent(void);
0930: 00000000 D111A811 ; 24C: int GetVibrator(int ignorevibrator,int ignoresilent);
0934: 00000000 0D6AA811 ; 24D: int GetAudioSettings(int what, char* retvalue);
0938: 00000000 3D8D6D12 ; 24E: int GetChipID(void);
;093C: xxxxxxxx yyyyyyyy ; 24F:
;0940: xxxxxxxx yyyyyyyy ; 250:
;0944: xxxxxxxx yyyyyyyy ; 251:
0948: 00000000 115AB211 ; 252: int List2LineGetCurrentIndex(void * msg);
094C: 00000000 055AB211 ; 253: int GUIonMessage_GetCurrentItemIndex(void * msg);
0950: 00000000 F9119F10 ; 254: void DestroyDirHandle(DIR_HANDLE *handle);
0954: 00000000 909AEF11 ;8255: DB_EXT *LastExtDB(void);
0958: 00000000 BD088911 ; 256: void GetOtherExtMethods(FILESUBROUTINE **);
095C: 00000000 C5C9AF11 ; 257: void MessageBox(int HeaderStrID,int MessageStrID,wchar_t IconID, int style /*1 or 2*/,int time,BOOK * unk);
0960: 00000000 F1528211 ; 258: int Display_GetHeight(int Display);
0964: 00000000 FD528211 ; 259: int Display_GetWidth(int Display);
0968: 00000000 DD71A811 ; 25A: void PlaySystemSound (int SndNumber);
;096C: xxxxxxxx yyyyyyyy ; 25B:
;0970: xxxxxxxx yyyyyyyy ; 25C:
0974: 00000000 452D8211 ; 25D: int TabMenuBar_GetFocusedTabIndex(GUI_TABMENUBAR * );
0978: 00000000 352D8211 ; 25E: void TabMenuBar_SetTabFocused(GUI_TABMENUBAR * , int tab_num);
097C: 00000000 1DBCA610 ; 25F: int GC_GetPenColor (void* GC);
0980: 00000000 E1BBA610 ; 260: void GC_SetPenColor(void* GC , int pen_color);
0984: 00000000 65B8A610 ; 261: void GC_SetPixel (void* GC,int x1,int y1,int color);
0988: 00000000 61C3A610 ; 262: void GC_DrawLine(void* GC,int x1, int y1, int x2, int y2);
098C: 00000000 EDC4A610 ; 263: void GC_DrawFRect (void* GC,int color,int x1,int y1,int x2 ,int y2);
0990: 00000000 EDB8A610 ; 264: int GC_DrawBitmap(void *GC, int x1, int y1, int x2, int y2, int * bmp);
0994: 00000000 EDF18C11 ; 265: __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
0998: 00000000 39F38C11 ; 266: __thumb void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
099C: 00000000 95D98C11 ; 267: __thumb png_infop png_create_info_struct(png_structp png_ptr);
09A0: 00000000 C9D98C11 ; 268: __thumb void png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr);
09A4: 00000000 C5F18C11 ; 269: __thumb void png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr, png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn, png_progressive_end_ptr end_fn);
09A8: 00000000 85E18C11 ; 26A: __thumb void png_process_data(png_structp png_ptr, png_infop info_ptr, png_bytep buffer, png_size_t buffer_size);
09AC: 00000000 0DF38C11 ; 26B: __thumb void png_read_update_info(png_structp png_ptr, png_infop info_ptr);
09B0: 00000000 E9F18C11 ; 26C: __thumb png_voidp png_get_progressive_ptr(png_structp png_ptr);
09B4: 00000000 51DE8C11 ; 26D: __thumb png_uint_32 png_get_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
09B8: 00000000 D9F48C11 ; 26E: __thumb void png_set_strip_16(png_structp png_ptr);
09BC: 00000000 E5F48C11 ; 26F: __thumb void png_set_gray_1_2_4_to_8(png_structp png_ptr);
09C0: 00000000 09F58C11 ; 270: __thumb void png_set_gray_to_rgb(png_structp png_ptr);
09C4: 00000000 25DE8C11 ; 271: __thumb png_uint_32 png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag);
09C8: 00000000 FDF48C11 ; 272: __thumb void png_set_tRNS_to_alpha(png_structp png_ptr);
09CC: 00000000 6D228D11 ; 273: __thumb void png_set_filler(png_structp png_ptr, png_uint_32 filler, int flags);
09D0: 00000000 F1F48C11 ; 274: __thumb void png_set_palette_to_rgb(png_structp png_ptr);
09D4: 00000000 3DDE8C11 ; 275: __thumb png_uint_32 png_get_rowbytes(png_structp png_ptr, png_infop info_ptr);
09D8: 00000000 A5F18C11 ; 276: __thumb void png_progressive_combine_row(png_structp png_ptr, png_bytep old_row, png_bytep new_row);
09DC: 00000000 8DD88C11 ; 277: __thumb int png_sig_cmp(png_bytep sig, png_size_t start, png_size_t num_to_check);
09E0: 00000000 34BB1410 ; 278: __arm int setjmp(jmp_buf jmpbuf);
09E4: 00000000 58BB1410 ; 279: __arm void longjmp(jmp_buf, int);
09E8: 00000000 412F8D11 ; 27A: __thumb int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size);
09EC: 00000000 E9308D11 ; 27B: __thumb int inflate (z_streamp strm, int flush);
09F0: 00000000 E1438D11 ; 27C: __thumb int inflateEnd (z_streamp strm);
09F4: 00000000 C07A6D12 ; 27D: int memcmp (const void *m1,const void *m2,int n);
09F8: 00000000 C1607910 ; 27E: __thumb int strncmp(const char *s1, const char *s2, int len);
09FC: 00000000 F5607910 ; 27F: __thumb char *strncpy (char *dest,const char *source,int maxlen);
0A00: 00000000 F15F7910 ; 280: __thumb char *strcat(char *dest, const char *src);
0A04: 00000000 6DD7A610 ; 281: __thumb void GuiObject_SetTitleType(GUI *gui, int type);
0A08: 00000000 C959B211 ; 282: __thumb void GUIonMessage_SetItemDisabled (void * msg, int Disabled);
;0A0C: xxxxxxxx yyyyyyyy ; 283: int REQUEST_IMAGEHANDLER_INTERNAL_REGISTER(const int * __zero,u16 ImageHandle,wchar_t *path,wchar_t *fname,int unk, wchar_t * ImageID ,char * error);
;0A10: xxxxxxxx yyyyyyyy ; 284: int REQUEST_IMAGEHANDLER_INTERNAL_UNREGISTER (const int * __zero,u16 ImageHandle,u16* ,u16* ,wchar_t ImageID, int unk_1,char * error);
0A14: 00000000 3443D84B ;8285: SURFACE ** get_Surfaces(void);
0A18: 00000000 75E55B11 ; 286: int iconidname2id(const wchar_t* idname,int maxnamelen,int *id);
0A1C: 00000000 FD7C7A11 ; 287: int textidname2id(const wchar_t* idname,int maxnamelen,int* id);
0A20: 00000000 F94EB211 ; 288: void ListMenu_SetNoItemText(GUI_LIST *, int str);
;0A24: xxxxxxxx yyyyyyyy ; 289:
0A28: 00000000 45560411 ;828A: IS_NEEDED_BOOK isFmRadioBook(void);
0A2C: 00000000 0D1FD210 ;828B: IS_NEEDED_BOOK isAudioPlayerBook(void);
;0A30: xxxxxxxx yyyyyyyy ; 28C: void PlayerControl(BOOK *AudioPlayerBook, int);
0A34: 00000000 81350411 ; 28D: void SwitchRadioStationFromList(BOOK *FmRadioBook, int);
0A38: 00000000 6181E710 ; 28E: void Shortcut_Run (wchar_t * shortcut_name);
0A3C: 00000000 D9059F10 ; 28F: int mkdir(const wchar_t* path);
0A40: 00000000 CD099F10 ; 290: int rmdir(const wchar_t* path, int zero);
0A44: 00000000 7D3B9F10 ; 291: int chmod(const wchar_t* path, const wchar_t* fname, int amode);
0A48: 00000000 A5419F10 ; 292: int rename(const wchar_t* oldpath, const wchar_t* oldfname, const wchar_t* newpath, const wchar_t* newfname, int zero);
0A4C: 00000000 0187A610 ; 293: int GetImageWidth(wchar_t ImageID);
0A50: 00000000 1587A610 ; 294: int GetImageHeight(wchar_t ImageID);
0A54: 00000000 55C9E910 ; 295: void * CallID_GetCallStatusDesc(int CallID);
0A58: 00000000 8DBFE910 ; 296: wchar_t * CallStatusDesc_GetName(void * CallStatusDesc);
0A5C: 00000000 31B6B611 ; 297: void List_FreeElements(LIST *,int (*cmp_proc)(void * elem_from_list),void (*freefunc)(void * elem_from_list));
0A60: 00000000 91617910 ; 298: char * strstr(const char * str1,const char * str2);
0A64: 00000000 3DE58910 ; 299: int GPRS_GetLastSessionInfo(int,GPRS_SESSION_INFO *);
0A68: 00000000 E524E010 ; 29A: int wstrcmpni(const wchar_t * wstr1,const wchar_t * wstr2,int len);
0A6C: 00000000 297CE810 ; 29B: int wtoi(const wchar_t * wstr,int len,int * dest);
0A70: 00000000 7189C610 ; 29C: void DATE_GetWeekDay(DATE *,char * dest);
0A74: 00000000 49049C10 ; 29D: void Cale_GetSettings(int setID,void *);
0A78: 00000000 496B7910 ; 29E: wchar_t * wstrwstr(const wchar_t * wstr1,const wchar_t * wstr2);
0A7C: 00000000 2925E010 ; 29F: int wstrcmpi(const wchar_t *ws1, const wchar_t *ws2);
0A80: 00000000 31697910 ; 2A0: wchar_t * wstrchr(const wchar_t * source,wchar_t chr);
0A84: 00000000 4DC28A10 ; 2A1: void GUIObject_HideSoftkeys(void *gui);
0A88: 00000000 59C28A10 ; 2A2: void GUIObject_ShowSoftkeys(void *gui);
0A8C: 00000000 15868A10 ; 2A3: DISP_OBJ* DispObject_SoftKeys_Get(void);
0A90: 00000000 C195EF10 ; 2A4: int StandbyBackground_SetImage(int type,int,int,const wchar_t* path,const wchar_t* fname,int);
0A94: 00000000 A54B8211 ; 2A5: GUI *CreateYesNoQuestionVA(int zero, ...);
0A98: 00000000 1D51B211 ; 2A6: void ListMenu_SetSecondLineText(GUI_LIST *,int elem_num,int StrID);
0A9C: 00000000 0168BC10 ; 2A7: void _REQUEST_OAF_START_APPLICATION(const int * __one,int __zero,MIDP_DESC *,int ___zero);
0AA0: 00000000 D5619F10 ; 2A8: int FSX_isNameInvalid(wchar_t * name);
0AA4: 00000000 FDA98911 ; 2A9: void DataBrowserDesc_SetFoldersNumber(void * DataBrowserDesc,int state);
0AA8: 00000000 B1A98911 ; 2AA: void DataBrowserDesc_SetActions(void * DataBrowserDesc,char * actions);
0AAC: 00000000 79A98911 ; 2AB: void DataBrowserDesc_SetSelectAction(void * DataBrowserDesc,int state);
0AB0: 00000000 81A98911 ; 2AC: void DataBrowserDesc_SetSelectActionOnFolders(void * DataBrowserDesc,int state);
0AB4: 00000000 5DA98911 ; 2AD: void DataBrowserDesc_SetBookID(void * DataBrowserDesc,int BookID);
0AB8: 00000000 01A98911 ; 2AE: void DataBrowserDesc_SetItemFilter(void * DataBrowserDesc,DB_FILE_FILTER);
0ABC: 00000000 2DAA8911 ; 2AF: void DataBrowserDesc_SetOption(void * DataBrowserDesc,char * option);
0AC0: 00000000 95AA8911 ; 2B0: void DataBrowserDesc_SetOpenEmptyFolder(void * DataBrowserDesc,int state);
0AC4: 00000000 09A98911 ; 2B1: void DataBrowserDesc_SetFileExtList(void * DataBrowserDesc,const wchar_t * ExtList);
0AC8: 00000000 79418A11 ; 2B2: void FSX_RemoveIllegalSymbolsName(FILEITEM *);
0ACC: 00000000 913B8A11 ; 2B3: FILEITEM * FILEITEM_Create(void);
0AD0: 00000000 C13C8A11 ; 2B4: void FILEITEM_Destroy(FILEITEM *);
0AD4: 00000000 0D308211 ; 2B5: GUI *CreateDateInputVA(int zero, ...);
0AD8: 00000000 7D478211 ; 2B6: GUI *CreateTimeInputVA(int zero, ...);
0ADC: 00000000 D1239310 ; 2B7: void StringInput_SetCursorPosition(GUI *,u16 curs_pos,char unk);
0AE0: 00000000 2DBAE810 ; 2B8: void BookObj_CallPage(BOOK * book, const PAGE_DESC * page);
0AE4: 00000000 7D328211 ; 2B9: unsigned int DateInput_GetDateInt(void *dateinp_msg);
0AE8: 00000000 454A8211 ; 2BA: unsigned int TimeInput_GetTimeInt(void *timeinp_msg);
0AEC: 00000000 8425BA4B ;82BB: FONT_DESC *GetFontDesc(void);
0AF0: 00000000 F428BA4B ;82BC: int *GetFontCount();
0AF4: 00000000 F9BCA610 ; 2BD: int GC_GetBrushColor(void* GC);
0AF8: 00000000 B9BCA610 ; 2BE: void GC_SetBrushColor(void* GC , int brush_color);
0AFC: 00000000 35C5A610 ; 2BF: void GC_DrawRoundRect(void* GC ,RECT *,int arcWidth,int arcHeight,int border_flag,int fill_flag);
0B00: 00000000 1579E710 ; 2C0: BOOK * MenuBook_Desktop(int mode,int BookID);
;0B04: xxxxxxxx yyyyyyyy ; 2C1: wchar_t * MenuBook_Desktop_GetSelectedItemID(BOOK * MenuBook_Desktop);
0B08: 00000000 D5648A10 ; 2C2: void BookObj_Softkey_SetAction(BOOK *,int actionID,void (*proc)(BOOK *,void*));
0B0C: 00000000 0D658A10 ; 2C3: void BookObj_Softkey_SetText(BOOK *,int actionID,int StrID);
0B10: 00000000 ED9DE810 ; 2C4: BOOK * FindBookByID(int BookID);
0B14: 00000000 E13F8211 ; 2C5: GUI_FEEDBACK *TextFeedbackWindow(BOOK *bk, int zero);
0B18: 00000000 ED438211 ; 2C6: void Feedback_SetKeyHook(GUI_FEEDBACK *, void (*hook)(BOOK *bk, int key, int unk, int unk2));
0B1C: 00000000 89438211 ; 2C7: void Feedback_SetOnClose(GUI_FEEDBACK *, void (*OnClose)(BOOK *bk));
0B20: 00000000 B9438211 ; 2C8: void Feedback_SetTimeout(GUI_FEEDBACK *, int time_ms);
0B24: 00000000 51448211 ; 2C9: void Feedback_SetTextExtended(GUI_FEEDBACK *, STRID text, int where);
0B28: 00000000 2D2E8211 ; 2CA: void TabMenuBar_SetOnTabSwitch(GUI_TABMENUBAR *,void (*proc)(BOOK *,int act_tab));
0B2C: 00000000 55A40411 ; 2CB: STRID KeyCode2Name(int key_code);
0B30: 00000000 D9EF8310 ; 2CC: int ImageID_Get(const wchar_t * fpath,const wchar_t * fname,wchar_t * imageID);
0B34: 00000000 F1518410 ; 2CD: void ImageID_Free(wchar_t imageID);
0B38: 00000000 C5368811 ; 2CE: SUB_EXECUTE *DataBrowser_CreateSubExecute(int BookID, FILEITEM *f);
0B3C: 00000000 E5408811 ; 2CF: int DataBrowser_ExecuteSubroutine(SUB_EXECUTE *sub, int action, u16 *unk);
0B40: 00000000 6D3D8A11 ; 2D0: int FILEITEM_SetFname(FILEITEM *f, const wchar_t *fname);
0B44: 00000000 2D408A11 ; 2D1: int FILEITEM_SetPath(FILEITEM *f, const wchar_t *fpath);
0B48: 00000000 25408A11 ; 2D2: wchar_t *FILEITEM_GetFname(FILEITEM *f);
0B4C: 00000000 B9408A11 ; 2D3: wchar_t *FILEITEM_GetPath(FILEITEM *f);
0B50: 00000000 CD3D8A11 ; 2D4: int FILEITEM_SetFnameAndContentType(FILEITEM *f, const wchar_t *fname);
0B54: 00000000 91408A11 ; 2D5: int FILEITEM_SetPathAndContentType(FILEITEM *f, const wchar_t *fpath);
0B58: 00000000 F9ECBA10 ; 2D6: int JavaDialog_Open(int unk1,char * unk2,void ** JavaDesc);
0B5C: 00000000 4D24BB10 ; 2D7: void JavaDialog_Close(int unk1);
0B60: 00000000 1926BB10 ; 2D8: int JavaAppDesc_Get(int unk1,void ** JavaDesc);
0B64: 00000000 8D46BA10 ; 2D9: int JavaAppDesc_GetFirstApp(void * JavaDesc);
0B68: 00000000 9546BA10 ; 2DA: int JavaAppDesc_GetNextApp(void * JavaDesc);
0B6C: 00000000 5941BA10 ; 2DB: int JavaAppDesc_GetJavaAppInfo(void * JavaDesc,int ID,wchar_t ** wstr);
;0B70: xxxxxxxx yyyyyyyy ; 2DC: void OrangeLED_Control(int _free_val, int or_LED_ID, int level, int fade_time);
0B74: 00000000 C137A610 ; 2DD: void DispObject_SetRefreshTimer(DISP_OBJ *,int time);
0B78: 00000000 3D38A610 ; 2DE: void DispObject_KillRefreshTimer(DISP_OBJ *);
0B7C: 00000000 B5728911 ; 2DF: int isDataBrowserBook(BOOK *);
0B80: 00000000 4D298911 ; 2E0: SUB_EXECUTE * BrowserItem_Get_SUB_EXECUTE(BOOK * BrowserItemBook);
0B84: 00000000 DDF6BC10 ; 2E1: int Shortcut_Get_MenuItemName(SHORTCUT *);
0B88: 00000000 397BE710 ; 2E2: int Shortcut_Get_MenuItemIconID(SHORTCUT *);
0B8C: 00000000 819EE810 ; 2E3: BOOK * FindBookEx(int (*cmp_proc)(BOOK* book_from_list ,int * param), int * param);
0B90: 00000000 C13B8A11 ; 2E4: FILEITEM *FILEITEM_CreateCopy (FILEITEM *);
0B94: 00000000 11B6E810 ; 2E5: ACTION *ActionCreate(int (*PROC)(void *msg,BOOK*), int BookID, u16 event, APP_DESC *app_desc, PAGE_DESC *pag_desc);
0B98: 00000000 DDC1E810 ; 2E6: int BOOK_GetSessionID(BOOK *);
0B9C: 00000000 ADA9E810 ; 2E7: void UI_Event_toSID(int event, int sess_id);
;0BA0: xxxxxxxx yyyyyyyy ; 2E8: char *GetIMSI(void);
0BA4: 00000000 99EEAF11 ; 2E9: void UI_CONTROLLED_SHUTDOWN_RESPONSE(int book_id);
;0BA8: xxxxxxxx yyyyyyyy ; 2EA: int MainInput_getCurPos(GUI*);
;0BAC: xxxxxxxx yyyyyyyy ; 2EB: void MainInput_Hide(GUI*);
0BB0: 00000000 F57F8A10 ; 2EC: void DispObject_SoftKey_RestoreDefaultAction(DISP_OBJ*,int action);
0BB4: 00000000 45F2BE10 ; 2ED: STRID PNUM2Name(void *pnum, int isIconNeeded, int only_full_number_flag);
0BB8: 00000000 7567C110 ; 2EE: int SpeedDial_GetPNUM(int _zero,char charter0__9, void * PNUM);
;0BBC: xxxxxxxx yyyyyyyy ; 2EF: void * MetaData_Desc_Create(wchar_t * path,wchar_t * name);
;0BC0: xxxxxxxx yyyyyyyy ; 2F0: void MetaData_Desc_Destroy(void * MetaData_Desc);
;0BC4: xxxxxxxx yyyyyyyy ; 2F1: wchar_t * MetaData_Desc_GetTags(void * MetaData_Desc,int tagID);
;0BC8: xxxxxxxx yyyyyyyy ; 2F2: int MetaData_Desc_GetTrackNum(void * MetaData_Desc,int __NULL);
0BCC: 00000000 4D51A610 ; 2F3: int DISP_OBJ_GetWindowWidth(DISP_OBJ *);
0BD0: 00000000 6D51A610 ; 2F4: int DISP_OBJ_GetWindowHeight(DISP_OBJ *);
0BD4: 00000000 F53BE510 ; 2F5: int get_system_langID(void);
0BD8: 00000000 89DEB211 ; 2F6: char * lang_get_name(int langID);
0BDC: 00000000 AC03B04B ; 2F7: int w_chdir(const wchar_t *path);
0BE0: 00000000 1D493311 ; 2F8: int w_fopen(const wchar_t *name, int attr, int rights, int err);
0BE4: 00000000 D5493311 ; 2F9: int w_fstat(const wchar_t *name, W_FSTAT *);
0BE8: 00000000 65493311 ; 2FA: int w_fwrite(int f, void *buf, int size);
0BEC: 00000000 4D493311 ; 2FB: int w_fread(int f, void *buf, int size);
0BF0: 00000000 BD77AF11 ; 2FC: int w_lseek(int f, int offs, int mode);
0BF4: 00000000 7D493311 ; 2FD: int w_fclose(int f);
0BF8: 00000000 4403B04B ; 2FE: int w_mkdir(const wchar_t *path, int mode);
0BFC: 00000000 51129F10 ; 2FF: int DirHandle_SetFilterStr(DIR_HANDLE *, const wchar_t *filter);
0C00: 00000000 B587A610 ; 300: int Disp_GetStrIdWidth(STRID , int len);
;0C04: xxxxxxxx yyyyyyyy ; 301: int MetaData_Desc_GetCoverInfo(void * MetaData_Desc,char * cover_type,int * size,int * cover_offset);
0C08: 00000000 71F08310 ; 302: int ImageID_GetIndirect(void * buf_image,int size,int __NULL,wchar_t * image_type,wchar_t * imageID);
0C0C: 00000000 8987C610 ; 303: void unixtime2datetime(int, DATETIME * );
0C10: 00000000 6DB3B611 ; 304: void ListElement_Insert(LIST *lst, int i, void *new_item);
0C14: 00000000 593F9F10 ; 305: int FileCopy(wchar_t *src_path, wchar_t *src_name, wchar_t *dest_path, wchar_t *dest_name, int);
0C18: 00000000 A5419F10 ; 306: int FileMove(wchar_t *src_path, wchar_t *src_name, wchar_t *dest_path, wchar_t *dest_name, int);
;0C1C: xxxxxxxx yyyyyyyy ; 307: void RedLED_On(int __NULL);
;0C20: xxxxxxxx yyyyyyyy ; 308: void RedLED_Off(int __NULL);
0C24: 00000000 515FA610 ; 309: void DispObject_SetLayerColor(DISP_OBJ *,int color);
0C28: 00000000 7525BB10 ; 30A: int JavaAppDesc_GetJavaAppID(void * JavaDesc);
0C2C: 00000000 C568CD10 ; 30B: void REQUEST_UI_OAF_START_APPLICATION(const int *ASYNC,int appID,char * flag);
0C30: 00000000 F5B0CC10 ; 30C: int JavaApp_LogoImageID_Get(wchar_t * fullpath,wchar_t * imageID);
0C34: 00000000 41378211 ; 30D: GUI * CreateProgressBar(BOOK*,int);
0C38: 00000000 393A8211 ; 30E: void ProgressBar_SetText(GUI*,STRID text);
0C3C: 00000000 AD3B8211 ; 30F: void ProgressBar_SetIcon(GUI*,u16 icon_id);
0C40: 00000000 F5398211 ; 310: void ProgressBar_SetPercentValue(GUI*,int value);
0C44: 00000000 CD3B8211 ; 311: void ProgressBar_SetBarDisabled(GUI*,int disabled);
0C48: 00000000 3D6C9210 ; 312: void StringInput_DispObject_SetText(DISP_OBJ *,int StrID);
;0C4C: xxxxxxxx yyyyyyyy ; 313: void GuiObject_SetTitleImage(void *gui, wchar_t imageID);
;0C50: xxxxxxxx yyyyyyyy ; 314: void GuiObject_SetTitleIcon(void *gui, wchar_t imageID);
;0C54: xxxxxxxx yyyyyyyy ; 315: void GuiObject_SetHighlightImage(void *gui, wchar_t imageID);
;0C58: xxxxxxxx yyyyyyyy ; 316: void GuiObject_SetBackgroundImage(void *gui, wchar_t imageID);
0C5C: 00000000 C5928A10 ; 317: void *DispObject_Softkeys_GetParams(DISP_OBJ *);
0C60: 00000000 09938A10 ; 318: LIST *DispObject_Softkeys_GetList(DISP_OBJ *, BOOK *bk, char __zero);
0C64: 00000000 F1C3E810 ; 319: int BookObj_GetDisplayOrientation(BOOK *bk);
0C68: 00000000 8DC3E810 ; 31A: void BookObj_SetDisplayOrientation(BOOK *bk, int orientation);
0C6C: 00000000 CDB6E810 ; 31B: BOOK *DISPLAY_GetTopBook(int display);
0C70: 00000000 CDCAE510 ; 31C: void DISPLAY_SetBrightness(int display, int brightness);
0C74: 00000000 05CBE510 ; 31D: int DISPLAY_GetBrightness(int display);
0C78: 00000000 65A98911 ; 31E: void DataBrowserDesc_Menu_AddFSFunctions(void * db , int);
0C7C: 00000000 C1A98911 ; 31F: void DataBrowserDesc_Menu_AddNewFolder(void * db , int);
0C80: 00000000 C9A98911 ; 320: void DataBrowserDesc_Menu_AddMarkFiles(void * db , int);
0C84: 00000000 0187EA10 ; 321: void SetTheme(wchar_t*path, wchar_t*name, int bookid, int unk_1);
0C88: 00000000 01B88A10 ; 322: void Softkeys_GetLabel(DISP_OBJ *softkeys, SKLABEL *lbl, int id);
0C8C: 00000000 B9B38A10 ; 323: void Softkeys_Update(DISP_OBJ *softkeys);
;0C90: xxxxxxxx yyyyyyyy ;8324: void * get_CellData(void);
0C94: 00000000 AD5BEA10 ; 325: void * IncommingCall_Reject(BOOK* book);
0C98: 00000000 ED6EEA10 ; 326: void * IncommingCall_Mute(BOOK* book);
;0C9C: xxxxxxxx yyyyyyyy ; 327: int GetRadioState(char* level, char* flag);
0CA0: 00000000 05F8AF10 ; 328: int Bluetooth_GetState(void);
0CA4: 00000000 C9F7AF10 ; 329: int Bluetooth_GetPhoneVisibility(void);
0CA8: 00000000 95F8AF10 ; 32A: int Bluetooth_isBusy(void);
0CAC: 00000000 2575A510 ; 32B: int USB_isConnected(void);
0CB0: 00000000 5403B04B ; 32C: void *w_diropen(const wchar_t *dir);
0CB4: 00000000 4D7EAF11 ; 32D: wchar_t *w_dirread(void *);
0CB8: 00000000 8C03B04B ; 32E: int w_dirclose(void *);
0CBC: 00000000 E97EAF11 ; 32F: int w_rename(const wchar_t *dst, const wchar_t *src);
0CC0: 00000000 9D7EAF11 ; 330: int w_remove(const wchar_t *dir);
0CC4: 00000000 95FCCB10 ; 331: int ConnectionManager_Connection_GetState(void);
;0CC8: xxxxxxxx yyyyyyyy ; 332: int GetSignalQuality(char *rssi,char *ber);
0CCC: 00000000 AD4F9610 ;8333: IS_NEEDED_BOOK isCameraBook(void);
0CD0: 00000000 416FEE10 ;8334: IS_NEEDED_BOOK isSoundRecorderBook(void);
0CD4: 00000000 D9249310 ; 335: void StringInput_MenuItem_SetPriority(GUI * strinp, int prio, int actionID);
;0CD8: xxxxxxxx yyyyyyyy ; 336: void VideoPlayerControl(BOOK *VideoPlayerBook, int);
;0CDC: xxxxxxxx yyyyyyyy ; 337: void Video_ActionBack(BOOK *VideoPlayerBook, void*);
;0CE0: xxxxxxxx yyyyyyyy ; 338: void Video_ExtractFrame(BOOK *VideoPlayerBook, void*);
;0CE4: xxxxxxxx yyyyyyyy ; 339: void Video_ZoomOn(BOOK *VideoPlayerBook, void*);
;0CE8: xxxxxxxx yyyyyyyy ; 33A: void RightNow_SetActive(int flag);
;0CEC: xxxxxxxx yyyyyyyy ; 33B: void VideoResize_AutomateMode(BOOK *VideoPlayerBook, u16 VideoWidth, u16 VideoHeight, u16* NewWidth, u16* NewHeight);
;0CF0: xxxxxxxx yyyyyyyy ; 33C: void VideoResize_AllScreenMode(BOOK *VideoPlayerBook, u16 VideoWidth, u16 VideoHeight, u16* NewWidth, u16* NewHeight);
;0CF4: xxxxxxxx yyyyyyyy ; 33D: int Video_GetCurrentSkinID(BOOK *VideoPlayerBook);
;0CF8: xxxxxxxx yyyyyyyy ; 33E: void Video_SetSkin(GUI* VideoPlayerGUI, int skinID);
;0CFC: xxxxxxxx yyyyyyyy ; 33F: int Video_SetPermit(BOOK *VideoPlayerBook, u16 NewWidth, u16 NewHeight);
;0D00: xxxxxxxx yyyyyyyy ; 340: int Video_Refresh(BOOK *VideoPlayerBook, GUI* VideoPlayerGUI);
;0D04: xxxxxxxx yyyyyyyy ; 341: void Video_Play(BOOK *VideoPlayerBook, void*);
;0D08: xxxxxxxx yyyyyyyy ; 342: void Video_Pause(BOOK *VideoPlayerBook, void*);
;0D0C: xxxxxxxx yyyyyyyy ; 343: void Video_Stop(BOOK *VideoPlayerBook, void*);
;0D10: xxxxxxxx yyyyyyyy ; 344: void Audio_Pause(BOOK *);
;0D14: xxxxxxxx yyyyyyyy ; 345: void Audio_Play(BOOK *);
0D18: 00000000 AD338211 ; 346: GUI * CreatePercentInputVA(int zero, ...);
0D1C: 00000000 39358211 ; 347: int PercentInput_GetPercent(GUI * PercentInput);
0D20: 00000000 E159B211 ; 348: void GUIonMessage_SetLineSeparator(GUI_MESSAGE *,int _unk1);
0D24: 00000000 8D40AB10 ; 349: int PHF_GetState(void);
0D28: 00000000 9540AB10 ; 34A: int CHF_GetState(void);
0D2C: 00000000 65C28A10 ; 34B: void GUIObject_Softkeys_RemoveBackground(void *gui);
0D30: 00000000 71C28A10 ; 34C: void GUIObject_Softkeys_RestoreBackground(void *gui);
0D34: 00000000 C1788211 ; 34D: void SetTrayIcon(wchar_t iconID, char mode);
0D38: 00000000 E517B411 ; 34E: int REQUEST_SETTING_RINGVOLUME_SET(const int *sync, int unk, int null, int vol);
0D3C: 00000000 D919B411 ; 34F: int REQUEST_SETTING_VIBRATOR_SET(const int *sync, int unk, int mode);
0D40: 00000000 5519B411 ; 350: int REQUEST_SETTING_RINGTYPESOUNDFILE_SET(const int *sync, int null, wchar_t *path, wchar_t *name);
0D44: 00000000 BD1DB411 ; 351: int REQUEST_SETTING_ANSWERINGMODE_SET(const int *sync, int unk, int mode);
0D48: 00000000 ED18B411 ; 352: int REQUEST_SETTING_INCREASINGRING_SET(const int *sync, int unk, int unk2, int mode);
0D4C: 00000000 E51BB411 ; 353: int REQUEST_SETTING_ALLOWEDCALLERS_SET(const int *sync, int unk, int mode);
0D50: 00000000 3937BA10 ; 354: int JavaAppDesc_GetJavaAppFullpath(void * JavaDesc,JavaAppFullpath *);
0D54: 00000000 ED63EE10 ; 355: void *SoundRecorderDesc_Create(void);
0D58: 00000000 4964EE10 ; 356: void SoundRecorderDesc_Destroy(void * desc);
0D5C: 00000000 6564EE10 ; 357: int SoundRecorderDesc_SetBookID(void * desc,int BookID);
0D60: 00000000 9164EE10 ; 358: int SoundRecorderDesc_SetType(void * desc,const int type);
0D64: 00000000 A564EE10 ; 359: int SoundRecorderDesc_SetFolder(void * desc,const wchar_t * fpath);
0D68: 00000000 C164EE10 ; 35A: int SoundRecorderDesc_SetFname(void * desc,const wchar_t * fname);
0D6C: 00000000 DD64EE10 ; 35B: int SoundRecorderDesc_SetRecordSize(void * desc,const int size);
0D70: 00000000 5565EE10 ; 35C: int SoundRecorder_Create(void * desc);
0D74: 00000000 C18EE910 ; 35D: int SoundRecorder_RecordCall(BOOK * OngoingCallBook);
0D78: 00000000 8DA68110 ; 35E: int Browser_OpenURI(BOOK *, char * URI, int mode);
0D7C: 00000000 C1C2EA10 ; 35F: char * GetURIScheme (int schemeID);
0D80: 00000000 5DC7EA10 ; 360: char * CreateURI (wchar_t * fpath, wchar_t * fname, char * URIScheme);
0D84: 00000000 E5A98911 ; 361: void DataBrowserDesc_SetViewModeAndSortOrder(void * db,int view_sort_ID);
0D88: 00000000 A17A8410 ; 362: int Alarm_GetCurrentTypeAndAlarmID(char *type, wchar_t *AlarmID);
0D8C: 00000000 D1628410 ; 363: int Alarm_GetState(char *state, int AlarmID);
0D90: 00000000 AD728410 ; 364: int Alarm_GetTIME(TIME *AlarmTime, int AlarmID);
0D94: 00000000 E5818410 ; 365: int Alarm_GetWeekSettings(void* week,int AlarmID);
;0D98: xxxxxxxx yyyyyyyy ; 366: int IrDa_GetState(char *state);
0D9C: 00000000 891BB411 ; 367: void REQUEST_SETTING_ALLOWEDCALLERS_GET(const int *sync, int ProfileNum, char *state);
0DA0: 00000000 715AEA10 ; 368: void * IncommingCall_Accept(BOOK* book);
;0DA4: xxxxxxxx yyyyyyyy ; 369: void MediaPlayer_SoftKey_SetText(void *player_gui,int actionID , int StrID);
;0DA8: xxxxxxxx yyyyyyyy ; 36A: void MediaPlayer_SoftKey_SetAction(void *player_gui,int actionID ,void (*proc)(BOOK *,void*));
;0DAC: xxxxxxxx yyyyyyyy ; 36B: void MediaPlayer_SoftKey_SetItemAsSubItem(void *player_gui,int item,int subitem);
;0DB0: xxxxxxxx yyyyyyyy ; 36C: void MediaPlayer_SoftKey_AddHelpStr(void *player_gui,int item,int StrID);
;0DB4: xxxxxxxx yyyyyyyy ; 36D: void MediaPlayer_ShowNowPlaying(DISP_OBJ*disp_obj, int);
0DB8: 00000000 793AA610 ; 36E: void DispObject_Show(DISP_OBJ *disp_obj, int mode);
0DBC: 00000000 256A7112 ; 36F: int Request_EventChannel_Subscribe(const int *SYNC, int mode, int event);
0DC0: 00000000 2DC28A10 ; 370: void GUIObject_Softkey_ExecuteAction(void *gui, u16 actionID);
0DC4: 00000000 89AD5311 ; 371: int Request_ICA_ShutdownAllConnections(const int *sync);
0DC8: 00000000 5122B411 ; 372: int REQUEST_PROFILE_GETPROFILENAME(const int *SYNC,int unk,STRID_DATA *,char *error);
0DCC: 00000000 9DAA8911 ; 373: int DataBrowserDesc_SetFocusToFILEITEM(void *DataBrowserDesc, FILEITEM *fi);
0DD0: 00000000 F158B211 ; 374: int GUIonMessage_GetMsg ( void *msg);
0DD4: 00000000 F958B211 ; 375: BOOK *GUIonMessage_GetBook ( void *msg);
0DD8: 00000000 F558B211 ; 376: GUI *GUIonMessage_GetGui ( void *msg);
0DDC: 00000000 FD58B211 ; 377: int GUIonMessage_GetSelectedItem ( void *msg);
0DE0: 00000000 0959B211 ; 378: int GUIonMessage_GetPrevSelectedItem ( void *msg);
0DE4: 00000000 F9E09310 ; 379: void ObexSendFile (SEND_OBEX_STRUCT *);
0DE8: 00000000 79ED8111 ; 37A: void Feedback_SetManualScrollingText(DISP_OBJ* feedback_disp_obj,int);
0DEC: 00000000 3541A811 ; 37B: int EqualizerGain_Set (int AudioSessionID,int Band,int Level);
0DF0: 00000000 95544711 ; 37C: int CANVAS_Get_GviGC(PCANVAS pcanvas, GVI_GC* dest);
0DF4: 00000000 A5C21D11 ; 37D: void GVI_BitBlt(GVI_GC destgc, int destx, int desty, int destxsize, int destysize, GVI_GC srcgc, int srcx, int srcy, int _204, int _0, int _0_2, int _0_3);
0DF8: 00000000 19C41D11 ; 37E: void GVI_StretchBlt(GVI_GC destgc, int destx, int desty, int destxsize, int destysize, GVI_GC srcgc, int srcx, int srcy, int srcxsize, int srcysize, int _204, int _0, int _0_2, int _0_3);
0DFC: 00000000 D5C41D11 ; 37F: void GVI_TransformBlt(GVI_GC destgc, int destx, int desty, GVI_GC srcgc, int srcx, int srcy, int srcxsize, int srcysize, int orientation, int _0);
0E00: 00000000 4DB51D11 ; 380: GVI_PEN GVI_CreatePen(char thikness, int color);
0E04: 00000000 91B51D11 ; 381: GVI_PEN GVI_CreateDashedPen(char thikness, int color, int bitmask, int step, int offset);
0E08: 00000000 5DB41D11 ; 382: GVI_BRUSH GVI_CreateSolidBrush(int color);
0E0C: 00000000 2DAE1D11 ; 383: BOOL GVI_Delete_GVI_Object(GVI_OBJ*);
0E10: 00000000 DDBB1D11 ; 384: void GVI_DrawEllipse(GVI_GC destgc, int x1, int y1, int x2, int y2, GVI_PEN pen);
0E14: 00000000 C9CA1D11 ; 385: void GVI_DrawLine(GVI_GC, int x1, int y1, int x2, int y2, GVI_PEN pen);
0E18: 00000000 59D11D11 ; 386: void GVI_DrawLines(GVI_GC gc, POINT* points, int count, GVI_PEN pen);
0E1C: 00000000 DDD11D11 ; 387: void GVI_DrawPolyLine(GVI_GC gc, POINT* points, int count, GVI_PEN pen, int is_closed);
0E20: 00000000 59D41D11 ; 388: void GVI_DrawRectangle(GVI_GC gc, int x, int y, int w, int h, GVI_PEN pen);
0E24: 00000000 F9C01D11 ; 389: void GVI_DrawRoundRect(GVI_GC destgc, int x, int y, int w, int h, int arcw, int arch, GVI_PEN pen);
0E28: 00000000 1DCD1D11 ; 38A: void GVI_DrawSolidLines(GVI_GC gc, POINT* points, int count, int color, int width);
0E2C: 00000000 25CF1D11 ; 38B: void GVI_DrawSolidPolyLine(GVI_GC gc, POINT* points, int count, int is_closed, int color, int width);
0E30: 00000000 C9CF1D11 ; 38C: void GVI_DrawSolidRectangle(GVI_GC gc, int x, int y, int w, int h, int color, int width);
0E34: 00000000 C5BF1D11 ; 38D: void GVI_FillEllipse(GVI_GC destgc, int x, int y, int w, int h, GVI_BRUSH brush);
0E38: 00000000 81C91D11 ; 38E: void GVI_FillPolygon(GVI_GC destgc, POINT *pp, int count, GVI_BRUSH brush);
0E3C: 00000000 D9D21D11 ; 38F: void GVI_FillRectangle(GVI_GC , int x, int y, int w, int h, GVI_BRUSH brush);
0E40: 00000000 65D31D11 ; 390: void GVI_FillRectangles(GVI_GC , GVI_XYWH *rcs, int count, GVI_BRUSH brush);
0E44: 00000000 71C01D11 ; 391: void GVI_FillSolidEllipse(GVI_GC destgc, int x1, int y1, int x2, int y2, int color);
0E48: 00000000 59CB1D11 ; 392: void GVI_FillSolidRectangle(GVI_GC , int x, int y, int w, int h, int color);
0E4C: 00000000 49C21D11 ; 393: int GVI_FillSolidRoundRect(GVI_GC destgc, int x, int y, int w, int h, int arcx, int arcy, int color);
0E50: 00000000 0DC91D11 ; 394: void GVI_FillSolidTriangle(GVI_GC destgc, int x1, int y1, int x2, int y2, int x3, int y3, int color);
0E54: 00000000 E1B3A610 ; 395: GC* GC_CreateMemoryGC(int xsize, int ysize, int bpp, int unk, void* somefn , int unk2);
0E58: 00000000 A9B4A610 ; 396: void GC_FreeGC(GC* gc);
;0E5C: xxxxxxxx yyyyyyyy ; 397: void REQUEST_ALARMCLOCKSTATUS_GET(const int *SYNC, char * alarm_status);
;0E60: xxxxxxxx yyyyyyyy ; 398: void REQUEST_ALARMCLOCKTIME_GET(const int *SYNC, TIME *t);
;0E64: xxxxxxxx yyyyyyyy ; 399: void REQUEST_ALARMDATEANDTIMESTATUS_GET(const int *SYNC, DATETIME *);
0E68: 00000000 250E0611 ; 39A: int Settings_ShowNumber_Get(char *state);
;0E6C: xxxxxxxx yyyyyyyy ; 39B: GVI_BMP GVI_CreateBitmap(int xsize, int ysize, int bpp);
;0E70: xxxxxxxx yyyyyyyy ; 39C: GVI_GC GVI_CreateMemoryGC(GVI_BMP bitmap);
;0E74: xxxxxxxx yyyyyyyy ; 39D: void GVI_DeleteMemoryGC(GVI_GC srcgc);
;0E78: xxxxxxxx yyyyyyyy ; 39E: int StringInput_DispObject_SetLanguage(DISP_OBJ_STRING_INPUT *,int langID,int flag);
0E7C: 00000000 B5B4B611 ; 39F: int ListElement_InsertSorted(LIST * list, void * pelem, int (*compare)(void *, void *));
0E80: 00000000 5150B211 ; 3A0: int ListMenu_SetItemIcon(GUI_LIST *,int Item,wchar_t unk_FFFF,int mode,wchar_t ImageID);
0E84: 00000000 9511E010 ; 3A1: void wstrnupr(wchar_t * wstr, int maxlen);
0E88: 00000000 B1CCB610 ; 3A2: void wstrnlwr(wchar_t * wstr, int maxlen);
0E8C: 00000000 4954B211 ; 3A3: int ListMenu_SetItemTextScroll(GUI_LIST *, int scroll);
;0E90: xxxxxxxx yyyyyyyy ; 3A4: void GuiObject_SetTitleTextColor(void *gui, int color);
;0E94: xxxxxxxx yyyyyyyy ; 3A5: void GuiObject_SetListTextColor(void *gui, int unk1, int list_color, int unk2,int unk3,int list_select_color,int unk4,int _zerro);
;0E98: xxxxxxxx yyyyyyyy ; 3A6: void DISP_OBJ_SetTitleTextColor(void *disp_obj, int color);
;0E9C: xxxxxxxx yyyyyyyy ; 3A7: void DISP_OBJ_SetListTextColor(void *disp_obj, int unk1, int list_color, int unk2,int unk3,int list_select_color,int unk4,int _zerro);
;0EA0: xxxxxxxx yyyyyyyy ; 3A8: void DISP_OBJ_SetHighlightImage(void *disp_obj, wchar_t imageID);
;0EA4: xxxxxxxx yyyyyyyy ; 3A9: void DISP_OBJ_SetBackgroundImage(void *disp_obj, wchar_t imageID);
;0EA8: xxxxxxxx yyyyyyyy ; 3AA: void DISP_OBJ_SetTitleImage(void *disp_obj, wchar_t imageID);
0EAC: 00000000 192E8211 ; 3AB: void TabMenuBar_SetTabTitle(GUI_TABMENUBAR*,int tab_num,int strID);





;locale=Russian_Russia.1251
