;W200 SW-R4HA014
;Библиотека функций
;v
;(c) Hussein , IronMaster
;(p) ZEN

+456BFC00
0448: FFFFFFFF B943CA44 ; 112: void memset(void *mem,char chr,int size);
044C: FFFFFFFF 5C511844 ; 113: int memcpy(void *dest,const void *source,int cnt);
0450: FFFFFFFF BD4ECA44 ; 114: int sprintf(char *buf, const char *fmt, ...);
0454: FFFFFFFF 9555CA44 ; 115: int snwprintf(wchar_t* buffer, int size, const wchar_t* fmt, ...);
0458: FFFFFFFF 25684245 ; 116: int _fopen(const wchar_t *filpath, const wchar_t *filname,unsigned int mode , unsigned int rights, unsigned int __0);
045C: FFFFFFFF 5D7A4245 ; 117: int fclose(int file);
0460: FFFFFFFF BD7C4245 ; 118: int fread(int file , void *ptr, int size);
0464: FFFFFFFF A17E4245 ; 119: int fwrite(int file , const void *ptr, int size);
0468: FFFFFFFF F5239744 ; 11A: int _wstat(short *path, void *statbuf)
046C: FFFFFFFF 915AF844 ; 11B: int fputs(const char *s, int file)
0470: FFFFFFFF 99704245 ; 11C: int isFileExist(const wchar_t * path, const wchar_t *fname , FSTAT * fstat_stuct);
0474: FFFFFFFF 754B4245 ; 11D: void * AllocDirHandle(const wchar_t * path);
0478: FFFFFFFF F94C4245 ; 11E: void *GetFname(void *, void*);
047C: FFFFFFFF 8DEF0B45 ; 11F: void * DataBrowserDesc_Create(void);
0480: FFFFFFFF E5EE0B45 ; 120: void DataBrowserDesc_SetStyle(void * db , int style);
0484: FFFFFFFF 05EF0B45 ; 121: void DataBrowserDesc_SetHeaderText(void * db , int StrID);
0488: FFFFFFFF F5EE0B45 ; 122: void DataBrowserDesc_SetFolders(void * db , wchar_t const ** FolderList);
048C: FFFFFFFF 0DEF0B45 ; 123: void DataBrowserDesc_SetOKSoftKeyText(void * db , int StrID);
0490: FFFFFFFF E1E40B45 ; 124: void DataBrowser_Create(void * db);
0494: FFFFFFFF 15F00B45 ; 125: void DataBrowserDesc_Destroy(void * db);
0498: FFFFFFFF 7D934245 ; 126: wchar_t * getFileExtention(wchar_t * fnane);
049C: FFFFFFFF 2D4F4245 ; 127: int DataBrowser_isFileInListExt(const wchar_t * ext_table,const wchar_t * path ,const wchar_t *fname );
04A0: FFFFFFFF CD2B1145 ; 128: void Timer_ReSet(u16 *timerID ,int time, void (*onTimer)(u16 *timerID, void *), void *);
04A4: FFFFFFFF A92B1145 ; 129: u16 Timer_Set(int time, void (*onTimer)(u16 *timerID, void *), void *);
04A8: FFFFFFFF F92B1145 ; 12A: void Timer_Kill(u16 *timerID);
04AC: FFFFFFFF 15381145 ; 12B: int CreateBook(void * mem, void (* onClose)(BOOK*), const PAGE_DESC * bp, const char * name, int __0xFFFFFFFF,int __0);
04B0: FFFFFFFF 0D391145 ; 12C: void BookObj_KillBook(void *Book);
04B4: FFFFFFFF 91351145 ; 12D: void BookObj_GotoPage(BOOK * book, const PAGE_DESC * page);
04B8: FFFFFFFF 0D371145 ; 12E: void BookObj_ReturnPage(BOOK * ,int);
04BC: FFFFFFFF 3D3D1145 ; 12F: void FreeBook ( void *book);
04C0: FFFFFFFF D1DC3945 ; 130: BOOK * FindBook(IS_NEEDED_BOOK);
04C4: FFFFFFFF 65081245 ; 131: BOOK * Find_StandbyBook(void);
04C8: FFFFFFFF 593A1145 ; 132: void BookObj_SetFocus(void *,int focus);
04CC: FFFFFFFF A9350045 ; 133: void GuiObject_SetTitleText (void * gui , int StrID);
04D0: FFFFFFFF 91340045 ; 134: void ShowWindow (void * gui);
04D4: FFFFFFFF 89FCFD44 ; 135: void SetCursorToItem ( void *obj , int item);
04D8: FFFFFFFF F1340045 ; 136: void GUI_SetStyle(GUI *,int style);
04DC: FFFFFFFF BD07FE44 ; 137: int GUIonMessage_GetCreatedItemIndex ( void *msg);
04E0: FFFFFFFF CD07FE44 ; 138: char SetMenuItemText0 ( GUI_MESSAGE *, int StrID);
04E4: FFFFFFFF FD07FE44 ; 139: char SetMenuItemText1 ( GUI_MESSAGE *, int StrID);
04E8: FFFFFFFF DD07FE44 ; 13A: char SetMenuItemText2 ( GUI_MESSAGE *, int StrID);
04EC: FFFFFFFF ED07FE44 ; 13B: char SetMenuItemText3 ( GUI_MESSAGE *, int StrID);
04F0: FFFFFFFF 0D08FE44 ; 13C: void SetListObjectItemIcon ( void *msg , int align , int iconID);
04F4: FFFFFFFF A5871745 ; 13D: void SetHeaderText( void *obj , int StrID);
04F8: FFFFFFFF 9DFCFD44 ; 13E: int GetFocusetListObjectItem( void *obj);
04FC: FFFFFFFF 01FDFD44 ; 13F: void SetMenuItemStyle( void *obj , int style);
0500: FFFFFFFF 151C0045 ; 140: void putchar( void *xx , int x, int y, int _zero, int zero1 , short wchar);
0504: FFFFFFFF 2D15FD44 ;8141: IS_NEEDED_BOOK isScreenSaverBook(void);
0508: FFFFFFFF 0DB6FC44 ; 142: void StatusIndication_SetItemText(void *gui,int item,int StrID);
050C: FFFFFFFF 65251245 ; 143: void StatusIndication_ShowNotes(int StrID);
0510: FFFFFFFF 51CFFD44 ; 144: GUI * CreateStringInput(int,...);
0514: FFFFFFFF 851BFE44 ; 145: GUI_ONEOFMANY * CreateOneOfMany(BOOK *);
0518: FFFFFFFF 191DFE44 ; 146: void OneOfMany_SetItemCount(GUI_ONEOFMANY * , int count);
051C: FFFFFFFF 3D1DFE44 ; 147: void OneOfMany_SetChecked(GUI_ONEOFMANY * , int checked);
0520: FFFFFFFF 711DFE44 ; 148: void OneOfMany_SetTexts(GUI_ONEOFMANY * , int * StrID , int Count);
0524: FFFFFFFF 4D1DFE44 ; 149: int OneOfMany_GetSelected(GUI_ONEOFMANY * rb);
0528: FFFFFFFF 81241245 ; 14A: void StatusIndication_Item8_SetText(int StrID);
052C: FFFFFFFF 35AF0045 ; 14B: void AddMSGHook(void * menu,short msg,void (*proc)(BOOK *,void*));
0530: FFFFFFFF 1DB00045 ; 14C: void AddCommand(void * menu,int cmd , int StrID);
0534: FFFFFFFF 89B10045 ; 14D: void SoftKey_SetEnable(void *gui,int msg,int ena);
0538: FFFFFFFF F9B00045 ; 14E: void SoftKey_AddErrorStr(void *gui,int msg,int StrID);
053C: FFFFFFFF C5AE0045 ; 14F: void SoftKey_RemoveItem(void *gui,u16 action);
0540: FFFFFFFF B5B00045 ; 150: void SoftKey_SetVisible(void *gui,int action,int visible);
0544: FFFFFFFF 31B50045 ; 151: void SoftKey_SuppressDefaultAction(void *gui,int action);
0548: FFFFFFFF 615CCA44 ; 152: wchar_t* wstrcpy(wchar_t * dest, const wchar_t * source);
054C: FFFFFFFF 155DCA44 ; 153: wchar_t* wstrncpy(wchar_t * dest, const wchar_t * source, int maxlen);
0550: FFFFFFFF 015CCA44 ; 154: wchar_t* wstrcat(wchar_t * wstr, const wchar_t * subwstr);
0554: FFFFFFFF B15CCA44 ; 155: wchar_t *wstrncat(wchar_t *wstr, const wchar_t *subwstr , int maxlen);
0558: FFFFFFFF 315CCA44 ; 156: int wstrcmp(const wchar_t *wstr1, const wchar_t *wstr2);
055C: FFFFFFFF 9D5CCA44 ; 157: int wstrlen(const wchar_t * wstr);
0560: FFFFFFFF E9A2E644 ; 158: wchar_t * str2wstr(wchar_t * wstr, const char * str);
0564: FFFFFFFF 2153CA44 ; 159: int strcmp(const char * str1, const char * str2);
0568: FFFFFFFF 8953CA44 ; 15A: int strlen(const char *str);
056C: FFFFFFFF E190E644 ; 15B: char * wstr2strn (char * str , const wchar_t * wstr, int maxlen);
0570: FFFFFFFF 59201745 ; 15C: int int2strID (int num);
0574: FFFFFFFF F5231745 ; 15D: int Str2ID(const void * wstr , int flag , int len);
0578: FFFFFFFF A12F1745 ; 15E: void StrID2Str(int StrID,char * str,int maxlen);
057C: FFFFFFFF 75271745 ; 15F: void TextID2wstr(int StrID,wchar_t * str,int maxlen);
0580: FFFFFFFF 55261745 ; 160: int TextGetLength(int StrID);
0584: FFFFFFFF C5251745 ; 161: void TextFree(int StrID);
0588: FFFFFFFF 018B0845 ; 162: int AB_DEFAULTNBR_GET(int rec_num, void * mem_0x30, int * unk);
058C: FFFFFFFF 95DE0845 ; 163: int AB_READSTRING(void * mem_0x30,int rec_num, int rec_item_num);
0590: FFFFFFFF 3DDF0845 ; 164: int AB_READPHONENBR(void * mem_0x30,int rec_num, int rec_item_num);
0594: FFFFFFFF DDDF0845 ; 165: int AB_GETNBROFITEMS(int get_from,int unk_0);
0598: FFFFFFFF D91C1745 ; 166: int PNUM_len(void *pnum);
059C: FFFFFFFF 89672745 ; 167: void PNUM2str(char *str,void *pnum,int len, int max_len);
05A0: FFFFFFFF 6D320045 ; 168: DISP_OBJ * GUIObj_GetDISPObj (void * gui);
05A4: FFFFFFFF 59390F45 ; 169: LIST *List_New(void);
05A8: FFFFFFFF 71390F45 ; 16A: void List_Free(LIST *lst);
05AC: FFFFFFFF 6D3A0F45 ; 16B: void ListElement_AddtoTop(LIST *lst,void *newElement);
05B0: FFFFFFFF 1D6B2945 ; 16C: int Gif2ID(u16 IMAGEHANDLE,const wchar_t * path, const wchar_t * fname,u16 * ID);
05B4: FFFFFFFF 8D034245 ; 16D: int REQUEST_IMAGEHANDLER_INTERNAL_GETHANDLE(const int * __zero,u16 * IMAGEHANDLE,char * unk);
05B8: FFFFFFFF 0DEB4045 ; 16E: void REQUEST_DATEANDTIME_GET(const int * __zero , DATETIME *dt);
05BC: FFFFFFFF 15E63A45 ; 16F: void IndicationDevice_Backlight_FadeToLevel(int unk_zero ,int bl_level);
05C0: FFFFFFFF 45432C45 ; 170: int GetFreeBytesOnHeap(void);
05C4: FFFFFFFF 893A1145 ; 171: void Hide(void * udata, int zero);
05C8: FFFFFFFF 9D3A1145 ; 172: void Show(void * udata, int zero);
05CC: FFFFFFFF 290A1245 ; 173: void StartAPP (const wchar_t * appname);
05D0: FFFFFFFF F1FDFD44 ; 174: void ListMenu_SetOnMessages (GUI_LIST * , void * onMessage);
05D4: FFFFFFFF 7D393D45 ; 175: char * manifest_GetParam(const char *buf, const char *param_name,int unk);
05D8: FFFFFFFF 65804245 ; 176: int lseek(int file,int offset,int mode);
05DC: FFFFFFFF B471064C ;8177: int get_VBUFFER(void);
05E0: FFFFFFFF 6B16C444 ; 178: void SetLampLevel (int level); //nullsub(void)
05E4: FFFFFFFF F5390F45 ; 179: void * ListElement_Remove(LIST *lst,int index);
05E8: FFFFFFFF 7DA11444 ; 17A: int GetCurrentPID(void);
05EC: FFFFFFFF 2D3A0F45 ; 17B: int ListElement_Prt2NumElement(LIST *lst,void *ptr);
05F0: FFFFFFFF B4401844 ; 17C: union SIGNAL *alloc(OSBUFSIZE size,SIGSELECT signo);
05F4: FFFFFFFF D0401844 ; 17D: union SIGNAL *receive(const SIGSELECT *sigsel);
05F8: FFFFFFFF C0401844 ; 17E: void send(union SIGNAL **sig,PROCESS to);
05FC: FFFFFFFF 10411844 ; 17F: PROCESS sender(union SIGNAL **sig);
0600: FFFFFFFF E0401844 ; 180: void free_buf(union SIGNAL **sig);
0604: FFFFFFFF AC411844 ; 181: PROCESS create_process(int proc_type,char *name,OSENTRYPOINT *entrypoint,OSADDRESS stack_size,OSPRIORITY priority,OSTIME timeslice,PROCESS pid_block,void *redir_table,OSVECTOR vector,OSUSER user);
0608: FFFFFFFF CC431844 ; 182: void start(PROCESS pid);
060C: FFFFFFFF 7C421844 ; 183: int get_ptype(PROCESS pid);
0610: FFFFFFFF C8411844 ; 184: PROCESS current_process(void);
0614: FFFFFFFF 00411844 ; 185: void delay(OSTIME timeout);
;0618: xxxxxxxx yyyyyyyy ; 186: OSBOOLEAN hunt(const char *name, OSUSER user, PROCESS *name_, union SIGNAL **hunt_sig);
;061C: xxxxxxxx yyyyyyyy ; 187: void kill_proc(PROCESS pid);
0680: FFFFFFFF 5153CA44 ; 1A0: char* strcpy(char * dest, char * source);
0684: FFFFFFFF FD84F144 ; 1A1: void *CreateMessage(int size,int ev,char *name);
0688: FFFFFFFF 5185F144 ; 1A2: void SendMessage(void **signal,int PID);
068C: FFFFFFFF E185F144 ; 1A3: void * WaitMessage(void *SIGSEL);
0690: FFFFFFFF 0186F144 ; 1A4: int FreeMessage(void **Mess);
0694: FFFFFFFF C9AC0D45 ; 1A5: void SendDispatchMessage(int id, int unk_zero, int size,void *mess);
0698: FFFFFFFF 21124A45 ; 1A6: char * UIEventName(int event);
069C: FFFFFFFF 7FE1254C ;81A7: int * MissedEvents(void);
06A0: FFFFFFFF EDDD3945 ; 1A8: void UI_Event(int event);
06A4: FFFFFFFF F9DD3945 ; 1A9: void UI_Event_wData(int event,void *message,void (*mfree)(void*));
06A8: FFFFFFFF 1DDE3945 ; 1AA: void UI_Event_toSID(int event,int SessionID);
06AC: FFFFFFFF 2DDE3945 ; 1AB: void UI_Event_toSIDwData(int event,int SedionID,void *message,void (*mfree)(void*));
06B0: FFFFFFFF 1D3D0F45 ; 1AC: int ListElement_Find(LIST *lst,void *element, int (*cmp_proc)(void *,void *));
06B4: FFFFFFFF FD3B0F45 ; 1AD: void * ListElement_GetByIndex(LIST * , int index);
06B8: FFFFFFFF 655DCA44 ; 1AE: wchar_t* wstrrchr(const wchar_t* wstr, wchar_t wchar);
06BC: FFFFFFFF 0D361145 ; 1AF: void BookObj_CallSubroutine(BOOK * , void * SubProcDesc);
06C0: FFFFFFFF 7D3A0F45 ; 1B0: void ListElement_Add(LIST *lst,void *newElement);
06C4: FFFFFFFF F193C544 ; 1B1: void debug_printf(const char * fmt,...);
06C8: FFFFFFFF 39B3FC44 ; 1B2: int PlayFile(const wchar_t * path, const wchar_t * fname);
06D0: FFFFFFFF C9154B45 ; 1B4: int REQUEST_PROFILE_GETACTIVEPROFILE(const int *__zero , int *level);
06D4: FFFFFFFF 25164B45 ; 1B5: void REQUEST_PROFILE_SETACTIVEPROFILE(const int *__zero , int NUMprof);
06DC: FFFFFFFF 0DF7FC44 ; 1B7: int isKeylocked(void);
06E0: FFFFFFFF 313F2B45 ;81B8: IS_NEEDED_BOOK isMediaPlayerVideoBook(void);
06E4: FFFFFFFF 75B3DE44 ; 1B9: void VideoOnWholeScreen(BOOK * MediaPlayer_Video_Book); //nullsub(void)
06EC: FFFFFFFF 39BC2C45 ; 1BB: void Vibra(int t1, int t2, int t3);
;06F0: xxxxxxxx yyyyyyyy ; 1BC: int REQUEST_DATEFORMAT_GET(const int *SYNC, char *DateFormat);
;06F4: xxxxxxxx yyyyyyyy ; 1BD: int REQUEST_TIMEFORMAT_GET(const int *SYNC, char *TimeFormat);
;06F8: xxxxxxxx yyyyyyyy ; 1BE: int Date2ID(DATE *, int TimeFormat,int);
06FC: FFFFFFFF 557FFC44 ; 1BF: int Time2ID(TIME *, char TimeFormat,int);
0700: FFFFFFFF 8DFAFD44 ; 1C0: GUI_LIST * CreateListObject(BOOK * , void * unk);
0704: FFFFFFFF B5FCFD44 ; 1C1: void SetNumOfMenuItem(void * , int item_count);
0708: FFFFFFFF 9849254C ;81C2: LIST ** ROOT_APP(void);
070C: FFFFFFFF E1AF0045 ; 1C3: void SoftKey_AddHelpStr(void *gui,int msg,int StrID);
0710: FFFFFFFF D1B10045 ; 1C4: void SoftKey_SetItemAsSubItem(void *gui,int item,int subitem);
0714: FFFFFFFF AD7F4A45 ; 1C5: int REQUEST_SYSTEM_SHUTDOWN(void);
0718: FFFFFFFF BD7F4A45 ; 1C6: int REQUEST_SYSTEM_RESTART(void);
071C: FFFFFFFF 1DB00045 ; 1C7: void SoftKeys_SetText(void *gui,int msg,int StrID,int StrID1);
0720: FFFFFFFF 19274A45 ; 1C8: int isRightNowBook(BOOK *);
0724: FFFFFFFF BD7C4A45 ; 1C9: int isVolumeControllerBook(BOOK *);
0728: FFFFFFFF A1ABFC44 ; 1CA: GUI_TABMENUBAR * CreateTabMenuBar(BOOK *);
072C: FFFFFFFF B1ACFC44 ; 1CB: void TabMenuBar_SetTabCount(GUI_TABMENUBAR * , int count);
0730: FFFFFFFF 95ADFC44 ; 1CC: void TabMenuBar_AssignGuiObj(GUI_TABMENUBAR * , int tab , GUI_NOFMANY *);
0734: FFFFFFFF 71AEFC44 ; 1CD: void TabMenuBar_SetTabIcon(GUI_TABMENUBAR *,int tab, u16 icon , int for_state);
0738: FFFFFFFF 11320045 ; 1CE: GUI *GUI_Free(GUI*);
073C: FFFFFFFF 79360045 ; 1CF: void InputFeedback_SetIcon(GUI *gui, int icon);
0740: FFFFFFFF F9D7FD44 ; 1D0: int StringInput_GetStringAndLen (GUI*,wchar_t**,u16*);
074C: FFFFFFFF 6D914245 ; 1D3: int GetVolumeSize(char * volume, VOLUMESIZE *);
0750: FFFFFFFF C915FE44 ; 1D4: GUI_NOFMANY * CreateNOfMany(BOOK *);
0754: FFFFFFFF 0918FE44 ; 1D5: void NOfMany_SetTexts(GUI_NOFMANY * , int * StrIDtable, int items_count);
0758: FFFFFFFF 7517FE44 ; 1D6: void NOfMany_SetChecked(GUI_NOFMANY * , u16 * checked_table, int items_count);
075C: FFFFFFFF 3517FE44 ; 1D7: void NOfMany_SetCursor(GUI_NOFMANY * , int item);
0760: FFFFFFFF 9D17FE44 ; 1D8: int NOfMany_GetCheckedCount(GUI_NOFMANY *);
0764: FFFFFFFF 8917FE44 ; 1D9: int NOfMany_GetChecked(GUI_NOFMANY * , u16 * buffer );
0768: FFFFFFFF 0118FE44 ; 1DA: void NOfMany_SetonMessage(GUI_NOFMANY * , void * proc );
0780: FFFFFFFF FD1CFE44 ; 1E0: void OneOfMany_SetFocused(GUI_ONEOFMANY * , int item);
0784: FFFFFFFF 691DFE44 ; 1E1: void OneOfMany_SetonMessage(GUI_ONEOFMANY * , int (*proc)(GUI_MESSAGE *));
0788: FFFFFFFF D9FEFC44 ; 1E2: GUI_FEEDBACK * CreateFeedBack (int,...);
078C: FFFFFFFF 75FFFC44 ; 1E3: void FeedBack_SetText(GUI_FEEDBACK*,int);
0790: FFFFFFFF C1B0C144 ; 1E4: int GetBattaryState(const int * , BATT *);
0794: FFFFFFFF F1100045 ; 1E5: void * get_DisplayGC (void);
0798: FFFFFFFF 71691745 ; 1E6: void GetGuiRect(void*,RECT*);
079C: FFFFFFFF 05170045 ; 1E7: void get_GC_RECT(void*,RECT*);
07A0: FFFFFFFF 191A0045 ; 1E8: int get_GC_xx(void * GC);
07A4: FFFFFFFF 0D1A0045 ; 1E9: void *set_GC_xx(void * GC, int);
07A8: FFFFFFFF B1160045 ; 1EA: void GC_validate_RECT(void * GC , RECT*);
07AC: FFFFFFFF 213B1145 ; 1EB: void addGui2book(BOOK*,GUI*);
07B0: FFFFFFFF B1A61745 ; 1EC: void DrawRect(int x1, int y1,int x2 ,int y2,int pen_color,int brush_color);
07B4: FFFFFFFF B9AA1745 ; 1ED: void DrawString(int StrID,int align,int x1,int y1,int x2,int y2,int unk,int unk1,int pen_color ,int brush_color);
07B8: FFFFFFFF FDBF1145 ; 1EE: void addGui2XGuiList (void* xguilist , GUI*);
07BC: FFFFFFFF D5671745 ; 1EF: void InvalidateRect(DISP_OBJ *,RECT*);
07C0: FFFFFFFF 45310045 ; 1F0: int CreateObject(GUI*,void (*)(DISP_DESC *),void (*)(DISP_DESC *),BOOK *,void(*)(),int,int size_obj);
07C4: FFFFFFFF F9B51745 ; 1F1: int SetFont(int);
07C8: FFFFFFFF C879254C ;81F2: DISP_OBJ ** StatusRow_p(void);
07CC: FFFFFFFF C5DD3945 ; 1F3: int root_list_get_session_count(void);
07D0: FFFFFFFF D9DD3945 ; 1F4: UI_APP_SESSION *root_list_get_session(int num_session);
07D4: FFFFFFFF A5D63945 ; 1F5: BOOK *SESSION_GetTopBook(UI_APP_SESSION *);
07D8: FFFFFFFF 9102FD44 ; 1F6: int MainInput_getVisible(GUI *);
07DC: FFFFFFFF 9D02FD44 ; 1F7: int MainInput_strlen(GUI *);
07E0: FFFFFFFF BD02FD44 ; 1F8: char * MainInput_getPNUM(GUI *);
07E4: FFFFFFFF C902FD44 ; 1F9: int MainInput_isPlus(GUI *);
07E8: FFFFFFFF D9D63945 ; 1FA: int BOOK_GetSessionID(BOOK * );
07EC: FFFFFFFF D95CCA44 ; 1FB: int wstrncmp(const wchar_t*,const wchar_t*,int);
07F0: FFFFFFFF F9851745 ; 1FC: int DISP_OBJ_GetAbsoluteXPos(DISP_OBJ *);
07F4: FFFFFFFF 31861745 ; 1FD: int DISP_OBJ_GetAbsoluteYPos(DISP_OBJ *);
07F8: FFFFFFFF 796E1745 ; 1FE: WINDOW * DISP_OBJ_GetWindow(DISP_OBJ *);
07FC: FFFFFFFF A1F53945 ; 1FF: int GetThemeColor(int , int);
0800: FFFFFFFF 9D0D4B45 ; 200: int REQUEST_SETTING_SILENCE_SET(const int * __zero,u16 profile,u16 value);
0804: FFFFFFFF 410D4B45 ; 201: int REQUEST_SETTING_SILENCE_GET(const int * __zero,u16 profile, char * silence_mode);
0808: FFFFFFFF 410D4B45 ; 202: void VCALL_Init (void* vc);
080C: FFFFFFFF A91E0845 ; 203: void VCALL_SetName (void * vc , wchar_t * name ,unsigned short name_len);
0810: FFFFFFFF 0D1F0845 ; 204: void VCALL_SetNameIcon (void * vc , u16 icon);
0814: FFFFFFFF C91E0845 ; 205: void VCALL_SetNumber (void * vc , wchar_t * number , unsigned short num_len);
0818: FFFFFFFF F11E0845 ; 206: void VCALL_SetHZ1 (void * vc, int , u16 );
081C: FFFFFFFF FD1E0845 ; 207: void VCALL_SetHZ2 (void * vc , u16 );
0820: FFFFFFFF F1150845 ; 208: void MakeVoiceCall (int SessioID , void * vc ,int flag);
0824: FFFFFFFF F1D6FA44 ; 209: int isDirectory (wchar_t * path ,wchar_t * filename , int * error );
0828: FFFFFFFF B1714245 ; 20A: void FileDelete (wchar_t * path ,wchar_t * filename , int * error );
082C: FFFFFFFF 39340045 ; 20B: void SetFocus (GUI * , int);
0830: FFFFFFFF 59262E45 ; 20C: int CreateSMSCont (int, void*);
0834: FFFFFFFF 692B2E45 ; 20D: int FreeSMSCont (void*);
0838: FFFFFFFF B9272E45 ; 20E: int PrepareSMSCont (void*,u16*,u16*,int,int);
083C: FFFFFFFF B92A2E45 ; 20F: int CteateNewMessage (int,void*,int);
0840: FFFFFFFF 6CF94644 ;8210: void * get_APP_DESC_TABLE(void);
0844: FFFFFFFF 9D0C3B45 ; 211: C_INTERFACE *Window_GetComponentInterface(WINDOW*);
0848: FFFFFFFF 0DE20845 ; 212: int AB_POSITIONNBR_GET(void * ab_name,char * ,u16 * ,void * ab_num);
084C: FFFFFFFF ADE00845 ; 213: int AB_NAME_ITEM2StrID(void * ab_name);
0850: FFFFFFFF 01E10845 ; 214: int AB_NUM_ITEM2StrID(void * ab_num_item);
0854: FFFFFFFF 8DE94A45 ; 215: int GetABRecNum(AB_GET_STRUCT *); //nullsub(void)
0858: FFFFFFFF F07C4444 ;8216: AB_ITEM_DESC * get_AB_ITEMS_DESC();
085C: FFFFFFFF 85E9B844 ; 217: GUI * SBY_GetMainInput(BOOK * StandBy)
0860: FFFFFFFF 81E9B844 ; 218: GUI * SBY_GetStatusIndication(BOOK * StandBy)
0864: FFFFFFFF 39144145 ; 219: int REQUEST_PHONEBOOK_ACCESSSTATUS_TOTAL_GET(const int * __zero, int *);
0868: FFFFFFFF 789A094C ;821A: int * PID_MMI(void);
0874: FFFFFFFF 39611745 ; 21D: DISP_OBJ* DISPBASE_GetFocused(int display);
0878: FFFFFFFF 59661745 ; 21E: char DISP_OBJ_getVisible(DISP_OBJ*);
087C: FFFFFFFF 31841945 ; 21F: DISP_DESC* DISP_OBJ_GetDESC (DISP_OBJ*)
0880: FFFFFFFF 655A1745 ; 220: void DISP_DESC_SetName (DISP_DESC* , const char * name);
0884: FFFFFFFF 01841745 ; 221: char* DISP_OBJ_GetName (DISP_OBJ *);
0888: FFFFFFFF 755A1745 ; 222: void DISP_DESC_SetSize (DISP_DESC* , u16 size);
;088C: xxxxxxxx yyyyyyyy ; 223: u16 DISP_DESC_GetSize (DISP_OBJ *);
0890: FFFFFFFF 795A1745 ; 224: void DISP_DESC_SetOnCreate (DISP_DESC* , DISP_OBJ_ONCREATE_METHOD);
0894: FFFFFFFF AD5C1745 ; 225: DISP_OBJ_ONCREATE_METHOD DISP_OBJ_GetOnCreate (DISP_OBJ *);
0898: FFFFFFFF 7D5A1745 ; 226: void DISP_DESC_SetOnClose (DISP_DESC* , DISP_OBJ_ONCLOSE_METHOD);
089C: FFFFFFFF CD5C1745 ; 227: DISP_OBJ_ONCLOSE_METHOD DISP_OBJ_GetOnClose (DISP_OBJ *);
08A0: FFFFFFFF 815A1745 ; 228: void DISP_DESC_SetOnRedraw (DISP_DESC* , DISP_OBJ_ONREDRAW_METHOD);
08A4: FFFFFFFF ED5C1745 ; 229: DISP_OBJ_ONREDRAW_METHOD DISP_OBJ_GetOnRedraw (DISP_OBJ *);
08A8: FFFFFFFF 895A1745 ; 22A: void DISP_DESC_SetOnKey (DISP_DESC* , DISP_OBJ_ONKEY_METHOD);
08AC: FFFFFFFF 2D5D1745 ; 22B: DISP_OBJ_ONKEY_METHOD DISP_OBJ_GetOnKey (DISP_OBJ *);
;08B0: xxxxxxxx yyyyyyyy ; 22C: void DISP_DESC_SetMethod03 (DISP_DESC* ,void (*)(void*));
;08B4: xxxxxxxx yyyyyyyy ; 22D: DISP_OBJ_METHOD DISP_OBJ_GetMethod03 (DISP_OBJ *);
;08B8: xxxxxxxx yyyyyyyy ; 22E: void DISP_DESC_SetMethod04 (DISP_DESC* ,void (*)(void*));
;08BC: xxxxxxxx yyyyyyyy ; 22F: DISP_OBJ_METHOD DISP_OBJ_GetMethod04 (DISP_OBJ *);
;08C0: xxxxxxxx yyyyyyyy ; 230: void DISP_DESC_SetMethod05 (DISP_DESC* ,void (*)(void*));
;08C4: xxxxxxxx yyyyyyyy ; 231: DISP_OBJ_METHOD DISP_OBJ_GetMethod05 (DISP_OBJ *);
08C8: FFFFFFFF 8D5A1745 ; 232: void DISP_DESC_SetMethod06 (DISP_DESC* ,DISP_OBJ_METHOD);
08CC: FFFFFFFF 4D5D1745 ; 233: DISP_OBJ_METHOD DISP_OBJ_GetMethod06 (DISP_OBJ *);
;08D0: xxxxxxxx yyyyyyyy ; 234: void DISP_DESC_SetMethod07 (DISP_DESC* ,void (*)(void*));
;08D4: xxxxxxxx yyyyyyyy ; 235: DISP_OBJ_METHOD DISP_OBJ_GetMethod07 (DISP_OBJ *);
08D8: FFFFFFFF 955A1745 ; 236: void DISP_DESC_SetMethod08 (DISP_DESC* ,DISP_OBJ_METHOD);
;08DC: xxxxxxxx yyyyyyyy ; 237: DISP_OBJ_METHOD DISP_OBJ_GetMethod08 (DISP_OBJ *);
;08E0: xxxxxxxx yyyyyyyy ; 238: void DISP_DESC_SetMethod09 (DISP_DESC* ,void (*)(void*));
;08E4: xxxxxxxx yyyyyyyy ; 239: DISP_OBJ_METHOD DISP_OBJ_GetMethod09 (DISP_OBJ *);
;08E8: xxxxxxxx yyyyyyyy ; 23A: void DISP_DESC_SetMethod0A (DISP_DESC* ,void (*)(void*));
;08EC: xxxxxxxx yyyyyyyy ; 23B: DISP_OBJ_METHOD DISP_OBJ_GetMethod0A (DISP_OBJ *);
;08F0: xxxxxxxx yyyyyyyy ; 23C: void DISP_DESC_SetMethod0B (DISP_DESC* ,void (*)(void*));
;08F4: xxxxxxxx yyyyyyyy ; 23D: DISP_OBJ_METHOD DISP_OBJ_GetMethod0B (DISP_OBJ *);
;08F8: xxxxxxxx yyyyyyyy ; 23E: void DISP_DESC_SetMethod0C (DISP_DESC* ,void (*)(void*));
;08FC: xxxxxxxx yyyyyyyy ; 23F: DISP_OBJ_METHOD DISP_OBJ_GetMethod0C (DISP_OBJ *);
0900: FFFFFFFF 55564A45 ; 240: void JavaSession_Manager (int cmd);
0904: FFFFFFFF 9D554A45 ; 241: int JavaSession_GetName(void);
0908: FFFFFFFF 295E3445 ; 242: int TextCopyId(int);
090C: FFFFFFFF 753D1145 ; 243: UI_APP_SESSION *Book_GetSession(BOOK*);
0910: FFFFFFFF 5908FE44 ; 244: void List2lineSetAsSubitem (void* msg,int unk,int n_sub_items);
0914: FFFFFFFF E508FE44 ; 245: void List2lineSubitemAddText(void* msg,int StrID);
0918: FFFFFFFF D508FE44 ; 246: int GUIonMessage_GetCreatedSubItemParrentIndex(void * msg);
091C: FFFFFFFF F58CFA44 ; 247: void GoMusic(void);
0920: FFFFFFFF 11BD2C45 ; 248: void Vibra_Off (int t1);
;0928: xxxxxxxx yyyyyyyy ; 24A: int PlayFileV(const wchar_t * path,const wchar_t * fname, int vol);
;092C: xxxxxxxx yyyyyyyy ; 24B: int GetSilent(void);
;0930: xxxxxxxx yyyyyyyy ; 24C: int GetVibrator(int ignorevibrator,int ignoresilent);
;0934: xxxxxxxx yyyyyyyy ; 24D: int GetAudioSettings(int what, char* retvalue);
;0938: xxxxxxxx yyyyyyyy ; 24E: int GetChipID(void);
0948: FFFFFFFF C508FE44 ; 252: int List2LineGetCurrentIndex(void * msg);
094C: FFFFFFFF B508FE44 ; 253: int GUIonMessage_GetCurrentItemIndex(void * msg);
0950: FFFFFFFF 814E4245 ; 254: void DestroyDirHandle(void *handle);
0954: FFFFFFFF 7C934544 ;8255: DB_EXT *LastExtDB(void);
0958: FFFFFFFF F1614345 ; 256: void GetOtherExtMethods(FILESUBROUTINE **);
095C: FFFFFFFF 05083A45 ; 257: void MessageBox(int HeaderStrID,int MessageStrID,int IconID, int style /*1 or 2*/,int time,BOOK * unk);
0960: FFFFFFFF 65313B45 ; 258: int Display_GetHeight(int Display);
0964: FFFFFFFF 75313B45 ; 259: int Display_GetWidth(int Display);
0968: FFFFFFFF 5DB2FC44 ; 25A: void PlaySystemSound (int SndNumber);
;0974: xxxxxxxx yyyyyyyy ; 25D: int TabMenuBar_GetFocusedTabIndex(GUI * );
;0978: xxxxxxxx yyyyyyyy ; 25E: void TabMenuBar_SetTabFocused(GUI_TABMENUBAR * , int tab_num);
;097C: xxxxxxxx yyyyyyyy ; 25F: int GC_GetPenColor (void* GC);
;0980: xxxxxxxx yyyyyyyy ; 260: void GC_SetPenColor(void* GC , int pen_color);
;0984: xxxxxxxx yyyyyyyy ; 261: void GC_SetPixel (void* GC,int x1,int y1,int color);
;0988: xxxxxxxx yyyyyyyy ; 262: void GC_DrawLine(void* GC,int x1, int y1, int x2, int y2);
;098C: xxxxxxxx yyyyyyyy ; 263: void GC_DrawFRect (void* GC,int color,int x1,int y1,int x2 ,int y2);
;0990: xxxxxxxx yyyyyyyy ; 264: int GC_DrawBitmap(void *GC, int x1, int y1, int x2, int y2, int * bmp);
;0994: xxxxxxxx yyyyyyyy ; 265: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
;0998: xxxxxxxx yyyyyyyy ; 266: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
;099C: xxxxxxxx yyyyyyyy ; 267: png_infop png_create_info_struct(png_structp png_ptr);
;09A0: xxxxxxxx yyyyyyyy ; 268: void png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr);
;09A4: xxxxxxxx yyyyyyyy ; 269: void png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr, png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn, png_progressive_end_ptr end_fn);
;09A8: xxxxxxxx yyyyyyyy ; 26A: void png_process_data(png_structp png_ptr, png_infop info_ptr, png_bytep buffer, png_size_t buffer_size);
;09AC: xxxxxxxx yyyyyyyy ; 26B: void png_read_update_info(png_structp png_ptr, png_infop info_ptr);
;09B0: xxxxxxxx yyyyyyyy ; 26C: png_voidp png_get_progressive_ptr(png_structp png_ptr);
;09B4: xxxxxxxx yyyyyyyy ; 26D: png_uint_32 png_get_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
;09B8: xxxxxxxx yyyyyyyy ; 26E: void png_set_strip_16(png_structp png_ptr);
;09BC: xxxxxxxx yyyyyyyy ; 26F: void png_set_gray_1_2_4_to_8(png_structp png_ptr);
;09C0: xxxxxxxx yyyyyyyy ; 270: void png_set_gray_to_rgb(png_structp png_ptr);
;09C4: xxxxxxxx yyyyyyyy ; 271: png_uint_32 png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag);
;09C8: xxxxxxxx yyyyyyyy ; 272: void png_set_tRNS_to_alpha(png_structp png_ptr);
;09CC: xxxxxxxx yyyyyyyy ; 273: void png_set_filler(png_structp png_ptr, png_uint_32 filler, int flags);
;09D0: xxxxxxxx yyyyyyyy ; 274: void png_set_palette_to_rgb(png_structp png_ptr);
;09D4: xxxxxxxx yyyyyyyy ; 275: png_uint_32 png_get_rowbytes(png_structp png_ptr, png_infop info_ptr);
;09D8: xxxxxxxx yyyyyyyy ; 276: void png_progressive_combine_row(png_structp png_ptr, png_bytep old_row, png_bytep new_row);
;09DC: xxxxxxxx yyyyyyyy ; 277: int png_sig_cmp(png_bytep sig, png_size_t start, png_size_t num_to_check);
;09E0: xxxxxxxx yyyyyyyy ; 278: int setjmp(jmp_buf jmpbuf);
;09E4: xxxxxxxx yyyyyyyy ; 279: void longjmp(jmp_buf, int);
;09E8: xxxxxxxx yyyyyyyy ; 27A: int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size);
;09EC: xxxxxxxx yyyyyyyy ; 27B: int inflate (z_streamp strm, int flush);
;09F0: xxxxxxxx yyyyyyyy ; 27C: int inflateEnd (z_streamp strm);
;09F4: xxxxxxxx yyyyyyyy ; 27D: int memcmp (const void *m1,const void *m2,int n);
;09F8: xxxxxxxx yyyyyyyy ; 27E: int strncmp(const char *s1, const char *s2, int len);
;09FC: xxxxxxxx yyyyyyyy ; 27F: char *strncpy (char *dest,const char *source,int maxlen);
;0A00: xxxxxxxx yyyyyyyy ; 280: char *strcat(char *dest, const char *src);
;0A04: xxxxxxxx yyyyyyyy ; 281: void GuiObject_SetTitleType(GUI *gui, int type);
;0A08: xxxxxxxx yyyyyyyy ; 282: void GUIonMessage_SetItemDisabled (void * msg, int Disabled);
;0A0C: xxxxxxxx yyyyyyyy ; 283: int REQUEST_IMAGEHANDLER_INTERNAL_REGISTER(const int * __zero,u16 ImageHandle,wchar_t *path,wchar_t *fname,int unk, u16 * ImageID ,char * error);
;0A10: xxxxxxxx yyyyyyyy ; 284: int REQUEST_IMAGEHANDLER_INTERNAL_UNREGISTER (const int * __zero,u16 ImageHandle,u16* ,u16* ,int ImageID, int unk_1,char * error);
;0A14: xxxxxxxx yyyyyyyy ;8285: SURFACE ** get_Surfaces(void);
0A18: FFFFFFFF D92B1A45 ; 286: int iconidname2id(const wchar_t* idname,int maxnamelen,int* id);
0A1C: FFFFFFFF 81CE0545 ; 287: int textidname2id(const wchar_t* idname,int maxnamelen,int* id);
;0A20: xxxxxxxx yyyyyyyy ; 288: void ListMenu_SetNoItemText(GUI_LIST *, int str);
;0A28: xxxxxxxx yyyyyyyy ;828A: IS_NEEDED_BOOK isFmRadioBook(void);
;0A2C: xxxxxxxx yyyyyyyy ;828B: IS_NEEDED_BOOK isAudioPlayerBook(void);
;0A30: xxxxxxxx yyyyyyyy ; 28C: void PlayerControl(BOOK *AudioPlayerBook, int);
;0A34: xxxxxxxx yyyyyyyy ; 28D: void SwitchRadioStationFromList(BOOK *FmRadioBook, int);
;0A38: xxxxxxxx yyyyyyyy ; 28E: void Shortcut_Run (wchar_t * shortcut_name);
;0A3C: xxxxxxxx yyyyyyyy ; 28F: int mkdir(const wchar_t* path);
;0A40: xxxxxxxx yyyyyyyy ; 290: int rmdir(const wchar_t* path, int zero);
;0A44: xxxxxxxx yyyyyyyy ; 291: int chmod(const wchar_t* path, const wchar_t* fname, int amode);
;0A48: xxxxxxxx yyyyyyyy ; 292: int rename(const wchar_t* oldpath, const wchar_t* oldfname, const wchar_t* newpath, const wchar_t* newfname, int zero);
;0A4C: xxxxxxxx yyyyyyyy ; 293: int GetImageWidth(int ImageID);
;0A50: xxxxxxxx yyyyyyyy ; 294: int GetImageHeight(int ImageID);
;0A54: xxxxxxxx yyyyyyyy ; 295: void * CallID_GetCallStatusDesc(int CallID);
;0A58: xxxxxxxx yyyyyyyy ; 296: wchar_t * CallStatusDesc_GetName(void * CallStatusDesc);
;0A5C: xxxxxxxx yyyyyyyy ; 297: void List_FreeElements(LIST *,int (*cmp_proc)(void * elem_from_list),void * freefunc);
;0A60: xxxxxxxx yyyyyyyy ; 298: char * strstr(const char * str1,const char * str2);
;0A64: xxxxxxxx yyyyyyyy ; 299: int GPRS_GetLastSessionInfo(int,GPRS_SESSION_INFO *);
;0A68: xxxxxxxx yyyyyyyy ; 29A: int wstrcmpni(const wchar_t * wstr1,const wchar_t * wstr2,int len);
;0A6C: xxxxxxxx yyyyyyyy ; 29B: int wtoi(const wchar_t * wstr,int len,int * dest);
;0A70: xxxxxxxx yyyyyyyy ; 29C: void DATE_GetWeekDay(DATE *,char * dest);
;0A74: xxxxxxxx yyyyyyyy ; 29D: void Cale_GetSettings(int setID,void *);
;0A78: xxxxxxxx yyyyyyyy ; 29E: wchar_t * wstrwstr(const wchar_t * wstr1,const wchar_t * wstr2);
;0A7C: xxxxxxxx yyyyyyyy ; 29F: int wstrcmpi(const wchar_t *ws1, const wchar_t *ws2);
;0A80: xxxxxxxx yyyyyyyy ; 2A0: wchar_t * wstrchr(const wchar_t * source,wchar_t chr);
;0A84: xxxxxxxx yyyyyyyy ; 2A1: void GUIObject_HideSoftkeys(void *gui);
;0A88: xxxxxxxx yyyyyyyy ; 2A2: void GUIObject_ShowSoftkeys(void *gui);
;0A8C: xxxxxxxx yyyyyyyy ; 2A3: DISP_OBJ* DispObject_SoftKeys_Get(void);
;0A90: xxxxxxxx yyyyyyyy ; 2A4: int StandbyBackground_SetImage(int type,int,int,const wchar_t* path,const wchar_t* fname,int);
;0A94: xxxxxxxx yyyyyyyy ; 2A5: GUI *CreateYesNoQuestionVA(int zero, ...);
;0A98: xxxxxxxx yyyyyyyy ; 2A6: void ListMenu_SetSecondLineText(GUI_LIST *,int elem_num,int StrID);
;0A9C: xxxxxxxx yyyyyyyy ; 2A7: void _REQUEST_OAF_START_APPLICATION(const int * __one,int __zero,MIDP_DESC *,int ___zero);
;0AA0: xxxxxxxx yyyyyyyy ; 2A8: int FSX_isNameInvalid(wchar_t * name);
;0AA4: xxxxxxxx yyyyyyyy ; 2A9: void DataBrowserDesc_SetFoldersNumber(void * DataBrowserDesc,int state);
;0AA8: xxxxxxxx yyyyyyyy ; 2AA: void DataBrowserDesc_SetActions(void * DataBrowserDesc,char * actions);
;0AAC: xxxxxxxx yyyyyyyy ; 2AB: void DataBrowserDesc_SetSelectAction(void * DataBrowserDesc,int state);
;0AB0: xxxxxxxx yyyyyyyy ; 2AC: void DataBrowserDesc_SetSelectActionOnFolders(void * DataBrowserDesc,int state);
;0AB4: xxxxxxxx yyyyyyyy ; 2AD: void DataBrowserDesc_SetBookID(void * DataBrowserDesc,int BookID);
;0AB8: xxxxxxxx yyyyyyyy ; 2AE: void DataBrowserDesc_SetItemFilter(void * DataBrowserDesc,int (*proc)(const wchar_t * ExtList,const wchar_t * ItemPath,const wchar_t * ItemName));
;0ABC: xxxxxxxx yyyyyyyy ; 2AF: void DataBrowserDesc_SetOption(void * DataBrowserDesc,char * option);
;0AC0: xxxxxxxx yyyyyyyy ; 2B0: void DataBrowserDesc_SetOpenEmptyFolder(void * DataBrowserDesc,int state);
;0AC4: xxxxxxxx yyyyyyyy ; 2B1: void DataBrowserDesc_SetFileExtList(void * DataBrowserDesc,const wchar_t * ExtList);
;0AC8: xxxxxxxx yyyyyyyy ; 2B2: void FSX_RemoveIllegalSymbolsName(FILEITEM *);
;0ACC: xxxxxxxx yyyyyyyy ; 2B3: FILEITEM * DataBrowser_ItemDesc_Create(void);
;0AD0: xxxxxxxx yyyyyyyy ; 2B4: void DataBrowser_ItemDesc_Destroy(FILEITEM *);
;0AD4: xxxxxxxx yyyyyyyy ; 2B5: GUI *CreateDateInputVA(int zero, ...);
;0AD8: xxxxxxxx yyyyyyyy ; 2B6: GUI *CreateTimeInputVA(int zero, ...);
;0ADC: xxxxxxxx yyyyyyyy ; 2B7: void StringInput_SetCursorPosition(GUI *,u16 curs_pos,char unk);
;0AE0: xxxxxxxx yyyyyyyy ; 2B8: void BookObj_CallPage(BOOK * book, const PAGE_DESC * page);
;0AE4: xxxxxxxx yyyyyyyy ; 2B9: unsigned int DateInput_GetDateInt(void *dateinp_msg);
;0AE8: xxxxxxxx yyyyyyyy ; 2BA: unsigned int TimeInput_GetTimeInt(void *timeinp_msg);
;0AEC: xxxxxxxx yyyyyyyy ;82BB: FONT_DESC *GetFontDesc(void);
;0AF0: xxxxxxxx yyyyyyyy ;82BC: int *GetFontCount();
;0AF4: xxxxxxxx yyyyyyyy ; 2BD: int GC_GetBrushColor(void* GC);
;0AF8: xxxxxxxx yyyyyyyy ; 2BE: void GC_SetBrushColor(void* GC , int brush_color);
;0AFC: xxxxxxxx yyyyyyyy ; 2BF: void GC_DrawRoundRect(void* GC ,RECT *,int arcWidth,int arcHeight,int border_flag,int fill_flag);
;0B00: xxxxxxxx yyyyyyyy ; 2C0: BOOK * MenuBook_Desktop(int mode,int BookID);
;0B04: xxxxxxxx yyyyyyyy ; 2C1: wchar_t * MenuBook_Desktop_GetSelectedItemID(BOOK * MenuBook_Desktop);
;0B08: xxxxxxxx yyyyyyyy ; 2C2: void BookObj_Softkey_SetAction(BOOK *,int actionID,void (*proc)(BOOK *,void*));
;0B0C: xxxxxxxx yyyyyyyy ; 2C3: void BookObj_Softkey_SetText(BOOK *,int actionID,int StrID);
;0B10: xxxxxxxx yyyyyyyy ; 2C4: BOOK * Root_GetBookByID(int BookID);
;0B14: xxxxxxxx yyyyyyyy ; 2C5: GUI_FEEDBACK *TextFeedbackWindow(BOOK *bk, int zero);
;0B18: xxxxxxxx yyyyyyyy ; 2C6: void Feedback_SetKeyHook(GUI_FEEDBACK *, void (*hook)(BOOK *bk, int key, int unk, int unk2));
;0B1C: xxxxxxxx yyyyyyyy ; 2C7: void Feedback_SetOnClose(GUI_FEEDBACK *, void (*OnClose)(BOOK *bk));
;0B20: xxxxxxxx yyyyyyyy ; 2C8: void Feedback_SetTimeout(GUI_FEEDBACK *, int time_ms);
;0B24: xxxxxxxx yyyyyyyy ; 2C9: void Feedback_SetTextExtended(GUI_FEEDBACK *, STRID text, int where);





;locale=Russian_Russia.1251
