;K810 SW-R8BA024
;Библиотека функций
;v140308
;(c) Hussein , IronMaster
;(p) Victor_k
;

+45CCAE00
0448: 00000000 94300020 ; 112: void memset(void *mem,char chr,int size);
044C: 00000000 FCC53F44 ; 113: int memcpy(void *dest,const void *source,int cnt);
0450: 00000000 31336844 ; 114: int sprintf(char *buf, char *str, ...);
0454: 00000000 F9386844 ; 115: int snwprintf(u16* buffer, int size, const u16* fmt, ...);
0458: 00000000 41CFF944 ; 116: int _fopen(const unsigned short *filpath, const unsigned short *filname,unsigned int mode , unsigned int rights, unsigned int __0);
045C: 00000000 0DE5F944 ; 117: int fclose(int file);
0460: 00000000 95E7F944 ; 118: int fread(int file , void *ptr, int size);
;0464: xxxxxxxx yyyyyyyy ; 119: int fwrite(int file , const void *ptr, int size);
0470: 00000000 D5D8F944 ; 11C: int isFileExist(u16 * pach, u16 *fname , FSTAT * fstat_stuct);
0474: 00000000 F5AEF944 ; 11D: void * AllocDirHandle(u16 * path);
0478: 00000000 B5B0F944 ; 11E: void *GetFname(void *, void*);
;047C: xxxxxxxx yyyyyyyy ; 11F: void * CreateDataBrowser(void);
;0480: xxxxxxxx yyyyyyyy ; 120: void DataBrowser_SetStyle(void * db , int style);
;0484: xxxxxxxx yyyyyyyy ; 121: void DataBrowser_SetHeaderText(void * db , int StrID);
;0488: xxxxxxxx yyyyyyyy ; 122: void DataBrowser_SetFolders(void * db , int * FolderList);
;048C: xxxxxxxx yyyyyyyy ; 123: void DataBrowser_SetOKSoftKeyText(void * db , int StrID);
;0490: xxxxxxxx yyyyyyyy ; 124: void DataBrowser_Show(void * db);
;0494: xxxxxxxx yyyyyyyy ; 125: void DataBrowser_XXX(void * db);
;0498: xxxxxxxx yyyyyyyy ; 126: unsigned short * getFileExtention(unsigned short * fnane);
;049C: xxxxxxxx yyyyyyyy ; 127: int DataBrowser_isFileInListExt(unsigned short * ext_table,unsigned short * patch ,unsigned short * fname );
04A0: 00000000 295E3B45 ; 128: void Timer_ReSet(u16 *timerID ,int time, void (*onTimer)(u16 *timerID, void *), void *);
04A4: 00000000 F55D3B45 ; 129: u16 Timer_Set(int time, void (*onTimer)(u16 *timerID, void *), void *);
;04A8: xxxxxxxx yyyyyyyy ; 12A: void Timer_Kill(u16 *timerID);
;04AC: xxxxxxxx yyyyyyyy ; 12B: int CreateBook(void * mem, void (* onClose)(BOOK*), const PAGE_DESC * bp, const char * name, int __0xFFFFFFFF,int __0);
;04B0: xxxxxxxx yyyyyyyy ; 12C: void BookObj_KillBook(void *Book);
;04B4: xxxxxxxx yyyyyyyy ; 12D: void BookObj_GotoPage(BOOK * book, const PAGE_DESC * page);
04B8: 00000000 2D8F3B45 ; 12E: void BookObj_ReturnPage(BOOK * ,int);
;04BC: xxxxxxxx yyyyyyyy ; 12F: void FreeBook ( void *book);
;04C0: xxxxxxxx yyyyyyyy ; 130: BOOK * FindBook(IS_NEEDED_BOOK);
04C4: 00000000 89C53C45 ; 131: BOOK * Find_StandbyBook(void);
;04C8: xxxxxxxx yyyyyyyy ; 132: void BookObj_SetFocus(void *,int focus);
;04CC: xxxxxxxx yyyyyyyy ; 133: void GuiObject_SetTitleText (void * gui , int StrID);
;04D0: xxxxxxxx yyyyyyyy ; 134: void ShowWindow (void * gui);
;04D4: xxxxxxxx yyyyyyyy ; 135: void SetCursorToItem ( void *obj , int item);
;04D8: xxxxxxxx yyyyyyyy ; 136: void GUI_SetStyle(GUI_NOFMANY *,int style);
;04DC: xxxxxxxx yyyyyyyy ; 137: int GUIonMessage_GetCreatedItemIndex ( void *msg);
;04E0: xxxxxxxx yyyyyyyy ; 138: char SetMenuItemText0 ( GUI_MESSAGE *, int StrID);
;04E4: xxxxxxxx yyyyyyyy ; 139: char SetMenuItemText1 ( GUI_MESSAGE *, int StrID);
;04E8: xxxxxxxx yyyyyyyy ; 13A: char SetMenuItemText2 ( GUI_MESSAGE *, int StrID);
;04EC: xxxxxxxx yyyyyyyy ; 13B: char SetMenuItemText3 ( GUI_MESSAGE *, int StrID);
;04F0: xxxxxxxx yyyyyyyy ; 13C: void SetListObjectItemIcon ( void *msg , int align , int iconID);
;04F4: xxxxxxxx yyyyyyyy ; 13D: void SetHeaderText( void *obj , int StrID);
;04F8: xxxxxxxx yyyyyyyy ; 13E: int GetFocusetListObjectItem( void *obj);
;04FC: xxxxxxxx yyyyyyyy ; 13F: void SetMenuItemStyle( void *obj , int style);
;0500: xxxxxxxx yyyyyyyy ; 140: void putchar( void *xx , int x, int y, int _zero, int zero1 , short wchar);
;0504: xxxxxxxx yyyyyyyy ;8141: IS_NEEDED_BOOK isScreenSaverBook(void);
0508: 00000000 B9E24745 ; 142: void StatusIndication_SetItemText(void *gui,int item,int StrID);
050C: 00000000 CDE13C45 ; 143: void StatusIndication_ShowNotes(int StrID);
;0510: xxxxxxxx yyyyyyyy ; 144: void * CreateStringInput(int,...);
;0514: xxxxxxxx yyyyyyyy ; 145: GUI_ONEOFMANY * CreateOneOfMany(BOOK *);
;0518: xxxxxxxx yyyyyyyy ; 146: void OneOfMany_SetItemCount(GUI_ONEOFMANY * , int count);
;051C: xxxxxxxx yyyyyyyy ; 147: void OneOfMany_SetChecked(GUI_ONEOFMANY * , int checked);
;0520: xxxxxxxx yyyyyyyy ; 148: void OneOfMany_SetTexts(GUI_ONEOFMANY * , int * StrID , int Count);
;0524: xxxxxxxx yyyyyyyy ; 149: int OneOfMany_GetSelected(GUI_ONEOFMANY * rb);
;0528: xxxxxxxx yyyyyyyy ; 14A: void StatusIndication_Item8_SetText(int StrID);
;052C: xxxxxxxx yyyyyyyy ; 14B: void AddMSGHook(void * menu,short msg,void (*proc)(BOOK *,void*));
;0530: xxxxxxxx yyyyyyyy ; 14C: void AddCommand(void * menu,int cmd , int StrID);
;0534: xxxxxxxx yyyyyyyy ; 14D: void SoftKey_SetEnable(void *gui,int msg,int ena);
;0538: xxxxxxxx yyyyyyyy ; 14E: void SoftKey_AddErrorStr(void *gui,int msg,int StrID);
;053C: xxxxxxxx yyyyyyyy ; 14F: void SoftKey_RemoveItem(void *gui,u16 action);
;0540: xxxxxxxx yyyyyyyy ; 150: void SoftKey_SetVisible(void *gui,int action,int visible);
;0544: xxxxxxxx yyyyyyyy ; 151: void SoftKey_SuppressDefaultAction(void *gui,int action);
0548: 00000000 05406844 ; 152: u16* wstrcpy(u16 * dest, u16 * source);
;054C: xxxxxxxx yyyyyyyy ; 153: u16* wstrncpy(u16 * dest, u16 * source, int maxlen);
0550: 00000000 A93F6844 ; 154: u16* wstrcat(u16 * wstr, u16 * subwstr);
;0554: xxxxxxxx yyyyyyyy ; 155: short* wstrncat(short * wstr, short * subwstr , int maxlen);
;0558: xxxxxxxx yyyyyyyy ; 156: int wstrcmp(unsigned short * wstr1, unsigned short * wstr2);
055C: 00000000 B5D2F544 ; 157: int wstrlen(u16 * wstr);
;0560: xxxxxxxx yyyyyyyy ; 158: u16 * str2wstr(u16 * wstr,char * str);
;0564: xxxxxxxx yyyyyyyy ; 159: int strcmp(char * str1, char * str2);
0568: 00000000 39376844 ; 15A: int strlen(char *str);
056C: 00000000 D5D3F544 ; 15B: char * wstr2strn (char * str , u16 * wstr, int maxlen);
0570: 00000000 05104545 ; 15C: int int2strID (int num);
0574: 00000000 B9124545 ; 15D: int Str2ID(const void * wstr , int flag , int len);
;0578: xxxxxxxx yyyyyyyy ; 15E: void StrID2Str(int StrID,char * str,int maxlen);
;057C: xxxxxxxx yyyyyyyy ; 15F: void TextID2wstr(int StrID,u16 * str,int maxlen);
;0580: xxxxxxxx yyyyyyyy ; 160: int TextGetLength(int StrID);
;0584: xxxxxxxx yyyyyyyy ; 161: void TextFree(int StrID);
;0588: xxxxxxxx yyyyyyyy ; 162: int AB_DEFAULTNBR_GET(int rec_num, void * mem_0x30, int * unk);
;058C: xxxxxxxx yyyyyyyy ; 163: int AB_READSTRING(void * mem_0x30,int rec_num, int rec_item_num);
;0590: xxxxxxxx yyyyyyyy ; 164: int AB_READPHONENBR(void * mem_0x30,int rec_num, int rec_item_num);
;0594: xxxxxxxx yyyyyyyy ; 165: int AB_GETNBROFITEMS(int get_from,int unk_0);
;0598: xxxxxxxx yyyyyyyy ; 166: int PNUM_len(void *pnum);
;059C: xxxxxxxx yyyyyyyy ; 167: void PNUM2str(char *str,void *pnum,int len, int max_len);
;05A0: xxxxxxxx yyyyyyyy ; 168: DISP_OBJ * GUIObj_GetDISPObj (void * gui);
05A4: 00000000 4D9E2C45 ; 169: LIST *List_New(void);
;05A8: xxxxxxxx yyyyyyyy ; 16A: void List_Free(LIST *lst);
05AC: 00000000 FD9F2C45 ; 16B: void ListElement_AddtoTop(LIST *lst,void *newElement);
;05B0: xxxxxxxx yyyyyyyy ; 16C: int Gif2ID(u16 IMAGEHANDLE,u16 * path, u16 * fname,u16 * ID);
;05B4: xxxxxxxx yyyyyyyy ; 16D: int REQUEST_IMAGEHANDLER_INTERNAL_GETHANDLE(const int * __zero,u16 * IMAGEHANDLE,char * unk);
05B8: 00000000 B1ECE544 ; 16E: void REQUEST_DATEANDTIME_GET(const int * __zero , DATETIME *dt);
;05BC: xxxxxxxx yyyyyyyy ; 16F: void IndicationDevice_Backlight_FadeToLevel(int unk_zero ,int bl_level);
05C0: 00000000 A1020945 ; 170: int GetFreeBytesOnHeap(void);
;05C4: xxxxxxxx yyyyyyyy ; 171: void Hide(void * udata, int zero);
;05C8: xxxxxxxx yyyyyyyy ; 172: void Show(void * udata, int zero);
;05CC: xxxxxxxx yyyyyyyy ; 173: void StartAPP (u16 * appname);
;05D0: xxxxxxxx yyyyyyyy ; 174: void ListMenu_SetOnMessages (GUI_LIST * , void * onMessage);
05D4: 00000000 6D9F3845 ; 175: char * manifest_GetParam(char *buf,char *param_name,int unk);
05D8: 00000000 09EBF944 ; 176: int lseek(int file,int offset,int mode);
;05DC: xxxxxxxx yyyyyyyy ;8177: int get_VBUFFER(void);
;05E0: xxxxxxxx yyyyyyyy ; 178: void SetLampLevel (int level);
05E4: 00000000 899F2C45 ; 179: void * ListElement_Remove(LIST *lst,int index);
05E8: 00000000 55CC3E44 ; 17A: int GetCurrentPID(void);
05EC: 00000000 BD9F2C45 ; 17B: int ListElement_Prt2NumElement(LIST *lst,void *ptr);
05F0: 00000000 8C544344 ; 17C: union SIGNAL *alloc(OSBUFSIZE size,SIGSELECT signo);
05F4: 00000000 A8544344 ; 17D: union SIGNAL *receive(const SIGSELECT *sigsel);
05F8: 00000000 98544344 ; 17E: void send(union SIGNAL **sig,PROCESS to);
05FC: 00000000 E8544344 ; 17F: PROCESS sender(union SIGNAL **sig);
0600: 00000000 B8544344 ; 180: void free_buf(union SIGNAL **sig);
0604: 00000000 84554344 ; 181: PROCESS create_process(int proc_type,char *name,OSENTRYPOINT *entrypoint,OSADDRESS stack_size,OSPRIORITY priority,OSTIME timeslice,PROCESS pid_block,void *redir_table,OSVECTOR vector,OSUSER user);
0608: 00000000 A4574344 ; 182: void start(PROCESS pid);
;060C: xxxxxxxx yyyyyyyy ; 183: int get_ptype(PROCESS pid);
;0610: xxxxxxxx yyyyyyyy ; 184: PROCESS current_process(void);
;0614: xxxxxxxx yyyyyyyy ; 185: void delay(OSTIME timeout);
;0618: xxxxxxxx yyyyyyyy ; 186: OSBOOLEAN hunt(const char *name, OSUSER user, PROCESS *name_, union SIGNAL **hunt_sig);
;061C: xxxxxxxx yyyyyyyy ; 187: void kill_proc(PROCESS pid);
;0680: xxxxxxxx yyyyyyyy ; 1A0: char* strcpy(char * dest, char * source);
;0684: xxxxxxxx yyyyyyyy ; 1A1: void *CreateMessage(int size,int ev,char *name);
;0688: xxxxxxxx yyyyyyyy ; 1A2: void SendMessage(void **signal,int PID);
;068C: xxxxxxxx yyyyyyyy ; 1A3: void * WaitMessage(void *SIGSEL);
;0690: xxxxxxxx yyyyyyyy ; 1A4: int FreeMessage(void **Mess);
;0694: xxxxxxxx yyyyyyyy ; 1A5: void SendDispatchMessage(int id, int unk_zero, int size,void *mess);
;0698: xxxxxxxx yyyyyyyy ; 1A6: char * UIEventName(int event);
;069C: xxxxxxxx yyyyyyyy ;81A7: int * MissedEvents(void);
;06A0: xxxxxxxx yyyyyyyy ; 1A8: void UI_Event(int event);
;06A4: xxxxxxxx yyyyyyyy ; 1A9: void UI_Event_wData(int event,void *message,void (*mfree)(void*));
;06A8: xxxxxxxx yyyyyyyy ; 1AA: void UI_Event_toSID(int event,int SessionID);
;06AC: xxxxxxxx yyyyyyyy ; 1AB: void UI_Event_toSIDwData(int event,int SedionID,void *message,void (*mfree)(void*));
06B0: 00000000 1DA22C45 ; 1AC: int ListElement_Find(LIST *lst,void *element, int (*cmp_proc)(void *,void *));
06B4: 00000000 21A12C45 ; 1AD: void * ListElement_GetByIndex(LIST * , int index);
06B8: 00000000 05416844 ; 1AE: u16* wstrrchr(u16*wstr, u16 wchar);
06BC: 00000000 398E3B45 ; 1AF: void BookObj_CallSubroutine(BOOK * , void * SubProcDesc);
;06C0: xxxxxxxx yyyyyyyy ; 1B0: void ListElement_Add(LIST *lst,void *newElement);
06C4: 00000000 F5072D44 ; 1B1: void debug_printf(char * fmt,...);
;06C8: xxxxxxxx yyyyyyyy ; 1B2: int PlayFile(u16 * path, u16 * fname);
;06DC: xxxxxxxx yyyyyyyy ; 1B7: int isKeylocked(void);
;06E0: xxxxxxxx yyyyyyyy ;81B8: IS_NEEDED_BOOK isMediaPlayerVideoBook(void);
06F8: 00000000 C14F3B45 ; 1BE: int Date2ID(DATE *, int TimeFormat,int);
;06FC: xxxxxxxx yyyyyyyy ; 1BF: int Time2ID(TIME *, char TimeFormat,int);
;0700: xxxxxxxx yyyyyyyy ; 1C0: GUI_LIST * CreateListObject(BOOK * , void * unk);
;0704: xxxxxxxx yyyyyyyy ; 1C1: void SetNumOfMenuItem(void * , int item_count);
;0708: xxxxxxxx yyyyyyyy ;81C2: LIST ** ROOT_APP(void);
;070C: xxxxxxxx yyyyyyyy ; 1C3: void SoftKey_AddHelpStr(void *gui,int msg,int StrID);
;0710: xxxxxxxx yyyyyyyy ; 1C4: void SoftKey_SetItemAsSubItem(void *gui,int item,int subitem);
;0714: xxxxxxxx yyyyyyyy ; 1C5: int REQUEST_SYSTEM_SHUTDOWN(void);
;0718: xxxxxxxx yyyyyyyy ; 1C6: int REQUEST_SYSTEM_RESTART(void);
;071C: xxxxxxxx yyyyyyyy ; 1C7: void SoftKeys_SetText(void *gui,int msg,int StrID,int StrID1);
;0720: xxxxxxxx yyyyyyyy ; 1C8: int isRightNowBook(BOOK *);
;0724: xxxxxxxx yyyyyyyy ; 1C9: int isVolumeControllerBook(BOOK *);
;0728: xxxxxxxx yyyyyyyy ; 1CA: GUI_TABMENUBAR * CreateTabMenuBar(BOOK *);
;072C: xxxxxxxx yyyyyyyy ; 1CB: void TabMenuBar_SetTabCount(GUI_TABMENUBAR * , int count);
;0730: xxxxxxxx yyyyyyyy ; 1CC: void TabMenuBar_AssignGuiObj(GUI_TABMENUBAR * , int tab , GUI_NOFMANY *);
;0734: xxxxxxxx yyyyyyyy ; 1CD: void TabMenuBar_SetTabIcon(GUI_TABMENUBAR *,int tab, u16 icon , int for_state);
;0738: xxxxxxxx yyyyyyyy ; 1CE: void GUI_Free(GUI*);
;073C: xxxxxxxx yyyyyyyy ; 1CF: void GUI_SetIcon(GUI* , int icon);
;0740: xxxxxxxx yyyyyyyy ; 1D0: int StringInput_GetStringAndLen (GUI*,u16**,u16*);
;0750: xxxxxxxx yyyyyyyy ; 1D4: GUI_NOFMANY * CreateNOfMany(BOOK *);
;0754: xxxxxxxx yyyyyyyy ; 1D5: void NOfMany_SetTexts(GUI_NOFMANY * , int * StrIDtable, int items_count);
;0758: xxxxxxxx yyyyyyyy ; 1D6: void NOfMany_SetChecked(GUI_NOFMANY * , u16 * checked_table, int items_count);
;075C: xxxxxxxx yyyyyyyy ; 1D7: void NOfMany_SetCursor(GUI_NOFMANY * , int item);
;0760: xxxxxxxx yyyyyyyy ; 1D8: int NOfMany_GetCheckedCount(GUI_NOFMANY *);
;0764: xxxxxxxx yyyyyyyy ; 1D9: int NOfMany_GetChecked(GUI_NOFMANY * , u16 * buffer );
;0768: xxxxxxxx yyyyyyyy ; 1DA: void NOfMany_SetonMessage(GUI_NOFMANY * , void * proc );
;0780: xxxxxxxx yyyyyyyy ; 1E0: void OneOfMany_SetFocused(GUI_ONEOFMANY * , int item);
;0784: xxxxxxxx yyyyyyyy ; 1E1: void OneOfMany_SetonMessage(GUI_ONEOFMANY * , void * proc);
;0788: xxxxxxxx yyyyyyyy ; 1E2: GUI_FEEDBACK * CreateFeedBack (int,...);
;078C: xxxxxxxx yyyyyyyy ; 1E3: void FeedBack_SetText(GUI_FEEDBACK*,int);
0790: 00000000 6526B044 ; 1E4: int GetBattaryState(const int * , BATT *);
;0794: xxxxxxxx yyyyyyyy ; 1E5: void * get_DisplayGC (void);
;0798: xxxxxxxx yyyyyyyy ; 1E6: void GetGuiRect(void*,RECT*);
;079C: xxxxxxxx yyyyyyyy ; 1E7: void get_GC_RECT(void*,RECT*);
;07A0: xxxxxxxx yyyyyyyy ; 1E8: int get_GC_xx(void * GC);
;07A4: xxxxxxxx yyyyyyyy ; 1E9: void *set_GC_xx(void * GC, int);
;07A8: xxxxxxxx yyyyyyyy ; 1EA: void GC_validate_RECT(void * GC , RECT*);
;07AC: xxxxxxxx yyyyyyyy ; 1EB: void addGui2book(BOOK*,GUI*);
;07B0: xxxxxxxx yyyyyyyy ; 1EC: void DrawRect(int x1, int y1,int x2 ,int y2,int pen_color,int brush_color);
;07B4: xxxxxxxx yyyyyyyy ; 1ED: void DrawString(int StrID,int align,int x1,int y1,int x2,int y2,int unk,int unk1,int pen_color ,int brush_color);
;07B8: xxxxxxxx yyyyyyyy ; 1EE: void addGui2XGuiList (void* xguilist , GUI*);
;07BC: xxxxxxxx yyyyyyyy ; 1EF: void InvalidateRect(DISP_OBJ *,RECT*);
;07C0: xxxxxxxx yyyyyyyy ; 1F0: int CreateObject(GUI*,void (*)(DISP_DESC *),void (*)(DISP_DESC *),BOOK *,void(*)(),int,int size_obj);
;07C4: xxxxxxxx yyyyyyyy ; 1F1: int SetFont(int);
;07C8: xxxxxxxx yyyyyyyy ;81F2: DISP_OBJ ** StatusRow_p(void);
;07CC: xxxxxxxx yyyyyyyy ; 1F3: int root_list_get_session_count(void);
;07D0: xxxxxxxx yyyyyyyy ; 1F4: UI_APP_SESSION *root_list_get_session(int num_session);
;07D4: xxxxxxxx yyyyyyyy ; 1F5: BOOK *SESSION_GetTopBook(UI_APP_SESSION *);
;07D8: xxxxxxxx yyyyyyyy ; 1F6: int MainInput_getVisible(GUI *);
;07DC: xxxxxxxx yyyyyyyy ; 1F7: int MainInput_strlen(GUI *);
;07E0: xxxxxxxx yyyyyyyy ; 1F8: char * MainInput_getPNUM(GUI *);
;07E4: xxxxxxxx yyyyyyyy ; 1F9: int MainInput_isPlus(GUI *);
;07E8: xxxxxxxx yyyyyyyy ; 1FA: int BOOK_GetSessionID(BOOK * );
;07EC: xxxxxxxx yyyyyyyy ; 1FB: int wstrncmp(u16*,u16*,int);
;07F0: xxxxxxxx yyyyyyyy ; 1FC: int DISP_OBJ_GetAbsoluteXPos(DISP_OBJ *);
;07F4: xxxxxxxx yyyyyyyy ; 1FD: int DISP_OBJ_GetAbsoluteYPos(DISP_OBJ *);
;07F8: xxxxxxxx yyyyyyyy ; 1FE: WINDOW * DISP_OBJ_GetWindow(DISP_OBJ *);
;07FC: xxxxxxxx yyyyyyyy ; 1FF: int GetThemeColor(int , int);
;0800: xxxxxxxx yyyyyyyy ; 200: int REQUEST_SETTING_SILENCE_SET(const int * __zero,u16 profile,u16 value);
;0804: xxxxxxxx yyyyyyyy ; 201: int REQUEST_SETTING_SILENCE_GET(const int * __zero,u16 profile, char * silence_mode);
;0808: xxxxxxxx yyyyyyyy ; 202: void VCALL_Init (void* vc);
;080C: xxxxxxxx yyyyyyyy ; 203: void VCALL_SetName (void * vc , u16 * name ,unsigned short name_len);
;0810: xxxxxxxx yyyyyyyy ; 204: void VCALL_SetNameIcon (void * vc , u16 icon);
;0814: xxxxxxxx yyyyyyyy ; 205: void VCALL_SetNumber (void * vc , u16 * number , unsigned short num_len);
;0818: xxxxxxxx yyyyyyyy ; 206: void VCALL_SetHZ1 (void * vc, int , u16 );
;081C: xxxxxxxx yyyyyyyy ; 207: void VCALL_SetHZ2 (void * vc , u16 );
;0820: xxxxxxxx yyyyyyyy ; 208: void MakeVoiceCall (int SessioID , void * vc ,int flag);
;0824: xxxxxxxx yyyyyyyy ; 209: int isDirectory (u16 * path ,u16 * filename , int * error );
;0828: xxxxxxxx yyyyyyyy ; 20A: void FileDelete (u16 * path ,u16 * filename , int * error );
;082C: xxxxxxxx yyyyyyyy ; 20B: void SetFocus (GUI * , int);
;0830: xxxxxxxx yyyyyyyy ; 20C: int CreateSMSCont (int, void*);
;0834: xxxxxxxx yyyyyyyy ; 20D: int FreeSMSCont (void*);
;0838: xxxxxxxx yyyyyyyy ; 20E: int PrepareSMSCont (void*,u16*,u16*,int,int);
;083C: xxxxxxxx yyyyyyyy ; 20F: int CteateNewMessage (int,void*,int);
;0840: xxxxxxxx yyyyyyyy ;8210: void * get_APP_DESC_TABLE(void);
;0844: xxxxxxxx yyyyyyyy ; 211: C_INTERFACE *Window_GetComponentInterface(WINDOW*);
;0848: xxxxxxxx yyyyyyyy ; 212: int AB_POSITIONNBR_GET(void * ab_name,char * ,u16 * ,void * ab_num);
;084C: xxxxxxxx yyyyyyyy ; 213: int AB_NAME_ITEM2StrID(void * ab_name);
;0850: xxxxxxxx yyyyyyyy ; 214: int AB_NUM_ITEM2StrID(void * ab_num_item);
;0854: xxxxxxxx yyyyyyyy ; 215: int GetABRecNum(AB_GET_STRUCT *);
;0858: xxxxxxxx yyyyyyyy ;8216: AB_ITEM_DESC * get_AB_ITEMS_DESC();
0860: 00000000 D179BA44 ; 218: GUI * SBY_GetStatusIndication(BOOK * StandBy)
;0864: xxxxxxxx yyyyyyyy ; 219: int REQUEST_PHONEBOOK_ACCESSSTATUS_TOTAL_GET(const int * __zero, int *);
0868: 00000000 E05B0820 ;821A: int * PID_MMI(void); НЕ УВЕРЕН
;0874: xxxxxxxx yyyyyyyy ; 21D: DISP_OBJ* DISPBASE_GetFocused(int display);
;0878: xxxxxxxx yyyyyyyy ; 21E: char DISP_OBJ_getVisible(DISP_OBJ*);
;0880: xxxxxxxx yyyyyyyy ; 220: void DISP_DESC_SetName (DISP_DESC* , const char * name);
;0884: xxxxxxxx yyyyyyyy ; 221: char* DISP_OBJ_GetName (DISP_OBJ *);
;0888: xxxxxxxx yyyyyyyy ; 222: void DISP_DESC_SetSize (DISP_DESC* , u16 size);
;088C: xxxxxxxx yyyyyyyy ; 223: u16 DISP_DESC_GetSize (DISP_OBJ *);
;0890: xxxxxxxx yyyyyyyy ; 224: void DISP_DESC_SetOnCreate (DISP_DESC* , DISP_OBJ_ONCREATE_METHOD);
;0894: xxxxxxxx yyyyyyyy ; 225: DISP_OBJ_ONCREATE_METHOD DISP_OBJ_GetOnCreate (DISP_OBJ *);
;0898: xxxxxxxx yyyyyyyy ; 226: void DISP_DESC_SetOnClose (DISP_DESC* , DISP_OBJ_ONCLOSE_METHOD);
;089C: xxxxxxxx yyyyyyyy ; 227: DISP_OBJ_ONCLOSE_METHOD DISP_OBJ_GetOnClose (DISP_OBJ *);
;08A0: xxxxxxxx yyyyyyyy ; 228: void DISP_DESC_SetOnRedraw (DISP_DESC* , DISP_OBJ_ONREDRAW_METHOD);
;08A4: xxxxxxxx yyyyyyyy ; 229: DISP_OBJ_ONREDRAW_METHOD DISP_OBJ_GetOnRedraw (DISP_OBJ *);
;08A8: xxxxxxxx yyyyyyyy ; 22A: void DISP_DESC_SetOnKey (DISP_DESC* , DISP_OBJ_ONKEY_METHOD);
;08AC: xxxxxxxx yyyyyyyy ; 22B: DISP_OBJ_ONKEY_METHOD DISP_OBJ_GetOnKey (DISP_OBJ *);
;08B0: xxxxxxxx yyyyyyyy ; 22C: void DISP_DESC_SetMethod03 (DISP_DESC* ,void (*)(void*));
;08B4: xxxxxxxx yyyyyyyy ; 22D: DISP_OBJ_METHOD DISP_OBJ_GetMethod03 (DISP_OBJ *);
;08B8: xxxxxxxx yyyyyyyy ; 22E: void DISP_DESC_SetMethod04 (DISP_DESC* ,void (*)(void*));
;08BC: xxxxxxxx yyyyyyyy ; 22F: DISP_OBJ_METHOD DISP_OBJ_GetMethod04 (DISP_OBJ *);
;08C0: xxxxxxxx yyyyyyyy ; 230: void DISP_DESC_SetMethod05 (DISP_DESC* ,void (*)(void*));
;08C4: xxxxxxxx yyyyyyyy ; 231: DISP_OBJ_METHOD DISP_OBJ_GetMethod05 (DISP_OBJ *);
;08C8: xxxxxxxx yyyyyyyy ; 232: void DISP_DESC_SetMethod06 (DISP_DESC* ,DISP_OBJ_METHOD);
;08CC: xxxxxxxx yyyyyyyy ; 233: DISP_OBJ_METHOD DISP_OBJ_GetMethod06 (DISP_OBJ *);
;08D0: xxxxxxxx yyyyyyyy ; 234: void DISP_DESC_SetMethod07 (DISP_DESC* ,void (*)(void*));
;08D4: xxxxxxxx yyyyyyyy ; 235: DISP_OBJ_METHOD DISP_OBJ_GetMethod07 (DISP_OBJ *);
;08D8: xxxxxxxx yyyyyyyy ; 236: void DISP_DESC_SetMethod08 (DISP_DESC* ,DISP_OBJ_METHOD);
;08DC: xxxxxxxx yyyyyyyy ; 237: DISP_OBJ_METHOD DISP_OBJ_GetMethod08 (DISP_OBJ *);
;08E0: xxxxxxxx yyyyyyyy ; 238: void DISP_DESC_SetMethod09 (DISP_DESC* ,void (*)(void*));
;08E4: xxxxxxxx yyyyyyyy ; 239: DISP_OBJ_METHOD DISP_OBJ_GetMethod09 (DISP_OBJ *);
;08E8: xxxxxxxx yyyyyyyy ; 23A: void DISP_DESC_SetMethod0A (DISP_DESC* ,void (*)(void*));
;08EC: xxxxxxxx yyyyyyyy ; 23B: DISP_OBJ_METHOD DISP_OBJ_GetMethod0A (DISP_OBJ *);
;08F0: xxxxxxxx yyyyyyyy ; 23C: void DISP_DESC_SetMethod0B (DISP_DESC* ,void (*)(void*));
;08F4: xxxxxxxx yyyyyyyy ; 23D: DISP_OBJ_METHOD DISP_OBJ_GetMethod0B (DISP_OBJ *);
;08F8: xxxxxxxx yyyyyyyy ; 23E: void DISP_DESC_SetMethod0C (DISP_DESC* ,void (*)(void*));
;08FC: xxxxxxxx yyyyyyyy ; 23F: DISP_OBJ_METHOD DISP_OBJ_GetMethod0C (DISP_OBJ *);
;0900: xxxxxxxx yyyyyyyy ; 240: void JavaSession_Manager (int cmd);
;0904: xxxxxxxx yyyyyyyy ; 241: int JavaSession_GetName(void);
;0908: xxxxxxxx yyyyyyyy ; 242: int TextCopyId(int);
;090C: xxxxxxxx yyyyyyyy ; 243: UI_APP_SESSION *Book_GetSession(BOOK*);
;0910: xxxxxxxx yyyyyyyy ; 244: void List2lineSetAsSubitem (void* msg,int unk,int n_sub_items);
;0914: xxxxxxxx yyyyyyyy ; 245: void List2lineSubitemAddText(void* msg,int StrID);
;0918: xxxxxxxx yyyyyyyy ; 246: int GUIonMessage_GetCreatedSubItemParrentIndex(void * msg);
;0928: xxxxxxxx yyyyyyyy ; 24A: int PlayFileV(u16 * path, u16 * fname, int vol);
;092C: xxxxxxxx yyyyyyyy ; 24B: int GetSilent(void);
;0930: xxxxxxxx yyyyyyyy ; 24C: int GetVibrator(int ignorevibrator,int ignoresilent);
;0934: xxxxxxxx yyyyyyyy ; 24D: int GetAudioSettings(int what, char* retvalue);
;0938: xxxxxxxx yyyyyyyy ; 24E: int GetChipID(void);
;0948: xxxxxxxx yyyyyyyy ; 252: int List2LineGetCurrentIndex(void * msg);
;094C: xxxxxxxx yyyyyyyy ; 253: int GUIonMessage_GetCurrentItemIndex(void * msg);
0950: 00000000 31B2F944 ; 254: void DestroyDirHandle(void *handle);
0954: 00000000 2860B745 ;8255: DB_EXT *LastExtDB(void);
0958: 00000000 8116FD44 ; 256: void GetOtherExtMethods(FILESUBROUTINE **);
095C: 00000000 8D423C45 ; 257: void MessageBox(int HeaderStrID,int MessageStrID,int IconID, int style /*1 or 2*/,int time,BOOK * unk);
;0960: xxxxxxxx yyyyyyyy ; 258: int Display_GetHeight(int Display);
;0964: xxxxxxxx yyyyyyyy ; 259: int Display_GetWidth(int Display);
;0968: xxxxxxxx yyyyyyyy ; 25A: void PlaySystemSound (int SndNumber);
;0974: xxxxxxxx yyyyyyyy ; 25D: int TabMenuBar_GetFocusedTabIndex(GUI * );
;0978: xxxxxxxx yyyyyyyy ; 25E: void TabMenuBar_SetTabFocused(GUI_TABMENUBAR * , int tab_num);
;097C: xxxxxxxx yyyyyyyy ; 25F: int GC_GetPenColor (void* GC);
;0980: xxxxxxxx yyyyyyyy ; 260: void GC_SetPenColor(void* GC , int pen_color);
;0984: xxxxxxxx yyyyyyyy ; 261: void GC_SetPixel (void* GC,int x1,int y1,int color);
;0988: xxxxxxxx yyyyyyyy ; 262: void GC_DrawLine(void* GC,int x1, int y1, int x2, int y2);
;098C: xxxxxxxx yyyyyyyy ; 263: void GC_DrawFRect (void* GC,int color,int x1,int y1,int x2 ,int y2);
;0990: xxxxxxxx yyyyyyyy ; 264: int GC_DrawBitmap(void *GC, int x1, int y1, int x2, int y2, int * bmp);
;0994: xxxxxxxx yyyyyyyy ; 265: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
;0998: xxxxxxxx yyyyyyyy ; 266: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
;099C: xxxxxxxx yyyyyyyy ; 267: png_infop png_create_info_struct(png_structp png_ptr);
;09A0: xxxxxxxx yyyyyyyy ; 268: void png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr);
;09A4: xxxxxxxx yyyyyyyy ; 269: void png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr, png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn, png_progressive_end_ptr end_fn);
;09A8: xxxxxxxx yyyyyyyy ; 26A: void png_process_data(png_structp png_ptr, png_infop info_ptr, png_bytep buffer, png_size_t buffer_size);
;09AC: xxxxxxxx yyyyyyyy ; 26B: void png_read_update_info(png_structp png_ptr, png_infop info_ptr);
;09B0: xxxxxxxx yyyyyyyy ; 26C: png_voidp png_get_progressive_ptr(png_structp png_ptr);
;09B4: xxxxxxxx yyyyyyyy ; 26D: png_uint_32 png_get_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
;09B8: xxxxxxxx yyyyyyyy ; 26E: void png_set_strip_16(png_structp png_ptr);
;09BC: xxxxxxxx yyyyyyyy ; 26F: void png_set_gray_1_2_4_to_8(png_structp png_ptr);
;09C0: xxxxxxxx yyyyyyyy ; 270: void png_set_gray_to_rgb(png_structp png_ptr);
;09C4: xxxxxxxx yyyyyyyy ; 271: png_uint_32 png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag);
;09C8: xxxxxxxx yyyyyyyy ; 272: void png_set_tRNS_to_alpha(png_structp png_ptr);
;09CC: xxxxxxxx yyyyyyyy ; 273: void png_set_filler(png_structp png_ptr, png_uint_32 filler, int flags);
;09D0: xxxxxxxx yyyyyyyy ; 274: void png_set_palette_to_rgb(png_structp png_ptr);
;09D4: xxxxxxxx yyyyyyyy ; 275: png_uint_32 png_get_rowbytes(png_structp png_ptr, png_infop info_ptr);
;09D8: xxxxxxxx yyyyyyyy ; 276: void png_progressive_combine_row(png_structp png_ptr, png_bytep old_row, png_bytep new_row);
;09DC: xxxxxxxx yyyyyyyy ; 277: int png_sig_cmp(png_bytep sig, png_size_t start, png_size_t num_to_check);
;09E0: xxxxxxxx yyyyyyyy ; 278: int setjmp(jmp_buf jmpbuf);
;09E4: xxxxxxxx yyyyyyyy ; 279: void longjmp(jmp_buf, int);
;09E8: xxxxxxxx yyyyyyyy ; 27A: int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size);
;09EC: xxxxxxxx yyyyyyyy ; 27B: int inflate (z_streamp strm, int flush);
;09F0: xxxxxxxx yyyyyyyy ; 27C: int inflateEnd (z_streamp strm);
;09F4: xxxxxxxx yyyyyyyy ; 27D: int memcmp (const void *m1,const void *m2,int n);
;09F8: xxxxxxxx yyyyyyyy ; 27E: int strncmp(const char *s1, const char *s2, int len);
;09FC: xxxxxxxx yyyyyyyy ; 27F: char *strncpy (char *dest,const char *source,int maxlen);
;0A00: xxxxxxxx yyyyyyyy ; 280: char *strcat(char *dest, const char *src);
;0A04: xxxxxxxx yyyyyyyy ; 281: void GuiObject_SetTitleType(GUI *gui, int type);
;0A08: xxxxxxxx yyyyyyyy ; 282: void GUIonMessage_SetItemDisabled (void * msg, int Disabled);
;0A0C: xxxxxxxx yyyyyyyy ; 283: int REQUEST_IMAGEHANDLER_INTERNAL_REGISTER(const int * __zero,u16 ImageHandle,u16*,u16*,int unk, u16 * ImageID ,char * error);
;0A10: xxxxxxxx yyyyyyyy ; 284: int REQUEST_IMAGEHANDLER_INTERNAL_UNREGISTER (const int * __zero,u16 ImageHandle,u16* ,u16* ,int ImageID, int unk_1,char * error);





;locale=Russian_Russia.1251
