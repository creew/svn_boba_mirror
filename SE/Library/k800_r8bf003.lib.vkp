;K800 SW-R8BF003
;elf library
;v
;(c) Hussein , IronMaster
;(p) hippy dave

+45D1FC00
448: 00000000 94300020 ; 112: void memset(void *mem,char chr,int size);
44C: 00000000 18CB3F44 ; 113: int memcpy(void *dest,const void *source,int cnt);
450: 00000000 95A26744 ; 114: int sprintf(char *buf, const char *fmt, ...);
454: 00000000 5DA86744 ; 115: int snwprintf(wchar_t* buffer, int size, const wchar_t* fmt, ...);
458: 00000000 F145F944 ; 116: int _fopen(const wchar_t *filpath, const wchar_t *filname,unsigned int mode , unsigned int rights, unsigned int __0);
45C: 00000000 BD5BF944 ; 117: int fclose(int file);
460: 00000000 455EF944 ; 118: int fread(int file , void *ptr, int size);
464: 00000000 1160F944 ; 119: int fwrite(int file , const void *ptr, int size);
468: 00000000 55B79844 ; 11A: int _wstat(short *path, void *statbuf)
46C: 00000000 41CE2B45 ; 11B: int fputs(const char *s, int file)
470: 00000000 854FF944 ; 11C: int fstat(const wchar_t * path, const wchar_t *fname , FSTAT * fstat_stuct);
474: 00000000 A525F944 ; 11D: void * AllocDirHandle(const wchar_t * path);
478: 00000000 6527F944 ; 11E: void *GetFname(void *, void*);
47C: 00000000 291FFD44 ; 11F: void * DataBrowserDesc_Create(void);
480: 00000000 F521FD44 ; 120: void DataBrowserDesc_SetStyle(void * db , int style);
484: 00000000 2D22FD44 ; 121: void DataBrowserDesc_SetHeaderText(void * db , int StrID);
488: 00000000 1522FD44 ; 122: void DataBrowserDesc_SetFolders(void * db , wchar_t const ** FolderList);
48C: 00000000 3522FD44 ; 123: void DataBrowserDesc_SetOKSoftKeyText(void * db , int StrID);
490: 00000000 49E5FC44 ; 124: void DataBrowser_Create(void * db);
494: 00000000 DD1FFD44 ; 125: void DataBrowserDesc_Destroy(void * db);
498: 00000000 D576F944 ; 126: wchar_t * getFileExtention(wchar_t * fnane);
49C: 00000000 D129F944 ; 127: int DataBrowser_isFileInListExt(const wchar_t * ext_table,const wchar_t * path ,const wchar_t *fname );
4A0: 00000000 B5B53A45 ; 128: void Timer_ReSet(u16 * timer ,int time, void (*onTimer)(u16 *timerID, LPARAM lparam), LPARAM lparam);
4A4: 00000000 81B53A45 ; 129: u16 Timer_Set(int time, void (*onTimer)(u16 timerID, LPARAM lparam), LPARAM lparam);
4A8: 00000000 0DB63A45 ; 12A: void Timer_Kill(u16 *timerID);
4AC: 00000000 D5E73A45 ; 12B: int CreateBook(void * mem, void (* onClose)(BOOK*), const PAGE_DESC * bp, const char * name, int __0xFFFFFFFF,int __0);
4B0: 00000000 FDE83A45 ; 12C: void BookObj_KillBook(void *Book);
4B4: 00000000 51E63A45 ; 12D: void BookObj_GotoPage(BOOK * book, const PAGE_DESC * page);
4B8: 00000000 B9E63A45 ; 12E: void BookObj_ReturnPage(BOOK * ,int);
4BC: 00000000 F1ED3A45 ; 12F: void FreeBook ( void *book);
4C0: 00000000 95CE3A45 ; 130: BOOK * FindBook(IS_NEEDED_BOOK);
4C4: 00000000 011D3C45 ; 131: BOOK * Find_StandbyBook(void);
4C8: 00000000 81EA3A45 ; 132: void BookObj_SetFocus(void *,int focus);
4CC: 00000000 61434645 ; 133: void GuiObject_SetTitleText (void * gui , int StrID);
4D0: 00000000 E53E4645 ; 134: void ShowWindow (void * gui);
4D4: 00000000 F1DA4145 ; 135: void SetCursorToItem ( void *obj , int item);
4D8: 00000000 353F4645 ; 136: void GUI_SetStyle(GUI *,int style);
4DC: 00000000 D9E54145 ; 137: int GUIonMessage_GetCreatedItemIndex ( void *msg);
4E0: 00000000 E5E54145 ; 138: char SetMenuItemText0 ( GUI_MESSAGE *, int StrID);
4E4: 00000000 15E64145 ; 139: char SetMenuItemText1 ( GUI_MESSAGE *, int StrID);
4E8: 00000000 F5E54145 ; 13A: char SetMenuItemText2 ( GUI_MESSAGE *, int StrID);
4EC: 00000000 05E64145 ; 13B: char SetMenuItemText3 ( GUI_MESSAGE *, int StrID);
4F0: 00000000 5DE64145 ; 13C: void SetListObjectItemIcon ( void *msg , int align , wchar_t iconID);
4F4: 00000000 798D4545 ; 13D: void GUIObject_SetHeaderText(void *gui , int StrID);
4F8: 00000000 05DB4145 ; 13E: int ListMenu_GetSelectedItem(GUI_LIST * );
4FC: 00000000 55DB4145 ; 13F: void SetMenuItemStyle( void *obj , int style);
500: 00000000 39224645 ; 140: void putchar( void *xx , int x, int y, int _zero, int zero1 , short wchar);
504: 00000000 A1234945 ;8141: IS_NEEDED_BOOK isScreenSaverBook(void);
508: 00000000 99394745 ; 142: void StatusIndication_SetItemText(void *gui,int item,int StrID);
50C: 00000000 45393C45 ; 143: void StatusIndication_ShowNotes(int StrID);
510: 00000000 955C3F45 ; 144: GUI * CreateStringInput(int,...);
514: 00000000 25FA4145 ; 145: GUI_ONEOFMANY * CreateOneOfMany(BOOK *);
518: 00000000 EDFB4145 ; 146: void OneOfMany_SetItemCount(GUI_ONEOFMANY * , int count);
51C: 00000000 09FC4145 ; 147: void OneOfMany_SetChecked(GUI_ONEOFMANY * , int checked);
520: 00000000 3DFC4145 ; 148: void OneOfMany_SetTexts(GUI_ONEOFMANY * , int * StrID , int Count);
524: 00000000 19FC4145 ; 149: int OneOfMany_GetSelected(GUI_ONEOFMANY * rb);
528: 00000000 75383C45 ; 14A: void StatusIndication_Item8_SetText(int StrID);
52C: 00000000 E1064845 ; 14B: void GUIObject_Softkey_SetAction(void * gui,u16 actionID,void (*proc)(BOOK *,void*));
530: 00000000 59074845 ; 14C: void GUIObject_Softkey_SetText(void * gui,u16 actionID , int StrID);
534: 00000000 15084845 ; 14D: void GUIObject_SoftKey_SetEnable(void *gui,u16 actionID,int ena);
538: 00000000 CD074845 ; 14E: void GUIObject_SoftKey_AddErrorStr(void *gui,u16 actionID,int StrID);
53C: 00000000 A5064845 ; 14F: void GUIObject_SoftKey_RemoveItem(void *gui,u16 actionID);
540: 00000000 A9074845 ; 150: void GUIObject_SoftKey_SetVisible(void *gui,u16 actionID,int visible);
544: 00000000 190A4845 ; 151: void GUIObject_SoftKey_SuppressDefaultAction(void *gui,u16 actionID);
548: 00000000 A949F544 ; 152: wchar_t* wstrcpy(wchar_t * dest, const wchar_t * source);
54C: 00000000 C149F544 ; 153: wchar_t* wstrncpy(wchar_t * dest, const wchar_t * source, int maxlen);
550: 00000000 ED49F544 ; 154: wchar_t* wstrcat(wchar_t * wstr, const wchar_t * subwstr);
554: 00000000 094AF544 ; 155: wchar_t *wstrncat(wchar_t *wstr, const wchar_t *subwstr , int maxlen);
558: 00000000 7949F544 ; 156: int wstrcmp(const wchar_t *wstr1, const wchar_t *wstr2);
55C: 00000000 6549F544 ; 157: int wstrlen(const wchar_t * wstr);
560: 00000000 2D5CF544 ; 158: wchar_t * str2wstr(wchar_t * wstr, const char * str);
564: 00000000 41A66744 ; 159: int strcmp(const char * str1, const char * str2);
568: 00000000 9DA66744 ; 15A: int strlen(const char *str);
56C: 00000000 854AF544 ; 15B: char * wstr2strn (char * str , const wchar_t * wstr, int maxlen);
570: 00000000 8D674445 ; 15C: int int2strID (int num);
574: 00000000 416A4445 ; 15D: int Str2ID(const void * wstr , int flag , int len);
578: 00000000 D56E4445 ; 15E: void StrID2Str(int StrID,char * str,int maxlen);
57C: 00000000 C56D4445 ; 15F: void TextID2wstr(int StrID,wchar_t * str,int maxlen);
580: 00000000 A56C4445 ; 160: int TextGetLength(int StrID);
584: 00000000 096C4445 ; 161: void TextFree(int StrID);
588: 00000000 0D4DEF44 ; 162: int AB_DEFAULTNBR_GET(int rec_num, void * mem_0x30, int * unk);
58C: 00000000 A59CEF44 ; 163: int AB_READSTRING(void * mem_0x30,int rec_num, int rec_item_num);
590: 00000000 719DEF44 ; 164: int AB_READPHONENBR(void * mem_0x30,int rec_num, int rec_item_num);
594: 00000000 299EEF44 ; 165: int AB_GETNBROFITEMS(int get_from,int unk_0);
598: 00000000 B1604445 ; 166: int PNUM_len(void *pnum);
59C: 00000000 F1E33345 ; 167: void PNUM2str(char *str,void *pnum,int len, int max_len);
5A0: 00000000 E53C4645 ; 168: DISP_OBJ * GUIObj_GetDISPObj (void * gui);
5A4: 00000000 F1F52B45 ; 169: LIST *List_New(void);
5A8: 00000000 2DF62B45 ; 16A: void List_Free(LIST *lst);
5AC: 00000000 A1F72B45 ; 16B: void ListElement_AddtoTop(LIST *lst,void *newElement);
5B0: 00000000 B1A3F444 ; 16C: int Gif2ID(u16 IMAGEHANDLE,const wchar_t * path, const wchar_t * fname,wchar_t * ID);
5B4: 00000000 89DEF444 ; 16D: int REQUEST_IMAGEHANDLER_INTERNAL_GETHANDLE(const int * __zero,u16 * IMAGEHANDLE,char * unk);
5B8: 00000000 D162E544 ; 16E: void REQUEST_DATEANDTIME_GET(const int * __zero , DATETIME *dt);
5BC: 00000000 C5F54845 ; 16F: void IndicationDevice_Backlight_FadeToLevel(int unk_zero ,int bl_level);
5C0: 00000000 89740845 ; 170: int GetFreeBytesOnHeap(void);
5C4: 00000000 A9EA3A45 ; 171: void BookObj_Hide(BOOK *,int display_type);
5C8: 00000000 B9EA3A45 ; 172: void BookObj_Show(BOOK *,int display_type);
5CC: 00000000 BD1E3C45 ; 173: void StartAPP (const wchar_t * appname);
5D0: 00000000 2DDC4145 ; 174: void ListMenu_SetOnMessages (GUI_LIST * , int (*proc)(GUI_MESSAGE *));
5D4: 00000000 01F73745 ; 175: char * manifest_GetParam(const char *buf, const char *param_name,int unk);
5D8: 00000000 B961F944 ; 176: int lseek(int file,int offset,int mode);
5DC: 00000000 E3241444 ;8177: int get_VBUFFER(void); //nullsub(void)
5E0: 00000000 F9F30445 ; 178: void SetLampLevel (int level); //nullsub(void)
5E4: 00000000 2DF72B45 ; 179: void * ListElement_Remove(LIST *lst,int index);
5E8: 00000000 F1D23E44 ; 17A: int GetCurrentPID(void);
5EC: 00000000 61F72B45 ; 17B: int ListElement_Prt2NumElement(LIST *lst,void *ptr);
5F0: 00000000 A8594344 ; 17C: union SIGNAL *alloc(OSBUFSIZE size,SIGSELECT signo);
5F4: 00000000 C4594344 ; 17D: union SIGNAL *receive(const SIGSELECT *sigsel);
5F8: 00000000 B4594344 ; 17E: void send(union SIGNAL **sig,PROCESS to);
5FC: 00000000 045A4344 ; 17F: PROCESS sender(union SIGNAL **sig);
600: 00000000 D4594344 ; 180: void free_buf(union SIGNAL **sig);
604: 00000000 A05A4344 ; 181: PROCESS create_process(int proc_type,char *name,OSENTRYPOINT *entrypoint,OSADDRESS stack_size,OSPRIORITY priority,OSTIME timeslice,PROCESS pid_block,void *redir_table,OSVECTOR vector,OSUSER user);
608: 00000000 C05C4344 ; 182: void start(PROCESS pid);
60C: 00000000 705B4344 ; 183: int get_ptype(PROCESS pid);
610: 00000000 BC5A4344 ; 184: PROCESS current_process(void);
614: 00000000 F4594344 ; 185: void delay(OSTIME timeout);
618: 00000000 BC5B4344 ; 186: OSBOOLEAN hunt(const char *name, OSUSER user, PROCESS *name_, union SIGNAL **hunt_sig);
61C: 00000000 E85B4344 ; 187: void kill_proc(PROCESS pid);
;0620: xxxxxxxx yyyyyyyy ;8188: OSBOOLEAN set_bp (PROCESS pid,OSADDRESS address,OSADDRESS attribute,union SIGNAL **trapsig);
;0624: xxxxxxxx yyyyyyyy ; 189: union SIGNAL *receive_w_tmo (OSTIME timeout, SIGSELECT *sel);
;0628: xxxxxxxx yyyyyyyy ;818A: OSBOOLEAN clear_bp (PROCESS pid, OSADDRESS addr);
680: 00000000 69A66744 ; 1A0: char* strcpy(char * dest, char * source);
684: 00000000 19F21045 ; 1A1: void *CreateMessage(int size,int ev,char *name);
688: 00000000 6DF21045 ; 1A2: void SendMessage(void **signal,int PID);
68C: 00000000 F5F21045 ; 1A3: void * WaitMessage(void *SIGSEL);
690: 00000000 09F31045 ; 1A4: int FreeMessage(void **Mess);
694: 00000000 D1660D45 ; 1A5: void SendDispatchMessage(int id, int unk_zero, int size,void *mess);
698: 00000000 B1BD3A45 ; 1A6: char * UIEventName(int event);
69C: 00000000 0C041720 ;81A7: int * MissedEvents(void);
6A0: 00000000 5DD23A45 ; 1A8: void UI_Event(int event);
6A4: 00000000 6DD23A45 ; 1A9: void UI_Event_wData(int event,void *message,void (*mfree)(void*));
6A8: 00000000 B5D23A45 ; 1AA: void UI_Event_toBookID(int event,int BookID);
6AC: 00000000 C9D23A45 ; 1AB: void UI_Event_toBookIDwData(int event,int BookID,void *message,void (*mfree)(void*));
6B0: 00000000 C1F92B45 ; 1AC: int ListElement_Find(LIST *lst,void *element, int (*cmp_proc)(void *,void *));
6B4: 00000000 C5F82B45 ; 1AD: void * ListElement_GetByIndex(LIST * , int index);
6B8: 00000000 69B06744 ; 1AE: wchar_t* wstrrchr(const wchar_t* wstr, wchar_t wchar);
6BC: 00000000 C5E53A45 ; 1AF: void BookObj_CallSubroutine(BOOK * , void * SubProcDesc);
6C0: 00000000 A9F72B45 ; 1B0: void ListElement_Add(LIST *lst,void *newElement);
6C4: 00000000 09F22344 ; 1B1: void debug_printf(const char * fmt,...);
6C8: 00000000 6DE21145 ; 1B2: int PlayFile(const wchar_t * path, const wchar_t * fname);
6D0: 00000000 A1533E45 ; 1B4: int REQUEST_PROFILE_GETACTIVEPROFILE(const int *__zero , int *level);
6D4: 00000000 FD533E45 ; 1B5: void REQUEST_PROFILE_SETACTIVEPROFILE(const int *__zero , int NUMprof);
6DC: 00000000 29204945 ; 1B7: int isKeylocked(void);
6E0: 00000000 399F0545 ;81B8: IS_NEEDED_BOOK isMediaPlayerVideoBook(void);
6EC: 00000000 99020E45 ; 1BB: void Vibra(int t1, int t2, int t3);
6F0: 00000000 B164E544 ; 1BC: int REQUEST_DATEFORMAT_GET(const int *SYNC, char *DateFormat);
6F4: 00000000 4565E544 ; 1BD: int REQUEST_TIMEFORMAT_GET(const int *SYNC, char *TimeFormat);
6F8: 00000000 55A73A45 ; 1BE: int Date2ID(DATE *, int TimeFormat,int);
6FC: 00000000 7DA63A45 ; 1BF: int Time2ID(TIME *, char TimeFormat,int);
700: 00000000 E9D84145 ; 1C0: GUI_LIST * CreateListObject(BOOK * , void * unk);
704: 00000000 19DB4145 ; 1C1: void SetNumOfMenuItem(void * , int item_count);
708: 00000000 84AA1620 ;81C2: LIST ** ROOT_APP(void);
70C: 00000000 45074845 ; 1C3: void SoftKey_AddHelpStr(void *gui,int msg,int StrID);
710: 00000000 39084845 ; 1C4: void SoftKey_SetItemAsSubItem(void *gui,int item,int subitem);
714: 00000000 C9483C45 ; 1C5: int REQUEST_SYSTEM_SHUTDOWN(void);
718: 00000000 D9483C45 ; 1C6: int REQUEST_SYSTEM_RESTART(void);
71C: 00000000 7D074845 ; 1C7: void SoftKeys_SetText(void *gui,int msg,int StrID,int StrID1);
720: 00000000 89994845 ; 1C8: int isRightNowBook(BOOK *);
724: 00000000 DD123C45 ; 1C9: int isVolumeControllerBook(BOOK *);
728: 00000000 794C4645 ; 1CA: GUI_TABMENUBAR * CreateTabMenuBar(BOOK *);
72C: 00000000 4D4D4645 ; 1CB: void TabMenuBar_SetTabCount(GUI_TABMENUBAR * , int count);
730: 00000000 014E4645 ; 1CC: void TabMenuBar_AssignGuiObj(GUI_TABMENUBAR * , int tab , GUI *);
734: 00000000 3D4E4645 ; 1CD: void TabMenuBar_SetTabIcon(GUI_TABMENUBAR *,int tab, wchar_t icon , int for_state);
738: 00000000 753C4645 ; 1CE: GUI *GUI_Free(GUI*);
73C: 00000000 F13F4645 ; 1CF: void InputFeedback_SetIcon(GUI *gui, wchar_t icon);
740: 00000000 39653F45 ; 1D0: int StringInput_GetStringAndLen (GUI*,wchar_t**,u16*);
74C: 00000000 F173F944 ; 1D3: int GetVolumeSize(char * volume, VOLUMESIZE *);
750: 00000000 65F44145 ; 1D4: GUI_NOFMANY * CreateNOfMany(BOOK *);
754: 00000000 A5F64145 ; 1D5: void NOfMany_SetTexts(GUI_NOFMANY * , int * StrIDtable, int items_count);
758: 00000000 29F64145 ; 1D6: void NOfMany_SetChecked(GUI_NOFMANY * , u16 * checked_table, int items_count);
75C: 00000000 F1F54145 ; 1D7: void NOfMany_SetCursor(GUI_NOFMANY * , int item);
760: 00000000 4DF64145 ; 1D8: int NOfMany_GetCheckedCount(GUI_NOFMANY *);
764: 00000000 3DF64145 ; 1D9: int NOfMany_GetChecked(GUI_NOFMANY * , u16 * buffer );
768: 00000000 9DF64145 ; 1DA: void NOfMany_SetonMessage(GUI_NOFMANY * , void * proc );
780: 00000000 D1FB4145 ; 1E0: void OneOfMany_SetFocused(GUI_ONEOFMANY * , int item);
784: 00000000 35FC4145 ; 1E1: void OneOfMany_SetonMessage(GUI_ONEOFMANY * , int (*proc)(GUI_MESSAGE *));
788: 00000000 F5CC3B45 ; 1E2: GUI_FEEDBACK * CreateFeedBack (int,...);
78C: 00000000 C1CD3B45 ; 1E3: void FeedBack_SetText(GUI_FEEDBACK*,int);
790: 00000000 7953AF44 ; 1E4: int GetBattaryState(const int * , BATT *);
794: 00000000 61174645 ; 1E5: void * get_DisplayGC (void);
798: 00000000 F5A14545 ; 1E6: void GetGuiRect(void*,RECT*);
79C: 00000000 391E4645 ; 1E7: void get_GC_RECT(void*,RECT*);
7A0: 00000000 3D214645 ; 1E8: int get_GC_xx(void * GC);
7A4: 00000000 31214645 ; 1E9: void *set_GC_xx(void * GC, int);
7A8: 00000000 E91D4645 ; 1EA: void GC_validate_RECT(void * GC , RECT*);
7AC: 00000000 35EB3A45 ; 1EB: void addGui2book(BOOK*,GUI*);
7B0: 00000000 25CA4545 ; 1EC: void DrawRect(int x1, int y1,int x2 ,int y2,int pen_color,int brush_color);
7B4: 00000000 25CD4545 ; 1ED: void DrawString(int StrID,int align,int x1,int y1,int x2,int y2,int unk,int unk1,int pen_color ,int brush_color);
7B8: 00000000 11F03A45 ; 1EE: void addGui2XGuiList (void* xguilist , GUI*);
7BC: 00000000 61A04545 ; 1EF: void InvalidateRect(DISP_OBJ *,RECT*);
7C0: 00000000 993B4645 ; 1F0: int CreateObject(GUI*,void (*)(DISP_DESC *),void (*)(DISP_DESC *),BOOK *,void(*)(),int,int size_obj);
7C4: 00000000 81D74545 ; 1F1: int SetFont(int);
7C8: 00000000 44F81620 ;81F2: DISP_OBJ ** StatusRow_p(void);
7CC: 00000000 95CF3A45 ; 1F3: int root_list_get_session_count(void);
7D0: 00000000 A1CF3A45 ; 1F4: UI_APP_SESSION *root_list_get_session(int num_session);
7D4: 00000000 9DC83A45 ; 1F5: BOOK *SESSION_GetTopBook(UI_APP_SESSION *);
7D8: 00000000 51D13B45 ; 1F6: int MainInput_getVisible(GUI *);
7DC: 00000000 5DD13B45 ; 1F7: int MainInput_strlen(GUI *);
7E0: 00000000 75D13B45 ; 1F8: char * MainInput_getPNUM(GUI *);
7E4: 00000000 81D13B45 ; 1F9: int MainInput_isPlus(GUI *);
7E8: 00000000 B1EE3A45 ; 1FA: int BOOK_GetBookID(BOOK * );
7EC: 00000000 E1AF6744 ; 1FB: int wstrncmp(const wchar_t*,const wchar_t*,int);
7F0: 00000000 E5B14545 ; 1FC: int DISP_OBJ_GetAbsoluteXPos(DISP_OBJ *);
7F4: 00000000 19B24545 ; 1FD: int DISP_OBJ_GetAbsoluteYPos(DISP_OBJ *);
7F8: 00000000 11A54545 ; 1FE: WINDOW * DISP_OBJ_GetWindow(DISP_OBJ *);
7FC: 00000000 91324845 ; 1FF: int GetThemeColor(int , int);
800: 00000000 794C3E45 ; 200: int REQUEST_SETTING_SILENCE_SET(const int * __zero,u16 profile,u16 value);
804: 00000000 214C3E45 ; 201: int REQUEST_SETTING_SILENCE_GET(const int * __zero,u16 profile, char * silence_mode);
808: 00000000 B1CDEE44 ; 202: void VCALL_Init (void* vc);
80C: 00000000 A9CEEE44 ; 203: void VCALL_SetName (void * vc , wchar_t * name ,unsigned short name_len);
810: 00000000 09CFEE44 ; 204: void VCALL_SetNameIcon (void * vc , wchar_t icon);
814: 00000000 C9CEEE44 ; 205: void VCALL_SetNumber (void * vc , wchar_t * number , unsigned short num_len);
818: 00000000 EDCEEE44 ; 206: void VCALL_SetHZ1 (void * vc, int , u16 );
81C: 00000000 F9CEEE44 ; 207: void VCALL_SetHZ2 (void * vc , u16 );
820: 00000000 09C9EE44 ; 208: void MakeVoiceCall (int SessioID , void * vc ,int flag);
824: 00000000 E3241444 ; 209: int isDirectory (wchar_t * path ,wchar_t * filename , int * error ); //nullsub(void)
828: 00000000 C950F944 ; 20A: void FileDelete (wchar_t * path ,wchar_t * filename , int * error );
82C: 00000000 913E4645 ; 20B: void SetFocus (GUI * , int);
830: 00000000 5DFF1345 ; 20C: int CreateSMSCont (int, void*);
834: 00000000 FD051445 ; 20D: int FreeSMSCont (void*);
838: 00000000 35011445 ; 20E: int PrepareSMSCont (void*,u16*,u16*,int,int);
83C: 00000000 5D051445 ; 20F: int CteateNewMessage (int,void*,int);
840: 00000000 A0FAB845 ;8210: void * get_APP_DESC_TABLE(void);
844: 00000000 950E4645 ; 211: C_INTERFACE *Window_GetComponentInterface(WINDOW*);
848: 00000000 01A0EF44 ; 212: int AB_POSITIONNBR_GET(void * ab_name,char * ,u16 * ,void * ab_num);
84C: 00000000 299FEF44 ; 213: int AB_NAME_ITEM2StrID(void * ab_name);
850: 00000000 719FEF44 ; 214: int AB_NUM_ITEM2StrID(void * ab_num_item);
854: 00000000 73251444 ; 215: int GetABRecNum(AB_GET_STRUCT *); //nullsub(void)
858: 00000000 EC60B445 ;8216: AB_ITEM_DESC * get_AB_ITEMS_DESC();
85C: 00000000 F9EBB944 ; 217: GUI * SBY_GetMainInput(BOOK * StandBy);
860: 00000000 F5EBB944 ; 218: GUI * SBY_GetStatusIndication(BOOK * StandBy);
864: 00000000 053EE744 ; 219: int REQUEST_PHONEBOOK_ACCESSSTATUS_TOTAL_GET(const int * __zero, int *);
868: 00000000 FC5B0820 ;821A: int * PID_MMI(void);
874: 00000000 41994545 ; 21D: DISP_OBJ* DISPBASE_GetFocused(int display);
878: 00000000 F59E4545 ; 21E: char DISP_OBJ_getVisible(DISP_OBJ*);
87C: 00000000 19ECA144 ; 21F: DISP_DESC* DISP_OBJ_GetDESC (DISP_OBJ*);
880: 00000000 A15F4545 ; 220: void DISP_DESC_SetName (DISP_DESC* , const char * name);
884: 00000000 A5AF4545 ; 221: char* DISP_OBJ_GetName (DISP_OBJ *);
888: 00000000 A55F4545 ; 222: void DISP_DESC_SetSize (DISP_DESC* , u16 size);
;088C: xxxxxxxx yyyyyyyy ; 223: u16 DISP_DESC_GetSize (DISP_OBJ *);
890: 00000000 A95F4545 ; 224: void DISP_DESC_SetOnCreate (DISP_DESC* , DISP_OBJ_ONCREATE_METHOD);
894: 00000000 31604545 ; 225: DISP_OBJ_ONCREATE_METHOD DISP_OBJ_GetOnCreate (DISP_OBJ *);
898: 00000000 AD5F4545 ; 226: void DISP_DESC_SetOnClose (DISP_DESC* , DISP_OBJ_ONCLOSE_METHOD);
89C: 00000000 4D604545 ; 227: DISP_OBJ_ONCLOSE_METHOD DISP_OBJ_GetOnClose (DISP_OBJ *);
8A0: 00000000 B15F4545 ; 228: void DISP_DESC_SetOnRedraw (DISP_DESC* , DISP_OBJ_ONREDRAW_METHOD);
8A4: 00000000 69604545 ; 229: DISP_OBJ_ONREDRAW_METHOD DISP_OBJ_GetOnRedraw (DISP_OBJ *);
8A8: 00000000 B95F4545 ; 22A: void DISP_DESC_SetOnKey (DISP_DESC* , DISP_OBJ_ONKEY_METHOD);
8AC: 00000000 A1604545 ; 22B: DISP_OBJ_ONKEY_METHOD DISP_OBJ_GetOnKey (DISP_OBJ *);
;08B0: xxxxxxxx yyyyyyyy ; 22C: void DISP_DESC_SetMethod03 (DISP_DESC* ,void (*)(void*));
;08B4: xxxxxxxx yyyyyyyy ; 22D: DISP_OBJ_METHOD DISP_OBJ_GetMethod03 (DISP_OBJ *);
;08B8: xxxxxxxx yyyyyyyy ; 22E: void DISP_DESC_SetMethod04 (DISP_DESC* ,void (*)(void*));
;08BC: xxxxxxxx yyyyyyyy ; 22F: DISP_OBJ_METHOD DISP_OBJ_GetMethod04 (DISP_OBJ *);
;08C0: xxxxxxxx yyyyyyyy ; 230: void DISP_DESC_SetMethod05 (DISP_DESC* ,void (*)(void*));
;08C4: xxxxxxxx yyyyyyyy ; 231: DISP_OBJ_METHOD DISP_OBJ_GetMethod05 (DISP_OBJ *);
8C8: 00000000 BD5F4545 ; 232: void DISP_DESC_SetMethod06 (DISP_DESC* ,DISP_OBJ_METHOD);
8CC: 00000000 BD604545 ; 233: DISP_OBJ_METHOD DISP_OBJ_GetMethod06 (DISP_OBJ *);
;08D0: xxxxxxxx yyyyyyyy ; 234: void DISP_DESC_SetMethod07 (DISP_DESC* ,void (*)(void*));
;08D4: xxxxxxxx yyyyyyyy ; 235: DISP_OBJ_METHOD DISP_OBJ_GetMethod07 (DISP_OBJ *);
8D8: 00000000 C55F4545 ; 236: void DISP_DESC_SetMethod08 (DISP_DESC* ,DISP_OBJ_METHOD);
8DC: 00000000 F5604545 ; 237: DISP_OBJ_METHOD DISP_OBJ_GetMethod08 (DISP_OBJ *);
8E0: 00000000 F5604545 ; 238: void DISP_DESC_SetMethod09 (DISP_DESC* ,void (*)(void*));
;08E4: xxxxxxxx yyyyyyyy ; 239: DISP_OBJ_METHOD DISP_OBJ_GetMethod09 (DISP_OBJ *);
;08E8: xxxxxxxx yyyyyyyy ; 23A: void DISP_DESC_SetMethod0A (DISP_DESC* ,void (*)(void*));
;08EC: xxxxxxxx yyyyyyyy ; 23B: DISP_OBJ_METHOD DISP_OBJ_GetMethod0A (DISP_OBJ *);
;08F0: xxxxxxxx yyyyyyyy ; 23C: void DISP_DESC_SetMethod0B (DISP_DESC* ,void (*)(void*));
;08F4: xxxxxxxx yyyyyyyy ; 23D: DISP_OBJ_METHOD DISP_OBJ_GetMethod0B (DISP_OBJ *);
;08F8: xxxxxxxx yyyyyyyy ; 23E: void DISP_DESC_SetMethod0C (DISP_DESC* ,void (*)(void*));
;08FC: xxxxxxxx yyyyyyyy ; 23F: DISP_OBJ_METHOD DISP_OBJ_GetMethod0C (DISP_OBJ *);
900: 00000000 FD07F744 ; 240: void JavaSession_Manager (int cmd);
904: 00000000 8DE92D45 ; 241: int JavaSession_GetName(void); //nullsub(void)
908: 00000000 716B4445 ; 242: int TextCopyId(int);
90C: 00000000 51EE3A45 ; 243: UI_APP_SESSION *Book_GetSession(BOOK*);
910: 00000000 75E64145 ; 244: void List2lineSetAsSubitem (void* msg,int unk,int n_sub_items);
914: 00000000 EDE64145 ; 245: void List2lineSubitemAddText(void* msg,int StrID);
918: 00000000 E1E64145 ; 246: int GUIonMessage_GetCreatedSubItemParrentIndex(void * msg);
91C: 00000000 85063245 ; 247: void GoMusic(void);
920: 00000000 6D030E45 ; 248: void Vibra_Off (int t1);
928: 00000000 71E21145 ; 24A: int PlayFileV(const wchar_t * path,const wchar_t * fname, int vol);
92C: 00000000 6DF70D45 ; 24B: int GetSilent(void);
930: 00000000 A5CF0D45 ; 24C: int GetVibrator(int ignorevibrator,int ignoresilent);
934: 00000000 E5050E45 ; 24D: int GetAudioSettings(int what, char* retvalue);
938: 00000000 65DB2344 ; 24E: int GetChipID(void);
948: 00000000 D5E64145 ; 252: int List2LineGetCurrentIndex(void * msg);
94C: 00000000 C9E64145 ; 253: int GUIonMessage_GetCurrentItemIndex(void * msg);
950: 00000000 E128F944 ; 254: void DestroyDirHandle(void *handle);
954: 00000000 8824B645 ;8255: DB_EXT *LastExtDB(void);
958: 00000000 A588FC44 ; 256: void GetOtherExtMethods(FILESUBROUTINE **);
95C: 00000000 099A3B45 ; 257: void MessageBox(int HeaderStrID,int MessageStrID,wchar_t IconID, int style /*1 or 2*/,int time,BOOK * unk);
960: 00000000 816E4745 ; 258: int Display_GetHeight(int Display);
964: 00000000 8D6E4745 ; 259: int Display_GetWidth(int Display);
968: 00000000 1DE21145 ; 25A: void PlaySystemSound (int SndNumber);
974: 00000000 414D4645 ; 25D: int TabMenuBar_GetFocusedTabIndex(GUI_TABMENUBAR * );
978: 00000000 314D4645 ; 25E: void TabMenuBar_SetTabFocused(GUI_TABMENUBAR * , int tab_num);
97C: 00000000 45204645 ; 25F: int GC_GetPenColor (void* GC);
980: 00000000 09204645 ; 260: void GC_SetPenColor(void* GC , int pen_color);
984: 00000000 491C4645 ; 261: void GC_SetPixel (void* GC,int x1,int y1,int color);
988: 00000000 C1274645 ; 262: void GC_DrawLine(void* GC,int x1, int y1, int x2, int y2);
98C: 00000000 4D294645 ; 263: void GC_DrawFRect (void* GC,int color,int x1,int y1,int x2 ,int y2);
990: 00000000 151D4645 ; 264: int GC_DrawBitmap(void *GC, int x1, int y1, int x2, int y2, int * bmp);
994: 00000000 6983BF44 ; 265: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
998: 00000000 B584BF44 ; 266: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
99C: 00000000 0D6BBF44 ; 267: png_infop png_create_info_struct(png_structp png_ptr);
9A0: 00000000 416BBF44 ; 268: void png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr);
9A4: 00000000 4183BF44 ; 269: void png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr, png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn, png_progressive_end_ptr end_fn);
9A8: 00000000 0173BF44 ; 26A: void png_process_data(png_structp png_ptr, png_infop info_ptr, png_bytep buffer, png_size_t buffer_size);
9AC: 00000000 8984BF44 ; 26B: void png_read_update_info(png_structp png_ptr, png_infop info_ptr);
9B0: 00000000 6583BF44 ; 26C: png_voidp png_get_progressive_ptr(png_structp png_ptr);
9B4: 00000000 C96FBF44 ; 26D: png_uint_32 png_get_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
9B8: 00000000 5586BF44 ; 26E: void png_set_strip_16(png_structp png_ptr);
9BC: 00000000 6186BF44 ; 26F: void png_set_gray_1_2_4_to_8(png_structp png_ptr);
9C0: 00000000 8586BF44 ; 270: void png_set_gray_to_rgb(png_structp png_ptr);
9C4: 00000000 9D6FBF44 ; 271: png_uint_32 png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag);
9C8: 00000000 7986BF44 ; 272: void png_set_tRNS_to_alpha(png_structp png_ptr);
9CC: 00000000 BDB3BF44 ; 273: void png_set_filler(png_structp png_ptr, png_uint_32 filler, int flags);
9D0: 00000000 6186BF44 ; 274: void png_set_palette_to_rgb(png_structp png_ptr);
9D4: 00000000 B56FBF44 ; 275: png_uint_32 png_get_rowbytes(png_structp png_ptr, png_infop info_ptr);
9D8: 00000000 2183BF44 ; 276: void png_progressive_combine_row(png_structp png_ptr, png_bytep old_row, png_bytep new_row);
9DC: 00000000 056ABF44 ; 277: int png_sig_cmp(png_bytep sig, png_size_t start, png_size_t num_to_check);
9E0: 00000000 3C0E4044 ; 278: int setjmp(jmp_buf jmpbuf);
9E4: 00000000 600E4044 ; 279: void longjmp(jmp_buf, int);
9E8: 00000000 21C0BF44 ; 27A: int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size);
9EC: 00000000 C1C1BF44 ; 27B: int inflate (z_streamp strm, int flush);
9F0: 00000000 21D4BF44 ; 27C: int inflateEnd (z_streamp strm);
9F4: 00000000 0C310020 ; 27D: int memcmp (const void *m1,const void *m2,int n);
9F8: 00000000 D9A66744 ; 27E: int strncmp(const char *s1, const char *s2, int len);
9FC: 00000000 0DA76744 ; 27F: char *strncpy (char *dest,const char *source,int maxlen);
A00: 00000000 09A66744 ; 280: char *strcat(char *dest, const char *src);
A04: 00000000 45434645 ; 281: void GuiObject_SetTitleType(GUI *gui, int type);
A08: 00000000 81E64145 ; 282: void GUIonMessage_SetItemDisabled (void * msg, int Disabled);
A0C: 00000000 F1DEF444 ; 283: int REQUEST_IMAGEHANDLER_INTERNAL_REGISTER(const int * __zero,u16 ImageHandle,wchar_t *path,wchar_t *fname,int unk, wchar_t * ImageID ,char * error);
A10: 00000000 A1DFF444 ; 284: __thumb int REQUEST_IMAGEHANDLER_INTERNAL_UNREGISTER (const int * __zero,u16 ImageHandle,u16* ,u16* ,wchar_t ImageID, int unk_1,char * error);
A14: 00000000 A06C2E20 ;8285: SURFACE ** get_Surfaces(void);
A18: 00000000 9539D444 ; 286: int iconidname2id(const wchar_t* idname,int maxnamelen,int *id);
A1C: 00000000 21E2E444 ; 287: int textidname2id(const wchar_t* idname,int maxnamelen,int* id);
A20: 00000000 BDDC4145 ; 288: void ListMenu_SetNoItemText(GUI_LIST *, int str);
A28: 00000000 E5252145 ;828A: IS_NEEDED_BOOK isFmRadioBook(void);
A2C: 00000000 FD140445 ;828B: IS_NEEDED_BOOK isAudioPlayerBook(void);
A30: 00000000 8D560445 ; 28C: void PlayerControl(BOOK *AudioPlayerBook, int);
A34: 00000000 0D082145 ; 28D: void SwitchRadioStationFromList(BOOK *FmRadioBook, int);
A38: 00000000 11D84845 ; 28E: void Shortcut_Run (wchar_t * shortcut_name);
A3C: 00000000 2D1BF944 ; 28F: int mkdir(const wchar_t* path);
A40: 00000000 1922F944 ; 290: int rmdir(const wchar_t* path, int zero);
A44: 00000000 F94FF944 ; 291: int chmod(const wchar_t* path, const wchar_t* fname, int amode);
A48: 00000000 E955F944 ; 292: int rename(const wchar_t* oldpath, const wchar_t* oldfname, const wchar_t* newpath, const wchar_t* newfname, int zero);
A4C: 00000000 19DD4545 ; 293: int GetImageWidth(wchar_t ImageID);
A50: 00000000 2DDD4545 ; 294: int GetImageHeight(wchar_t ImageID);
A54: 00000000 E1CAEB44 ; 295: void * CallID_GetCallStatusDesc(int CallID);
A58: 00000000 05C1EB44 ; 296: wchar_t * CallStatusDesc_GetName(void * CallStatusDesc);
A5C: 00000000 05FA2B45 ; 297: void List_FreeElements(LIST *,int (*cmp_proc)(void * elem_from_list),void (*freefunc)(void * elem_from_list));
A60: 00000000 A5A76744 ; 298: char * strstr(const char * str1,const char * str2);
A64: 00000000 9D4F4B45 ; 299: int GPRS_GetLastSessionInfo(int,GPRS_SESSION_INFO *);
A68: 00000000 455DF544 ; 29A: int wstrcmpni(const wchar_t * wstr1,const wchar_t * wstr2,int len);
A6C: 00000000 51AF3A45 ; 29B: int wtoi(const wchar_t * wstr,int len,int * dest);
A70: 00000000 D1FD1045 ; 29C: __thumb void DATE_GetWeekDay(DATE *,char * dest);
A74: 00000000 C518E844 ; 29D: __thumb void Cale_GetSettings(int setID,void *);
A78: 00000000 A9B06744 ; 29E: __thumb wchar_t * wstrwstr(const wchar_t * wstr1,const wchar_t * wstr2);
A7C: 00000000 895DF544 ; 29F: __thumb int wstrcmpi(const wchar_t *ws1, const wchar_t *ws2);
A80: 00000000 29AF6744 ; 2A0: __thumb wchar_t * wstrchr(const wchar_t * source,wchar_t chr);
A84: 00000000 650A4845 ; 2A1: void GUIObject_HideSoftkeys(void *gui);
A88: 00000000 710A4845 ; 2A2: void GUIObject_ShowSoftkeys(void *gui);
A8C: 00000000 21D84745 ; 2A3: DISP_OBJ* DispObject_SoftKeys_Get(void);
A90: 00000000 0D2E4545 ; 2A4: __thumb int StandbyBackground_SetImage(int type,int,int,const wchar_t* path,const wchar_t* fname,int);
A94: 00000000 F1474745 ; 2A5: __thumb GUI *CreateYesNoQuestionVA(int zero, ...);
A98: 00000000 CDDE4145 ; 2A6: void ListMenu_SetSecondLineText(GUI_LIST *,int elem_num,int StrID);
A9C: 00000000 55BEFB44 ; 2A7: void _REQUEST_OAF_START_APPLICATION(const int * __one,int __zero,MIDP_DESC *,int ___zero);
AA0: 00000000 D971F944 ; 2A8: int FSX_isNameInvalid(wchar_t * name);
AA4: 00000000 1D22FD44 ; 2A9: void DataBrowserDesc_SetFoldersNumber(void * DataBrowserDesc,int state);
AA8: 00000000 ED21FD44 ; 2AA: void DataBrowserDesc_SetActions(void * DataBrowserDesc,char * actions);
AAC: 00000000 5D21FD44 ; 2AB: void DataBrowserDesc_SetSelectAction(void * DataBrowserDesc,int state);
AB0: 00000000 6521FD44 ; 2AC: void DataBrowserDesc_SetSelectActionOnFolders(void * DataBrowserDesc,int state);
AB4: 00000000 3921FD44 ; 2AD: void DataBrowserDesc_SetBookID(void * DataBrowserDesc,int BookID);
AB8: 00000000 E120FD44 ; 2AE: void DataBrowserDesc_SetItemFilter(void * DataBrowserDesc,int (*proc)(const wchar_t * ExtList,const wchar_t * ItemPath,const wchar_t * ItemName));
ABC: 00000000 5522FD44 ; 2AF: void DataBrowserDesc_SetOption(void * DataBrowserDesc,char * option);
AC0: 00000000 E922FD44 ; 2B0: void DataBrowserDesc_SetOpenEmptyFolder(void * DataBrowserDesc,int state);
AC4: 00000000 E920FD44 ; 2B1: void DataBrowserDesc_SetFileExtList(void * DataBrowserDesc,const wchar_t * ExtList);
AC8: 00000000 09C6FD44 ; 2B2: void FSX_RemoveIllegalSymbolsName(FILEITEM *);
ACC: 00000000 71BEFD44 ; 2B3: FILEITEM * DataBrowser_ItemDesc_Create(void);
AD0: 00000000 61BFFD44 ; 2B4: void DataBrowser_ItemDesc_Destroy(FILEITEM *);
AD4: 00000000 212C4745 ; 2B5: __thumb GUI *CreateDateInputVA(int zero, ...);
AD8: 00000000 11444745 ; 2B6: __thumb GUI *CreateTimeInputVA(int zero, ...);
ADC: 00000000 85653F45 ; 2B7: __thumb void StringInput_SetCursorPosition(GUI *,u16 curs_pos,char unk);
AE0: 00000000 51E63A45 ; 2B8: __thumb void BookObj_CallPage(BOOK * book, const PAGE_DESC * page);
AE4: 00000000 252E4745 ; 2B9: __thumb unsigned int DateInput_GetDateInt(void *dateinp_msg);
AE8: 00000000 59464745 ; 2BA: __thumb unsigned int TimeInput_GetTimeInt(void *timeinp_msg);
;0AEC: xxxxxxxx yyyyyyyy ;82BB: FONT_DESC *GetFontDesc(void);
;0AF0: xxxxxxxx yyyyyyyy ;82BC: int *GetFontCount();
AF4: 00000000 25214645 ; 2BD: __thumb int GC_GetBrushColor(void* GC);
AF8: 00000000 E5204645 ; 2BE: __thumb void GC_SetBrushColor(void* GC , int brush_color);
AFC: 00000000 95294645 ; 2BF: __thumb void GC_DrawRoundRect(void* GC ,RECT *,int arcWidth,int arcHeight,int border_flag,int fill_flag);
;0B00: xxxxxxxx yyyyyyyy ; 2C0: BOOK * MenuBook_Desktop(int mode,int BookID);
B04: 00000000 A9534845 ; 2C1: __thumb wchar_t * MenuBook_Desktop_GetSelectedItemID(BOOK * MenuBook_Desktop);
B08: 00000000 CDB84745 ; 2C2: __thumb void BookObj_Softkey_SetAction(BOOK *,int actionID,void (*proc)(BOOK *,void*));
B0C: 00000000 05B94745 ; 2C3: __thumb void BookObj_Softkey_SetText(BOOK *,int actionID,int StrID);
B10: 00000000 61CE3A45 ; 2C4: __thumb BOOK * Root_GetBookByID(int BookID);
;0B14: xxxxxxxx yyyyyyyy ; 2C5: GUI_FEEDBACK *TextFeedbackWindow(BOOK *bk, int zero);
;0B18: xxxxxxxx yyyyyyyy ; 2C6: void Feedback_SetKeyHook(GUI_FEEDBACK *, void (*hook)(BOOK *bk, int key, int unk, int unk2));
;0B1C: xxxxxxxx yyyyyyyy ; 2C7: void Feedback_SetOnClose(GUI_FEEDBACK *, void (*OnClose)(BOOK *bk));
;0B20: xxxxxxxx yyyyyyyy ; 2C8: void Feedback_SetTimeout(GUI_FEEDBACK *, int time_ms);
;0B24: xxxxxxxx yyyyyyyy ; 2C9: void Feedback_SetTextExtended(GUI_FEEDBACK *, STRID text, int where);
;0B28: xxxxxxxx yyyyyyyy ; 2CA: void TabMenuBar_SetOnTabSwitch(GUI_TABMENUBAR *,void (*proc)(BOOK *,int act_tab));
;0B2C: xxxxxxxx yyyyyyyy ; 2CB: STRID KeyCode2Name(int key_code);
;0B30: xxxxxxxx yyyyyyyy ; 2CC: int ImageID_Get(const wchar_t * fpath,const wchar_t * fname,wchar_t * imageID);
;0B34: xxxxxxxx yyyyyyyy ; 2CD: void ImageID_Free(wchar_t imageID);
;0B38: xxxxxxxx yyyyyyyy ; 2CE: SUB_EXECUTE *DataBrowser_CreateSubExecute(int BookID, FILEITEM *f);
;0B3C: xxxxxxxx yyyyyyyy ; 2CF: int DataBrowser_ExecuteSubroutine(SUB_EXECUTE *sub, int action, u16 *unk);
;0B40: xxxxxxxx yyyyyyyy ; 2D0: int DataBrowser_ItemDesc_SetFname(FILEITEM *f, const wchar_t *fname);
;0B44: xxxxxxxx yyyyyyyy ; 2D1: int DataBrowser_ItemDesc_SetPath(FILEITEM *f, const wchar_t *fpath);
;0B48: xxxxxxxx yyyyyyyy ; 2D2: wchar_t *DataBrowser_ItemDesc_GetFname(FILEITEM *f);
;0B4C: xxxxxxxx yyyyyyyy ; 2D3: wchar_t *DataBrowser_ItemDesc_GetPath(FILEITEM *f);
;0B50: xxxxxxxx yyyyyyyy ; 2D4: int DataBrowser_ItemDesc_SetFnameAndContentType(FILEITEM *f, const wchar_t *fname);
;0B54: xxxxxxxx yyyyyyyy ; 2D5: int DataBrowser_ItemDesc_SetPathAndContentType(FILEITEM *f, const wchar_t *fpath);
;0B58: xxxxxxxx yyyyyyyy ; 2D6: int JavaDialog_Init(int unk1,char * unk2,void ** JavaDesc);
;0B5C: xxxxxxxx yyyyyyyy ; 2D7: void JavaDialog_Uninit(int unk1);
;0B60: xxxxxxxx yyyyyyyy ; 2D8: int JavaAppDesc_Get(int unk1,void ** JavaDesc);
;0B64: xxxxxxxx yyyyyyyy ; 2D9: int JavaAppDesc_GetFirstApp(void * JavaDesc);
;0B68: xxxxxxxx yyyyyyyy ; 2DA: int JavaAppDesc_GetNextApp(void * JavaDesc);
;0B6C: xxxxxxxx yyyyyyyy ; 2DB: int JavaAppDesc_GetJavaAppInfo(void * JavaDesc,int ID,wchar_t ** wstr);
;0B70: xxxxxxxx yyyyyyyy ; 2DC: void OrangeLED_Control(int _free_val, int or_LED_ID, int level, int fade_time);





;locale=Russian_Russia.1251
