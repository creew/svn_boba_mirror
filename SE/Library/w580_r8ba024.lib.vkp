;W580 SW-R8BA024
;Библиотека функций
;v
;(c) Hussein , IronMaster
;

+45C3FC00
0448: 00000000 50531444 ; 112: void memset(void *mem,char chr,int size);
044C: 00000000 40062D44 ; 113: int memcpy(void *dest,const void *source,int cnt);
0450: 00000000 756E5544 ; 114: int sprintf(char *buf, const char *fmt, ...);
0454: 00000000 3D745544 ; 115: int snwprintf(wchar_t* buffer, int size, const wchar_t* fmt, ...);
0458: 00000000 9571E844 ; 116: int _fopen(const wchar_t *filpath, const wchar_t *filname,unsigned int mode , unsigned int rights, unsigned int __0);
045C: 00000000 6187E844 ; 117: int fclose(int file);
0460: 00000000 E989E844 ; 118: int fread(int file , void *ptr, int size);
0464: 00000000 B58BE844 ; 119: int fwrite(int file , const void *ptr, int size);
0468: 00000000 E9C58544 ; 11A: int _wstat(short *path, void *statbuf)
046C: 00000000 25191B45 ; 11B: int fputs(const char *s, int file)
0470: 00000000 297BE844 ; 11C: int fstat(const wchar_t * path, const wchar_t *fname , FSTAT * fstat_stuct);
0474: 00000000 4951E844 ; 11D: DIR_HANDLE * AllocDirHandle(const wchar_t * path);
0478: 00000000 0953E844 ; 11E: FILELISTITEM *GetFname(DIR_HANDLE *, FILELISTITEM *);
047C: 00000000 0949EC44 ; 11F: void * DataBrowserDesc_Create(void);
0480: 00000000 CD4BEC44 ; 120: void DataBrowserDesc_SetStyle(void * db , int style);
0484: 00000000 FD4BEC44 ; 121: void DataBrowserDesc_SetHeaderText(void * db , int StrID);
0488: 00000000 E54BEC44 ; 122: void DataBrowserDesc_SetFolders(void * db , wchar_t const ** FolderList);
048C: 00000000 054CEC44 ; 123: void DataBrowserDesc_SetOKSoftKeyText(void * db , int StrID);
0490: 00000000 B111EC44 ; 124: void DataBrowser_Create(void * db);
0494: 00000000 BD49EC44 ; 125: void DataBrowserDesc_Destroy(void * db);
0498: 00000000 79A2E844 ; 126: wchar_t * getFileExtention(wchar_t * fnane);
049C: 00000000 7555E844 ; 127: int DataBrowser_isFileInListExt(const wchar_t * ext_table,const wchar_t * path ,const wchar_t *fname );
04A0: 00000000 ED9C2A45 ; 128: void Timer_ReSet(u16 * timer ,int time, void (*onTimer)(u16 timerID, LPARAM lparam), LPARAM lparam);
04A4: 00000000 B99C2A45 ; 129: u16 Timer_Set(int time, void (*onTimer)(u16 timerID, LPARAM lparam), LPARAM lparam);
04A8: 00000000 459D2A45 ; 12A: void Timer_Kill(u16 *timerID);
04AC: 00000000 FDCC2A45 ; 12B: int CreateBook(void * mem, void (* onClose)(BOOK*), const PAGE_DESC * bp, const char * name, int __0xFFFFFFFF,int __0);
04B0: 00000000 25CE2A45 ; 12C: void BookObj_KillBook(void *Book);
04B4: 00000000 79CB2A45 ; 12D: void BookObj_GotoPage(BOOK * book, const PAGE_DESC * page);
04B8: 00000000 E1CB2A45 ; 12E: void BookObj_ReturnPage(BOOK * ,int);
04BC: 00000000 19D32A45 ; 12F: void FreeBook ( BOOK *book);
04C0: 00000000 BDB32A45 ; 130: BOOK * FindBook(IS_NEEDED_BOOK);
04C4: 00000000 F9022C45 ; 131: BOOK * Find_StandbyBook(void);
04C8: 00000000 A9CF2A45 ; 132: void BookObj_SetFocus(void *,int focus);
04CC: 00000000 8D3C3645 ; 133: void GuiObject_SetTitleText (void * gui , int StrID);
04D0: 00000000 5D373645 ; 134: void ShowWindow (void * gui);
04D4: 00000000 0DCD3145 ; 135: void SetCursorToItem ( void *obj , int item);
04D8: 00000000 AD373645 ; 136: void GUI_SetStyle(GUI *,int style);
04DC: 00000000 5DD83145 ; 137: int GUIonMessage_GetCreatedItemIndex ( void *msg);
04E0: 00000000 69D83145 ; 138: char SetMenuItemText0 ( GUI_MESSAGE *, int StrID);
04E4: 00000000 99D83145 ; 139: char SetMenuItemText1 ( GUI_MESSAGE *, int StrID);
04E8: 00000000 79D83145 ; 13A: char SetMenuItemText2 ( GUI_MESSAGE *, int StrID);
04EC: 00000000 89D83145 ; 13B: char SetMenuItemText3 ( GUI_MESSAGE *, int StrID);
04F0: 00000000 E1D83145 ; 13C: void SetListObjectItemIcon ( void *msg , int align , wchar_t iconID);
04F4: 00000000 01863545 ; 13D: void GUIObject_SetHeaderText(void *gui , int StrID);
04F8: 00000000 21CD3145 ; 13E: int ListMenu_GetSelectedItem(GUI_LIST * );
04FC: 00000000 71CD3145 ; 13F: void SetMenuItemStyle( void *obj , int style);
0500: 00000000 B11A3645 ; 140: void putchar( void *xx , int x, int y, int _zero, int zero1 , short wchar);
0504: 00000000 49293945 ;8141: IS_NEEDED_BOOK isScreenSaverBook(void);
0508: 00000000 5D323745 ; 142: void StatusIndication_SetItemText(void *gui,int item,int StrID);
050C: 00000000 B11F2C45 ; 143: void StatusIndication_ShowNotes(int StrID);
0510: 00000000 DD4D2F45 ; 144: GUI * CreateStringInput(int,...);
0514: 00000000 C1EC3145 ; 145: GUI_ONEOFMANY * CreateOneOfMany(BOOK *);
0518: 00000000 89EE3145 ; 146: void OneOfMany_SetItemCount(GUI_ONEOFMANY * , int count);
051C: 00000000 A5EE3145 ; 147: void OneOfMany_SetChecked(GUI_ONEOFMANY * , int checked);
0520: 00000000 D9EE3145 ; 148: void OneOfMany_SetTexts(GUI_ONEOFMANY * , int * StrID , int Count);
0524: 00000000 B5EE3145 ; 149: int OneOfMany_GetSelected(GUI_ONEOFMANY * rb);
0528: 00000000 E11E2C45 ; 14A: void StatusIndication_Item8_SetText(int StrID);
052C: 00000000 C5FF3745 ; 14B: void GUIObject_Softkey_SetAction(void * gui,u16 actionID,void (*proc)(BOOK *,void*));
0530: 00000000 3D003845 ; 14C: void GUIObject_Softkey_SetText(void * gui,u16 actionID , int StrID);
0534: 00000000 F9003845 ; 14D: void GUIObject_SoftKey_SetEnable(void *gui,u16 actionID,int ena);
0538: 00000000 B1003845 ; 14E: void GUIObject_SoftKey_AddErrorStr(void *gui,u16 actionID,int StrID);
053C: 00000000 89FF3745 ; 14F: void GUIObject_SoftKey_RemoveItem(void *gui,u16 actionID);
0540: 00000000 8D003845 ; 150: void GUIObject_SoftKey_SetVisible(void *gui,u16 actionID,int visible);
0544: 00000000 FD023845 ; 151: void GUIObject_SoftKey_SuppressDefaultAction(void *gui,u16 actionID);
0548: 00000000 497B5544 ; 152: wchar_t* wstrcpy(wchar_t * dest, const wchar_t * source);
054C: 00000000 F57B5544 ; 153: wchar_t* wstrncpy(wchar_t * dest, const wchar_t * source, int maxlen);
0550: 00000000 ED7A5544 ; 154: wchar_t* wstrcat(wchar_t * wstr, const wchar_t * subwstr);
0554: 00000000 957B5544 ; 155: wchar_t *wstrncat(wchar_t *wstr, const wchar_t *subwstr , int maxlen);
0558: 00000000 217B5544 ; 156: int wstrcmp(const wchar_t *wstr1, const wchar_t *wstr2);
055C: 00000000 1175E444 ; 157: int wstrlen(const wchar_t * wstr);
0560: 00000000 D987E444 ; 158: wchar_t * str2wstr(wchar_t * wstr, const char * str);
0564: 00000000 21725544 ; 159: int strcmp(const char * str1, const char * str2);
0568: 00000000 7D725544 ; 15A: int strlen(const char *str);
056C: 00000000 3176E444 ; 15B: char * wstr2strn (char * str , const wchar_t * wstr, int maxlen);
0570: 00000000 455A3445 ; 15C: int int2strID (int num);
0574: 00000000 F95C3445 ; 15D: int Str2ID(const void * wstr , int flag , int len);
0578: 00000000 8D613445 ; 15E: void StrID2Str(int StrID,char * str,int maxlen);
057C: 00000000 7D603445 ; 15F: void TextID2wstr(int StrID,wchar_t * str,int maxlen);
0580: 00000000 5D5F3445 ; 160: int TextGetLength(int StrID);
0584: 00000000 C15E3445 ; 161: void TextFree(int StrID);
0588: 00000000 D564DE44 ; 162: int AB_DEFAULTNBR_GET(int rec_num, void * mem_0x30, int * unk);
058C: 00000000 A5B5DE44 ; 163: int AB_READSTRING(void * mem_0x30,int rec_num, int rec_item_num);
0590: 00000000 71B6DE44 ; 164: int AB_READPHONENBR(void * mem_0x30,int rec_num, int rec_item_num);
0594: 00000000 29B7DE44 ; 165: int AB_GETNBROFITEMS(int get_from,int unk_0);
0598: 00000000 69533445 ; 166: int PNUM_len(void *pnum);
059C: 00000000 4D292345 ; 167: void PNUM2str(char *str,void *pnum,int len, int max_len);
05A0: 00000000 5D353645 ; 168: DISP_OBJ * GUIObj_GetDISPObj (void * gui);
05A4: 00000000 C1401B45 ; 169: LIST *List_New(void);
05A8: 00000000 FD401B45 ; 16A: void List_Free(LIST *lst);
05AC: 00000000 71421B45 ; 16B: void ListElement_AddtoTop(LIST *lst,void *newElement);
05B0: 00000000 5DCFE344 ; 16C: int Gif2ID(u16 IMAGEHANDLE,const wchar_t * path, const wchar_t * fname,wchar_t * ID);
05B4: 00000000 350AE444 ; 16D: int REQUEST_IMAGEHANDLER_INTERNAL_GETHANDLE(const int * __zero,u16 * IMAGEHANDLE,char * unk);
05B8: 00000000 E58FD444 ; 16E: void REQUEST_DATEANDTIME_GET(const int * __zero , DATETIME *dt);
05BC: 00000000 F1F83845 ; 16F: void IndicationDevice_Backlight_FadeToLevel(int unk_zero ,int bl_level);
05C0: 00000000 ADD4F744 ; 170: int GetFreeBytesOnHeap(void);
05C4: 00000000 D1CF2A45 ; 171: void BookObj_Hide(BOOK *,int display_type);
05C8: 00000000 E1CF2A45 ; 172: void BookObj_Show(BOOK *,int display_type);
05CC: 00000000 75042C45 ; 173: void StartAPP (const wchar_t * appname);
05D0: 00000000 61CE3145 ; 174: void ListMenu_SetOnMessages (GUI_LIST * , int (*proc)(GUI_MESSAGE *));
05D4: 00000000 45B42745 ; 175: char * manifest_GetParam(const char *buf, const char *param_name,int unk);
05D8: 00000000 5D8DE844 ; 176: int lseek(int file,int offset,int mode);
05DC: 00000000 B7251444 ;8177: int get_VBUFFER(void); //nullsub(void)
05E0: 00000000 E1032E45 ; 178: void SetLampLevel (int level);
05E4: 00000000 FD411B45 ; 179: void * ListElement_Remove(LIST *lst,int index);
05E8: 00000000 990C2C44 ; 17A: int GetCurrentPID(void);
05EC: 00000000 31421B45 ; 17B: int ListElement_Prt2NumElement(LIST *lst,void *ptr);
05F0: 00000000 D0943044 ; 17C: union SIGNAL *alloc(OSBUFSIZE size,SIGSELECT signo);
05F4: 00000000 EC943044 ; 17D: union SIGNAL *receive(const SIGSELECT *sigsel);
05F8: 00000000 DC943044 ; 17E: void send(union SIGNAL **sig,PROCESS to);
05FC: 00000000 2C953044 ; 17F: PROCESS sender(union SIGNAL **sig);
0600: 00000000 FC943044 ; 180: void free_buf(union SIGNAL **sig);
0604: 00000000 C8953044 ; 181: PROCESS create_process(int proc_type,char *name,OSENTRYPOINT *entrypoint,OSADDRESS stack_size,OSPRIORITY priority,OSTIME timeslice,PROCESS pid_block,void *redir_table,OSVECTOR vector,OSUSER user);
0608: 00000000 E8973044 ; 182: void start(PROCESS pid);
060C: 00000000 98963044 ; 183: int get_ptype(PROCESS pid);
0610: 00000000 E4953044 ; 184: PROCESS current_process(void);
0614: 00000000 1C953044 ; 185: void delay(OSTIME timeout);
0618: 00000000 E4963044 ; 186: OSBOOLEAN hunt(const char *name, OSUSER user, PROCESS *name_, union SIGNAL **hunt_sig);
061C: 00000000 04973044 ; 187: void kill_proc(PROCESS pid);
;0620: xxxxxxxx yyyyyyyy ; 188: OSBOOLEAN set_bp (PROCESS pid,OSADDRESS address,OSADDRESS attribute,union SIGNAL **trapsig);
;0624: xxxxxxxx yyyyyyyy ; 189: union SIGNAL *receive_w_tmo (OSTIME timeout, SIGSELECT *sel);
;0628: xxxxxxxx yyyyyyyy ; 18A: OSBOOLEAN clear_bp (PROCESS pid, OSADDRESS addr);
0680: 00000000 49725544 ; 1A0: char* strcpy(char * dest, char * source);
0684: 00000000 F94FFF44 ; 1A1: void *CreateMessage(int size,int ev,char *name);
0688: 00000000 4D50FF44 ; 1A2: void SendMessage(void **signal,int PID);
068C: 00000000 D550FF44 ; 1A3: void * WaitMessage(void *SIGSEL);
0690: 00000000 E950FF44 ; 1A4: int FreeMessage(void **Mess);
0694: 00000000 41B9FC44 ; 1A5: void SendDispatchMessage(int id, int unk_zero, int size,void *mess);
0698: 00000000 C9A22A45 ; 1A6: char * UIEventName(int event);
069C: 00000000 8C7D1820 ;81A7: int * MissedEvents(void);
06A0: 00000000 85B72A45 ; 1A8: void UI_Event(int event);
06A4: 00000000 95B72A45 ; 1A9: void UI_Event_wData(int event,void *message,void (*mfree)(void*));
06A8: 00000000 DDB72A45 ; 1AA: void UI_Event_toBookID(int event,int BookID);
06AC: 00000000 F1B72A45 ; 1AB: void UI_Event_toBookIDwData(int event,int BookID,void *message,void (*mfree)(void*));
06B0: 00000000 91441B45 ; 1AC: int ListElement_Find(LIST *lst,void *element, int (*cmp_proc)(void *,void *));
06B4: 00000000 95431B45 ; 1AD: void * ListElement_GetByIndex(LIST * , int index);
06B8: 00000000 497C5544 ; 1AE: wchar_t* wstrrchr(const wchar_t* wstr, wchar_t wchar);
06BC: 00000000 EDCA2A45 ; 1AF: void BookObj_CallSubroutine(BOOK * , BOOK_SUBROUTINE *subr);
06C0: 00000000 79421B45 ; 1B0: void ListElement_Add(LIST *lst,void *newElement);
06C4: 00000000 C1682344 ; 1B1: void debug_printf(const char * fmt,...);
06C8: 00000000 313F0045 ; 1B2: int PlayFile(const wchar_t * path, const wchar_t * fname);
06D0: 00000000 15452E45 ; 1B4: int REQUEST_PROFILE_GETACTIVEPROFILE(const int *__zero , int *level);
;06D4: xxxxxxxx yyyyyyyy ; 1B5: int Profile_SetActive(int NUMprof,int set_in_gdfs_flag);
06DC: 00000000 C9293945 ; 1B7: int isKeylocked(void);
06E0: 00000000 FDFFF444 ;81B8: IS_NEEDED_BOOK isMediaPlayerVideoBook(void);
06EC: 00000000 4D57FD44 ; 1BB: void Vibra(int t1, int t2, int t3);
06F0: 00000000 C591D444 ; 1BC: int REQUEST_DATEFORMAT_GET(const int *SYNC, char *DateFormat);
06F4: 00000000 5992D444 ; 1BD: int REQUEST_TIMEFORMAT_GET(const int *SYNC, char *TimeFormat);
06F8: 00000000 958E2A45 ; 1BE: int Date2ID(DATE *, int TimeFormat,int);
06FC: 00000000 BD8D2A45 ; 1BF: int Time2ID(TIME *, char TimeFormat,int);
0700: 00000000 05CB3145 ; 1C0: GUI_LIST * CreateListObject(BOOK * , void * unk);
0704: 00000000 35CD3145 ; 1C1: void SetNumOfMenuItem(void * , int item_count);
0708: 00000000 A4201820 ;81C2: LIST ** ROOT_APP(void);
070C: 00000000 29003845 ; 1C3: void SoftKey_AddHelpStr(void *gui,int msg,int StrID);
0710: 00000000 1D013845 ; 1C4: void SoftKey_SetItemAsSubItem(void *gui,int item,int subitem);
0714: 00000000 2D2F2C45 ; 1C5: int REQUEST_SYSTEM_SHUTDOWN(void);
0718: 00000000 3D2F2C45 ; 1C6: int REQUEST_SYSTEM_RESTART(void);
071C: 00000000 61003845 ; 1C7: void SoftKeys_SetText(void *gui,int msg,int StrID,int StrID1);
0720: 00000000 659A3845 ; 1C8: int isRightNowBook(BOOK *);
0724: 00000000 65F82B45 ; 1C9: int isVolumeControllerBook(BOOK *);
0728: 00000000 C5453645 ; 1CA: GUI_TABMENUBAR * CreateTabMenuBar(BOOK *);
072C: 00000000 99463645 ; 1CB: void TabMenuBar_SetTabCount(GUI_TABMENUBAR * , int count);
0730: 00000000 4D473645 ; 1CC: void TabMenuBar_AssignGuiObj(GUI_TABMENUBAR * , int tab , GUI *);
0734: 00000000 89473645 ; 1CD: void TabMenuBar_SetTabIcon(GUI_TABMENUBAR *,int tab, wchar_t icon , int for_state);
0738: 00000000 ED343645 ; 1CE: GUI *GUI_Free(GUI*);
073C: 00000000 69383645 ; 1CF: void InputFeedback_SetIcon(GUI *gui, wchar_t icon);
0740: 00000000 81562F45 ; 1D0: int StringInput_GetStringAndLen (GUI*,wchar_t**,u16*);
0744: 00000000 B0EC1720 ;81D1: PAudioControl* GetAudioControlPtr();
0748: 00000000 F12CC544 ; 1D2: int AudioControl_Vibrate(PAudioControl pIAudioControl, int vibratime, int pausetime, int totaltime);
074C: 00000000 959FE844 ; 1D3: __thumb int GetVolumeSize(char * volume, VOLUMESIZE *);
0750: 00000000 01E73145 ; 1D4: GUI_NOFMANY * CreateNOfMany(BOOK *);
0754: 00000000 41E93145 ; 1D5: void NOfMany_SetTexts(GUI_NOFMANY * , int * StrIDtable, int items_count);
0758: 00000000 C5E83145 ; 1D6: void NOfMany_SetChecked(GUI_NOFMANY * , u16 * checked_table, int items_count);
075C: 00000000 8DE83145 ; 1D7: void NOfMany_SetCursor(GUI_NOFMANY * , int item);
0760: 00000000 E9E83145 ; 1D8: int NOfMany_GetCheckedCount(GUI_NOFMANY *);
0764: 00000000 D9E83145 ; 1D9: int NOfMany_GetChecked(GUI_NOFMANY * , u16 * buffer );
0768: 00000000 39E93145 ; 1DA: void NOfMany_SetonMessage(GUI_NOFMANY * , void * proc );
077C: 00000000 81400045 ; 1DF: PAudioControl AudioControl_Init();
0780: 00000000 6DEE3145 ; 1E0: void OneOfMany_SetFocused(GUI_ONEOFMANY * , int item);
0784: 00000000 D1EE3145 ; 1E1: void OneOfMany_SetonMessage(GUI_ONEOFMANY * , int (*proc)(GUI_MESSAGE *));
0788: 00000000 31B42B45 ; 1E2: GUI_FEEDBACK * CreateFeedBack (int,...);
078C: 00000000 FDB42B45 ; 1E3: void FeedBack_SetText(GUI_FEEDBACK*,int);
0790: 00000000 599D9C44 ; 1E4: int GetBattaryState(const int * , BATT *);
0794: 00000000 D90F3645 ; 1E5: void * get_DisplayGC (void);
0798: 00000000 959A3545 ; 1E6: void GetGuiRect(void*,RECT*);
079C: 00000000 B1163645 ; 1E7: void get_GC_RECT(void*,RECT*);
07A0: 00000000 B5193645 ; 1E8: int get_GC_xx(void * GC);
07A4: 00000000 A9193645 ; 1E9: void *set_GC_xx(void * GC, int);
07A8: 00000000 61163645 ; 1EA: void GC_validate_RECT(void * GC , RECT*);
07AC: 00000000 5DD02A45 ; 1EB: void addGui2book(BOOK*,GUI*);
07B0: 00000000 C5C23545 ; 1EC: void DrawRect(int x1, int y1,int x2 ,int y2,int pen_color,int brush_color);
07B4: 00000000 C5C53545 ; 1ED: void DrawString(int StrID,int align,int x1,int y1,int x2,int y2,int unk,int unk1,int pen_color ,int brush_color);
07B8: 00000000 39D52A45 ; 1EE: void addGui2XGuiList (void* xguilist , GUI*);
07BC: 00000000 01993545 ; 1EF: void InvalidateRect(DISP_OBJ *,RECT*);
07C0: 00000000 11343645 ; 1F0: int CreateObject(GUI*,void (*)(DISP_DESC *),void (*)(DISP_DESC *),BOOK *,void(*)(),int,int size_obj);
07C4: 00000000 21D03545 ; 1F1: int SetFont(int);
07C8: 00000000 7C6E1820 ;81F2: DISP_OBJ ** StatusRow_p(void);
07CC: 00000000 BDB42A45 ; 1F3: int root_list_get_session_count(void);
07D0: 00000000 C9B42A45 ; 1F4: UI_APP_SESSION *root_list_get_session(int num_session);
07D4: 00000000 ADAD2A45 ; 1F5: BOOK *SESSION_GetTopBook(UI_APP_SESSION *);
07D8: 00000000 8DB82B45 ; 1F6: int MainInput_getVisible(GUI *);
07DC: 00000000 A5B82B45 ; 1F7: int MainInput_strlen(GUI *);
07E0: 00000000 B1B82B45 ; 1F8: char * MainInput_getPNUM(GUI *);
07E4: 00000000 BDB82B45 ; 1F9: int MainInput_isPlus(GUI *);
07E8: 00000000 D9D32A45 ; 1FA: int BOOK_GetBookID(BOOK * );
07EC: 00000000 C17B5544 ; 1FB: int wstrncmp(const wchar_t*,const wchar_t*,int);
07F0: 00000000 85AA3545 ; 1FC: int DISP_OBJ_GetAbsoluteXPos(DISP_OBJ *);
07F4: 00000000 B9AA3545 ; 1FD: int DISP_OBJ_GetAbsoluteYPos(DISP_OBJ *);
07F8: 00000000 B19D3545 ; 1FE: WINDOW * DISP_OBJ_GetWindow(DISP_OBJ *);
07FC: 00000000 252D3845 ; 1FF: int GetThemeColor(int , int);
0800: 00000000 ED3D2E45 ; 200: int REQUEST_SETTING_SILENCE_SET(const int * __zero,u16 profile,u16 value);
0804: 00000000 953D2E45 ; 201: int REQUEST_SETTING_SILENCE_GET(const int * __zero,u16 profile, char * silence_mode);
0808: 00000000 4DE6DD44 ; 202: void VCALL_Init (void* vc);
080C: 00000000 45E7DD44 ; 203: void VCALL_SetName (void * vc , wchar_t * name ,unsigned short name_len);
0810: 00000000 A5E7DD44 ; 204: void VCALL_SetNameIcon (void * vc , wchar_t icon);
0814: 00000000 65E7DD44 ; 205: void VCALL_SetNumber (void * vc , wchar_t * number , unsigned short num_len);
0818: 00000000 89E7DD44 ; 206: void VCALL_SetHZ1 (void * vc, int , u16 );
081C: 00000000 95E7DD44 ; 207: void VCALL_SetHZ2 (void * vc , u16 );
0820: 00000000 25E2DD44 ; 208: void MakeVoiceCall (int SessioID , void * vc ,int flag);
;0824: xxxxxxxx yyyyyyyy ; 209: int isDirectory (wchar_t * path ,wchar_t * filename , int * error );
0828: 00000000 6D7CE844 ; 20A: void FileDelete (wchar_t * path ,wchar_t * filename , int * error );
082C: 00000000 09373645 ; 20B: void SetFocus (GUI * , int);
0830: 00000000 49790245 ; 20C: int CreateSMSCont (int, void*);
0834: 00000000 E97F0245 ; 20D: int FreeSMSCont (void*);
0838: 00000000 217B0245 ; 20E: int PrepareSMSCont (void*,wchar_t*,wchar_t*,int,int);
083C: 00000000 497F0245 ; 20F: int CteateNewMessage (int,void*,int);
0840: 00000000 6C56AF45 ;8210: void * get_APP_DESC_TABLE(void);
0844: 00000000 0D073645 ; 211: C_INTERFACE *Window_GetComponentInterface(WINDOW*);
0848: 00000000 01B9DE44 ; 212: int AB_POSITIONNBR_GET(void * ab_name,char * ,u16 * ,void * ab_num);
084C: 00000000 29B8DE44 ; 213: int AB_NAME_ITEM2StrID(void * ab_name);
0850: 00000000 71B8DE44 ; 214: int AB_NUM_ITEM2StrID(void * ab_num_item);
0854: 00000000 D7B0A544 ; 215: int GetABRecNum(AB_GET_STRUCT *); //nullsub(void)
0858: 00000000 A0B1AA45 ;8216: AB_ITEM_DESC * get_AB_ITEMS_DESC();
085C: 00000000 3D94A644 ; 217: GUI * SBY_GetMainInput(BOOK * StandBy);
0860: 00000000 3994A644 ; 218: GUI * SBY_GetStatusIndication(BOOK * StandBy);
0864: 00000000 5D6FD644 ; 219: int REQUEST_PHONEBOOK_ACCESSSTATUS_TOTAL_GET(const int * __zero, int *);
0868: 00000000 28D00920 ;821A: int * PID_MMI(void);
0874: 00000000 E1913545 ; 21D: DISP_OBJ* DISPBASE_GetFocused(int display);
0878: 00000000 95973545 ; 21E: char DISP_OBJ_getVisible(DISP_OBJ*);
087C: 00000000 CD2F8F44 ; 21F: DISP_DESC* DISP_OBJ_GetDESC (DISP_OBJ*);
0880: 00000000 E9523545 ; 220: void DISP_DESC_SetName (DISP_DESC* , const char * name);
0884: 00000000 45A83545 ; 221: char* DISP_OBJ_GetName (DISP_OBJ *);
0888: 00000000 ED523545 ; 222: void DISP_DESC_SetSize (DISP_DESC* , u16 size);
;088C: xxxxxxxx yyyyyyyy ; 223: u16 DISP_DESC_GetSize (DISP_OBJ *);
0890: 00000000 F1523545 ; 224: void DISP_DESC_SetOnCreate (DISP_DESC* , DISP_OBJ_ONCREATE_METHOD);
0894: 00000000 79533545 ; 225: DISP_OBJ_ONCREATE_METHOD DISP_OBJ_GetOnCreate (DISP_OBJ *);
0898: 00000000 F5523545 ; 226: void DISP_DESC_SetOnClose (DISP_DESC* , DISP_OBJ_ONCLOSE_METHOD);
089C: 00000000 95533545 ; 227: DISP_OBJ_ONCLOSE_METHOD DISP_OBJ_GetOnClose (DISP_OBJ *);
08A0: 00000000 F9523545 ; 228: void DISP_DESC_SetOnRedraw (DISP_DESC* , DISP_OBJ_ONREDRAW_METHOD);
08A4: 00000000 B1533545 ; 229: DISP_OBJ_ONREDRAW_METHOD DISP_OBJ_GetOnRedraw (DISP_OBJ *);
08A8: 00000000 01533545 ; 22A: void DISP_DESC_SetOnKey (DISP_DESC* , DISP_OBJ_ONKEY_METHOD);
08AC: 00000000 E9533545 ; 22B: DISP_OBJ_ONKEY_METHOD DISP_OBJ_GetOnKey (DISP_OBJ *);
;08B0: xxxxxxxx yyyyyyyy ; 22C: void DISP_DESC_SetonRefresh (DISP_DESC* ,DISP_OBJ_METHOD);
;08B4: xxxxxxxx yyyyyyyy ; 22D: DISP_OBJ_METHOD DISP_OBJ_GetonRefresh (DISP_OBJ *);
;08B8: xxxxxxxx yyyyyyyy ; 22E: void DISP_DESC_SetMethod04 (DISP_DESC* ,void (*)(void*));
;08BC: xxxxxxxx yyyyyyyy ; 22F: DISP_OBJ_METHOD DISP_OBJ_GetMethod04 (DISP_OBJ *);
;08C0: xxxxxxxx yyyyyyyy ; 230: void DISP_DESC_SetMethod05 (DISP_DESC* ,void (*)(void*));
;08C4: xxxxxxxx yyyyyyyy ; 231: DISP_OBJ_METHOD DISP_OBJ_GetMethod05 (DISP_OBJ *);
08C8: 00000000 05533545 ; 232: void DISP_DESC_SetMethod06 (DISP_DESC* ,DISP_OBJ_METHOD);
08CC: 00000000 05543545 ; 233: DISP_OBJ_METHOD DISP_OBJ_GetMethod06 (DISP_OBJ *);
;08D0: xxxxxxxx yyyyyyyy ; 234: void DISP_DESC_SetMethod07 (DISP_DESC* ,void (*)(void*));
;08D4: xxxxxxxx yyyyyyyy ; 235: DISP_OBJ_METHOD DISP_OBJ_GetMethod07 (DISP_OBJ *);
08D8: 00000000 0D533545 ; 236: void DISP_DESC_SetMethod08 (DISP_DESC* ,DISP_OBJ_METHOD);
08DC: 00000000 3D543545 ; 237: DISP_OBJ_METHOD DISP_OBJ_GetMethod08 (DISP_OBJ *);
;08E0: xxxxxxxx yyyyyyyy ; 238: void DISP_DESC_SetMethod09 (DISP_DESC* ,void (*)(void*));
;08E4: xxxxxxxx yyyyyyyy ; 239: DISP_OBJ_METHOD DISP_OBJ_GetMethod09 (DISP_OBJ *);
;08E8: xxxxxxxx yyyyyyyy ; 23A: void DISP_DESC_SetMethod0A (DISP_DESC* ,void (*)(void*));
;08EC: xxxxxxxx yyyyyyyy ; 23B: DISP_OBJ_METHOD DISP_OBJ_GetMethod0A (DISP_OBJ *);
;08F0: xxxxxxxx yyyyyyyy ; 23C: void DISP_DESC_SetMethod0B (DISP_DESC* ,void (*)(void*));
;08F4: xxxxxxxx yyyyyyyy ; 23D: DISP_OBJ_METHOD DISP_OBJ_GetMethod0B (DISP_OBJ *);
;08F8: xxxxxxxx yyyyyyyy ; 23E: void DISP_DESC_SetMethod0C (DISP_DESC* ,void (*)(void*));
;08FC: xxxxxxxx yyyyyyyy ; 23F: DISP_OBJ_METHOD DISP_OBJ_GetMethod0C (DISP_OBJ *);
0900: 00000000 DB051444 ; 240: void JavaSession_Manager (int cmd); //nullsub(void)
0904: 00000000 D9051444 ; 241: int JavaSession_GetName(void); //nullsub(ret 0)
0908: 00000000 295E3445 ; 242: int TextCopyId(int);
090C: 00000000 79D32A45 ; 243: UI_APP_SESSION *Book_GetSession(BOOK*);
0910: 00000000 F9D83145 ; 244: void List2lineSetAsSubitem (void* msg,int unk,int n_sub_items);
0914: 00000000 71D93145 ; 245: void List2lineSubitemAddText(void* msg,int StrID);
0918: 00000000 65D93145 ; 246: int GUIonMessage_GetCreatedSubItemParrentIndex(void * msg);
091C: 00000000 D94B2145 ; 247: void GoMusic(void);
0920: 00000000 2158FD44 ; 248: void Vibra_Off (int t1);
0928: 00000000 353F0045 ; 24A: int PlayFileV(const wchar_t * path,const wchar_t * fname, int vol);
092C: 00000000 194CFD44 ; 24B: int GetSilent(void);
0930: 00000000 8522FD44 ; 24C: int GetVibrator(int ignorevibrator,int ignoresilent);
0934: 00000000 995AFD44 ; 24D: int GetAudioSettings(int what, char* retvalue);
0938: 00000000 A15B2344 ; 24E: int GetChipID(void);
0948: 00000000 59D93145 ; 252: int List2LineGetCurrentIndex(void * msg);
094C: 00000000 4DD93145 ; 253: int GUIonMessage_GetCurrentItemIndex(void * msg);
0950: 00000000 8554E844 ; 254: void DestroyDirHandle(DIR_HANDLE *handle);
0954: 00000000 7878AC45 ;8255: DB_EXT *LastExtDB(void);
0958: 00000000 35B6EB44 ; 256: void GetOtherExtMethods(FILESUBROUTINE **);
095C: 00000000 41812B45 ; 257: void MessageBox(int HeaderStrID,int MessageStrID,wchar_t IconID, int style /*1 or 2*/,int time,BOOK * unk);
0960: 00000000 45673745 ; 258: int Display_GetHeight(int Display);
0964: 00000000 51673745 ; 259: int Display_GetWidth(int Display);
0968: 00000000 E13E0045 ; 25A: void PlaySystemSound (int SndNumber);
0974: 00000000 8D463645 ; 25D: int TabMenuBar_GetFocusedTabIndex(GUI_TABMENUBAR * );
0978: 00000000 7D463645 ; 25E: void TabMenuBar_SetTabFocused(GUI_TABMENUBAR * , int tab_num);
097C: 00000000 BD183645 ; 25F: int GC_GetPenColor (void* GC);
0980: 00000000 81183645 ; 260: void GC_SetPenColor(void* GC , int pen_color);
0984: 00000000 C1143645 ; 261: void GC_SetPixel (void* GC,int x1,int y1,int color);
0988: 00000000 39203645 ; 262: void GC_DrawLine(void* GC,int x1, int y1, int x2, int y2);
098C: 00000000 C5213645 ; 263: void GC_DrawFRect (void* GC,int color,int x1,int y1,int x2 ,int y2);
0990: 00000000 8D153645 ; 264: int GC_DrawBitmap(void *GC, int x1, int y1, int x2, int y2, int * bmp);
0994: 00000000 E9A1AE44 ; 265: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
0998: 00000000 35A3AE44 ; 266: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
099C: 00000000 8D89AE44 ; 267: png_infop png_create_info_struct(png_structp png_ptr);
09A0: 00000000 C189AE44 ; 268: void png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr);
09A4: 00000000 C1A1AE44 ; 269: void png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr, png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn, png_progressive_end_ptr end_fn);
09A8: 00000000 8191AE44 ; 26A: void png_process_data(png_structp png_ptr, png_infop info_ptr, png_bytep buffer, png_size_t buffer_size);
09AC: 00000000 09A3AE44 ; 26B: void png_read_update_info(png_structp png_ptr, png_infop info_ptr);
09B0: 00000000 E5A1AE44 ; 26C: png_voidp png_get_progressive_ptr(png_structp png_ptr);
09B4: 00000000 498EAE44 ; 26D: png_uint_32 png_get_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
09B8: 00000000 D5A4AE44 ; 26E: void png_set_strip_16(png_structp png_ptr);
09BC: 00000000 EDA4AE44 ; 26F: void png_set_gray_1_2_4_to_8(png_structp png_ptr);
09C0: 00000000 05A5AE44 ; 270: void png_set_gray_to_rgb(png_structp png_ptr);
09C4: 00000000 1D8EAE44 ; 271: png_uint_32 png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag);
09C8: 00000000 F9A4AE44 ; 272: void png_set_tRNS_to_alpha(png_structp png_ptr);
09CC: 00000000 3DD2AE44 ; 273: void png_set_filler(png_structp png_ptr, png_uint_32 filler, int flags);
09D0: 00000000 E1A4AE44 ; 274: void png_set_palette_to_rgb(png_structp png_ptr);
09D4: 00000000 358EAE44 ; 275: png_uint_32 png_get_rowbytes(png_structp png_ptr, png_infop info_ptr);
09D8: 00000000 A1A1AE44 ; 276: void png_progressive_combine_row(png_structp png_ptr, png_bytep old_row, png_bytep new_row);
09DC: 00000000 8588AE44 ; 277: int png_sig_cmp(png_bytep sig, png_size_t start, png_size_t num_to_check);
09E0: 00000000 64492D44 ; 278: int setjmp(jmp_buf jmpbuf);
09E4: 00000000 88492D44 ; 279: void longjmp(jmp_buf, int);
09E8: 00000000 A1DEAE44 ; 27A: int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size);
09EC: 00000000 41E0AE44 ; 27B: int inflate (z_streamp strm, int flush);
09F0: 00000000 A1F2AE44 ; 27C: int inflateEnd (z_streamp strm);
09F4: 00000000 0C310020 ; 27D: int memcmp (const void *m1,const void *m2,int n);
09F8: 00000000 B9725544 ; 27E: int strncmp(const char *s1, const char *s2, int len);
09FC: 00000000 ED725544 ; 27F: char *strncpy (char *dest,const char *source,int maxlen);
0A00: 00000000 E9715544 ; 280: char *strcat(char *dest, const char *src);
0A04: 00000000 713C3645 ; 281: void GuiObject_SetTitleType(GUI *gui, int type);
0A08: 00000000 05D93145 ; 282: void GUIonMessage_SetItemDisabled (void * msg, int Disabled);
0A0C: 00000000 9D0AE444 ; 283: int REQUEST_IMAGEHANDLER_INTERNAL_REGISTER(const int * __zero,u16 ImageHandle,wchar_t *path,wchar_t *fname,int unk, wchar_t * ImageID ,char * error);
0A10: 00000000 4D0BE444 ; 284: int REQUEST_IMAGEHANDLER_INTERNAL_UNREGISTER (const int * __zero,u16 ImageHandle,u16* ,u16* ,wchar_t ImageID, int unk_1,char * error);
0A14: 00000000 B8782F20 ;8285: SURFACE ** get_Surfaces(void);
0A18: 00000000 D14AC344 ; 286: int iconidname2id(const wchar_t* idname,int maxnamelen,int *id);
0A1C: 00000000 290FD444 ; 287: int textidname2id(const wchar_t* idname,int maxnamelen,int* id);
;0A20: xxxxxxxx yyyyyyyy ; 288: void ListMenu_SetNoItemText(GUI_LIST *, int str);
0A28: 00000000 F1A30F45 ;828A: IS_NEEDED_BOOK isFmRadioBook(void);
0A2C: 00000000 9D45F344 ;828B: IS_NEEDED_BOOK isAudioPlayerBook(void);
0A30: 00000000 D1A7F344 ; 28C: void PlayerControl(BOOK *AudioPlayerBook, int);
0A34: 00000000 D9850F45 ; 28D: void SwitchRadioStationFromList(BOOK *FmRadioBook, int);
0A38: 00000000 DDD83845 ; 28E: void Shortcut_Run (wchar_t * shortcut_name);
0A3C: 00000000 D146E844 ; 28F: int mkdir(const wchar_t* path);
0A40: 00000000 BD4DE844 ; 290: int rmdir(const wchar_t* path, int zero);
0A44: 00000000 9D7BE844 ; 291: int chmod(const wchar_t* path, const wchar_t* fname, int amode);
0A48: 00000000 8D81E844 ; 292: int rename(const wchar_t* oldpath, const wchar_t* oldfname, const wchar_t* newpath, const wchar_t* newfname, int zero);
;0A4C: xxxxxxxx yyyyyyyy ; 293: int GetImageWidth(wchar_t ImageID);
;0A50: xxxxxxxx yyyyyyyy ; 294: int GetImageHeight(wchar_t ImageID);
;0A54: xxxxxxxx yyyyyyyy ; 295: void * CallID_GetCallStatusDesc(int CallID);
;0A58: xxxxxxxx yyyyyyyy ; 296: wchar_t * CallStatusDesc_GetName(void * CallStatusDesc);
;0A5C: xxxxxxxx yyyyyyyy ; 297: void List_FreeElements(LIST *,int (*cmp_proc)(void * elem_from_list),void (*freefunc)(void * elem_from_list));
;0A60: xxxxxxxx yyyyyyyy ; 298: char * strstr(const char * str1,const char * str2);
;0A64: xxxxxxxx yyyyyyyy ; 299: int GPRS_GetLastSessionInfo(int,GPRS_SESSION_INFO *);
;0A68: xxxxxxxx yyyyyyyy ; 29A: int wstrcmpni(const wchar_t * wstr1,const wchar_t * wstr2,int len);
;0A6C: xxxxxxxx yyyyyyyy ; 29B: int wtoi(const wchar_t * wstr,int len,int * dest);
0A70: 00000000 A15BFF44 ; 29C: __thumb void DATE_GetWeekDay(DATE *,char * dest);
0A74: 00000000 0D4AD744 ; 29D: __thumb void Cale_GetSettings(int setID,void *);
0A78: 00000000 897C5544 ; 29E: __thumb wchar_t * wstrwstr(const wchar_t * wstr1,const wchar_t * wstr2);
0A7C: 00000000 3589E444 ; 29F: __thumb int wstrcmpi(const wchar_t *ws1, const wchar_t *ws2);
0A80: 00000000 097B5544 ; 2A0: __thumb wchar_t * wstrchr(const wchar_t * source,wchar_t chr);
;0A84: xxxxxxxx yyyyyyyy ; 2A1: void GUIObject_HideSoftkeys(void *gui);
;0A88: xxxxxxxx yyyyyyyy ; 2A2: void GUIObject_ShowSoftkeys(void *gui);
;0A8C: xxxxxxxx yyyyyyyy ; 2A3: DISP_OBJ* DispObject_SoftKeys_Get(void);
0A90: 00000000 C5203545 ; 2A4: __thumb int StandbyBackground_SetImage(int type,int,int,const wchar_t* path,const wchar_t* fname,int);
0A94: 00000000 B5403745 ; 2A5: __thumb GUI *CreateYesNoQuestionVA(int zero, ...);
;0A98: xxxxxxxx yyyyyyyy ; 2A6: void ListMenu_SetSecondLineText(GUI_LIST *,int elem_num,int StrID);
0A9C: 00000000 8DE9EA44 ; 2A7: __thumb void _REQUEST_OAF_START_APPLICATION(const int * __one,int __zero,MIDP_DESC *,int ___zero);
0AA0: 00000000 7D9DE844 ; 2A8: __thumb int FSX_isNameInvalid(wchar_t * name);
0AA4: 00000000 ED4BEC44 ; 2A9: __thumb void DataBrowserDesc_SetFoldersNumber(void * DataBrowserDesc,int state);
0AA8: 00000000 C54BEC44 ; 2AA: __thumb void DataBrowserDesc_SetActions(void * DataBrowserDesc,char * actions);
0AAC: 00000000 3D4BEC44 ; 2AB: __thumb void DataBrowserDesc_SetSelectAction(void * DataBrowserDesc,int state);
0AB0: 00000000 454BEC44 ; 2AC: __thumb void DataBrowserDesc_SetSelectActionOnFolders(void * DataBrowserDesc,int state);
0AB4: 00000000 194BEC44 ; 2AD: __thumb void DataBrowserDesc_SetBookID(void * DataBrowserDesc,int BookID);
0AB8: 00000000 C14AEC44 ; 2AE: __thumb void DataBrowserDesc_SetItemFilter(void * DataBrowserDesc,int (*proc)(const wchar_t * ExtList,const wchar_t * ItemPath,const wchar_t * ItemName));
0ABC: 00000000 254CEC44 ; 2AF: __thumb void DataBrowserDesc_SetOption(void * DataBrowserDesc,char * option);
0AC0: 00000000 B94CEC44 ; 2B0: __thumb void DataBrowserDesc_SetOpenEmptyFolder(void * DataBrowserDesc,int state);
0AC4: 00000000 C94AEC44 ; 2B1: __thumb void DataBrowserDesc_SetFileExtList(void * DataBrowserDesc,const wchar_t * ExtList);
0AC8: 00000000 11F0EC44 ; 2B2: __thumb void FSX_RemoveIllegalSymbolsName(FILEITEM *);
0ACC: 00000000 79E8EC44 ; 2B3: __thumb FILEITEM * FILEITEM_Create(void);
0AD0: 00000000 69E9EC44 ; 2B4: __thumb void FILEITEM_Destroy(FILEITEM *);
0AD4: 00000000 E5243745 ; 2B5: __thumb GUI *CreateDateInputVA(int zero, ...);
0AD8: 00000000 DD3C3745 ; 2B6: __thumb GUI *CreateTimeInputVA(int zero, ...);
;0ADC: xxxxxxxx yyyyyyyy ; 2B7: void StringInput_SetCursorPosition(GUI *,u16 curs_pos,char unk);
;0AE0: xxxxxxxx yyyyyyyy ; 2B8: void BookObj_CallPage(BOOK * book, const PAGE_DESC * page);
;0AE4: xxxxxxxx yyyyyyyy ; 2B9: unsigned int DateInput_GetDateInt(void *dateinp_msg);
;0AE8: xxxxxxxx yyyyyyyy ; 2BA: unsigned int TimeInput_GetTimeInt(void *timeinp_msg);
;0AEC: xxxxxxxx yyyyyyyy ;82BB: FONT_DESC *GetFontDesc(void);
;0AF0: xxxxxxxx yyyyyyyy ;82BC: int *GetFontCount();
;0AF4: xxxxxxxx yyyyyyyy ; 2BD: int GC_GetBrushColor(void* GC);
;0AF8: xxxxxxxx yyyyyyyy ; 2BE: void GC_SetBrushColor(void* GC , int brush_color);
;0AFC: xxxxxxxx yyyyyyyy ; 2BF: void GC_DrawRoundRect(void* GC ,RECT *,int arcWidth,int arcHeight,int border_flag,int fill_flag);
;0B00: xxxxxxxx yyyyyyyy ; 2C0: BOOK * MenuBook_Desktop(int mode,int BookID);
;0B04: xxxxxxxx yyyyyyyy ; 2C1: wchar_t * MenuBook_Desktop_GetSelectedItemID(BOOK * MenuBook_Desktop);
;0B08: xxxxxxxx yyyyyyyy ; 2C2: void BookObj_Softkey_SetAction(BOOK *,int actionID,void (*proc)(BOOK *,void*));
;0B0C: xxxxxxxx yyyyyyyy ; 2C3: void BookObj_Softkey_SetText(BOOK *,int actionID,int StrID);
;0B10: xxxxxxxx yyyyyyyy ; 2C4: BOOK * FindBookByID(int BookID);
;0B14: xxxxxxxx yyyyyyyy ; 2C5: GUI_FEEDBACK *TextFeedbackWindow(BOOK *bk, int zero);
;0B18: xxxxxxxx yyyyyyyy ; 2C6: void Feedback_SetKeyHook(GUI_FEEDBACK *, void (*hook)(BOOK *bk, int key, int unk, int unk2));
;0B1C: xxxxxxxx yyyyyyyy ; 2C7: void Feedback_SetOnClose(GUI_FEEDBACK *, void (*OnClose)(BOOK *bk));
;0B20: xxxxxxxx yyyyyyyy ; 2C8: void Feedback_SetTimeout(GUI_FEEDBACK *, int time_ms);
;0B24: xxxxxxxx yyyyyyyy ; 2C9: void Feedback_SetTextExtended(GUI_FEEDBACK *, STRID text, int where);
;0B28: xxxxxxxx yyyyyyyy ; 2CA: void TabMenuBar_SetOnTabSwitch(GUI_TABMENUBAR *,void (*proc)(BOOK *,int act_tab));
;0B2C: xxxxxxxx yyyyyyyy ; 2CB: STRID KeyCode2Name(int key_code);
;0B30: xxxxxxxx yyyyyyyy ; 2CC: int ImageID_Get(const wchar_t * fpath,const wchar_t * fname,wchar_t * imageID);
;0B34: xxxxxxxx yyyyyyyy ; 2CD: void ImageID_Free(wchar_t imageID);
;0B38: xxxxxxxx yyyyyyyy ; 2CE: SUB_EXECUTE *DataBrowser_CreateSubExecute(int BookID, FILEITEM *f);
;0B3C: xxxxxxxx yyyyyyyy ; 2CF: int DataBrowser_ExecuteSubroutine(SUB_EXECUTE *sub, int action, u16 *unk);
;0B40: xxxxxxxx yyyyyyyy ; 2D0: int FILEITEM_SetFname(FILEITEM *f, const wchar_t *fname);
;0B44: xxxxxxxx yyyyyyyy ; 2D1: int FILEITEM_SetPath(FILEITEM *f, const wchar_t *fpath);
0B48: 00000000 6DEEEC44 ; 2D2: wchar_t *FILEITEM_GetFname(FILEITEM *f);
0B4C: 00000000 21EFEC44 ; 2D3: wchar_t *FILEITEM_GetPath(FILEITEM *f);
;0B50: xxxxxxxx yyyyyyyy ; 2D4: int FILEITEM_SetFnameAndContentType(FILEITEM *f, const wchar_t *fname);
;0B54: xxxxxxxx yyyyyyyy ; 2D5: int FILEITEM_SetPathAndContentType(FILEITEM *f, const wchar_t *fpath);
;0B58: xxxxxxxx yyyyyyyy ; 2D6: int JavaDialog_Open(int unk1,char * unk2,void ** JavaDesc);
;0B5C: xxxxxxxx yyyyyyyy ; 2D7: void JavaDialog_Close(int unk1);
;0B60: xxxxxxxx yyyyyyyy ; 2D8: int JavaAppDesc_Get(int unk1,void ** JavaDesc);
;0B64: xxxxxxxx yyyyyyyy ; 2D9: int JavaAppDesc_GetFirstApp(void * JavaDesc);
;0B68: xxxxxxxx yyyyyyyy ; 2DA: int JavaAppDesc_GetNextApp(void * JavaDesc);
;0B6C: xxxxxxxx yyyyyyyy ; 2DB: int JavaAppDesc_GetJavaAppInfo(void * JavaDesc,int ID,wchar_t ** wstr);
;0B70: xxxxxxxx yyyyyyyy ; 2DC: void OrangeLED_Control(int _free_val, int or_LED_ID, int level, int fade_time);
;0B74: xxxxxxxx yyyyyyyy ; 2DD: void DispObject_SetRefreshTimer(DISP_OBJ *,int time);
;0B78: xxxxxxxx yyyyyyyy ; 2DE: void DispObject_KillRefreshTimer(DISP_OBJ *);
;0B7C: xxxxxxxx yyyyyyyy ; 2DF: int isDataBrowserBook(BOOK *);
0B80: 00000000 31D2EB44 ; 2E0: SUB_EXECUTE * BrowserItem_Get_SUB_EXECUTE(BOOK * BrowserItemBook);
;0B84: xxxxxxxx yyyyyyyy ; 2E1: int Shortcut_Get_MenuItemName(wchar_t *);
;0B88: xxxxxxxx yyyyyyyy ; 2E2: int Shortcut_Get_MenuItemIconID(wchar_t *);
;0B8C: xxxxxxxx yyyyyyyy ; 2E3: BOOK * FindBookEx(int (*cmp_proc)(BOOK* book_from_list ,int * param), int * param);
;0B90: xxxxxxxx yyyyyyyy ; 2E4: FILEITEM *FILEITEM_CreateCopy (FILEITEM *);
;0B94: xxxxxxxx yyyyyyyy ; 2E5: ACTION *ActionCreate(int (*PROC)(void *msg,BOOK*), int BookID, u16 event, APP_DESC *app_desc, PAGE_DESC *pag_desc);
;0B98: xxxxxxxx yyyyyyyy ; 2E6: int BOOK_GetSessionID(BOOK *);
;0B9C: xxxxxxxx yyyyyyyy ; 2E7: void UI_Event_toSID(int event, int sess_id);
;0BA0: xxxxxxxx yyyyyyyy ; 2E8: char *GetIMSI(void);
;0BA4: xxxxxxxx yyyyyyyy ; 2E9: void UI_CONTROLLED_SHUTDOWN_RESPONSE(int book_id);
;0BA8: xxxxxxxx yyyyyyyy ; 2EA: int MainInput_getCurPos(GUI*);
;0BAC: xxxxxxxx yyyyyyyy ; 2EB: void MainInput_Hide(GUI*);
;0BB0: xxxxxxxx yyyyyyyy ; 2EC: void DispObject_SoftKey_RestoreDefaultAction(DISP_OBJ*,int action);
;0BB4: xxxxxxxx yyyyyyyy ; 2ED: STRID PNUM2Name(void *pnum, int isIconNeeded, int only_full_number_flag);
;0BB8: xxxxxxxx yyyyyyyy ; 2EE: int SpeedDial_GetPNUM(int _zero,char charter0__9, void * PNUM);
;0BBC: xxxxxxxx yyyyyyyy ; 2EF: void * MetaData_Desc_Create(wchar_t * path,wchar_t * name);
;0BC0: xxxxxxxx yyyyyyyy ; 2F0: void MetaData_Desc_Destroy(void * MetaData_Desc);
;0BC4: xxxxxxxx yyyyyyyy ; 2F1: wchar_t * MetaData_Desc_GetTags(void * MetaData_Desc,int tagID);
;0BC8: xxxxxxxx yyyyyyyy ; 2F2: int MetaData_Desc_GetTrackNum(void * MetaData_Desc,int __NULL);
;0BCC: xxxxxxxx yyyyyyyy ; 2F3: int DISP_OBJ_GetWindowWidth(DISP_OBJ *);
;0BD0: xxxxxxxx yyyyyyyy ; 2F4: int DISP_OBJ_GetWindowHeight(DISP_OBJ *);
;0BD4: xxxxxxxx yyyyyyyy ; 2F5: int get_system_langID(void);
;0BD8: xxxxxxxx yyyyyyyy ; 2F6: char * lang_get_name(int langID);
;0BDC: xxxxxxxx yyyyyyyy ; 2F7: int w_chdir(const wchar_t *path);
;0BE0: xxxxxxxx yyyyyyyy ; 2F8: int w_fopen(const wchar_t *name, int attr, int rights, int err);
;0BE4: xxxxxxxx yyyyyyyy ; 2F9: int w_fstat(const wchar_t *name, W_FSTAT *);
;0BE8: xxxxxxxx yyyyyyyy ; 2FA: int w_fwrite(int f, void *buf, int size);
;0BEC: xxxxxxxx yyyyyyyy ; 2FB: int w_fread(int f, void *buf, int size);
;0BF0: xxxxxxxx yyyyyyyy ; 2FC: int w_lseek(int f, int offs, int mode);
;0BF4: xxxxxxxx yyyyyyyy ; 2FD: int w_fclose(int f);
;0BF8: xxxxxxxx yyyyyyyy ; 2FE: int w_mkdir(const wchar_t *path, int mode);
;0BFC: xxxxxxxx yyyyyyyy ; 2FF: int DirHandle_SetFilterStr(DIR_HANDLE *, const wchar_t *filter);
;0C00: xxxxxxxx yyyyyyyy ; 300: int Disp_GetStrIdWidth(STRID , int len);
;0C04: xxxxxxxx yyyyyyyy ; 301: int MetaData_Desc_GetCoverInfo(void * MetaData_Desc,char * cover_type,int * size,int * cover_offset);
;0C08: xxxxxxxx yyyyyyyy ; 302: int ImageID_GetIndirect(void * buf_image,int size,int __NULL,wchar_t * image_type,wchar_t * imageID);
;0C0C: xxxxxxxx yyyyyyyy ; 303: void unixtime2datetime(int, DATETIME * );
;0C10: xxxxxxxx yyyyyyyy ; 304: void ListElement_Insert(LIST *lst, int i, void *new_item);
;0C14: xxxxxxxx yyyyyyyy ; 305: int FileCopy(wchar_t *src_path, wchar_t *src_name, wchar_t *dest_path, wchar_t *dest_name, int);
;0C18: xxxxxxxx yyyyyyyy ; 306: int FileMove(wchar_t *src_path, wchar_t *src_name, wchar_t *dest_path, wchar_t *dest_name, int);
;0C1C: xxxxxxxx yyyyyyyy ; 307: void RedLED_On(int __NULL);
;0C20: xxxxxxxx yyyyyyyy ; 308: void RedLED_Off(int __NULL);
;0C24: xxxxxxxx yyyyyyyy ; 309: void DispObject_SetLayerColor(DISP_OBJ *,int color);
;0C28: xxxxxxxx yyyyyyyy ; 30A: int JavaAppDesc_GetJavaAppID(void * JavaDesc);
;0C2C: xxxxxxxx yyyyyyyy ; 30B: void REQUEST_UI_OAF_START_APPLICATION(const int *ASYNC,int appID,char * flag);
;0C30: xxxxxxxx yyyyyyyy ; 30C: int JavaApp_LogoImageID_Get(wchar_t * fullpath,wchar_t * imageID);
;0C34: xxxxxxxx yyyyyyyy ; 30D: GUI * CreateProgressBar(BOOK*,int);
;0C38: xxxxxxxx yyyyyyyy ; 30E: void ProgressBar_SetText(GUI*,STRID text);
;0C3C: xxxxxxxx yyyyyyyy ; 30F: void ProgressBar_SetIcon(GUI*,u16 icon_id);
;0C40: xxxxxxxx yyyyyyyy ; 310: void ProgressBar_SetPercentValue(GUI*,int value);
;0C44: xxxxxxxx yyyyyyyy ; 311: void ProgressBar_SetBarDisabled(GUI*,int disabled);
;0C48: xxxxxxxx yyyyyyyy ; 312: void StringInput_DispObject_SetText(DISP_OBJ *,int StrID);





;locale=Russian_Russia.1251
