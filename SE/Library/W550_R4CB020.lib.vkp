;W550 SW-R4CB020
;Библиотека функций
;v221207
;(c) Hussein , IronMaster
;(p) Ф.Б.

+4561FC00
0440: FFFFFFFF 19963745 ; 110: void *memalloc(int size,int f1,int f2,const char *fname,int fline)
0444: FFFFFFFF 4DA33745 ; 111: void memfree(void * mem,const char * fname ,int fline)
0448: FFFFFFFF 3982D544 ; 112: void memset(void *mem,char chr,int size);
044C: FFFFFFFF B4930E44 ; 113: int memcpy(void *dest,const void *source,int cnt);
0450: FFFFFFFF 618DD544 ; 114: int sprintf(char *buf, char *str, ...);
0454: FFFFFFFF 3994D544 ; 115: int snwprintf(u16* buffer, int size, const u16* fmt, ...);
0458: FFFFFFFF 712F4E45 ; 116: int _fopen(const unsigned short *filpath, const unsigned short *filname,unsigned int mode , unsigned int rights, unsigned int __0);
045C: FFFFFFFF 69414E45 ; 117: int fclose(int file);
0460: FFFFFFFF C9434E45 ; 118: int fread(int file , void *ptr, int size);
0464: FFFFFFFF AD454E45 ; 119: int fwrite(int file , const void *ptr, int size);
0468: FFFFFFFF 754FA244 ; 11A: int _wstat(short *path, void *statbuf)
046C: FFFFFFFF 897C0345 ; 11B: int fputs(const char *s, int file)
0470: FFFFFFFF E5374E45 ; 11C: int isFileExist(u16 * pach, u16 *fname , FSTAT * fstat_stuct);
0474: FFFFFFFF BD124E45 ; 11D: void * AllocDirHandle(u16 * path);
0478: FFFFFFFF 41144E45 ; 11E: void *GetFname(void *, void*);
047C: FFFFFFFF ED2F1745 ; 11F: void * CreateDataBrowser(void);
0480: FFFFFFFF 452F1745 ; 120: void DataBrowser_SetStyle(void * db , int style);
0484: FFFFFFFF 652F1745 ; 121: void DataBrowser_SetHeaderText(void * db , int StrID);
0488: FFFFFFFF 552F1745 ; 122: void DataBrowser_SetFolders(void * db , int * FolderList);
048C: FFFFFFFF 6D2F1745 ; 123: void DataBrowser_SetOKSoftKeyText(void * db , int StrID);
0490: FFFFFFFF 4D251745 ; 124: void DataBrowser_Show(void * db);
0494: FFFFFFFF 75301745 ; 125: void DataBrowser_XXX(void * db);
0498: FFFFFFFF E9574E45 ; 126: unsigned short * getFileExtention(unsigned short * fnane);
049C: FFFFFFFF 75164E45 ; 127: int DataBrowser_isFileInListExt(unsigned short * ext_table,unsigned short * patch ,unsigned short * fname );
04A0: FFFFFFFF 216B1C45 ; 128: void Timer_ReSet(u16 *timerID ,int time, void (*onTimer)(u16 *timerID, void *), void *);
04A4: FFFFFFFF FD6A1C45 ; 129: u16 Timer_Set(int time, void (*onTimer)(u16 *timerID, void *), void *);
04A8: FFFFFFFF 4D6B1C45 ; 12A: void Timer_Kill(u16 *timerID);
04AC: FFFFFFFF 65771C45 ; 12B: int CreateBook(void * mem, void (* onClose)(BOOK*), const PAGE_DESC * bp, const char * name, int __0xFFFFFFFF,int __0);
04B0: FFFFFFFF 5D781C45 ; 12C: void BookObj_KillBook(void *Book);
04B4: FFFFFFFF E1741C45 ; 12D: void BookObj_GotoPage(BOOK * book, const PAGE_DESC * page);
04B8: FFFFFFFF 5D761C45 ; 12E: void BookObj_ReturnPage(BOOK * ,int);
04BC: FFFFFFFF 7D7C1C45 ; 12F: void FreeBook ( void *book);
04C0: FFFFFFFF 4D414545 ; 130: BOOK * FindBook(IS_NEEDED_BOOK);
04C4: FFFFFFFF 45471D45 ; 131: BOOK * Find_StandbyBook(void);
04C8: FFFFFFFF A9791C45 ; 132: void BookObj_SetFocus(void *,int focus);
04CC: FFFFFFFF 3DAB0045 ; 133: void GuiObject_SetTitleText (void * gui , int StrID);
04D0: FFFFFFFF AD040C45 ; 134: void ShowWindow (void * gui);
04D4: FFFFFFFF 09D00945 ; 135: void SetCursorToItem ( void *obj , int item);
04D8: FFFFFFFF 0D050C45 ; 136: void GUI_SetStyle(GUI_NOFMANY *,int style);
04DC: FFFFFFFF 91DA0945 ; 137: int GUIonMessage_GetCreatedItemIndex ( void *msg);
04E0: FFFFFFFF A1DA0945 ; 138: char SetMenuItemText0 ( GUI_MESSAGE *, int StrID);
04E4: FFFFFFFF D1DA0945 ; 139: char SetMenuItemText1 ( GUI_MESSAGE *, int StrID);
04E8: FFFFFFFF B1DA0945 ; 13A: char SetMenuItemText2 ( GUI_MESSAGE *, int StrID);
04EC: FFFFFFFF C1DA0945 ; 13B: char SetMenuItemText3 ( GUI_MESSAGE *, int StrID);
04F0: FFFFFFFF E1DA0945 ; 13C: void SetListObjectItemIcon ( void *msg , int align , int iconID);
04F4: FFFFFFFF 11C12245 ; 13D: void SetHeaderText( void *obj , int StrID);
04F8: FFFFFFFF 1DD00945 ; 13E: int GetFocusetListObjectItem( void *obj);
04FC: FFFFFFFF 81D00945 ; 13F: void SetMenuItemStyle( void *obj , int style);
0500: FFFFFFFF 49EC0B45 ; 140: void putchar( void *xx , int x, int y, int _zero, int zero1 , short wchar);
0504: FFFFFFFF 8D590845 ;8141: IS_NEEDED_BOOK isScreenSaverBook(void);
0508: FFFFFFFF 19FB0745 ; 142: void StatusIndication_SetItemText(void *gui,int item,int StrID); !!!!!
050C: FFFFFFFF 89631D45 ; 143: void StatusIndication_ShowNotes(int StrID);
0510: FFFFFFFF 85230945 ; 144: void * CreateStringInput(int,...);
0514: FFFFFFFF BDEB0945 ; 145: GUI_ONEOFMANY * CreateOneOfMany(BOOK *);
0518: FFFFFFFF 51ED0945 ; 146: void OneOfMany_SetItemCount(GUI_ONEOFMANY * , int count);
051C: FFFFFFFF 75ED0945 ; 147: void OneOfMany_SetChecked(GUI_ONEOFMANY * , int checked);
0520: FFFFFFFF A9ED0945 ; 148: void OneOfMany_SetTexts(GUI_ONEOFMANY * , int * StrID , int Count);
0524: FFFFFFFF 85ED0945 ; 149: int OneOfMany_GetSelected(GUI_ONEOFMANY * rb);
0528: FFFFFFFF A5621D45 ; 14A: void StatusIndication_Item8_SetText(int StrID);
052C: FFFFFFFF 457B0C45 ; 14B: void AddMSGHook(void * menu,short msg,void (*proc)(BOOK *,void*));
0530: FFFFFFFF 2D7C0C45 ; 14C: void AddCommand(void * menu,int cmd , int StrID);
0534: FFFFFFFF 997D0C45 ; 14D: void SoftKey_SetEnable(void *gui,int msg,int ena);
0538: FFFFFFFF 517D0C45 ; 14E: void SoftKey_AddErrorStr(void *gui,int msg,int StrID);
053C: FFFFFFFF D57A0C45 ; 14F: void SoftKey_RemoveItem(void *gui,u16 action);
0540: FFFFFFFF C57C0C45 ; 150: void SoftKey_SetVisible(void *gui,int action,int visible);
0544: FFFFFFFF 41810C45 ; 151: void SoftKey_SuppressDefaultAction(void *gui,int action);
0548: FFFFFFFF 059BD544 ; 152: u16* wstrcpy(u16 * dest, u16 * source);
054C: FFFFFFFF B99BD544 ; 153: u16* wstrncpy(u16 * dest, u16 * source, int maxlen);
0550: FFFFFFFF A59AD544 ; 154: u16* wstrcat(u16 * wstr, u16 * subwstr);
0554: FFFFFFFF 559BD544 ; 155: short* wstrncat(short * wstr, short * subwstr , int maxlen);
0558: FFFFFFFF D59AD544 ; 156: int wstrcmp(unsigned short * wstr1, unsigned short * wstr2);
055C: FFFFFFFF 419BD544 ; 157: int wstrlen(u16 * wstr);
0560: FFFFFFFF 35D7F144 ; 158: u16 * str2wstr(u16 * wstr,char * str);
0564: FFFFFFFF C591D544 ; 159: int strcmp(char * str1, char * str2);
0568: FFFFFFFF 2D92D544 ; 15A: int strlen(char *str);
056C: FFFFFFFF 2DC5F144 ; 15B: char * wstr2strn (char * str , u16 * wstr, int maxlen);
0570: FFFFFFFF BD5B2245 ; 15C: int int2strID (int num);
0574: FFFFFFFF 595F2245 ; 15D: int Str2ID(const void * wstr , int flag , int len);
0578: FFFFFFFF D96A2245 ; 15E: void StrID2Str(int StrID,char * str,int maxlen);
057C: FFFFFFFF D9622245 ; 15F: void TextID2wstr(int StrID,u16 * str,int maxlen);
0580: FFFFFFFF B9612245 ; 160: int TextGetLength(int StrID);
0584: FFFFFFFF 29612245 ; 161: void TextFree(int StrID);
0588: FFFFFFFF 81DF1345 ; 162: int AB_DEFAULTNBR_GET(int rec_num, void * mem_0x30, int * unk);
058C: FFFFFFFF 31331445 ; 163: int AB_READSTRING(void * mem_0x30,int rec_num, int rec_item_num);
0590: FFFFFFFF D9331445 ; 164: int AB_READPHONENBR(void * mem_0x30,int rec_num, int rec_item_num);
0594: FFFFFFFF 79341445 ; 165: int AB_GETNBROFITEMS(int get_from,int unk_0);
0598: FFFFFFFF 3D582245 ; 166: int PNUM_len(void *pnum);
059C: FFFFFFFF 4D963245 ; 167: void PNUM2str(char *str,void *pnum,int len, int max_len);
05A0: FFFFFFFF 89020C45 ; 168: DISP_OBJ * GUIObj_GetDISPObj (void * gui);
05A4: FFFFFFFF FD641A45 ; 169: LIST *List_New(void);
05A8: FFFFFFFF 15651A45 ; 16A: void List_Free(LIST *lst);
05AC: FFFFFFFF 11661A45 ; 16B: void ListElement_AddtoTop(LIST *lst,void *newElement);
05B0: FFFFFFFF 19CA3445 ; 16C: int Gif2ID(u16 IMAGEHANDLE,u16 * path, u16 * fname,u16 * ID);
05B4: FFFFFFFF 59CC4D45 ; 16D: int REQUEST_IMAGEHANDLER_INTERNAL_GETHANDLE(const int * __zero,u16 * IMAGEHANDLE,char * unk);
05B8: FFFFFFFF 15434C45 ; 16E: void REQUEST_DATEANDTIME_GET(const int * __zero , DATETIME *dt);
05BC: FFFFFFFF 2D5D4645 ; 16F: void IndicationDevice_Backlight_FadeToLevel(int unk_zero ,int bl_level);
05C0: FFFFFFFF A5B23745 ; 170: int GetFreeBytesOnHeap(void);
05C4: FFFFFFFF D9791C45 ; 171: void Hide(void * udata, int zero);
05C8: FFFFFFFF ED791C45 ; 172: void Show(void * udata, int zero);
05CC: FFFFFFFF 09491D45 ; 173: void StartAPP (u16 * appname);
05D0: FFFFFFFF 71D10945 ; 174: void ListMenu_SetOnMessages (GUI_LIST * , void * onMessage);
05D4: FFFFFFFF DD924845 ; 175: char * manifest_GetParam(char *buf,char *param_name,int unk);
05D8: FFFFFFFF 35474E45 ; 176: int lseek(int file,int offset,int mode);
05DC: FFFFFFFF FC05074C ;8177: int get_VBUFFER(void); !!!!!
05E0: FFFFFFFF 3368CF44 ; 178: void SetLampLevel (int level);
05E4: FFFFFFFF 99651A45 ; 179: void * ListElement_Remove(LIST *lst,int index);
05E8: FFFFFFFF A5D30A44 ; 17A: int GetCurrentPID(void);
05EC: FFFFFFFF D1651A45 ; 17B: int ListElement_Prt2NumElement(LIST *lst,void *ptr);
05F0: FFFFFFFF 24830E44 ; 17C: union SIGNAL *alloc(OSBUFSIZE size,SIGSELECT signo);
05F4: FFFFFFFF 40830E44 ; 17D: union SIGNAL *receive(const SIGSELECT *sigsel);
05F8: FFFFFFFF 30830E44 ; 17E: void send(union SIGNAL **sig,PROCESS to);
05FC: FFFFFFFF 80830E44 ; 17F: PROCESS sender(union SIGNAL **sig);
0600: FFFFFFFF 50830E44 ; 180: void free_buf(union SIGNAL **sig);
0604: FFFFFFFF 1C840E44 ; 181: PROCESS create_process(int proc_type,char *name,OSENTRYPOINT *entrypoint,OSADDRESS stack_size,OSPRIORITY priority,OSTIME timeslice,PROCESS pid_block,void *redir_table,OSVECTOR vector,OSUSER user);
0608: FFFFFFFF 3C860E44 ; 182: void start(PROCESS pid);
060C: FFFFFFFF EC840E44 ; 183: int get_ptype(PROCESS pid);
0610: FFFFFFFF 38840E44 ; 184: PROCESS current_process(void);
0614: FFFFFFFF 70830E44 ; 185: void delay(OSTIME timeout);
;0618: xxxxxxxx yyyyyyyy ; 186: OSBOOLEAN hunt(const char *name, OSUSER user, PROCESS *name_, union SIGNAL **hunt_sig);
;061C: xxxxxxxx yyyyyyyy ; 187: void kill_proc(PROCESS pid);
0680: FFFFFFFF F591D544 ; 1A0: char* strcpy(char * dest, char * source);
0684: FFFFFFFF 0D77FC44 ; 1A1: void *CreateMessage(int size,int ev,char *name);
0688: FFFFFFFF 6177FC44 ; 1A2: void SendMessage(void **signal,int PID);
068C: FFFFFFFF F177FC44 ; 1A3: void * WaitMessage(void *SIGSEL);
0690: FFFFFFFF 1178FC44 ; 1A4: int FreeMessage(void **Mess);
0694: FFFFFFFF E9E11845 ; 1A5: void SendDispatchMessage(int id, int unk_zero, int size,void *mess);
0698: FFFFFFFF C5915645 ; 1A6: char * UIEventName(int event);
069C: FFFFFFFF 588D264C ;81A7: int * MissedEvents(void);
06A0: FFFFFFFF 69424545 ; 1A8: void UI_Event(int event);
06A4: FFFFFFFF 75424545 ; 1A9: void UI_Event_wData(int event,void *message,void (*mfree)(void*));
06A8: FFFFFFFF 98424545 ; 1AA: void UI_Event_toSID(int event,int SessionID);
06AC: FFFFFFFF A9424545 ; 1AB: void UI_Event_toSIDwData(int event,int SedionID,void *message,void (*mfree)(void*));
06B0: FFFFFFFF C1681A45 ; 1AC: int ListElement_Find(LIST *lst,void *element, int (*cmp_proc)(void *,void *));
06B4: FFFFFFFF A1671A45 ; 1AD: void * ListElement_GetByIndex(LIST * , int index);
06B8: FFFFFFFF 099CD544 ; 1AE: u16* wstrrchr(u16*wstr, u16 wchar);
06BC: FFFFFFFF 5D751C45 ; 1AF: void BookObj_CallSubroutine(BOOK * , void * SubProcDesc);
06C0: FFFFFFFF 21661A45 ; 1B0: void ListElement_Add(LIST *lst,void *newElement);
06C4: FFFFFFFF 15A6D044 ; 1B1: void debug_printf(char * fmt,...);
06C8: FFFFFFFF 45F80745 ; 1B2: int PlayFile(u16 * path, u16 * fname);
06D0: FFFFFFFF 2D605745 ; 1B4: int REQUEST_PROFILE_GETACTIVEPROFILE(const int *__zero , int *level);
06D4: FFFFFFFF 89605745 ; 1B5: void REQUEST_PROFILE_SETACTIVEPROFILE(const int *__zero , int NUMprof);
06DC: FFFFFFFF 5D3B0845 ; 1B7: int isKeylocked(void);
06E0: FFFFFFFF C1A23645 ;81B8: IS_NEEDED_BOOK isMediaPlayerVideoBook(void);
06E4: FFFFFFFF A1EBE944 ; 1B9: void VideoOnWholeScreen(BOOK * MediaPlayer_Video_Book); // вместо get_APP_DESC_TABLE
06EC: FFFFFFFF 2D2C3845 ; 1BB: void Vibra(int t1, int t2, int t3);
;06F8: xxxxxxxx yyyyyyyy ; 1BE: int Date2ID(DATE *, int TimeFormat,int);
06FC: FFFFFFFF 8DC50745 ; 1BF: int Time2ID(TIME *, char TimeFormat,int);
0700: FFFFFFFF 0DCE0945 ; 1C0: GUI_LIST * CreateListObject(BOOK * , void * unk);
0704: FFFFFFFF 35D00945 ; 1C1: void SetNumOfMenuItem(void * , int item_count);
0708: FFFFFFFF 18F4254c ;81C2: LIST ** ROOT_APP(void);
070C: FFFFFFFF F17B0C45 ; 1C3: void SoftKey_AddHelpStr(void *gui,int msg,int StrID);
0710: FFFFFFFF E17D0C45 ; 1C4: void SoftKey_SetItemAsSubItem(void *gui,int item,int subitem);
0714: FFFFFFFF DDC95645 ; 1C5: int REQUEST_SYSTEM_SHUTDOWN(void);
0718: FFFFFFFF EDC95645 ; 1C6: int REQUEST_SYSTEM_RESTART(void);
071C: FFFFFFFF 2D7C0C45 ; 1C7: void SoftKeys_SetText(void *gui,int msg,int StrID,int StrID1);
0720: FFFFFFFF 75875245 ; 1C8: int isRightNowBook(BOOK *);
0724: FFFFFFFF EDC65645 ; 1C9: int isVolumeControllerBook(BOOK *);
0728: FFFFFFFF F5F00745 ; 1CA: GUI_TABMENUBAR * CreateTabMenuBar(BOOK *);
072C: FFFFFFFF 05F20745 ; 1CB: void TabMenuBar_SetTabCount(GUI_TABMENUBAR * , int count);
0730: FFFFFFFF E9F20745 ; 1CC: void TabMenuBar_AssignGuiObj(GUI_TABMENUBAR * , int tab , GUI_NOFMANY *);
0734: FFFFFFFF C5F30745 ; 1CD: void TabMenuBar_SetTabIcon(GUI_TABMENUBAR *,int tab, u16 icon , int for_state);
0738: FFFFFFFF 2D020C45 ; 1CE: void GUI_Free(GUI*);
073C: FFFFFFFF 81060C45 ; 1CF: void GUI_SetIcon(GUI* , int icon);
0740: FFFFFFFF 2D2C0945 ; 1D0: int StringInput_GetStringAndLen (GUI*,u16**,u16*);
074C: FFFFFFFF D9554E45 ; 1D3: int GetVolumeSize(char * volume, VOLUMESIZE *);
0750: FFFFFFFF 01E60945 ; 1D4: GUI_NOFMANY * CreateNOfMany(BOOK *);
0754: FFFFFFFF 41E80945 ; 1D5: void NOfMany_SetTexts(GUI_NOFMANY * , int * StrIDtable, int items_count);
0758: FFFFFFFF ADE70945 ; 1D6: void NOfMany_SetChecked(GUI_NOFMANY * , u16 * checked_table, int items_count);
075C: FFFFFFFF 6DE70945 ; 1D7: void NOfMany_SetCursor(GUI_NOFMANY * , int item);
0760: FFFFFFFF D5E70945 ; 1D8: int NOfMany_GetCheckedCount(GUI_NOFMANY *);
0764: FFFFFFFF C1E70945 ; 1D9: int NOfMany_GetChecked(GUI_NOFMANY * , u16 * buffer );
0768: FFFFFFFF 39E80945 ; 1DA: void NOfMany_SetonMessage(GUI_NOFMANY * , void * proc );
0780: FFFFFFFF 35ED0945 ; 1E0: void OneOfMany_SetFocused(GUI_ONEOFMANY * , int item);
0784: FFFFFFFF A1ED0945 ; 1E1: void OneOfMany_SetonMessage(GUI_ONEOFMANY * , void * proc);
0788: FFFFFFFF 29430845 ; 1E2: GUI_FEEDBACK * CreateFeedBack (int,...);
078C: FFFFFFFF C5430845 ; 1E3: void FeedBack_SetText(GUI_FEEDBACK*,int);
0790: FFFFFFFF 913ACD44 ; 1E4: int GetBattaryState(const int * , BATT *);
0794: FFFFFFFF 21E10B45 ; 1E5: void * get_DisplayGC (void);
0798: FFFFFFFF 49A32245 ; 1E6: void GetGuiRect(void*,RECT*);
079C: FFFFFFFF 39E70B45 ; 1E7: void get_GC_RECT(void*,RECT*);
07A0: FFFFFFFF 4DEA0B45 ; 1E8: int get_GC_xx(void * GC);
07A4: FFFFFFFF 41EA0B45 ; 1E9: void *set_GC_xx(void * GC, int);
07A8: FFFFFFFF E1E60B45 ; 1EA: void GC_validate_RECT(void * GC , RECT*);
07AC: FFFFFFFF 617A1C45 ; 1EB: void addGui2book(BOOK*,GUI*);
07B0: FFFFFFFF D1DF2245 ; 1EC: void DrawRect(int x1, int y1,int x2 ,int y2,int pen_color,int brush_color);
07B4: FFFFFFFF D9E32245 ; 1ED: void DrawString(int StrID,int align,int x1,int y1,int x2,int y2,int unk,int unk1,int pen_color ,int brush_color);
07B8: FFFFFFFF 09FF1C45 ; 1EE: void addGui2XGuiList (void* xguilist , GUI*);
07BC: FFFFFFFF ADA12245 ; 1EF: void InvalidateRect(DISP_OBJ *,RECT*);
07C0: FFFFFFFF 61010C45 ; 1F0: int CreateObject(GUI*,void (*)(DISP_DESC *),void (*)(DISP_DESC *),BOOK *,void(*)(),int,int size_obj);
07C4: FFFFFFFF 19EF2245 ; 1F1: int SetFont(int);
07C8: FFFFFFFF 2424264C ;81F2: DISP_OBJ ** StatusRow_p(void); !!!!!
07CC: FFFFFFFF 41424545 ; 1F3: int root_list_get_session_count(void);
07D0: FFFFFFFF 55424545 ; 1F4: UI_APP_SESSION *root_list_get_session(int num_session);
07D4: FFFFFFFF 313B4545 ; 1F5: BOOK *SESSION_GetTopBook(UI_APP_SESSION *);
07D8: FFFFFFFF E1460845 ; 1F6: int MainInput_getVisible(GUI *);
07DC: FFFFFFFF ED460845 ; 1F7: int MainInput_strlen(GUI *);
07E0: FFFFFFFF 0D470845 ; 1F8: char * MainInput_getPNUM(GUI *);
07E4: FFFFFFFF 19470845 ; 1F9: int MainInput_isPlus(GUI *);
07E8: FFFFFFFF 653B4545 ; 1FA: int BOOK_GetSessionID(BOOK * );
07EC: FFFFFFFF 7D9BD544 ; 1FB: int wstrncmp(u16*,u16*,int);
07F0: FFFFFFFF 65BF2245 ; 1FC: int DISP_OBJ_GetAbsoluteXPos(DISP_OBJ *);
07F4: FFFFFFFF 9DBF2245 ; 1FD: int DISP_OBJ_GetAbsoluteYPos(DISP_OBJ *);
07F8: FFFFFFFF 51A82245 ; 1FE: WINDOW * DISP_OBJ_GetWindow(DISP_OBJ *);
07FC: FFFFFFFF 89594545 ; 1FF: int GetThemeColor(int , int);
0800: FFFFFFFF 01585745 ; 200: int REQUEST_SETTING_SILENCE_SET(const int * __zero,u16 profile,u16 value);
0804: FFFFFFFF A5575745 ; 201: int REQUEST_SETTING_SILENCE_GET(const int * __zero,u16 profile, char * silence_mode);
0808: FFFFFFFF A5575745 ; 202: void VCALL_Init (void* vc);
080C: FFFFFFFF 8C741345 ; 203: void VCALL_SetName (void * vc , u16 * name ,char name_len);
0810: FFFFFFFF F1741345 ; 204: void VCALL_SetNameIcon (void * vc , u16 icon);
0814: FFFFFFFF AD741345 ; 205: void VCALL_SetNumber (void * vc , u16 * number , char num_len);
0818: FFFFFFFF D5741345 ; 206: void VCALL_SetHZ1 (void * vc, int , u16 );
081C: FFFFFFFF E1741345 ; 207: void VCALL_SetHZ2 (void * vc , u16 );
0820: FFFFFFFF D16B1345 ; 208: void MakeVoiceCall (int SessioID , void * vc ,int flag);
0824: FFFFFFFF 4D1D0645 ; 209: int isDirectory (u16 * path ,u16 * filename , int * error );
0828: FFFFFFFF FD384E45 ; 20A: void FileDelete (u16 * path ,u16 * filename , int * error );
082C: FFFFFFFF 55040C45 ; 20B: void SetFocus (GUI * , int);
0830: FFFFFFFF 3D973945 ; 20C: int CreateSMSCont (int, void*);
0834: FFFFFFFF 4D9C3945 ; 20D: int FreeSMSCont (void*);
0838: FFFFFFFF 9D983945 ; 20E: int PrepareSMSCont (void*,u16*,u16*,int,int);
083C: FFFFFFFF 9D9B3945 ; 20F: int CteateNewMessage (int,void*,int);
0840: FFFFFFFF 20434644 ;8210: void * get_APP_DESC_TABLE(void);
0844: FFFFFFFF 39854645 ; 211: C_INTERFACE *Window_GetComponentInterface(WINDOW*);
0848: FFFFFFFF A9361445 ; 212: int AB_POSITIONNBR_GET(void * ab_name,char * ,u16 * ,void * ab_num);
084C: FFFFFFFF 49351445 ; 213: int AB_NAME_ITEM2StrID(void * ab_name);
0850: FFFFFFFF 9D351445 ; 214: int AB_NUM_ITEM2StrID(void * ab_num_item);
0854: FFFFFFFF B9335745 ; 215: int GetABRecNum(AB_GET_STRUCT *);
0858: FFFFFFFF 08CD4344 ;8216: AB_ITEM_DESC * get_AB_ITEMS_DESC();
085C: FFFFFFFF 5129C444 ; 217: GUI * SBY_GetMainInput(BOOK * StandBy)
0860: FFFFFFFF 4D29C444 ; 218: GUI * SBY_GetStatusIndication(BOOK * StandBy)
0864: FFFFFFFF 2D6C4C45 ; 219: int REQUEST_PHONEBOOK_ACCESSSTATUS_TOTAL_GET(const int * __zero, int *);
0868: FFFFFFFF FC460A4C ;821A: int * PID_MMI(void);
0874: FFFFFFFF 119B2245 ; 21D: DISP_OBJ* DISPBASE_GetFocused(int display);
0878: FFFFFFFF 31A02245 ; 21E: char DISP_OBJ_getVisible(DISP_OBJ*);
087C: FFFFFFFF 0D532445 ; 21F: DISP_DESC* DISP_OBJ_GetDESC (DISP_OBJ*);
0880: FFFFFFFF 49942245 ; 220: void DISP_DESC_SetName (DISP_DESC* , const char * name);
0884: FFFFFFFF 6DBD2245 ; 221: char* DISP_OBJ_GetName (DISP_OBJ *);
0888: FFFFFFFF 59942245 ; 222: void DISP_DESC_SetSize (DISP_DESC* , u16 size);
;088C: xxxxxxxx yyyyyyyy ; 223: u16 DISP_DESC_GetSize (DISP_OBJ *);
0890: FFFFFFFF 5D942245 ; 224: void DISP_DESC_SetOnCreate (DISP_DESC* , DISP_OBJ_ONCREATE_METHOD);
0894: FFFFFFFF 89962245 ; 225: DISP_OBJ_ONCREATE_METHOD DISP_OBJ_GetOnCreate (DISP_OBJ *);
0898: FFFFFFFF 61942245 ; 226: void DISP_DESC_SetOnClose (DISP_DESC* , DISP_OBJ_ONCLOSE_METHOD);
089C: FFFFFFFF A9962245 ; 227: DISP_OBJ_ONCLOSE_METHOD DISP_OBJ_GetOnClose (DISP_OBJ *);
08A0: FFFFFFFF 65942245 ; 228: void DISP_DESC_SetOnRedraw (DISP_DESC* , DISP_OBJ_ONREDRAW_METHOD);
08A4: FFFFFFFF C9962245 ; 229: DISP_OBJ_ONREDRAW_METHOD DISP_OBJ_GetOnRedraw (DISP_OBJ *);
08A8: FFFFFFFF 6D942245 ; 22A: void DISP_DESC_SetOnKey (DISP_DESC* , DISP_OBJ_ONKEY_METHOD);
08AC: FFFFFFFF 09972245 ; 22B: DISP_OBJ_ONKEY_METHOD DISP_OBJ_GetOnKey (DISP_OBJ *);
;08B0: xxxxxxxx yyyyyyyy ; 22C: void DISP_DESC_SetMethod03 (DISP_DESC* ,void (*)(void*));
;08B4: xxxxxxxx yyyyyyyy ; 22D: DISP_OBJ_METHOD DISP_OBJ_GetMethod03 (DISP_OBJ *);
;08B8: xxxxxxxx yyyyyyyy ; 22E: void DISP_DESC_SetMethod04 (DISP_DESC* ,void (*)(void*));
;08BC: xxxxxxxx yyyyyyyy ; 22F: DISP_OBJ_METHOD DISP_OBJ_GetMethod04 (DISP_OBJ *);
;08C0: xxxxxxxx yyyyyyyy ; 230: void DISP_DESC_SetMethod05 (DISP_DESC* ,void (*)(void*));
;08C4: xxxxxxxx yyyyyyyy ; 231: DISP_OBJ_METHOD DISP_OBJ_GetMethod05 (DISP_OBJ *);
08C8: FFFFFFFF 71942245 ; 232: void DISP_DESC_SetMethod06 (DISP_DESC* ,DISP_OBJ_METHOD);
08CC: FFFFFFFF 29972245 ; 233: DISP_OBJ_METHOD DISP_OBJ_GetMethod06 (DISP_OBJ *);
;08D0: xxxxxxxx yyyyyyyy ; 234: void DISP_DESC_SetMethod07 (DISP_DESC* ,void (*)(void*));
;08D4: xxxxxxxx yyyyyyyy ; 235: DISP_OBJ_METHOD DISP_OBJ_GetMethod07 (DISP_OBJ *);
;08D8: xxxxxxxx yyyyyyyy ; 236: void DISP_DESC_SetMethod08 (DISP_DESC* ,DISP_OBJ_METHOD);
08DC: FFFFFFFF 69972245 ; 237: DISP_OBJ_METHOD DISP_OBJ_GetMethod08 (DISP_OBJ *);
;08E0: xxxxxxxx yyyyyyyy ; 238: void DISP_DESC_SetMethod09 (DISP_DESC* ,void (*)(void*));
;08E4: xxxxxxxx yyyyyyyy ; 239: DISP_OBJ_METHOD DISP_OBJ_GetMethod09 (DISP_OBJ *);
;08E8: xxxxxxxx yyyyyyyy ; 23A: void DISP_DESC_SetMethod0A (DISP_DESC* ,void (*)(void*));
;08EC: xxxxxxxx yyyyyyyy ; 23B: DISP_OBJ_METHOD DISP_OBJ_GetMethod0A (DISP_OBJ *);
;08F0: xxxxxxxx yyyyyyyy ; 23C: void DISP_DESC_SetMethod0B (DISP_DESC* ,void (*)(void*));
;08F4: xxxxxxxx yyyyyyyy ; 23D: DISP_OBJ_METHOD DISP_OBJ_GetMethod0B (DISP_OBJ *);
;08F8: xxxxxxxx yyyyyyyy ; 23E: void DISP_DESC_SetMethod0C (DISP_DESC* ,void (*)(void*));
;08FC: xxxxxxxx yyyyyyyy ; 23F: DISP_OBJ_METHOD DISP_OBJ_GetMethod0C (DISP_OBJ *);
0900: FFFFFFFF 71A95645 ; 240: void JavaSession_Manager (int cmd);
0904: FFFFFFFF B9A85645 ; 241: int JavaSession_GetName(void);
0908: FFFFFFFF 7BCF3F45 ; 242: int TextCopyId(int);
090C: FFFFFFFF B57C1C45 ; 243: UI_APP_SESSION *Book_GetSession(BOOK*);
0910: FFFFFFFF 2DDB0945 ; 244: void List2lineSetAsSubitem (void* msg,int unk,int n_sub_items);
0914: FFFFFFFF A9DB0945 ; 245: void List2lineSubitemAddText(void* msg,int StrID);
0918: FFFFFFFF 99DB0945 ; 246: int GUIonMessage_GetCreatedSubItemParrentIndex(void * msg);
091c: FFFFFFFF 51D30545 ; 247: go_music (int go);
0920: FFFFFFFF 052D3845 ; 248: void Vibra_Off (int t1);
0948: FFFFFFFF 89DB0945 ; 252: int List2LineGetCurrentIndex(void * msg);
094C: FFFFFFFF 89DB0945 ; 253: int GUIonMessage_GetCurrentItemIndex(void * msg);
0950: FFFFFFFF C9154E45 ; 254: void DestroyDirHandle(void *handle);
0954: FFFFFFFF 18e24444 ;8255: DB_EXT *LastExtDB(void);
0958: FFFFFFFF 211a4f45 ; 256: void GetOtherExtMethods(FILESUBROUTINE **);
095C: FFFFFFFF e56b4545 ; 257: void MessageBox(int HeaderStrID,int MessageStrID,int IconID, int style /*1 or 2*/,int time,BOOK * unk);
0960: FFFFFFFF 01AA4645 ; 258: int Display_GetHeight(int Display);
0964: FFFFFFFF 11AA4645 ; 259: int Display_GetWidth(int Display);
0968: FFFFFFFF 69F70745 ; 25A: void PlaySystemSound (int SndNumber);
;0974: xxxxxxxx yyyyyyyy ; 25D: int TabMenuBar_GetFocusedTabIndex(GUI * );
;0978: xxxxxxxx yyyyyyyy ; 25E: void TabMenuBar_SetTabFocused(GUI_TABMENUBAR * , int tab_num);
;097C: xxxxxxxx yyyyyyyy ; 25F: int GC_GetPenColor (void* GC);
;0980: xxxxxxxx yyyyyyyy ; 260: void GC_SetPenColor(void* GC , int pen_color);
;0984: xxxxxxxx yyyyyyyy ; 261: void GC_SetPixel (void* GC,int x1,int y1,int color);
;0988: xxxxxxxx yyyyyyyy ; 262: void GC_DrawLine(void* GC,int x1, int y1, int x2, int y2);
;098C: xxxxxxxx yyyyyyyy ; 263: void GC_DrawFRect (void* GC,int color,int x1,int y1,int x2 ,int y2);
;0990: xxxxxxxx yyyyyyyy ; 264: int GC_DrawBitmap(void *GC, int x1, int y1, int x2, int y2, int * bmp);
;0994: xxxxxxxx yyyyyyyy ; 265: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
;0998: xxxxxxxx yyyyyyyy ; 266: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
;099C: xxxxxxxx yyyyyyyy ; 267: png_infop png_create_info_struct(png_structp png_ptr);
;09A0: xxxxxxxx yyyyyyyy ; 268: void png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr);
;09A4: xxxxxxxx yyyyyyyy ; 269: void png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr, png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn, png_progressive_end_ptr end_fn);
;09A8: xxxxxxxx yyyyyyyy ; 26A: void png_process_data(png_structp png_ptr, png_infop info_ptr, png_bytep buffer, png_size_t buffer_size);
;09AC: xxxxxxxx yyyyyyyy ; 26B: void png_read_update_info(png_structp png_ptr, png_infop info_ptr);
;09B0: xxxxxxxx yyyyyyyy ; 26C: png_voidp png_get_progressive_ptr(png_structp png_ptr);
;09B4: xxxxxxxx yyyyyyyy ; 26D: png_uint_32 png_get_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
;09B8: xxxxxxxx yyyyyyyy ; 26E: void png_set_strip_16(png_structp png_ptr);
;09BC: xxxxxxxx yyyyyyyy ; 26F: void png_set_gray_1_2_4_to_8(png_structp png_ptr);
;09C0: xxxxxxxx yyyyyyyy ; 270: void png_set_gray_to_rgb(png_structp png_ptr);
;09C4: xxxxxxxx yyyyyyyy ; 271: png_uint_32 png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag);
;09C8: xxxxxxxx yyyyyyyy ; 272: void png_set_tRNS_to_alpha(png_structp png_ptr);
;09CC: xxxxxxxx yyyyyyyy ; 273: void png_set_filler(png_structp png_ptr, png_uint_32 filler, int flags);
;09D0: xxxxxxxx yyyyyyyy ; 274: void png_set_palette_to_rgb(png_structp png_ptr);
;09D4: xxxxxxxx yyyyyyyy ; 275: png_uint_32 png_get_rowbytes(png_structp png_ptr, png_infop info_ptr);
;09D8: xxxxxxxx yyyyyyyy ; 276: void png_progressive_combine_row(png_structp png_ptr, png_bytep old_row, png_bytep new_row);
;09DC: xxxxxxxx yyyyyyyy ; 277: int png_sig_cmp(png_bytep sig, png_size_t start, png_size_t num_to_check);
;09E0: xxxxxxxx yyyyyyyy ; 278: int setjmp(jmp_buf jmpbuf);
;09E4: xxxxxxxx yyyyyyyy ; 279: void longjmp(jmp_buf, int);
;09E8: xxxxxxxx yyyyyyyy ; 27A: int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size);
;09EC: xxxxxxxx yyyyyyyy ; 27B: int inflate (z_streamp strm, int flush);
;09F0: xxxxxxxx yyyyyyyy ; 27C: int inflateEnd (z_streamp strm);
;09F4: xxxxxxxx yyyyyyyy ; 27D: int memcmp (const void *m1,const void *m2,int n);
;09F8: xxxxxxxx yyyyyyyy ; 27E: int strncmp(const char *s1, const char *s2, int len);
;09FC: xxxxxxxx yyyyyyyy ; 27F: char *strncpy (char *dest,const char *source,int maxlen);
;0A00: xxxxxxxx yyyyyyyy ; 280: char *strcat(char *dest, const char *src);
;0A04: xxxxxxxx yyyyyyyy ; 281: void GuiObject_SetTitleType(GUI *gui, int type);
;0A08: xxxxxxxx yyyyyyyy ; 282: void GUIonMessage_SetItemDisabled (void * msg, int Disabled);
;0A0C: xxxxxxxx yyyyyyyy ; 283: int REQUEST_IMAGEHANDLER_INTERNAL_REGISTER(const int * __zero,u16 ImageHandle,u16*,u16*,int unk, u16 * ImageID ,char * error);
;0A10: xxxxxxxx yyyyyyyy ; 284: int REQUEST_IMAGEHANDLER_INTERNAL_UNREGISTER (const int * __zero,u16 ImageHandle,u16* ,u16* ,int ImageID, int unk_1,char * error);





;locale=Russian_Russia.1251
