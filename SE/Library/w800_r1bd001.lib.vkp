;W800 SW-R1BD001
;Библиотека функций
;
;(c) Hussein , IronMaster
;(p) HierOS

+451FFC00
0448: FFFFFFFF 8D2FB444 ; 112: void memset(void *mem,char chr,int size);
044C: FFFFFFFF 609D0644 ; 113: int memcpy(void *dest,const void *source,int cnt);
0450: FFFFFFFF B53AB444 ; 114: int sprintf(char *buf, const char *fmt, ...);
0454: FFFFFFFF 9941B444 ; 115: int snwprintf(wchar_t* buffer, int size, const wchar_t* fmt, ...);
0458: FFFFFFFF 29570E45 ; 116: int _fopen(const wchar_t *filpath, const wchar_t *filname,unsigned int mode , unsigned int rights, unsigned int __0);
045C: FFFFFFFF 09690E45 ; 117: int fclose(int file);
0460: FFFFFFFF 256C0E45 ; 118: int fread(int file , void *ptr, int size);
0464: FFFFFFFF C16E0E45 ; 119: int fwrite(int file , const void *ptr, int size);
0468: FFFFFFFF 0DD58044 ; 11A: int _wstat(short *path, void *statbuf)
046C: FFFFFFFF 49BCCF44 ; 11B: int fputs(const char *s, int file)
0470: FFFFFFFF E95F0E45 ; 11C: int fstat(const wchar_t * path, const wchar_t *fname , FSTAT * fstat_stuct);
0474: FFFFFFFF A13C0E45 ; 11D: DIR_HANDLE * AllocDirHandle(const wchar_t * path);
0478: FFFFFFFF 453E0E45 ; 11E: FILELISTITEM *GetFname(DIR_HANDLE *, FILELISTITEM *);
047C: FFFFFFFF 7955E244 ; 11F: void * DataBrowserDesc_Create(void);
0480: FFFFFFFF 9153E244 ; 120: void DataBrowserDesc_SetStyle(void * db , int style);
0484: FFFFFFFF 2154E244 ; 121: void DataBrowserDesc_SetHeaderText(void * db , int StrID);
0488: FFFFFFFF D953E244 ; 122: void DataBrowserDesc_SetFolders(void * db , wchar_t const ** FolderList);
048C: FFFFFFFF 4554E244 ; 123: void DataBrowserDesc_SetOKSoftKeyText(void * db , int StrID);
0490: FFFFFFFF E545E244 ; 124: void DataBrowser_Create(void * db);
0494: FFFFFFFF 0156E244 ; 125: void DataBrowserDesc_Destroy(void * db);
0498: FFFFFFFF D97F0E45 ; 126: wchar_t * getFileExtention(wchar_t * fnane);
049C: FFFFFFFF D9400E45 ; 127: int DataBrowser_isFileInListExt(const wchar_t * ext_table,const wchar_t * path ,const wchar_t *fname );
04A0: FFFFFFFF DD1DE844 ; 128: void Timer_ReSet(u16 * timer ,int time, void (*onTimer)(u16 timerID, LPARAM lparam), LPARAM lparam);
04A4: FFFFFFFF A51DE844 ; 129: u16 Timer_Set(int time, void (*onTimer)(u16 timerID, LPARAM lparam), LPARAM lparam);
04A8: FFFFFFFF 2D1EE844 ; 12A: void Timer_Kill(u16 *timerID);
04AC: FFFFFFFF 652AE844 ; 12B: int CreateBook(void * mem, void (* onClose)(BOOK*), const PAGE_DESC * bp, const char * name, int __0xFFFFFFFF,int __0);
04B0: FFFFFFFF 7D2BE844 ; 12C: void BookObj_KillBook(void *Book);
04B4: FFFFFFFF BD27E844 ; 12D: void BookObj_GotoPage(BOOK * book, const PAGE_DESC * page);
04B8: FFFFFFFF 4529E844 ; 12E: void BookObj_ReturnPage(BOOK * ,int);
04BC: FFFFFFFF 9130E844 ; 12F: void FreeBook ( BOOK *book);
04C0: FFFFFFFF C9B40545 ; 130: BOOK * FindBook(IS_NEEDED_BOOK);
04C4: FFFFFFFF F579EA44 ; 131: BOOK * Find_StandbyBook(void);
04C8: FFFFFFFF F52CE844 ; 132: void BookObj_SetFocus(void *,int focus);
04CC: FFFFFFFF C596D344 ; 133: void GuiObject_SetTitleText (void * gui , int StrID);
04D0: FFFFFFFF C995D344 ; 134: void ShowWindow (void * gui);
04D4: FFFFFFFF D142D644 ; 135: void SetCursorToItem ( void *obj , int item);
04D8: FFFFFFFF 1996D344 ; 136: void GUI_SetStyle(GUI *,int style);
04DC: FFFFFFFF A549D644 ; 137: int GUIonMessage_GetCreatedItemIndex ( void *msg);
04E0: FFFFFFFF B549D644 ; 138: char SetMenuItemText0 ( GUI_MESSAGE *, int StrID);
04E4: FFFFFFFF E549D644 ; 139: char SetMenuItemText1 ( GUI_MESSAGE *, int StrID);
04E8: FFFFFFFF C549D644 ; 13A: char SetMenuItemText2 ( GUI_MESSAGE *, int StrID);
04EC: FFFFFFFF D549D644 ; 13B: char SetMenuItemText3 ( GUI_MESSAGE *, int StrID);
04F0: FFFFFFFF F549D644 ; 13C: void SetListObjectItemIcon ( void *msg , int align , wchar_t iconID);
04F4: FFFFFFFF B1BEE844 ; 13D: void DispObject_SetTitleText(DISP_OBJ* DispObj , int StrID);
04F8: FFFFFFFF E542D644 ; 13E: int ListMenu_GetSelectedItem(GUI_LIST * );
04FC: FFFFFFFF 3143D644 ; 13F: void SetMenuItemStyle( void *obj , int style);
0500: FFFFFFFF 1932D444 ; 140: void putchar( void *xx , int x, int y, int _zero, int zero1 , short wchar);
0504: FFFFFFFF 8D8CD444 ;8141: IS_NEEDED_BOOK isScreenSaverBook(void);
0508: FFFFFFFF 59DAD344 ; 142: void StatusIndication_SetItemText(void *gui,int item,int StrID);
050C: FFFFFFFF 4597EA44 ; 143: void StatusIndication_ShowNotes(int StrID);
0510: FFFFFFFF 6189D544 ; 144: GUI * CreateStringInput(int,...);
0514: FFFFFFFF B158D644 ; 145: GUI_ONEOFMANY * CreateOneOfMany(BOOK *);
0518: FFFFFFFF 7DEED344 ; 146: void OneOfMany_SetItemCount(GUI_ONEOFMANY * , int count);
051C: FFFFFFFF 0D5AD644 ; 147: void OneOfMany_SetChecked(GUI_ONEOFMANY * , int checked);
0520: FFFFFFFF 355AD644 ; 148: void OneOfMany_SetTexts(GUI_ONEOFMANY * , int * StrID , int Count);
0524: FFFFFFFF 2DEFD344 ; 149: int OneOfMany_GetSelected(GUI_ONEOFMANY * rb);
0528: FFFFFFFF 6196EA44 ; 14A: void StatusIndication_Item8_SetText(int StrID);
052C: FFFFFFFF 09ADD344 ; 14B: void GUIObject_Softkey_SetAction(void * gui,u16 actionID,void (*proc)(BOOK *,void*));
0530: FFFFFFFF F1ADD344 ; 14C: void GUIObject_Softkey_SetText(void * gui,u16 actionID , int StrID);
0534: FFFFFFFF B5ADD344 ; 14D: void GUIObject_SoftKey_SetEnable(void *gui,u16 actionID,int ena);
0538: FFFFFFFF 8DB0D344 ; 14E: void GUIObject_SoftKey_AddErrorStr(void *gui,u16 actionID,int StrID);
053C: FFFFFFFF D9B0D344 ; 14F: void GUIObject_SoftKey_RemoveItem(void *gui,u16 actionID);
0540: FFFFFFFF 89AED344 ; 150: void GUIObject_SoftKey_SetVisible(void *gui,u16 actionID,int visible);
0544: FFFFFFFF 4DB3D344 ; 151: void GUIObject_SoftKey_SuppressDefaultAction(void *gui,u16 actionID);
0548: FFFFFFFF 5D07BF44 ; 152: wchar_t* wstrcpy(wchar_t * dest, const wchar_t * source);
054C: FFFFFFFF A507BF44 ; 153: wchar_t* wstrncpy(wchar_t * dest, const wchar_t * source, int maxlen);
0550: FFFFFFFF 0508BF44 ; 154: wchar_t* wstrcat(wchar_t * wstr, const wchar_t * subwstr);
0554: FFFFFFFF 5108BF44 ; 155: wchar_t *wstrncat(wchar_t *wstr, const wchar_t *subwstr , int maxlen);
0558: FFFFFFFF 0D07BF44 ; 156: int wstrcmp(const wchar_t *wstr1, const wchar_t *wstr2);
055C: FFFFFFFF E106BF44 ; 157: int wstrlen(const wchar_t * wstr);
0560: FFFFFFFF B11BBF44 ; 158: wchar_t * str2wstr(wchar_t * wstr, const char * str);
0564: FFFFFFFF 193FB444 ; 159: int strcmp(const char * str1, const char * str2);
0568: FFFFFFFF 813FB444 ; 15A: int strlen(const char *str);
056C: FFFFFFFF 4509BF44 ; 15B: char * wstr2strn (char * str , const wchar_t * wstr, int maxlen);
0570: FFFFFFFF F53DEF44 ; 15C: int int2strID (int num);
0574: FFFFFFFF C541EF44 ; 15D: int Str2ID(const void * wstr , int flag , int len);
0578: FFFFFFFF 954EEF44 ; 15E: void StrID2Str(int StrID,char * str,int maxlen);
057C: FFFFFFFF 5146EF44 ; 15F: void TextID2wstr(int StrID,wchar_t * str,int maxlen);
0580: FFFFFFFF 3145EF44 ; 160: int TextGetLength(int StrID);
0584: FFFFFFFF 9D44EF44 ; 161: void TextFree(int StrID);
0588: FFFFFFFF 254EDF44 ; 162: int AB_DEFAULTNBR_GET(int rec_num, void * mem_0x30, int * unk);
058C: FFFFFFFF A970DF44 ; 163: int AB_READSTRING(AB_STR_ITEM *,int rec_num, int field_ID);
0590: FFFFFFFF 8577DF44 ; 164: int AB_READPHONENBR(AB_NUM_ITEM *,int rec_num, int field_ID);
0594: FFFFFFFF D178DF44 ; 165: int AB_GETNBROFITEMS(int get_from,int unk_0);
0598: FFFFFFFF 693AEF44 ; 166: int PNUM_len(void *pnum);
059C: FFFFFFFF DD3DF344 ; 167: void PNUM2str(char *str,void *pnum,int len, int max_len);
05A0: FFFFFFFF 8167EA44 ; 168: DISP_OBJ * GUIObj_GetDISPObj (void * gui);
05A4: FFFFFFFF 0173E544 ; 169: LIST *List_New(void);
05A8: FFFFFFFF 2573E544 ; 16A: void List_Free(LIST *lst);
05AC: FFFFFFFF 4574E544 ; 16B: void ListElement_AddtoTop(LIST *lst,void *newElement);
05B0: FFFFFFFF 1139F544 ; 16C: int Gif2ID(u16 IMAGEHANDLE,const wchar_t * path, const wchar_t * fname,wchar_t * ID);
05B4: FFFFFFFF 11EB0D45 ; 16D: int REQUEST_IMAGEHANDLER_INTERNAL_GETHANDLE(const int * __zero,u16 * IMAGEHANDLE,char * unk);
05B8: FFFFFFFF A5710C45 ; 16E: void REQUEST_DATEANDTIME_GET(const int * __zero , DATETIME *dt);
05BC: FFFFFFFF B9ED0545 ; 16F: void IndicationDevice_Backlight_FadeToLevel(int unk_zero ,int bl_level);
05C0: FFFFFFFF F138F844 ; 170: int GetFreeBytesOnHeap(void);
05C4: FFFFFFFF 252DE844 ; 171: void BookObj_Hide(BOOK *,int display_type);
05C8: FFFFFFFF 392DE844 ; 172: void BookObj_Show(BOOK *,int display_type);
05CC: FFFFFFFF 55DAD344 ; 173: void StartAPP (const wchar_t * appname); //nullsub(void)
05D0: FFFFFFFF 3144D644 ; 174: void ListMenu_SetOnMessages (GUI_LIST * , int (*proc)(GUI_MESSAGE *));
05D4: FFFFFFFF E5E50845 ; 175: char * manifest_GetParam(const char *buf, const char *param_name,int unk);
05D8: FFFFFFFF 4D700E45 ; 176: int lseek(int file,int offset,int mode);
05DC: FFFFFFFF 4CEA084C ;8177: int get_VBUFFER(void);
05E0: FFFFFFFF CD5AEB44 ; 178: void SetLampLevel (int level);
05E4: FFFFFFFF CD73E544 ; 179: void * ListElement_Remove(LIST *lst,int index);
05E8: FFFFFFFF CD1C0344 ; 17A: int GetCurrentPID(void);
05EC: FFFFFFFF 0574E544 ; 17B: int ListElement_Prt2NumElement(LIST *lst,void *ptr);
05F0: FFFFFFFF A88C0644 ; 17C: union SIGNAL *alloc(OSBUFSIZE size,SIGSELECT signo);
05F4: FFFFFFFF C48C0644 ; 17D: union SIGNAL *receive(const SIGSELECT *sigsel);
05F8: FFFFFFFF B48C0644 ; 17E: void send(union SIGNAL **sig,PROCESS to);
05FC: FFFFFFFF 048D0644 ; 17F: PROCESS sender(union SIGNAL **sig);
0600: FFFFFFFF E48C0644 ; 180: void free_buf(union SIGNAL **sig);
0604: FFFFFFFF A08D0644 ; 181: PROCESS create_process(int proc_type,char *name,OSENTRYPOINT *entrypoint,OSADDRESS stack_size,OSPRIORITY priority,OSTIME timeslice,PROCESS pid_block,void *redir_table,OSVECTOR vector,OSUSER user);
0608: FFFFFFFF C08F0644 ; 182: void start(PROCESS pid);
060C: FFFFFFFF 708E0644 ; 183: int get_ptype(PROCESS pid);
0610: FFFFFFFF BC8D0644 ; 184: PROCESS current_process(void);
0614: FFFFFFFF F48C0644 ; 185: void delay(OSTIME timeout);
0618: FFFFFFFF BC8E0644 ; 186: OSBOOLEAN hunt(const char *name, OSUSER user, PROCESS *name_, union SIGNAL **hunt_sig);
061C: FFFFFFFF E88E0644 ; 187: void kill_proc(PROCESS pid);
;0620: xxxxxxxx yyyyyyyy ; 188:
;0624: xxxxxxxx yyyyyyyy ; 189: union SIGNAL *receive_w_tmo (OSTIME timeout, SIGSELECT *sel);
;0628: xxxxxxxx yyyyyyyy ; 18A:
;062C: xxxxxxxx yyyyyyyy ; 18B: void stop(PROCESS pid);
;0630: xxxxxxxx yyyyyyyy ; 18C: OSBOOLEAN get_mem(PROCESS pid, OSADDRESS from, void* to, OSADDRESS size);
;0634: xxxxxxxx yyyyyyyy ; 18D: OSADDRESS get_envp (PROCESS pid, char *name);
;0638: xxxxxxxx yyyyyyyy ; 18E: OSBOOLEAN set_envp (PROCESS pid, char *name, OSADDRESS value);
;063C: xxxxxxxx yyyyyyyy ; 18F: PROCESS get_bid (PROCESS pid);
;0640: xxxxxxxx yyyyyyyy ; 190:
;0644: xxxxxxxx yyyyyyyy ; 191:
;0648: xxxxxxxx yyyyyyyy ; 192:
;064C: xxxxxxxx yyyyyyyy ; 193:
;0650: xxxxxxxx yyyyyyyy ; 194:
;0654: xxxxxxxx yyyyyyyy ; 195:
;0658: xxxxxxxx yyyyyyyy ; 196:
;065C: xxxxxxxx yyyyyyyy ; 197:
;0660: xxxxxxxx yyyyyyyy ; 198:
;0664: xxxxxxxx yyyyyyyy ; 199:
;0668: xxxxxxxx yyyyyyyy ; 19A:
;066C: xxxxxxxx yyyyyyyy ; 19B:
;0670: xxxxxxxx yyyyyyyy ; 19C:
;0674: xxxxxxxx yyyyyyyy ; 19D:
;0678: xxxxxxxx yyyyyyyy ; 19E:
;067C: xxxxxxxx yyyyyyyy ; 19F:
0680: FFFFFFFF 493FB444 ; 1A0: char* strcpy(char * dest, const char * source);
0684: FFFFFFFF 4519CA44 ; 1A1: void *CreateMessage(int size,int ev,char *name);
0688: FFFFFFFF 9919CA44 ; 1A2: void SendMessage(void **signal,int PID);
068C: FFFFFFFF 551ACA44 ; 1A3: void * WaitMessage(void *SIGSEL);
0690: FFFFFFFF 751ACA44 ; 1A4: int FreeMessage(void **Mess);
0694: FFFFFFFF 1519E444 ; 1A5: void SendDispatchMessage(int id, int unk_zero, int size,void *mess);
0698: FFFFFFFF B5FA1445 ; 1A6: char * UIEventName(int event);
069C: FFFFFFFF 01AE284C ;81A7: int * MissedEvents(void);
06A0: FFFFFFFF E5B50545 ; 1A8: void UI_Event(int event);
06A4: FFFFFFFF F1B50545 ; 1A9: void UI_Event_wData(int event,void *message,void (*mfree)(void*));
06A8: FFFFFFFF 15B60545 ; 1AA: void UI_Event_toBookID(int event,int BookID);
06AC: FFFFFFFF 25B60545 ; 1AB: void UI_Event_toBookIDwData(int event,int BookID,void *message,void (*mfree)(void*));
06B0: FFFFFFFF 0977E544 ; 1AC: int ListElement_Find(LIST *lst,void *element, int (*cmp_proc)(void *,void *));
06B4: FFFFFFFF D575E544 ; 1AD: void * ListElement_GetByIndex(LIST * , int index);
06B8: FFFFFFFF C91CBF44 ; 1AE: wchar_t* wstrrchr(const wchar_t* wstr, wchar_t wchar);
06BC: FFFFFFFF 3D28E844 ; 1AF: void BookObj_CallSubroutine(BOOK * , BOOK_SUBROUTINE *subr);
06C0: FFFFFFFF 5574E544 ; 1B0: void ListElement_Add(LIST *lst,void *newElement);
06C4: FFFFFFFF 7D8AAC44 ; 1B1: void debug_printf(const char * fmt,...);
06C8: FFFFFFFF 0DD7D344 ; 1B2: int PlayFile(const wchar_t * path, const wchar_t * fname);
;06CC: xxxxxxxx yyyyyyyy ; 1B3:
06D0: FFFFFFFF 71D31545 ; 1B4: int REQUEST_PROFILE_GETACTIVEPROFILE(const int *__zero , int *level);
06D4: FFFFFFFF CDD31545 ; 1B5: int Profile_SetActive(int NUMprof,int set_in_gdfs_flag);
06D8: FFFFFFFF 7530EB44 ; 1B6: void SetBrightnessOfScreen(int br);
06DC: FFFFFFFF E97AD444 ; 1B7: int isKeylocked(void);
06E0: FFFFFFFF C10DF744 ;81B8: IS_NEEDED_BOOK isMediaPlayerVideoBook(void);
06E4: FFFFFFFF 1927F744 ; 1B9: void VideoOnWholeScreen(BOOK * MediaPlayer_Video_Book);
06E8: FFFFFFFF 1D87D444 ; 1BA: void ShuttingDown(void);
06EC: FFFFFFFF B5AEF844 ; 1BB: void Vibra(int t1, int t2, int t3);
06F0: FFFFFFFF 05740C45 ; 1BC: int REQUEST_DATEFORMAT_GET(const int *SYNC, char *DateFormat);
06F4: FFFFFFFF A5740C45 ; 1BD: int REQUEST_TIMEFORMAT_GET(const int *SYNC, char *TimeFormat);
06F8: FFFFFFFF 6133D344 ; 1BE: int Date2ID(DATE *, int TimeFormat,int);
06FC: FFFFFFFF 7932D344 ; 1BF: int Time2ID(TIME *, char TimeFormat,int isSec);
0700: FFFFFFFF 4541D644 ; 1C0: GUI_LIST * CreateListObject(BOOK * , void * unk);
0704: FFFFFFFF 0143D644 ; 1C1: void SetNumOfMenuItem(void * , int item_count);
0708: FFFFFFFF F427184C ;81C2: LIST ** ROOT_APP(void);
070C: FFFFFFFF 61AFD344 ; 1C3: void SoftKey_AddHelpStr(void *gui,int msg,int StrID);
0710: FFFFFFFF C1B1D344 ; 1C4: void SoftKey_SetItemAsSubItem(void *gui,int item,int subitem);
0714: FFFFFFFF 15131545 ; 1C5: int REQUEST_SYSTEM_SHUTDOWN(void);
0718: FFFFFFFF 25131545 ; 1C6: int REQUEST_SYSTEM_RESTART(void);
071C: FFFFFFFF 39AED344 ; 1C7: void SoftKeys_SetText(void *gui,int msg,int StrID,int StrID1);
0720: FFFFFFFF C1871245 ; 1C8: int isRightNowBook(BOOK *);
0724: FFFFFFFF FD0F1545 ; 1C9: int isVolumeControllerBook(BOOK *);
0728: FFFFFFFF DDB5D344 ; 1CA: GUI_TABMENUBAR * CreateTabMenuBar(BOOK *);
072C: FFFFFFFF FDB6D344 ; 1CB: void TabMenuBar_SetTabCount(GUI_TABMENUBAR * , int count);
0730: FFFFFFFF E9B7D344 ; 1CC: void TabMenuBar_AssignGuiObj(GUI_TABMENUBAR * , int tab , GUI *);
0734: FFFFFFFF 59B8D344 ; 1CD: void TabMenuBar_SetTabIcon(GUI_TABMENUBAR *,int tab, wchar_t icon , int for_state);
0738: FFFFFFFF 3965EA44 ; 1CE: GUI *GUI_Free(GUI*);
073C: FFFFFFFF 4999D344 ; 1CF: void InputFeedback_SetIcon(GUI *gui, wchar_t icon);
0740: FFFFFFFF 2196D544 ; 1D0: int StringInput_GetStringAndLen (GUI*,wchar_t**,u16*);
0744: FFFFFFFF D82B184C ;81D1: PAudioControl* GetAudioControlPtr();
0748: FFFFFFFF A157F044 ; 1D2: int AudioControl_Vibrate(PAudioControl pIAudioControl, int vibratime, int pausetime, int totaltime);
074C: FFFFFFFF 957F0E45 ; 1D3: int GetVolumeSize(char * volume, VOLUMESIZE *);
0750: FFFFFFFF 2956D644 ; 1D4: GUI_NOFMANY * CreateNOfMany(BOOK *);
0754: FFFFFFFF F957D644 ; 1D5: void NOfMany_SetTexts(GUI_NOFMANY * , int * StrIDtable, int items_count);
0758: FFFFFFFF 5D57D644 ; 1D6: void NOfMany_SetChecked(GUI_NOFMANY * , u16 * checked_table, int items_count);
075C: FFFFFFFF 1D57D644 ; 1D7: void NOfMany_SetCursor(GUI_NOFMANY * , int item);
0760: FFFFFFFF 8557D644 ; 1D8: int NOfMany_GetCheckedCount(GUI_NOFMANY *);
0764: FFFFFFFF 7157D644 ; 1D9: int NOfMany_GetChecked(GUI_NOFMANY * , u16 * buffer );
0768: FFFFFFFF F157D644 ; 1DA: void NOfMany_SetonMessage(GUI_NOFMANY * , void * proc );
;076C: xxxxxxxx yyyyyyyy ; 1DB:
;0770: xxxxxxxx yyyyyyyy ; 1DC:
;0774: xxxxxxxx yyyyyyyy ; 1DD:
;0778: xxxxxxxx yyyyyyyy ; 1DE:
077C: FFFFFFFF 91190244 ; 1DF: PAudioControl AudioControl_Init(); //nullsub(ret 0)
0780: FFFFFFFF CD59D644 ; 1E0: void OneOfMany_SetFocused(GUI_ONEOFMANY * , int item);
0784: FFFFFFFF 2D5AD644 ; 1E1: void OneOfMany_SetonMessage(GUI_ONEOFMANY * , int (*proc)(GUI_MESSAGE *));
0788: FFFFFFFF 81BDD344 ; 1E2: GUI_FEEDBACK * CreateFeedBack (int,...);
078C: FFFFFFFF 2DBED344 ; 1E3: void FeedBack_SetText(GUI_FEEDBACK*,int);
0790: FFFFFFFF C1467144 ; 1E4: int GetBattaryState(const int * , BATT *);
0794: FFFFFFFF 3927D444 ; 1E5: void * get_DisplayGC (void);
0798: FFFFFFFF 29A4E844 ; 1E6: void GetGuiRect(void*,RECT*);
079C: FFFFFFFF 0D2DD444 ; 1E7: void get_GC_RECT(void*,RECT*);
07A0: FFFFFFFF 2130D444 ; 1E8: int get_GC_xx(void * GC);
07A4: FFFFFFFF 1530D444 ; 1E9: void *set_GC_xx(void * GC, int);
07A8: FFFFFFFF B52CD444 ; 1EA: void GC_validate_RECT(void * GC , RECT*);
07AC: FFFFFFFF 052EE844 ; 1EB: void addGui2book(BOOK*,GUI*);
07B0: FFFFFFFF 71D9E844 ; 1EC: void DrawRect(int x1, int y1,int x2 ,int y2,int pen_color,int brush_color);
07B4: FFFFFFFF 79DDE844 ; 1ED: void DrawString(int StrID,int align,int x1,int y1,int x2,int y2,int unk,int unk1,int pen_color ,int brush_color);
07B8: FFFFFFFF F168EA44 ; 1EE: void addGui2XGuiList (void* xguilist , GUI*);
07BC: FFFFFFFF A9A2E844 ; 1EF: void InvalidateRect(DISP_OBJ *,RECT*);
07C0: FFFFFFFF C164EA44 ; 1F0: int CreateObject(GUI*,void (*)(DISP_DESC *),void (*)(DISP_DESC *),BOOK *,void(*)(),int,int size_obj);
07C4: FFFFFFFF CDE8E844 ; 1F1: int SetFont(int);
07C8: FFFFFFFF 5427184C ;81F2: DISP_OBJ ** StatusRow_p(void);
07CC: FFFFFFFF BDB50545 ; 1F3: int root_list_get_session_count(void);
07D0: FFFFFFFF D1B50545 ; 1F4: UI_APP_SESSION *root_list_get_session(int num_session);
07D4: FFFFFFFF E9AE0545 ; 1F5: BOOK *SESSION_GetTopBook(UI_APP_SESSION *);
07D8: FFFFFFFF A9C5D344 ; 1F6: int MainInput_getVisible(GUI *);
07DC: FFFFFFFF B5C5D344 ; 1F7: int MainInput_strlen(GUI *);
07E0: FFFFFFFF C9C5D344 ; 1F8: char * MainInput_getPNUM(GUI *);
07E4: FFFFFFFF D5C5D344 ; 1F9: int MainInput_isPlus(GUI *);
07E8: FFFFFFFF E531E844 ; 1FA: int BOOK_GetBookID(BOOK * );
07EC: FFFFFFFF 3D1CBF44 ; 1FB: int wstrncmp(const wchar_t*,const wchar_t*,int);
07F0: FFFFFFFF 6DBDE844 ; 1FC: int DISP_OBJ_GetAbsoluteXPos(DISP_OBJ *);
07F4: FFFFFFFF 95BDE844 ; 1FD: int DISP_OBJ_GetAbsoluteYPos(DISP_OBJ *);
07F8: FFFFFFFF B1A8E844 ; 1FE: WINDOW * DISP_OBJ_GetWindow(DISP_OBJ *);
07FC: FFFFFFFF F92E0645 ; 1FF: int GetThemeColor(int , int);
0800: FFFFFFFF 79CB1545 ; 200: int REQUEST_SETTING_SILENCE_SET(const int * __zero,u16 profile,u16 value);
0804: FFFFFFFF 1DCB1545 ; 201: int REQUEST_SETTING_SILENCE_GET(const int * __zero,u16 profile, char * silence_mode);
0808: FFFFFFFF E58DDE44 ; 202: void VCALL_Init (void* vc);
080C: FFFFFFFF D98EDE44 ; 203: void VCALL_SetName (void * vc , wchar_t * name ,unsigned short name_len);
0810: FFFFFFFF 358FDE44 ; 204: void VCALL_SetNameIcon (void * vc , wchar_t icon);
0814: FFFFFFFF F98EDE44 ; 205: void VCALL_SetNumber (void * vc , wchar_t * number , unsigned short num_len);
0818: FFFFFFFF 218FDE44 ; 206: void VCALL_SetHZ1 (void * vc, int , u16 );
081C: FFFFFFFF 2D8FDE44 ; 207: void VCALL_SetHZ2 (void * vc , u16 );
0820: FFFFFFFF 9D85DE44 ; 208: void MakeVoiceCall (int SessioID , void * vc ,int flag);
0824: FFFFFFFF 094C1445 ; 209: int isDirectory (wchar_t * path ,wchar_t * filename , int * error );
0828: FFFFFFFF 3D610E45 ; 20A: void FileDelete (wchar_t * path ,wchar_t * filename , int * error );
082C: FFFFFFFF DD97D344 ; 20B: void SetFocus (GUI * , int);
0830: FFFFFFFF E11CFA44 ; 20C: int CreateSMSCont (int, void*);
0834: FFFFFFFF 7921FA44 ; 20D: int FreeSMSCont (void*);
0838: FFFFFFFF 411EFA44 ; 20E: int PrepareSMSCont (void*,wchar_t*,wchar_t*,int,int);
083C: FFFFFFFF C920FA44 ; 20F: int CteateNewMessage (int,void*,int);
0840: FFFFFFFF 044D2444 ;8210: void * get_APP_DESC_TABLE(void);
0844: FFFFFFFF D193D344 ; 211: C_INTERFACE *Window_GetComponentInterface(WINDOW*);
0848: FFFFFFFF ED7DDF44 ; 212: int AB_POSITIONNBR_GET(void * ab_name,char * ,u16 * ,void * ab_num);
084C: FFFFFFFF 917ADF44 ; 213: int AB_NAME_ITEM2StrID(AB_STR_ITEM * ab_name);
0850: FFFFFFFF F97ADF44 ; 214: int AB_NUM_ITEM2StrID(AB_NUM_ITEM * ab_num_item);
0854: FFFFFFFF B1430A45 ; 215: int GetABRecNum(AB_GET_STRUCT *);
0858: FFFFFFFF 308F2144 ;8216: AB_ITEM_DESC * get_AB_ITEMS_DESC();
085C: FFFFFFFF 192A0B45 ; 217: GUI * SBY_GetMainInput(BOOK * StandBy); // !!!!! не настоящий !!!!!!
0860: FFFFFFFF 152A0B45 ; 218: GUI * SBY_GetStatusIndication(BOOK * StandBy); // !!!!! не настоящий !!!!!!
0864: FFFFFFFF ED9A0C45 ; 219: int REQUEST_PHONEBOOK_ACCESSSTATUS_TOTAL_GET(const int * __zero, int *);
0868: FFFFFFFF E47B0C4C ;821A: int * PID_MMI(void);
;086C: xxxxxxxx yyyyyyyy ; 21B:
0870: FFFFFFFF 859DE844 ; 21C: GUI * DISP_OBJ_GetGUI(DISP_OBJ *);
0874: FFFFFFFF 119DE844 ; 21D: DISP_OBJ* DISPBASE_GetFocused(int display);
0878: FFFFFFFF 5DA1E844 ; 21E: char DISP_OBJ_getVisible(DISP_OBJ*);
087C: FFFFFFFF E5F50645 ; 21F: DISP_DESC* DISP_OBJ_GetDESC (DISP_OBJ* obj); // !!!!! не настоящий !!!!!!
0880: FFFFFFFF DD94E844 ; 220: void DISP_DESC_SetName (DISP_DESC* , const char * name);
0884: FFFFFFFF 25BCE844 ; 221: char* DISP_OBJ_GetName (DISP_OBJ *);
0888: FFFFFFFF 0595E844 ; 222: void DISP_DESC_SetSize (DISP_DESC* , u16 size);
;088C: xxxxxxxx yyyyyyyy ; 223: u16 DISP_DESC_GetSize (DISP_OBJ *);
0890: FFFFFFFF 2595E844 ; 224: void DISP_DESC_SetOnCreate (DISP_DESC* , DISP_OBJ_ONCREATE_METHOD);
0894: FFFFFFFF D198E844 ; 225: DISP_OBJ_ONCREATE_METHOD DISP_OBJ_GetOnCreate (DISP_OBJ *);
0898: FFFFFFFF 4595E844 ; 226: void DISP_DESC_SetOnClose (DISP_DESC* , DISP_OBJ_ONCLOSE_METHOD);
089C: FFFFFFFF E598E844 ; 227: DISP_OBJ_ONCLOSE_METHOD DISP_OBJ_GetOnClose (DISP_OBJ *);
08A0: FFFFFFFF 6595E844 ; 228: void DISP_DESC_SetOnRedraw (DISP_DESC* , DISP_OBJ_ONREDRAW_METHOD);
08A4: FFFFFFFF F998E844 ; 229: DISP_OBJ_ONREDRAW_METHOD DISP_OBJ_GetOnRedraw (DISP_OBJ *);
08A8: FFFFFFFF A595E844 ; 22A: void DISP_DESC_SetOnKey (DISP_DESC* , DISP_OBJ_ONKEY_METHOD);
08AC: FFFFFFFF 2199E844 ; 22B: DISP_OBJ_ONKEY_METHOD DISP_OBJ_GetOnKey (DISP_OBJ *);
08B0: FFFFFFFF 8595E844 ; 22C: void DISP_DESC_SetonRefresh (DISP_DESC* ,DISP_OBJ_METHOD);
08B4: FFFFFFFF 0D99E844 ; 22D: DISP_OBJ_METHOD DISP_OBJ_GetonRefresh (DISP_OBJ *);
;08B8: xxxxxxxx yyyyyyyy ; 22E: void DISP_DESC_SetMethod04 (DISP_DESC* ,void (*)(void*));
;08BC: xxxxxxxx yyyyyyyy ; 22F: DISP_OBJ_METHOD DISP_OBJ_GetMethod04 (DISP_OBJ *);
;08C0: xxxxxxxx yyyyyyyy ; 230: void DISP_DESC_SetMethod05 (DISP_DESC* ,void (*)(void*));
;08C4: xxxxxxxx yyyyyyyy ; 231: DISP_OBJ_METHOD DISP_OBJ_GetMethod05 (DISP_OBJ *);
08C8: FFFFFFFF C595E844 ; 232: void DISP_DESC_SetMethod06 (DISP_DESC* ,DISP_OBJ_METHOD);
08CC: FFFFFFFF 3599E844 ; 233: DISP_OBJ_METHOD DISP_OBJ_GetMethod06 (DISP_OBJ *);
;08D0: xxxxxxxx yyyyyyyy ; 234: void DISP_DESC_SetMethod07 (DISP_DESC* ,void (*)(void*));
;08D4: xxxxxxxx yyyyyyyy ; 235: DISP_OBJ_METHOD DISP_OBJ_GetMethod07 (DISP_OBJ *);
08D8: FFFFFFFF 0596E844 ; 236: void DISP_DESC_SetMethod08 (DISP_DESC* ,DISP_OBJ_METHOD);
08DC: FFFFFFFF 5D99E844 ; 237: DISP_OBJ_METHOD DISP_OBJ_GetMethod08 (DISP_OBJ *);
;08E0: xxxxxxxx yyyyyyyy ; 238: void DISP_DESC_SetMethod09 (DISP_DESC* ,void (*)(void*));
;08E4: xxxxxxxx yyyyyyyy ; 239: DISP_OBJ_METHOD DISP_OBJ_GetMethod09 (DISP_OBJ *);
;08E8: xxxxxxxx yyyyyyyy ; 23A: void DISP_DESC_SetMethod0A (DISP_DESC* ,void (*)(void*));
;08EC: xxxxxxxx yyyyyyyy ; 23B: DISP_OBJ_METHOD DISP_OBJ_GetMethod0A (DISP_OBJ *);
;08F0: xxxxxxxx yyyyyyyy ; 23C: void DISP_DESC_SetMethod0B (DISP_DESC* ,void (*)(void*));
;08F4: xxxxxxxx yyyyyyyy ; 23D: DISP_OBJ_METHOD DISP_OBJ_GetMethod0B (DISP_OBJ *);
;08F8: xxxxxxxx yyyyyyyy ; 23E: void DISP_DESC_SetMethod0C (DISP_DESC* ,void (*)(void*));
;08FC: xxxxxxxx yyyyyyyy ; 23F: DISP_OBJ_METHOD DISP_OBJ_GetMethod0C (DISP_OBJ *);
0900: FFFFFFFF 8732E844 ; 240: void JavaSession_Manager (int cmd); //nullsub(ret 0)
0904: FFFFFFFF 8732E844 ; 241: int JavaSession_GetName(void); //nullsub(ret 0)
0908: FFFFFFFF 3143EF44 ; 242: int TextCopyId(int);
090C: FFFFFFFF D530E844 ; 243: UI_APP_SESSION *Book_GetSession(BOOK*);
0910: FFFFFFFF 414AD644 ; 244: void List2lineSetAsSubitem (void* msg,int unk,int n_sub_items);
0914: FFFFFFFF B14AD644 ; 245: void List2lineSubitemAddText(void* msg,int StrID);
0918: FFFFFFFF A14AD644 ; 246: int GUIonMessage_GetCreatedSubItemParrentIndex(void * msg);
091C: FFFFFFFF A5C8D144 ; 247: void GoMusic(void);
0920: FFFFFFFF 85AFF844 ; 248: void Vibra_Off(int t1);
0924: FFFFFFFF 8527F744 ; 249: void VideoOnNormalScreen(BOOK * MediaPlayer_Video_Book);
0928: FFFFFFFF 19D7D344 ; 24A: int PlayFileV(const wchar_t * path,const wchar_t * fname, int vol);
092C: FFFFFFFF 39A5F844 ; 24B: int GetSilent(void);
0930: FFFFFFFF F571F844 ; 24C: int GetVibrator(int ignorevibrator,int ignoresilent);
0934: FFFFFFFF 05B1F844 ; 24D: int GetAudioSettings(int what, char* retvalue);
0938: FFFFFFFF 292BA344 ; 24E: int GetChipID(void);
;093C: xxxxxxxx yyyyyyyy ; 24F:
;0940: xxxxxxxx yyyyyyyy ; 250:
;0944: xxxxxxxx yyyyyyyy ; 251:
0948: FFFFFFFF 914AD644 ; 252: int List2LineGetCurrentIndex(void * msg);
094C: FFFFFFFF 814AD644 ; 253: int GUIonMessage_GetCurrentItemIndex(void * msg);
0950: FFFFFFFF 1D400E45 ; 254: void DestroyDirHandle(DIR_HANDLE *handle);
0954: FFFFFFFF A0C72244 ;8255: DB_EXT *LastExtDB(void);
0958: FFFFFFFF 81740F45 ; 256: void GetOtherExtMethods(FILESUBROUTINE **);
095C: FFFFFFFF 21750645 ; 257: void MessageBox(int HeaderStrID,int MessageStrID,wchar_t IconID, int style /*1 or 2*/,int time,BOOK * unk);
0960: FFFFFFFF A53B0645 ; 258: int Display_GetHeight(int Display);
0964: FFFFFFFF B53B0645 ; 259: int Display_GetWidth(int Display);
0968: FFFFFFFF 99D6D344 ; 25A: void PlaySystemSound (int SndNumber);
;096C: xxxxxxxx yyyyyyyy ; 25B:
;0970: xxxxxxxx yyyyyyyy ; 25C:
0974: FFFFFFFF D5B6D344 ; 25D: int TabMenuBar_GetFocusedTabIndex(GUI_TABMENUBAR * );
0978: FFFFFFFF A9B6D344 ; 25E: void TabMenuBar_SetTabFocused(GUI_TABMENUBAR * , int tab_num);
097C: FFFFFFFF 212FD444 ; 25F: int GC_GetPenColor (void* GC);
0980: FFFFFFFF E12ED444 ; 260: void GC_SetPenColor(void* GC , int pen_color);
0984: FFFFFFFF 9F2BD444 ; 261: void GC_SetPixel (void* GC,int x1,int y1,int color);
0988: FFFFFFFF 9D38D444 ; 262: void GC_DrawLine(void* GC,int x1, int y1, int x2, int y2);
098C: FFFFFFFF 313AD444 ; 263: void GC_DrawFRect (void* GC,int color,int x1,int y1,int x2 ,int y2);
0990: FFFFFFFF D92BD444 ; 264: int GC_DrawBitmap(void *GC, int x1, int y1, int x2, int y2, int * bmp);
;0994: xxxxxxxx yyyyyyyy ; 265: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
;0998: xxxxxxxx yyyyyyyy ; 266: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
;099C: xxxxxxxx yyyyyyyy ; 267: png_infop png_create_info_struct(png_structp png_ptr);
;09A0: xxxxxxxx yyyyyyyy ; 268: void png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr);
;09A4: xxxxxxxx yyyyyyyy ; 269: void png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr, png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn, png_progressive_end_ptr end_fn);
;09A8: xxxxxxxx yyyyyyyy ; 26A: void png_process_data(png_structp png_ptr, png_infop info_ptr, png_bytep buffer, png_size_t buffer_size);
;09AC: xxxxxxxx yyyyyyyy ; 26B: void png_read_update_info(png_structp png_ptr, png_infop info_ptr);
;09B0: xxxxxxxx yyyyyyyy ; 26C: png_voidp png_get_progressive_ptr(png_structp png_ptr);
;09B4: xxxxxxxx yyyyyyyy ; 26D: png_uint_32 png_get_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
;09B8: xxxxxxxx yyyyyyyy ; 26E: void png_set_strip_16(png_structp png_ptr);
;09BC: xxxxxxxx yyyyyyyy ; 26F: void png_set_gray_1_2_4_to_8(png_structp png_ptr);
;09C0: xxxxxxxx yyyyyyyy ; 270: void png_set_gray_to_rgb(png_structp png_ptr);
;09C4: xxxxxxxx yyyyyyyy ; 271: png_uint_32 png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag);
;09C8: xxxxxxxx yyyyyyyy ; 272: void png_set_tRNS_to_alpha(png_structp png_ptr);
;09CC: xxxxxxxx yyyyyyyy ; 273: void png_set_filler(png_structp png_ptr, png_uint_32 filler, int flags);
;09D0: xxxxxxxx yyyyyyyy ; 274: void png_set_palette_to_rgb(png_structp png_ptr);
;09D4: xxxxxxxx yyyyyyyy ; 275: png_uint_32 png_get_rowbytes(png_structp png_ptr, png_infop info_ptr);
;09D8: xxxxxxxx yyyyyyyy ; 276: void png_progressive_combine_row(png_structp png_ptr, png_bytep old_row, png_bytep new_row);
;09DC: xxxxxxxx yyyyyyyy ; 277: int png_sig_cmp(png_bytep sig, png_size_t start, png_size_t num_to_check);
09E0: FFFFFFFF 94E20644 ; 278: int setjmp(jmp_buf jmpbuf);
09E4: FFFFFFFF B8E20644 ; 279: void longjmp(jmp_buf, int);
09E8: FFFFFFFF F36F0344 ; 27A: int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size);
09EC: FFFFFFFF C3700344 ; 27B: int inflate (z_streamp strm, int flush);
09F0: FFFFFFFF EB800344 ; 27C: int inflateEnd (z_streamp strm);
09F4: FFFFFFFF 212FB444 ; 27D: int memcmp (const void *m1,const void *m2,int n);
09F8: FFFFFFFF B93FB444 ; 27E: int strncmp(const char *s1, const char *s2, int len);
09FC: FFFFFFFF F53FB444 ; 27F: char *strncpy (char *dest,const char *source,int maxlen);
0A00: FFFFFFFF DD3EB444 ; 280: char *strcat(char *dest, const char *src);
0A04: FFFFFFFF AD96D344 ; 281: void GuiObject_SetTitleType(GUI *gui, int type);
0A08: FFFFFFFF 4D4AD644 ; 282: __thumb void GUIonMessage_SetItemDisabled (void * msg, int Disabled);
0A0C: FFFFFFFF 29EC0D45 ; 283: __thumb int REQUEST_IMAGEHANDLER_INTERNAL_REGISTER(const int * __zero,u16 ImageHandle,wchar_t *path,wchar_t *fname,int unk, wchar_t * ImageID ,char * error);
0A10: FFFFFFFF A9ED0D45 ; 284: __thumb int REQUEST_IMAGEHANDLER_INTERNAL_UNREGISTER (const int * __zero,u16 ImageHandle,u16* ,u16* ,wchar_t ImageID, int unk_1,char * error);
;0A14: xxxxxxxx yyyyyyyy ;8285: SURFACE ** get_Surfaces(void);
0A18: FFFFFFFF E902F044 ; 286: int iconidname2id(const wchar_t* idname,int maxnamelen,int *id);
0A1C: FFFFFFFF 2942DC44 ; 287: int textidname2id(const wchar_t* idname,int maxnamelen,int* id);
0A20: FFFFFFFF 55DAD344 ; 288: void ListMenu_SetNoItemText(GUI_LIST *, int str); //nullsub(void)
;0A24: xxxxxxxx yyyyyyyy ; 289:
0A28: FFFFFFFF E9D41245 ;828A: IS_NEEDED_BOOK isFmRadioBook(void);
0A2C: FFFFFFFF 29BFF544 ;828B: IS_NEEDED_BOOK isAudioPlayerBook(void);
0A30: FFFFFFFF A114F644 ; 28C: void PlayerControl(BOOK *AudioPlayerBook, int);
0A34: FFFFFFFF A1B11245 ; 28D: void SwitchRadioStationFromList(BOOK *FmRadioBook, int);
0A38: FFFFFFFF 91ED0645 ; 28E: void Shortcut_Run (wchar_t * shortcut_name);
0A3C: FFFFFFFF 71330E45 ; 28F: int mkdir(const wchar_t* path);
0A40: FFFFFFFF 113A0E45 ; 290: int rmdir(const wchar_t* path, int zero);
0A44: FFFFFFFF 55600E45 ; 291: int chmod(const wchar_t* path, const wchar_t* fname, int amode);
0A48: FFFFFFFF A9650E45 ; 292: int rename(const wchar_t* oldpath, const wchar_t* oldfname, const wchar_t* newpath, const wchar_t* newfname, int zero);
0A4C: FFFFFFFF 15F0E844 ; 293: int GetImageWidth(wchar_t ImageID);
0A50: FFFFFFFF 2DF0E844 ; 294: int GetImageHeight(wchar_t ImageID);
;0A54: xxxxxxxx yyyyyyyy ; 295: void * CallID_GetCallStatusDesc(int CallID);
0A58: FFFFFFFF 29A4A644 ; 296: wchar_t * CallStatusDesc_GetName(void * CallStatusDesc);
0A5C: FFFFFFFF 4D77E544 ; 297: void List_FreeElements(LIST *,int (*cmp_proc)(void * elem_from_list),void (*freefunc)(void * elem_from_list));
0A60: FFFFFFFF 9140B444 ; 298: char * strstr(const char * str1,const char * str2);
0A64: FFFFFFFF 85BAD744 ; 299: int GPRS_GetLastSessionInfo(int,GPRS_SESSION_INFO *);
0A68: FFFFFFFF D91DBF44 ; 29A: int wstrcmpni(const wchar_t * wstr1,const wchar_t * wstr2,int len);
0A6C: FFFFFFFF 713CD344 ; 29B: int wtoi(const wchar_t * wstr,int len,int * dest);
0A70: FFFFFFFF CD82E444 ; 29C: void DATE_GetWeekDay(DATE *,char * dest);
0A74: FFFFFFFF 6113BB44 ; 29D: void Cale_GetSettings(int setID,void *);
0A78: FFFFFFFF 0548B444 ; 29E: wchar_t * wstrwstr(const wchar_t * wstr1,const wchar_t * wstr2);
0A7C: FFFFFFFF 511EBF44 ; 29F: int wstrcmpi(const wchar_t *ws1, const wchar_t *ws2);
0A80: FFFFFFFF AD45B444 ; 2A0: wchar_t * wstrchr(const wchar_t * source,wchar_t chr);
0A84: FFFFFFFF 9923E844 ; 2A1: void GUIObject_HideSoftkeys(void *gui); //nullsub(void)
0A88: FFFFFFFF 9923E844 ; 2A2: void GUIObject_ShowSoftkeys(void *gui); //nullsub(void)
0A8C: FFFFFFFF C16DD344 ; 2A3: DISP_OBJ* DispObject_SoftKeys_Get(void);
0A90: FFFFFFFF A9E20545 ; 2A4: int StandbyBackground_SetImage(int type,int,int,const wchar_t* path,const wchar_t* fname,int);
0A94: FFFFFFFF 49E7D344 ; 2A5: GUI *CreateYesNoQuestionVA(int zero, ...);
0A98: FFFFFFFF D146D644 ; 2A6: void ListMenu_SetSecondLineText(GUI_LIST *,int elem_num,int StrID);
0A9C: FFFFFFFF BD45B444 ; 2A7: void _REQUEST_OAF_START_APPLICATION(const int * __one,int __zero,MIDP_DESC *,int ___zero); //nullsub(void)
0AA0: FFFFFFFF 757D0E45 ; 2A8: int FSX_isNameInvalid(wchar_t * name);
0AA4: FFFFFFFF FD53E244 ; 2A9: void DataBrowserDesc_SetFoldersNumber(void * DataBrowserDesc,int state);
0AA8: FFFFFFFF 6953E244 ; 2AA: void DataBrowserDesc_SetActions(void * DataBrowserDesc,char * actions);
0AAC: FFFFFFFF B951E244 ; 2AB: void DataBrowserDesc_SetSelectAction(void * DataBrowserDesc,int state);
0AB0: FFFFFFFF 4552E244 ; 2AC: void DataBrowserDesc_SetSelectActionOnFolders(void * DataBrowserDesc,int state);
0AB4: FFFFFFFF 3D51E244 ; 2AD: void DataBrowserDesc_SetBookID(void * DataBrowserDesc,int BookID);
0AB8: FFFFFFFF D550E244 ; 2AE: void DataBrowserDesc_SetItemFilter(void * DataBrowserDesc,DB_FILE_FILTER);
0ABC: FFFFFFFF 3155E244 ; 2AF: void DataBrowserDesc_SetOption(void * DataBrowserDesc,char * option);
0AC0: FFFFFFFF F53DFC44 ; 2B0: void DataBrowserDesc_SetOpenEmptyFolder(void * DataBrowserDesc,int state);
0AC4: FFFFFFFF F950E244 ; 2B1: void DataBrowserDesc_SetFileExtList(void * DataBrowserDesc,const wchar_t * ExtList);
0AC8: FFFFFFFF 0143FF44 ; 2B2: void FSX_RemoveIllegalSymbolsName(FILEITEM *);
0ACC: FFFFFFFF 85A80F45 ; 2B3: FILEITEM * FILEITEM_Create(void);
0AD0: FFFFFFFF C5A90F45 ; 2B4: void FILEITEM_Destroy(FILEITEM *);
0AD4: FFFFFFFF F9BED344 ; 2B5: GUI *CreateDateInputVA(int zero, ...);
0AD8: FFFFFFFF 91E3D344 ; 2B6: GUI *CreateTimeInputVA(int zero, ...);
0ADC: FFFFFFFF 7D96D544 ; 2B7: void StringInput_SetCursorPosition(GUI *,u16 curs_pos,char unk);
0AE0: FFFFFFFF D528E844 ; 2B8: void BookObj_CallPage(BOOK * book, const PAGE_DESC * page);
0AE4: FFFFFFFF F1C0D344 ; 2B9: unsigned int DateInput_GetDateInt(void *dateinp_msg);
0AE8: FFFFFFFF BDE5D344 ; 2BA: unsigned int TimeInput_GetTimeInt(void *timeinp_msg);
0AEC: FFFFFFFF DC29184C ;82BB: FONT_DESC *GetFontDesc(void);
0AF0: FFFFFFFF 942B184C ;82BC: int *GetFontCount();
0AF4: FFFFFFFF 0930D444 ; 2BD: int GC_GetBrushColor(void* GC);
0AF8: FFFFFFFF C92FD444 ; 2BE: void GC_SetBrushColor(void* GC , int brush_color);
0AFC: FFFFFFFF ED3AD444 ; 2BF: void GC_DrawRoundRect(void* GC ,RECT *,int arcWidth,int arcHeight,int border_flag,int fill_flag);
0B00: FFFFFFFF 51DF0645 ; 2C0: BOOK * MenuBook_Desktop(int mode,int BookID);
0B04: FFFFFFFF D5EC0645 ; 2C1: wchar_t * MenuBook_Desktop_GetSelectedItemID(BOOK * MenuBook_Desktop);
0B08: FFFFFFFF ADBE0545 ; 2C2: void BookObj_Softkey_SetAction(BOOK *,int actionID,void (*proc)(BOOK *,void*));
0B0C: FFFFFFFF F9BE0545 ; 2C3: void BookObj_Softkey_SetText(BOOK *,int actionID,int StrID);
0B10: FFFFFFFF 8DB40545 ; 2C4: BOOK * FindBookByID(int BookID);
0B14: FFFFFFFF B9DCD344 ; 2C5: GUI_FEEDBACK *TextFeedbackWindow(BOOK *bk, int zero);
0B18: FFFFFFFF F9E0D344 ; 2C6: void Feedback_SetKeyHook(GUI_FEEDBACK *, void (*hook)(BOOK *bk, int key, int unk, int unk2));
0B1C: FFFFFFFF 99E0D344 ; 2C7: void Feedback_SetOnClose(GUI_FEEDBACK *, void (*OnClose)(BOOK *bk));
0B20: FFFFFFFF E1E0D344 ; 2C8: void Feedback_SetTimeout(GUI_FEEDBACK *, int time_ms);
0B24: FFFFFFFF 71E1D344 ; 2C9: void Feedback_SetTextExtended(GUI_FEEDBACK *, STRID text, int where);
0B28: FFFFFFFF ED090745 ; 2CA: void TabMenuBar_SetOnTabSwitch(GUI_TABMENUBAR *,void (*proc)(BOOK *,int act_tab));
0B2C: FFFFFFFF 4104CB44 ; 2CB: STRID KeyCode2Name(int key_code);
0B30: FFFFFFFF 8131F544 ; 2CC: int ImageID_Get(const wchar_t * fpath,const wchar_t * fname,wchar_t * imageID);
0B34: FFFFFFFF 2135F544 ; 2CD: void ImageID_Free(wchar_t imageID);
0B38: FFFFFFFF A9B80E45 ; 2CE: SUB_EXECUTE *DataBrowser_CreateSubExecute(int BookID, FILEITEM *f);
0B3C: FFFFFFFF FDBC0E45 ; 2CF: int DataBrowser_ExecuteSubroutine(SUB_EXECUTE *sub, int action, u16 *unk);
;0B40: xxxxxxxx yyyyyyyy ; 2D0: int FILEITEM_SetFname(FILEITEM *f, const wchar_t *fname);
0B44: FFFFFFFF 71AE0F45 ; 2D1: int FILEITEM_SetPath(FILEITEM *f, const wchar_t *fpath);
0B48: FFFFFFFF 39AE0F45 ; 2D2: wchar_t *FILEITEM_GetFname(FILEITEM *f);
0B4C: FFFFFFFF 21AF0F45 ; 2D3: wchar_t *FILEITEM_GetPath(FILEITEM *f);
0B50: FFFFFFFF 49AA0F45 ; 2D4: int FILEITEM_SetFnameAndContentType(FILEITEM *f, const wchar_t *fname);
0B54: FFFFFFFF DDAE0F45 ; 2D5: int FILEITEM_SetPathAndContentType(FILEITEM *f, const wchar_t *fpath);
0B58: FFFFFFFF 81B3C244 ; 2D6: int JavaDialog_Open(int unk1,char * unk2,void ** JavaDesc);
0B5C: FFFFFFFF CDECC244 ; 2D7: void JavaDialog_Close(int unk1);
0B60: FFFFFFFF 89EEC244 ; 2D8: int JavaAppDesc_Get(int unk1,void ** JavaDesc);
0B64: FFFFFFFF F155C244 ; 2D9: int JavaAppDesc_GetFirstApp(void * JavaDesc);
0B68: FFFFFFFF 1556C244 ; 2DA: int JavaAppDesc_GetNextApp(void * JavaDesc);
0B6C: FFFFFFFF 1D52C244 ; 2DB: int JavaAppDesc_GetJavaAppInfo(void * JavaDesc,int ID,wchar_t ** wstr);
;0B70: xxxxxxxx yyyyyyyy ; 2DC: void OrangeLED_Control(int _free_val, int or_LED_ID, int level, int fade_time);
0B74: FFFFFFFF 659EE844 ; 2DD: void DispObject_SetRefreshTimer(DISP_OBJ *,int time);
0B78: FFFFFFFF D19EE844 ; 2DE: void DispObject_KillRefreshTimer(DISP_OBJ *);
0B7C: FFFFFFFF E94CE244 ; 2DF: int isDataBrowserBook(BOOK *);
0B80: FFFFFFFF F98A0F45 ; 2E0: SUB_EXECUTE * BrowserItem_Get_SUB_EXECUTE(BOOK * BrowserItemBook);
0B84: FFFFFFFF 8192D444 ; 2E1: int Shortcut_Get_MenuItemName(SHORTCUT *);
0B88: FFFFFFFF 51EC0645 ; 2E2: int Shortcut_Get_MenuItemIconID(SHORTCUT *);
0B8C: FFFFFFFF 41B50545 ; 2E3: BOOK * FindBookEx(int (*cmp_proc)(BOOK* book_from_list ,int * param), int * param);
0B90: FFFFFFFF B5A80F45 ; 2E4: FILEITEM *FILEITEM_CreateCopy (FILEITEM *);
0B94: FFFFFFFF 4922E844 ; 2E5: ACTION *ActionCreate(int (*PROC)(void *msg,BOOK*), int BookID, u16 event, APP_DESC *app_desc, PAGE_DESC *pag_desc);
0B98: FFFFFFFF 7D30E844 ; 2E6: int BOOK_GetSessionID(BOOK *);
0B9C: FFFFFFFF 4173FB44 ; 2E7: void UI_Event_toSID(int event, int sess_id);
0BA0: FFFFFFFF 25CC6D44 ; 2E8: char *GetIMSI(void);
0BA4: FFFFFFFF 6D87D444 ; 2E9: void UI_CONTROLLED_SHUTDOWN_RESPONSE(int book_id);
0BA8: FFFFFFFF C9C5D344 ; 2EA: int MainInput_getCurPos(GUI*);
0BAC: FFFFFFFF 91C5D344 ; 2EB: void MainInput_Hide(GUI*);
;0BB0: xxxxxxxx yyyyyyyy ; 2EC: void DispObject_SoftKey_RestoreDefaultAction(DISP_OBJ*,int action);
0BB4: FFFFFFFF 2D2CF444 ; 2ED: STRID PNUM2Name(void *pnum, int isIconNeeded, int only_full_number_flag);
0BB8: FFFFFFFF F9B90445 ; 2EE: int SpeedDial_GetPNUM(int _zero,char charter0__9, void * PNUM);
0BBC: FFFFFFFF 71BE0445 ; 2EF: void * MetaData_Desc_Create(wchar_t * path,wchar_t * name);
0BC0: FFFFFFFF 91BF0445 ; 2F0: void MetaData_Desc_Destroy(void * MetaData_Desc);
0BC4: FFFFFFFF D5BE0445 ; 2F1: wchar_t * MetaData_Desc_GetTags(void * MetaData_Desc,int tagID);
0BC8: FFFFFFFF 65BF0445 ; 2F2: int MetaData_Desc_GetTrackNum(void * MetaData_Desc,int __NULL);
0BCC: FFFFFFFF 2DBDE844 ; 2F3: int DISP_OBJ_GetWindowWidth(DISP_OBJ *);
0BD0: FFFFFFFF 3DBDE844 ; 2F4: int DISP_OBJ_GetWindowHeight(DISP_OBJ *);
0BD4: FFFFFFFF B140D344 ; 2F5: int get_system_langID(void);
0BD8: FFFFFFFF FD38ED44 ; 2F6: char * lang_get_name(int langID);
0BDC: FFFFFFFF 1D311145 ; 2F7: int w_chdir(const wchar_t *path);
0BE0: FFFFFFFF 65D48044 ; 2F8: int w_fopen(const wchar_t *name, int attr, int rights, int err);
0BE4: FFFFFFFF 0DD58044 ; 2F9: int w_fstat(const wchar_t *name, W_FSTAT *);
0BE8: FFFFFFFF B9D48044 ; 2FA: int w_fwrite(int f, void *buf, int size);
0BEC: FFFFFFFF 9DD48044 ; 2FB: int w_fread(int f, void *buf, int size);
0BF0: FFFFFFFF 15BECF44 ; 2FC: int w_lseek(int f, int offs, int mode);
0BF4: FFFFFFFF F1D48044 ; 2FD: int w_fclose(int f);
0BF8: FFFFFFFF 95491145 ; 2FE: int w_mkdir(const wchar_t *path, int mode);
0BFC: FFFFFFFF 79400E45 ; 2FF: int DirHandle_SetFilterStr(DIR_HANDLE *, const wchar_t *filter);
0C00: FFFFFFFF EDF0E844 ; 300: int Disp_GetStrIdWidth(STRID , int len);
0C04: FFFFFFFF 2356E544 ; 301: int MetaData_Desc_GetCoverInfo(void * MetaData_Desc,char * cover_type,int * size,int * cover_offset);
0C08: FFFFFFFF D931F544 ; 302: int ImageID_GetIndirect(void * buf_image,int size,int __NULL,wchar_t * image_type,wchar_t * imageID);
0C0C: FFFFFFFF 1D81E444 ; 303: void unixtime2datetime(int, DATETIME * );
0C10: FFFFFFFF 4973E544 ; 304: void ListElement_Insert(LIST *lst, int i, void *new_item);
0C14: FFFFFFFF 39640E45 ; 305: int FileCopy(wchar_t *src_path, wchar_t *src_name, wchar_t *dest_path, wchar_t *dest_name, int);
0C18: FFFFFFFF A9650E45 ; 306: int FileMove(wchar_t *src_path, wchar_t *src_name, wchar_t *dest_path, wchar_t *dest_name, int);
0C1C: FFFFFFFF D1F7AB44 ; 307: void RedLED_On(int __NULL);
0C20: FFFFFFFF 25F8AB44 ; 308: void RedLED_Off(int __NULL);
0C24: FFFFFFFF F1D2E844 ; 309: void DispObject_SetLayerColor(DISP_OBJ *,int color);
0C28: FFFFFFFF FDEDC244 ; 30A: int JavaAppDesc_GetJavaAppID(void * JavaDesc);
0C2C: FFFFFFFF D1001045 ; 30B: void REQUEST_UI_OAF_START_APPLICATION(const int *ASYNC,int appID,char * flag);
0C30: FFFFFFFF 1D6FF744 ; 30C: int JavaApp_LogoImageID_Get(wchar_t * fullpath,wchar_t * imageID);
0C34: FFFFFFFF 29D0D344 ; 30D: GUI * CreateProgressBar(BOOK*,int);
0C38: FFFFFFFF 2DD3D344 ; 30E: void ProgressBar_SetText(GUI*,STRID text);
0C3C: FFFFFFFF BDD3D344 ; 30F: void ProgressBar_SetIcon(GUI*,u16 icon_id);
0C40: FFFFFFFF 09D3D344 ; 310: void ProgressBar_SetPercentValue(GUI*,int value);
0C44: FFFFFFFF CDD3D344 ; 311: void ProgressBar_SetBarDisabled(GUI*,int disabled);
0C48: FFFFFFFF B10CEC44 ; 312: void StringInput_DispObject_SetText(DISP_OBJ *,int StrID);
0C4C: FFFFFFFF DD55D644 ; 313: void GuiObject_SetTitleImage(void *gui, wchar_t imageID);
0C50: FFFFFFFF F196D344 ; 314: void GuiObject_SetTitleIcon(void *gui, wchar_t imageID);
0C54: FFFFFFFF BD55D644 ; 315: void GuiObject_SetHighlightImage(void *gui, wchar_t imageID);
0C58: FFFFFFFF CD55D644 ; 316: void GuiObject_SetBackgroundImage(void *gui, wchar_t imageID);
0C5C: FFFFFFFF 6D78D344 ; 317: void *DispObject_Softkeys_GetParams(DISP_OBJ *);
0C60: FFFFFFFF B578D344 ; 318: LIST *DispObject_Softkeys_GetList(DISP_OBJ *, BOOK *bk, char __zero);
0C64: FFFFFFFF B132E844 ; 319: int BookObj_GetDisplayOrientation(BOOK *bk);
0C68: FFFFFFFF 8D32E844 ; 31A: void BookObj_SetDisplayOrientation(BOOK *bk, int orientation);
0C6C: FFFFFFFF 8123E844 ; 31B: BOOK *DISPLAY_GetTopBook(int display);
0C70: FFFFFFFF 25F50545 ; 31C: void DISPLAY_SetBrightness(int display, int brightness);
0C74: FFFFFFFF 69F50545 ; 31D: int DISPLAY_GetBrightness(int display);
0C78: FFFFFFFF 6151E244 ; 31E: void DataBrowserDesc_Menu_AddFSFunctions(void * db , int);
0C7C: FFFFFFFF B552E244 ; 31F: void DataBrowserDesc_Menu_AddNewFolder(void * db , int);
0C80: FFFFFFFF D952E244 ; 320: void DataBrowserDesc_Menu_AddMarkFiles(void * db , int);
0C84: FFFFFFFF 91FBEA44 ; 321: void SetTheme(wchar_t*path, wchar_t*name, int bookid, int unk_1);
0C88: FFFFFFFF B512EA44 ; 322: void Softkeys_GetLabel(DISP_OBJ *softkeys, SKLABEL *lbl, int id);
0C8C: FFFFFFFF F90DEA44 ; 323: void Softkeys_Update(DISP_OBJ *softkeys);
0C90: FFFFFFFF 101E044C ;8324: void * get_CellData(void);
0C94: FFFFFFFF B12EDE44 ; 325: void * IncommingCall_Reject(BOOK* book);
0C98: FFFFFFFF F941DE44 ; 326: void * IncommingCall_Mute(BOOK* book);
0C9C: FFFFFFFF 39928F44 ; 327: int GetRadioState(char* level, char* flag);
0CA0: FFFFFFFF C5200D45 ; 328: int Bluetooth_GetState(void);
0CA4: FFFFFFFF A1200D45 ; 329: int Bluetooth_GetPhoneVisibility(void);
0CA8: FFFFFFFF 49210D45 ; 32A: int Bluetooth_isBusy(void);
;0CAC: xxxxxxxx yyyyyyyy ; 32B: int USB_isConnected(void);
0CB0: FFFFFFFF 554B1145 ; 32C: void *w_diropen(const wchar_t *dir);
0CB4: FFFFFFFF ADC2CF44 ; 32D: wchar_t *w_dirread(void *);
0CB8: FFFFFFFF DD4D1145 ; 32E: int w_dirclose(void *);
0CBC: FFFFFFFF 49C3CF44 ; 32F: int w_rename(const wchar_t *dst, const wchar_t *src);
0CC0: FFFFFFFF F9C2CF44 ; 330: int w_remove(const wchar_t *dir);
0CC4: FFFFFFFF 45F3CF44 ; 331: int ConnectionManager_Connection_GetState(void);
0CC8: FFFFFFFF 49928F44 ; 332: int GetSignalQuality(char *rssi,char *ber);
0CCC: FFFFFFFF 2DDDF844 ;8333: IS_NEEDED_BOOK isCameraBook(void);
0CD0: FFFFFFFF BDE2C744 ;8334: IS_NEEDED_BOOK isSoundRecorderBook(void);
;0CD4: xxxxxxxx yyyyyyyy ; 335: void StringInput_MenuItem_SetPriority(GUI * strinp, int prio, int actionID);
0CD8: FFFFFFFF D12AF744 ; 336: void VideoPlayerControl(BOOK *VideoPlayerBook, int);
0CDC: FFFFFFFF DD23F744 ; 337: void Video_ActionBack(BOOK *VideoPlayerBook, void*);
0CE0: FFFFFFFF A93BF744 ; 338: void Video_ExtractFrame(BOOK *VideoPlayerBook, void*);
;0CE4: xxxxxxxx yyyyyyyy ; 339: void Video_ZoomOn(BOOK *VideoPlayerBook, void*);
;0CE8: xxxxxxxx yyyyyyyy ; 33A: void RightNow_SetActive(int flag);
;0CEC: xxxxxxxx yyyyyyyy ; 33B: void VideoResize_AutomateMode(BOOK *VideoPlayerBook, u16 VideoWidth, u16 VideoHeight, u16* NewWidth, u16* NewHeight);
;0CF0: xxxxxxxx yyyyyyyy ; 33C: void VideoResize_AllScreenMode(BOOK *VideoPlayerBook, u16 VideoWidth, u16 VideoHeight, u16* NewWidth, u16* NewHeight);
;0CF4: xxxxxxxx yyyyyyyy ; 33D: int Video_GetCurrentSkinID(BOOK *VideoPlayerBook);
;0CF8: xxxxxxxx yyyyyyyy ; 33E: void Video_SetSkin(GUI* VideoPlayerGUI, int skinID);
0CFC: FFFFFFFF B126F744 ; 33F: int Video_SetPermit(BOOK *VideoPlayerBook, u16 NewWidth, u16 NewHeight);
0D00: FFFFFFFF 7122F744 ; 340: int Video_Refresh(BOOK *VideoPlayerBook, GUI* VideoPlayerGUI);
0D04: FFFFFFFF 8D24F744 ; 341: void Video_Play(BOOK *VideoPlayerBook, void*);
0D08: FFFFFFFF E525F744 ; 342: void Video_Pause(BOOK *VideoPlayerBook, void*);
0D0C: FFFFFFFF A525F744 ; 343: void Video_Stop(BOOK *VideoPlayerBook, void*);
0D10: FFFFFFFF F1E1F544 ; 344: void Audio_Pause(BOOK *);
0D14: FFFFFFFF 95DFF544 ; 345: void Audio_Play(BOOK *);
0D18: FFFFFFFF 91CCD344 ; 346: GUI * CreatePercentInputVA(int zero, ...);
0D1C: FFFFFFFF 21CED344 ; 347: int PercentInput_GetPercent(GUI * PercentInput);
0D20: FFFFFFFF 654AD644 ; 348: void GUIonMessage_SetLineSeparator(GUI_MESSAGE *,int _unk1);
;0D24: xxxxxxxx yyyyyyyy ; 349:
;0D28: xxxxxxxx yyyyyyyy ; 34A:
;0D2C: xxxxxxxx yyyyyyyy ; 34B: void GUIObject_Softkeys_RemoveBackground(void *gui);
;0D30: xxxxxxxx yyyyyyyy ; 34C: void GUIObject_Softkeys_RestoreBackground(void *gui);
0D34: FFFFFFFF 5599EA44 ; 34D: void SetTrayIcon(wchar_t iconID, char mode);
0D38: FFFFFFFF 25C71545 ; 34E: int REQUEST_SETTING_RINGVOLUME_SET(const int *sync, int unk, int null, int vol);
0D3C: FFFFFFFF 05CA1545 ; 34F: int REQUEST_SETTING_VIBRATOR_SET(const int *sync, int unk, int mode);
0D40: FFFFFFFF 09C91545 ; 350: int REQUEST_SETTING_RINGTYPESOUNDFILE_SET(const int *sync, int null, wchar_t *path, wchar_t *name);
0D44: FFFFFFFF CDCE1545 ; 351: int REQUEST_SETTING_ANSWERINGMODE_SET(const int *sync, int unk, int mode);
0D48: FFFFFFFF E9C71545 ; 352: int REQUEST_SETTING_INCREASINGRING_SET(const int *sync, int unk, int unk2, int mode);
0D4C: FFFFFFFF 8DCC1545 ; 353: int REQUEST_SETTING_ALLOWEDCALLERS_SET(const int *sync, int unk, int mode);
0D50: FFFFFFFF B947C244 ; 354: int JavaAppDesc_GetJavaAppFullpath(void * JavaDesc,JavaAppFullpath *);
;0D54: xxxxxxxx yyyyyyyy ; 355: void *SoundRecorderDesc_Create(void);
;0D58: xxxxxxxx yyyyyyyy ; 356: void SoundRecorderDesc_Destroy(void * desc);
;0D5C: xxxxxxxx yyyyyyyy ; 357: int SoundRecorderDesc_SetBookID(void * desc,int BookID);
;0D60: xxxxxxxx yyyyyyyy ; 358: int SoundRecorderDesc_SetType(void * desc,const int type);
;0D64: xxxxxxxx yyyyyyyy ; 359: int SoundRecorderDesc_SetFolder(void * desc,const wchar_t * fpath);
;0D68: xxxxxxxx yyyyyyyy ; 35A: int SoundRecorderDesc_SetFname(void * desc,const wchar_t * fname);
;0D6C: xxxxxxxx yyyyyyyy ; 35B: int SoundRecorderDesc_SetRecordSize(void * desc,const int size);
;0D70: xxxxxxxx yyyyyyyy ; 35C: int SoundRecorder_Create(void * desc);
;0D74: xxxxxxxx yyyyyyyy ; 35D: int SoundRecorder_RecordCall(BOOK * OngoingCallBook);
;0D78: xxxxxxxx yyyyyyyy ; 35E: int Browser_OpenURI(BOOK *, char * URI, int mode);
;0D7C: xxxxxxxx yyyyyyyy ; 35F: char * GetURIScheme (int schemeID);
;0D80: xxxxxxxx yyyyyyyy ; 360: char * CreateURI (wchar_t * fpath, wchar_t * fname, char * URIScheme);
;0D84: xxxxxxxx yyyyyyyy ; 361: void DataBrowserDesc_SetViewModeAndSortOrder(void * db,int view_sort_ID);
;0D88: xxxxxxxx yyyyyyyy ; 362: int Alarm_GetCurrentTypeAndAlarmID(char *type, wchar_t *AlarmID);
;0D8C: xxxxxxxx yyyyyyyy ; 363: int Alarm_GetState(char *state, int AlarmID);
;0D90: xxxxxxxx yyyyyyyy ; 364: int Alarm_GetTIME(TIME *AlarmTime, int AlarmID);
;0D94: xxxxxxxx yyyyyyyy ; 365: int Alarm_GetWeekSettings(void* week,int AlarmID);
0D98: FFFFFFFF 45920645 ; 366: int IrDa_GetState(char *state);
0D9C: FFFFFFFF 2DCC1545 ; 367: void REQUEST_SETTING_ALLOWEDCALLERS_GET(const int *sync, int ProfileNum, char *state);
0DA0: FFFFFFFF 812EDE44 ; 368: void * IncommingCall_Accept(BOOK* book);
0DA4: FFFFFFFF 25CEC744 ; 369: void MediaPlayer_SoftKey_SetText(void *player_gui,int actionID , int StrID);
0DA8: FFFFFFFF F1CDC744 ; 36A: void MediaPlayer_SoftKey_SetAction(void *player_gui,int actionID ,void (*proc)(BOOK *,void*));
;0DAC: xxxxxxxx yyyyyyyy ; 36B: void MediaPlayer_SoftKey_SetItemAsSubItem(void *player_gui,int item,int subitem);
0DB0: FFFFFFFF 41CEC744 ; 36C: void MediaPlayer_SoftKey_AddHelpStr(void *player_gui,int item,int StrID);
;0DB4: xxxxxxxx yyyyyyyy ; 36D: void MediaPlayer_ShowNowPlaying(DISP_OBJ*disp_obj, int);
0DB8: FFFFFFFF 51A0E844 ; 36E: void DispObject_Show(DISP_OBJ *disp_obj, int mode);
;0DBC: xxxxxxxx yyyyyyyy ; 36F: int Request_EventChannel_Subscribe(const int *SYNC, int mode, int event);
;0DC0: xxxxxxxx yyyyyyyy ; 370: void GUIObject_Softkey_ExecuteAction(void *gui, u16 actionID);
;0DC4: xxxxxxxx yyyyyyyy ; 371: int Request_ICA_ShutdownAllConnections(const int *sync);
;0DC8: xxxxxxxx yyyyyyyy ; 372: int REQUEST_PROFILE_GETPROFILENAME(const int *SYNC,int unk,STRID_DATA *,char *error);
;0DCC: xxxxxxxx yyyyyyyy ; 373: int DataBrowserDesc_SetFocusToFILEITEM(void *DataBrowserDesc, FILEITEM *fi);
0DD0: FFFFFFFF 7949D644 ; 374: int GUIonMessage_GetMsg ( void *msg);
0DD4: FFFFFFFF 8149D644 ; 375: BOOK *GUIonMessage_GetBook ( void *msg);
0DD8: FFFFFFFF 7D49D644 ; 376: GUI *GUIonMessage_GetGui ( void *msg);
;0DDC: xxxxxxxx yyyyyyyy ; 377: int GUIonMessage_GetSelectedItem ( void *msg);
;0DE0: xxxxxxxx yyyyyyyy ; 378: int GUIonMessage_GetPrevSelectedItem ( void *msg);
;0DE4: xxxxxxxx yyyyyyyy ; 379: void ObexSendFile (SEND_OBEX_STRUCT *);
;0DE8: xxxxxxxx yyyyyyyy ; 37A: void Feedback_SetManualScrollingText(DISP_OBJ* feedback_disp_obj,int);
;0DEC: xxxxxxxx yyyyyyyy ; 37B: int EqualizerGain_Set (int AudioSessionID,int Band,int Level);
0DF0: FFFFFFFF D1617344 ; 37C: int CANVAS_Get_GviGC(PCANVAS pcanvas, GVI_GC* dest);
0DF4: FFFFFFFF 257E8244 ; 37D: void GVI_BitBlt(GVI_GC destgc, int destx, int desty, int destxsize, int destysize, GVI_GC srcgc, int srcx, int srcy, int _204, int _0, int _0_2, int _0_3);
0DF8: FFFFFFFF 957F8244 ; 37E: void GVI_StretchBlt(GVI_GC destgc, int destx, int desty, int destxsize, int destysize, GVI_GC srcgc, int srcx, int srcy, int srcxsize, int srcysize, int _204, int _0, int _0_2, int _0_3);
0DFC: FFFFFFFF 41808244 ; 37F: void GVI_TransformBlt(GVI_GC destgc, int destx, int desty, GVI_GC srcgc, int srcx, int srcy, int srcxsize, int srcysize, int orientation, int _0);
0E00: FFFFFFFF 85748244 ; 380: GVI_PEN GVI_CreatePen(char thikness, int color);
0E04: FFFFFFFF D18BB044 ; 381: GVI_PEN GVI_CreateDashedPen(char thikness, int color, int bitmask, int step, int offset);
0E08: FFFFFFFF 11748244 ; 382: GVI_BRUSH GVI_CreateSolidBrush(int color);
0E0C: FFFFFFFF 6D6E8244 ; 383: BOOL GVI_Delete_GVI_Object(GVI_OBJ*);
0E10: FFFFFFFF 55798244 ; 384: void GVI_DrawEllipse(GVI_GC destgc, int x1, int y1, int x2, int y2, GVI_PEN pen);
0E14: FFFFFFFF DD848244 ; 385: void GVI_DrawLine(GVI_GC, int x1, int y1, int x2, int y2, GVI_PEN pen);
0E18: FFFFFFFF 75898244 ; 386: void GVI_DrawLines(GVI_GC gc, POINT* points, int count, GVI_PEN pen);
0E1C: FFFFFFFF FD898244 ; 387: void GVI_DrawPolyLine(GVI_GC gc, POINT* points, int count, GVI_PEN pen, int is_closed);
0E20: FFFFFFFF E58B8244 ; 388: void GVI_DrawRectangle(GVI_GC gc, int x, int y, int w, int h, GVI_PEN pen);
0E24: FFFFFFFF 197D8244 ; 389: void GVI_DrawRoundRect(GVI_GC destgc, int x, int y, int w, int h, int arcw, int arch, GVI_PEN pen);
0E28: FFFFFFFF E1858244 ; 38A: void GVI_DrawSolidLines(GVI_GC gc, POINT* points, int count, int color, int width);
0E2C: FFFFFFFF BD878244 ; 38B: void GVI_DrawSolidPolyLine(GVI_GC gc, POINT* points, int count, int is_closed, int color, int width);
0E30: FFFFFFFF 7D888244 ; 38C: void GVI_DrawSolidRectangle(GVI_GC gc, int x, int y, int w, int h, int color, int width);
0E34: FFFFFFFF D17B8244 ; 38D: void GVI_FillEllipse(GVI_GC destgc, int x, int y, int w, int h, GVI_BRUSH brush);
0E38: FFFFFFFF D9838244 ; 38E: void GVI_FillPolygon(GVI_GC destgc, POINT *pp, int count, GVI_BRUSH brush);
0E3C: FFFFFFFF F58A8244 ; 38F: void GVI_FillRectangle(GVI_GC , int x, int y, int w, int h, GVI_BRUSH brush);
0E40: FFFFFFFF 558B8244 ; 390: void GVI_FillRectangles(GVI_GC , GVI_XYWH *rcs, int count, GVI_BRUSH brush);
0E44: FFFFFFFF 697C8244 ; 391: void GVI_FillSolidEllipse(GVI_GC destgc, int x1, int y1, int x2, int y2, int color);
0E48: FFFFFFFF A18B8244 ; 392: void GVI_FillSolidRectangle(GVI_GC , int x, int y, int w, int h, int color);
0E4C: FFFFFFFF 017E8244 ; 393: int GVI_FillSolidRoundRect(GVI_GC destgc, int x, int y, int w, int h, int arcx, int arcy, int color);
0E50: FFFFFFFF 51838244 ; 394: void GVI_FillSolidTriangle(GVI_GC destgc, int x1, int y1, int x2, int y2, int x3, int y3, int color);
0E54: FFFFFFFF 4527D444 ; 395: GC* GC_CreateMemoryGC(int xsize, int ysize, int bpp, int unk, void* somefn , int unk2);
0E58: FFFFFFFF 0128D444 ; 396: void GC_FreeGC(GC* gc);
;0E5C: xxxxxxxx yyyyyyyy ; 397: void REQUEST_ALARMCLOCKSTATUS_GET(const int *SYNC, char * alarm_status);
;0E60: xxxxxxxx yyyyyyyy ; 398: void REQUEST_ALARMCLOCKTIME_GET(const int *SYNC, TIME *t);
;0E64: xxxxxxxx yyyyyyyy ; 399: void REQUEST_ALARMDATEANDTIMESTATUS_GET(const int *SYNC, DATETIME *);
;0E68: xxxxxxxx yyyyyyyy ; 39A: int Settings_ShowNumber_Get(char *state);
0E6C: FFFFFFFF 59758244 ; 39B: GVI_BMP GVI_CreateBitmap(int xsize, int ysize, int bpp);
0E70: FFFFFFFF B58C8244 ; 39C: GVI_GC GVI_CreateMemoryGC(GVI_BMP bitmap);
0E74: FFFFFFFF 59918644 ; 39D: void GVI_DeleteMemoryGC(GVI_GC srcgc);
;0E78: xxxxxxxx yyyyyyyy ; 39E: int StringInput_DispObject_SetLanguage(DISP_OBJ_STRING_INPUT *,int langID,int flag);
0E7C: FFFFFFFF 9574E544 ; 39F: int ListElement_InsertSorted(LIST * list, void * pelem, int (*compare)(void *, void *));
;0E80: xxxxxxxx yyyyyyyy ; 3A0: int ListMenu_SetItemIcon(GUI_LIST *,wchar_t ItemID,wchar_t unk_FFFF,int mode,wchar_t ImageID);
0E84: FFFFFFFF AD08BF44 ; 3A1: void wstrnupr(wchar_t * wstr, int maxlen);
0E88: FFFFFFFF 993BCD44 ; 3A2: void wstrnlwr(wchar_t * wstr, int maxlen);





;locale=Russian_Russia.1251
