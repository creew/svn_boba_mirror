;W660_R6AD001
;Библиотека функций
;v
;(c) Hussein , IronMaster
;(p)-=Tanusha_SE=-

+45C3FC00
0448: 00000000 C0521444 ; 112: void memset(void *mem,char chr,int size);
044C: 00000000 141E3F44 ; 113: int memcpy(void *dest,const void *source,int cnt);
0450: 00000000 FD756744 ; 114: int sprintf(char *buf, const char *fmt, ...);
0454: 00000000 C57B6744 ; 115: int snwprintf(wchar_t* buffer, int size, const wchar_t* fmt, ...);
0458: 00000000 8991FA44 ; 116: int _fopen(const wchar_t *filpath, const wchar_t *filname,unsigned int mode , unsigned int rights, unsigned int __0);
045C: 00000000 61A7FA44 ; 117: int fclose(int file);
0460: 00000000 E9A9FA44 ; 118: int fread(int file , void *ptr, int size);
0464: 00000000 B5ABFA44 ; 119: int fwrite(int file , const void *ptr, int size);
0468: 00000000 B9499644 ; 11A: int _wstat(short *path, void *statbuf)
046C: 00000000 E9DE2C45 ; 11B: int fputs(const char *s, int file)
0470: 00000000 1D9BFA44 ; 11C: int fstat(const wchar_t * path, const wchar_t *fname , FSTAT * fstat_stuct);
0474: 00000000 4171FA44 ; 11D: void * AllocDirHandle(const wchar_t * path);
0478: 00000000 0173FA44 ; 11E: void *GetFname(void *, void*);
047C: 00000000 1D64FE44 ; 11F: void * DataBrowserDesc_Create(void);
0480: 00000000 E166FE44 ; 120: void DataBrowserDesc_SetStyle(void * db , int style);
0484: 00000000 1167FE44 ; 121: void DataBrowserDesc_SetHeaderText(void * db , int StrID);
0488: 00000000 F966FE44 ; 122: void DataBrowserDesc_SetFolders(void * db , wchar_t const ** FolderList);
048C: 00000000 1967FE44 ; 123: void DataBrowserDesc_SetOKSoftKeyText(void * db , int StrID);
0490: 00000000 052DFE44 ; 124: void DataBrowser_Create(void * db);
0494: 00000000 D164FE44 ; 125: void DataBrowserDesc_Destroy(void * db);
0498: 00000000 85C2FA44 ; 126: wchar_t * getFileExtention(wchar_t * fnane);
049C: 00000000 6D75FA44 ; 127: int DataBrowser_isFileInListExt(const wchar_t * ext_table,const wchar_t * path ,const wchar_t *fname );
04A0: 00000000 39433C45 ; 128: void Timer_ReSet(u16 * timer ,int time, void (*onTimer)(u16 timerID, LPARAM lparam), LPARAM lparam);
04A4: 00000000 05433C45 ; 129: u16 Timer_Set(int time, void (*onTimer)(u16 timerID, LPARAM lparam), LPARAM lparam);
04A8: 00000000 91433C45 ; 12A: void Timer_Kill(u16 *timerID);
04AC: 00000000 39763C45 ; 12B: int CreateBook(void * mem, void (* onClose)(BOOK*), const PAGE_DESC * bp, const char * name, int __0xFFFFFFFF,int __0);
04B0: 00000000 61773C45 ; 12C: void BookObj_KillBook(void *Book);
04B4: 00000000 B5743C45 ; 12D: void BookObj_GotoPage(BOOK * book, const PAGE_DESC * page);
04B8: 00000000 1D753C45 ; 12E: void BookObj_ReturnPage(BOOK * ,int);
04BC: 00000000 557C3C45 ; 12F: void FreeBook ( void *book);
04C0: 00000000 F95C3C45 ; 130: BOOK * FindBook(IS_NEEDED_BOOK);
04C4: 00000000 ADAA3D45 ; 131: BOOK * Find_StandbyBook(void);
04C8: 00000000 E5783C45 ; 132: void BookObj_SetFocus(void *,int focus);
04CC: 00000000 E5D34745 ; 133: void GuiObject_SetTitleText (void * gui , int StrID);
04D0: 00000000 B5CE4745 ; 134: void ShowWindow (void * gui);
04D4: 00000000 ED664345 ; 135: void SetCursorToItem ( void *obj , int item);
04D8: 00000000 05CF4745 ; 136: void GUI_SetStyle(GUI *,int style);
04DC: 00000000 45724345 ; 137: int GUIonMessage_GetCreatedItemIndex ( void *msg);
04E0: 00000000 51724345 ; 138: char SetMenuItemText0 ( GUI_MESSAGE *, int StrID);
04E4: 00000000 81724345 ; 139: __thumb char SetMenuItemText1 ( GUI_MESSAGE *, int StrID);
04E8: 00000000 61724345 ; 13A: __thumb char SetMenuItemText2 ( GUI_MESSAGE *, int StrID);
04EC: 00000000 71724345 ; 13B: char SetMenuItemText3 ( GUI_MESSAGE *, int StrID);
04F0: 00000000 C9724345 ; 13C: void SetListObjectItemIcon ( void *msg , int align , wchar_t iconID);
04F4: 00000000 211D4745 ; 13D: __thumb void GUIObject_SetHeaderText(void *gui , int StrID);
04F8: 00000000 01674345 ; 13E: int ListMenu_GetSelectedItem(GUI_LIST * );
04FC: 00000000 51674345 ; 13F: void SetMenuItemStyle( void *obj , int style);
0500: 00000000 09B24745 ; 140: void putchar( void *xx , int x, int y, int _zero, int zero1 , short wchar);
0504: 00000000 D9B84A45 ;8141: IS_NEEDED_BOOK isScreenSaverBook(void);
0508: 00000000 4DCA4845 ; 142: void StatusIndication_SetItemText(void *gui,int item,int StrID);
050C: 00000000 B5C63D45 ; 143: void StatusIndication_ShowNotes(int StrID);
0510: 00000000 81E84045 ; 144: GUI * CreateStringInput(int,...);
0514: 00000000 A9864345 ; 145: GUI_ONEOFMANY * CreateOneOfMany(BOOK *);
0518: 00000000 71884345 ; 146: void OneOfMany_SetItemCount(GUI_ONEOFMANY * , int count);
051C: 00000000 8D884345 ; 147: void OneOfMany_SetChecked(GUI_ONEOFMANY * , int checked);
0520: 00000000 C1884345 ; 148: void OneOfMany_SetTexts(GUI_ONEOFMANY * , int * StrID , int Count);
0524: 00000000 9D884345 ; 149: int OneOfMany_GetSelected(GUI_ONEOFMANY * rb);
0528: 00000000 E5C53D45 ; 14A: void StatusIndication_Item8_SetText(int StrID);
052C: 00000000 A9974945 ; 14B: void GUIObject_Softkey_SetAction(void * gui,u16 actionID,void (*proc)(BOOK *,void*));
0530: 00000000 21984945 ; 14C: void GUIObject_Softkey_SetText(void * gui,u16 actionID , int StrID);
0534: 00000000 DD984945 ; 14D: void GUIObject_SoftKey_SetEnable(void *gui,u16 actionID,int ena);
0538: 00000000 01994945 ; 14E: void GUIObject_SoftKey_AddErrorStr(void *gui,u16 actionID,int StrID);
053C: 00000000 6D974945 ; 14F: void GUIObject_SoftKey_RemoveItem(void *gui,u16 actionID);
0540: 00000000 71984945 ; 150: void GUIObject_SoftKey_SetVisible(void *gui,u16 actionID,int visible);
0544: 00000000 E19A4945 ; 151: void GUIObject_SoftKey_SuppressDefaultAction(void *gui,u16 actionID);
0548: 00000000 D1826744 ; 152: wchar_t* wstrcpy(wchar_t * dest, const wchar_t * source);
054C: 00000000 7D836744 ; 153: wchar_t* wstrncpy(wchar_t * dest, const wchar_t * source, int maxlen);
0550: 00000000 75826744 ; 154: wchar_t* wstrcat(wchar_t * wstr, const wchar_t * subwstr);
0554: 00000000 1D836744 ; 155: wchar_t *wstrncat(wchar_t *wstr, const wchar_t *subwstr , int maxlen);
0558: 00000000 A9826744 ; 156: int wstrcmp(const wchar_t *wstr1, const wchar_t *wstr2);
055C: 00000000 C994F644 ; 157: int wstrlen(const wchar_t * wstr);
0560: 00000000 91A7F644 ; 158: wchar_t * str2wstr(wchar_t * wstr, const char * str);
0564: 00000000 A9796744 ; 159: int strcmp(const char * str1, const char * str2);
0568: 00000000 057A6744 ; 15A: int strlen(const char *str);
056C: 00000000 E995F644 ; 15B: char * wstr2strn (char * str , const wchar_t * wstr, int maxlen);
0570: 00000000 B1F34545 ; 15C: int int2strID (int num);
0574: 00000000 65F64545 ; 15D: int Str2ID(const void * wstr , int flag , int len);
0578: 00000000 F9FA4545 ; 15E: __thumb void StrID2Str(int StrID,char * str,int maxlen);
057C: 00000000 E9F94545 ; 15F: __thumb void TextID2wstr(int StrID,wchar_t * str,int maxlen);
0580: 00000000 C9F84545 ; 160: int TextGetLength(int StrID);
0584: 00000000 2DF84545 ; 161: void TextFree(int StrID);
0588: 00000000 1993F044 ; 162: int AB_DEFAULTNBR_GET(int rec_num, void * mem_0x30, int * unk);
058C: 00000000 C1E2F044 ; 163: int AB_READSTRING(void * mem_0x30,int rec_num, int rec_item_num);
0590: 00000000 8DE3F044 ; 164: int AB_READPHONENBR(void * mem_0x30,int rec_num, int rec_item_num);
0594: 00000000 45E4F044 ; 165: int AB_GETNBROFITEMS(int get_from,int unk_0);
0598: 00000000 D1EC4545 ; 166: int PNUM_len(void *pnum);
059C: 00000000 2DE63445 ; 167: void PNUM2str(char *str,void *pnum,int len, int max_len);
05A0: 00000000 B5CC4745 ; 168: DISP_OBJ * GUIObj_GetDISPObj (void * gui);
05A4: 00000000 E1052D45 ; 169: LIST *List_New(void);
05A8: 00000000 15062D45 ; 16A: void List_Free(LIST *lst);
05AC: 00000000 69072D45 ; 16B: void ListElement_AddtoTop(LIST *lst,void *newElement);
05B0: 00000000 09EFF544 ; 16C: int Gif2ID(u16 IMAGEHANDLE,const wchar_t * path, const wchar_t * fname,wchar_t * ID);
05B4: 00000000 E529F644 ; 16D: int REQUEST_IMAGEHANDLER_INTERNAL_GETHANDLE(const int * __zero,u16 * IMAGEHANDLE,char * unk);
05B8: 00000000 3DB1E644 ; 16E: void REQUEST_DATEANDTIME_GET(const int * __zero , DATETIME *dt);
05BC: 00000000 858D4A45 ; 16F: void IndicationDevice_Backlight_FadeToLevel(int unk_zero ,int bl_level);
05C0: 00000000 45C50945 ; 170: int GetFreeBytesOnHeap(void);
05C4: 00000000 0D793C45 ; 171: void BookObj_Hide(BOOK *,int display_type);
05C8: 00000000 1D793C45 ; 172: void BookObj_Show(BOOK *,int display_type);
05CC: 00000000 69AC3D45 ; 173: void StartAPP (const wchar_t * appname);
05D0: 00000000 41684345 ; 174: void ListMenu_SetOnMessages (GUI_LIST * , int (*proc)(GUI_MESSAGE *));
05D4: 00000000 B96F3945 ; 175: char * manifest_GetParam(const char *buf, const char *param_name,int unk);
05D8: 00000000 65ADFA44 ; 176: int lseek(int file,int offset,int mode);
;05DC: xxxxxxxx yyyyyyyy ;8177: int get_VBUFFER(void);
;05E0: xxxxxxxx yyyyyyyy ; 178: void SetLampLevel (int level);
05E4: 00000000 F9062D45 ; 179: void * ListElement_Remove(LIST *lst,int index);
05E8: 00000000 AD233E44 ; 17A: int GetCurrentPID(void);
05EC: 00000000 2D072D45 ; 17B: int ListElement_Prt2NumElement(LIST *lst,void *ptr);
05F0: 00000000 10AA4244 ; 17C: union SIGNAL *alloc(OSBUFSIZE size,SIGSELECT signo);
05F4: 00000000 2CAA4244 ; 17D: union SIGNAL *receive(const SIGSELECT *sigsel);
05F8: 00000000 1CAA4244 ; 17E: void send(union SIGNAL **sig,PROCESS to);
05FC: 00000000 6CAA4244 ; 17F: PROCESS sender(union SIGNAL **sig);
0600: 00000000 3CAA4244 ; 180: void free_buf(union SIGNAL **sig);
0604: 00000000 08AB4244 ; 181: PROCESS create_process(int proc_type,char *name,OSENTRYPOINT *entrypoint,OSADDRESS stack_size,OSPRIORITY priority,OSTIME timeslice,PROCESS pid_block,void *redir_table,OSVECTOR vector,OSUSER user);
0608: 00000000 28AD4244 ; 182: void start(PROCESS pid);
060C: 00000000 D8AB4244 ; 183: int get_ptype(PROCESS pid);
0610: 00000000 24AB4244 ; 184: PROCESS current_process(void);
0614: 00000000 5CAA4244 ; 185: void delay(OSTIME timeout);
0618: 00000000 24AC4244 ; 186: OSBOOLEAN hunt(const char *name, OSUSER user, PROCESS *name_, union SIGNAL **hunt_sig);
061C: 00000000 50AC4244 ; 187: void kill_proc(PROCESS pid);
;0620: xxxxxxxx yyyyyyyy ; 188: OSBOOLEAN set_bp (PROCESS pid,OSADDRESS address,OSADDRESS attribute,union SIGNAL **trapsig);
;0624: xxxxxxxx yyyyyyyy ; 189: union SIGNAL *receive_w_tmo (OSTIME timeout, SIGSELECT *sel);
;0628: xxxxxxxx yyyyyyyy ; 18A: OSBOOLEAN clear_bp (PROCESS pid, OSADDRESS addr);
0680: 00000000 D1796744 ; 1A0: char* strcpy(char * dest, char * source);
0684: 00000000 95F81145 ; 1A1: void *CreateMessage(int size,int ev,char *name);
0688: 00000000 E9F81145 ; 1A2: void SendMessage(void **signal,int PID);
068C: 00000000 71F91145 ; 1A3: void * WaitMessage(void *SIGSEL);
0690: 00000000 85F91145 ; 1A4: int FreeMessage(void **Mess);
0694: 00000000 B17D0E45 ; 1A5: void SendDispatchMessage(int id, int unk_zero, int size,void *mess);
0698: 00000000 154C3C45 ; 1A6: char * UIEventName(int event);
069C: 00000000 BCE91620 ;81A7: int * MissedEvents(void);
06A0: 00000000 C1603C45 ; 1A8: void UI_Event(int event);
06A4: 00000000 D1603C45 ; 1A9: void UI_Event_wData(int event,void *message,void (*mfree)(void*));
06A8: 00000000 19613C45 ; 1AA: void UI_Event_toBookID(int event,int BookID);
06AC: 00000000 2D613C45 ; 1AB: void UI_Event_toBookIDwData(int event,int BookID,void *message,void (*mfree)(void*));
06B0: 00000000 B1092D45 ; 1AC: int ListElement_Find(LIST *lst,void *element, int (*cmp_proc)(void *,void *));
06B4: 00000000 B5082D45 ; 1AD: void * ListElement_GetByIndex(LIST * , int index);
06B8: 00000000 D1836744 ; 1AE: wchar_t* wstrrchr(const wchar_t* wstr, wchar_t wchar);
06BC: 00000000 29743C45 ; 1AF: void BookObj_CallSubroutine(BOOK * , void * SubProcDesc);
06C0: 00000000 79072D45 ; 1B0: void ListElement_Add(LIST *lst,void *newElement);
06C4: 00000000 71922C44 ; 1B1: void debug_printf(const char * fmt,...);
;06C8: xxxxxxxx yyyyyyyy ; 1B2: int PlayFile(const wchar_t * path, const wchar_t * fname);
06DC: 00000000 5DB94A45 ; 1B7: int isKeylocked(void);
;06E0: xxxxxxxx yyyyyyyy ;81B8: IS_NEEDED_BOOK isMediaPlayerVideoBook(void);
;06F0: xxxxxxxx yyyyyyyy ; 1BC: int REQUEST_DATEFORMAT_GET(const int *SYNC, char *DateFormat);
;06F4: xxxxxxxx yyyyyyyy ; 1BD: int REQUEST_TIMEFORMAT_GET(const int *SYNC, char *TimeFormat);
06F8: 00000000 D1343C45 ; 1BE: int Date2ID(DATE *, int TimeFormat,int);
06FC: 00000000 F9333C45 ; 1BF: int Time2ID(TIME *, char TimeFormat,int);
0700: 00000000 E5644345 ; 1C0: GUI_LIST * CreateListObject(BOOK * , void * unk);
0704: 00000000 15674345 ; 1C1: void SetNumOfMenuItem(void * , int item_count);
;0708: xxxxxxxx yyyyyyyy ;81C2: LIST ** ROOT_APP(void);
;070C: xxxxxxxx yyyyyyyy ; 1C3: void SoftKey_AddHelpStr(void *gui,int msg,int StrID);
;0710: xxxxxxxx yyyyyyyy ; 1C4: void SoftKey_SetItemAsSubItem(void *gui,int item,int subitem);
;0714: xxxxxxxx yyyyyyyy ; 1C5: int REQUEST_SYSTEM_SHUTDOWN(void);
;0718: xxxxxxxx yyyyyyyy ; 1C6: int REQUEST_SYSTEM_RESTART(void);
;071C: xxxxxxxx yyyyyyyy ; 1C7: void SoftKeys_SetText(void *gui,int msg,int StrID,int StrID1);
0720: 00000000 39314A45 ; 1C8: int isRightNowBook(BOOK *);
0724: 00000000 81A03D45 ; 1C9: int isVolumeControllerBook(BOOK *);
0728: 00000000 21DD4745 ; 1CA: GUI_TABMENUBAR * CreateTabMenuBar(BOOK *);
072C: 00000000 F5DD4745 ; 1CB: void TabMenuBar_SetTabCount(GUI_TABMENUBAR * , int count);
0730: 00000000 99DE4745 ; 1CC: void TabMenuBar_AssignGuiObj(GUI_TABMENUBAR * , int tab , GUI *);
0734: 00000000 D5DE4745 ; 1CD: void TabMenuBar_SetTabIcon(GUI_TABMENUBAR *,int tab, wchar_t icon , int for_state);
0738: 00000000 45CC4745 ; 1CE: GUI *GUI_Free(GUI*);
;073C: xxxxxxxx yyyyyyyy ; 1CF: void InputFeedback_SetIcon(GUI *gui, wchar_t icon);
;0740: xxxxxxxx yyyyyyyy ; 1D0: int StringInput_GetStringAndLen (GUI*,wchar_t**,u16*);
;0750: xxxxxxxx yyyyyyyy ; 1D4: GUI_NOFMANY * CreateNOfMany(BOOK *);
;0754: xxxxxxxx yyyyyyyy ; 1D5: void NOfMany_SetTexts(GUI_NOFMANY * , int * StrIDtable, int items_count);
;0758: xxxxxxxx yyyyyyyy ; 1D6: void NOfMany_SetChecked(GUI_NOFMANY * , u16 * checked_table, int items_count);
;075C: xxxxxxxx yyyyyyyy ; 1D7: void NOfMany_SetCursor(GUI_NOFMANY * , int item);
;0760: xxxxxxxx yyyyyyyy ; 1D8: int NOfMany_GetCheckedCount(GUI_NOFMANY *);
;0764: xxxxxxxx yyyyyyyy ; 1D9: int NOfMany_GetChecked(GUI_NOFMANY * , u16 * buffer );
;0768: xxxxxxxx yyyyyyyy ; 1DA: void NOfMany_SetonMessage(GUI_NOFMANY * , void * proc );
;0780: xxxxxxxx yyyyyyyy ; 1E0: void OneOfMany_SetFocused(GUI_ONEOFMANY * , int item);
0784: 00000000 B9884345 ; 1E1: void OneOfMany_SetonMessage(GUI_ONEOFMANY * , int (*proc)(GUI_MESSAGE *));
;0788: xxxxxxxx yyyyyyyy ; 1E2: GUI_FEEDBACK * CreateFeedBack (int,...);
;078C: xxxxxxxx yyyyyyyy ; 1E3: void FeedBack_SetText(GUI_FEEDBACK*,int);
0790: 00000000 E5ECAC44 ; 1E4: int GetBattaryState(const int * , BATT *);
;0794: xxxxxxxx yyyyyyyy ; 1E5: void * get_DisplayGC (void);
;0798: xxxxxxxx yyyyyyyy ; 1E6: void GetGuiRect(void*,RECT*);
;079C: xxxxxxxx yyyyyyyy ; 1E7: void get_GC_RECT(void*,RECT*);
;07A0: xxxxxxxx yyyyyyyy ; 1E8: int get_GC_xx(void * GC);
;07A4: xxxxxxxx yyyyyyyy ; 1E9: void *set_GC_xx(void * GC, int);
;07A8: xxxxxxxx yyyyyyyy ; 1EA: void GC_validate_RECT(void * GC , RECT*);
;07AC: xxxxxxxx yyyyyyyy ; 1EB: void addGui2book(BOOK*,GUI*);
;07B0: xxxxxxxx yyyyyyyy ; 1EC: void DrawRect(int x1, int y1,int x2 ,int y2,int pen_color,int brush_color);
07B4: 00000000 455D4745 ; 1ED: void DrawString(int StrID,int align,int x1,int y1,int x2,int y2,int unk,int unk1,int pen_color ,int brush_color);
;07B8: xxxxxxxx yyyyyyyy ; 1EE: void addGui2XGuiList (void* xguilist , GUI*);
;07BC: xxxxxxxx yyyyyyyy ; 1EF: void InvalidateRect(DISP_OBJ *,RECT*);
;07C0: xxxxxxxx yyyyyyyy ; 1F0: int CreateObject(GUI*,void (*)(DISP_DESC *),void (*)(DISP_DESC *),BOOK *,void(*)(),int,int size_obj);
07C4: 00000000 A1674745 ; 1F1: int SetFont(int);
;07C8: xxxxxxxx yyyyyyyy ;81F2: DISP_OBJ ** StatusRow_p(void);
07CC: 00000000 F95D3C45 ; 1F3: int root_list_get_session_count(void); /!\
07D0: 00000000 055E3C45 ; 1F4: UI_APP_SESSION *root_list_get_session(int num_session);
;07D4: xxxxxxxx yyyyyyyy ; 1F5: BOOK *SESSION_GetTopBook(UI_APP_SESSION *);
;07D8: xxxxxxxx yyyyyyyy ; 1F6: int MainInput_getVisible(GUI *);
;07DC: xxxxxxxx yyyyyyyy ; 1F7: int MainInput_strlen(GUI *);
;07E0: xxxxxxxx yyyyyyyy ; 1F8: char * MainInput_getPNUM(GUI *);
;07E4: xxxxxxxx yyyyyyyy ; 1F9: int MainInput_isPlus(GUI *);
07E8: 00000000 157D3C45 ; 1FA: int BOOK_GetBookID(BOOK * );
07EC: 00000000 49836744 ; 1FB: int wstrncmp(const wchar_t*,const wchar_t*,int);
;07F0: xxxxxxxx yyyyyyyy ; 1FC: int DISP_OBJ_GetAbsoluteXPos(DISP_OBJ *);
;07F4: xxxxxxxx yyyyyyyy ; 1FD: int DISP_OBJ_GetAbsoluteYPos(DISP_OBJ *);
;07F8: xxxxxxxx yyyyyyyy ; 1FE: WINDOW * DISP_OBJ_GetWindow(DISP_OBJ *);
;07FC: xxxxxxxx yyyyyyyy ; 1FF: int GetThemeColor(int , int);
;0800: xxxxxxxx yyyyyyyy ; 200: int REQUEST_SETTING_SILENCE_SET(const int * __zero,u16 profile,u16 value);
;0804: xxxxxxxx yyyyyyyy ; 201: int REQUEST_SETTING_SILENCE_GET(const int * __zero,u16 profile, char * silence_mode);
;0808: xxxxxxxx yyyyyyyy ; 202: void VCALL_Init (void* vc);
;080C: xxxxxxxx yyyyyyyy ; 203: void VCALL_SetName (void * vc , wchar_t * name ,unsigned short name_len);
;0810: xxxxxxxx yyyyyyyy ; 204: void VCALL_SetNameIcon (void * vc , wchar_t icon);
;0814: xxxxxxxx yyyyyyyy ; 205: void VCALL_SetNumber (void * vc , wchar_t * number , unsigned short num_len);
;0818: xxxxxxxx yyyyyyyy ; 206: void VCALL_SetHZ1 (void * vc, int , u16 );
;081C: xxxxxxxx yyyyyyyy ; 207: void VCALL_SetHZ2 (void * vc , u16 );
;0820: xxxxxxxx yyyyyyyy ; 208: void MakeVoiceCall (int SessioID , void * vc ,int flag);
;0824: xxxxxxxx yyyyyyyy ; 209: int isDirectory (wchar_t * path ,wchar_t * filename , int * error );
;0828: xxxxxxxx yyyyyyyy ; 20A: void FileDelete (wchar_t * path ,wchar_t * filename , int * error );
;082C: xxxxxxxx yyyyyyyy ; 20B: void SetFocus (GUI * , int);
;0830: xxxxxxxx yyyyyyyy ; 20C: int CreateSMSCont (int, void*);
;0834: xxxxxxxx yyyyyyyy ; 20D: int FreeSMSCont (void*);
;0838: xxxxxxxx yyyyyyyy ; 20E: int PrepareSMSCont (void*,u16*,u16*,int,int);
;083C: xxxxxxxx yyyyyyyy ; 20F: int CteateNewMessage (int,void*,int);
;0840: xxxxxxxx yyyyyyyy ;8210: void * get_APP_DESC_TABLE(void);
;0844: xxxxxxxx yyyyyyyy ; 211: C_INTERFACE *Window_GetComponentInterface(WINDOW*);
;0848: xxxxxxxx yyyyyyyy ; 212: int AB_POSITIONNBR_GET(void * ab_name,char * ,u16 * ,void * ab_num);
;084C: xxxxxxxx yyyyyyyy ; 213: int AB_NAME_ITEM2StrID(void * ab_name);
;0850: xxxxxxxx yyyyyyyy ; 214: int AB_NUM_ITEM2StrID(void * ab_num_item);
;0854: xxxxxxxx yyyyyyyy ; 215: int GetABRecNum(AB_GET_STRUCT *);
;0858: xxxxxxxx yyyyyyyy ;8216: AB_ITEM_DESC * get_AB_ITEMS_DESC();
0860: 00000000 BDC8B844 ; 218: GUI * SBY_GetStatusIndication(BOOK * StandBy);
;0864: xxxxxxxx yyyyyyyy ; 219: int REQUEST_PHONEBOOK_ACCESSSTATUS_TOTAL_GET(const int * __zero, int *);
0868: 00000000 F03D0820 ;821A: int * PID_MMI(void);
;0874: xxxxxxxx yyyyyyyy ; 21D: DISP_OBJ* DISPBASE_GetFocused(int display);
;0878: xxxxxxxx yyyyyyyy ; 21E: char DISP_OBJ_getVisible(DISP_OBJ*);
087C: 00000000 B5235445 ; 21F: DISP_DESC* DISP_OBJ_GetDESC (DISP_OBJ*);
;0880: xxxxxxxx yyyyyyyy ; 220: void DISP_DESC_SetName (DISP_DESC* , const char * name);
;0884: xxxxxxxx yyyyyyyy ; 221: char* DISP_OBJ_GetName (DISP_OBJ *);
;0888: xxxxxxxx yyyyyyyy ; 222: void DISP_DESC_SetSize (DISP_DESC* , u16 size);
;088C: xxxxxxxx yyyyyyyy ; 223: u16 DISP_DESC_GetSize (DISP_OBJ *);
;0890: xxxxxxxx yyyyyyyy ; 224: void DISP_DESC_SetOnCreate (DISP_DESC* , DISP_OBJ_ONCREATE_METHOD);
;0894: xxxxxxxx yyyyyyyy ; 225: DISP_OBJ_ONCREATE_METHOD DISP_OBJ_GetOnCreate (DISP_OBJ *);
;0898: xxxxxxxx yyyyyyyy ; 226: void DISP_DESC_SetOnClose (DISP_DESC* , DISP_OBJ_ONCLOSE_METHOD);
;089C: xxxxxxxx yyyyyyyy ; 227: DISP_OBJ_ONCLOSE_METHOD DISP_OBJ_GetOnClose (DISP_OBJ *);
08A0: 00000000 41EA4645 ; 228: void DISP_DESC_SetOnRedraw (DISP_DESC* , DISP_OBJ_ONREDRAW_METHOD);
;08A4: xxxxxxxx yyyyyyyy ; 229: DISP_OBJ_ONREDRAW_METHOD DISP_OBJ_GetOnRedraw (DISP_OBJ *);
08A8: 00000000 49EA4645 ; 22A: void DISP_DESC_SetOnKey (DISP_DESC* , DISP_OBJ_ONKEY_METHOD);
08AC: 00000000 31EB4645 ; 22B: DISP_OBJ_ONKEY_METHOD DISP_OBJ_GetOnKey (DISP_OBJ *);
;08B0: xxxxxxxx yyyyyyyy ; 22C: void DISP_DESC_SetonRefresh (DISP_DESC* ,void (*)(void*));
;08B4: xxxxxxxx yyyyyyyy ; 22D: DISP_OBJ_METHOD DISP_OBJ_GetonRefresh (DISP_OBJ *);
;08B8: xxxxxxxx yyyyyyyy ; 22E: void DISP_DESC_SetMethod04 (DISP_DESC* ,void (*)(void*));
;08BC: xxxxxxxx yyyyyyyy ; 22F: DISP_OBJ_METHOD DISP_OBJ_GetMethod04 (DISP_OBJ *);
;08C0: xxxxxxxx yyyyyyyy ; 230: void DISP_DESC_SetMethod05 (DISP_DESC* ,void (*)(void*));
;08C4: xxxxxxxx yyyyyyyy ; 231: DISP_OBJ_METHOD DISP_OBJ_GetMethod05 (DISP_OBJ *);
;08C8: xxxxxxxx yyyyyyyy ; 232: void DISP_DESC_SetMethod06 (DISP_DESC* ,DISP_OBJ_METHOD);
;08CC: xxxxxxxx yyyyyyyy ; 233: DISP_OBJ_METHOD DISP_OBJ_GetMethod06 (DISP_OBJ *);
;08D0: xxxxxxxx yyyyyyyy ; 234: void DISP_DESC_SetMethod07 (DISP_DESC* ,void (*)(void*));
;08D4: xxxxxxxx yyyyyyyy ; 235: DISP_OBJ_METHOD DISP_OBJ_GetMethod07 (DISP_OBJ *);
;08D8: xxxxxxxx yyyyyyyy ; 236: void DISP_DESC_SetMethod08 (DISP_DESC* ,DISP_OBJ_METHOD);
;08DC: xxxxxxxx yyyyyyyy ; 237: DISP_OBJ_METHOD DISP_OBJ_GetMethod08 (DISP_OBJ *);
;08E0: xxxxxxxx yyyyyyyy ; 238: void DISP_DESC_SetMethod09 (DISP_DESC* ,void (*)(void*));
;08E4: xxxxxxxx yyyyyyyy ; 239: DISP_OBJ_METHOD DISP_OBJ_GetMethod09 (DISP_OBJ *);
;08E8: xxxxxxxx yyyyyyyy ; 23A: void DISP_DESC_SetMethod0A (DISP_DESC* ,void (*)(void*));
;08EC: xxxxxxxx yyyyyyyy ; 23B: DISP_OBJ_METHOD DISP_OBJ_GetMethod0A (DISP_OBJ *);
;08F0: xxxxxxxx yyyyyyyy ; 23C: void DISP_DESC_SetMethod0B (DISP_DESC* ,void (*)(void*));
;08F4: xxxxxxxx yyyyyyyy ; 23D: DISP_OBJ_METHOD DISP_OBJ_GetMethod0B (DISP_OBJ *);
;08F8: xxxxxxxx yyyyyyyy ; 23E: void DISP_DESC_SetMethod0C (DISP_DESC* ,void (*)(void*));
;08FC: xxxxxxxx yyyyyyyy ; 23F: DISP_OBJ_METHOD DISP_OBJ_GetMethod0C (DISP_OBJ *);
0900: 00000000 43401145 ; 240: void JavaSession_Manager (int cmd); //nullsub(void)
0904: 00000000 41401145 ; 241: int JavaSession_GetName(void); //nullsub(ret 0)
0908: 00000000 95F74545 ; 242: int TextCopyId(int);
090C: 00000000 B57C3C45 ; 243: UI_APP_SESSION *Book_GetSession(BOOK*);
;0910: xxxxxxxx yyyyyyyy ; 244: void List2lineSetAsSubitem (void* msg,int unk,int n_sub_items);
;0914: xxxxxxxx yyyyyyyy ; 245: void List2lineSubitemAddText(void* msg,int StrID);
;0918: xxxxxxxx yyyyyyyy ; 246: int GUIonMessage_GetCreatedSubItemParrentIndex(void * msg);
;091C: xxxxxxxx yyyyyyyy ; 247: void GoMusic(void);
;0928: xxxxxxxx yyyyyyyy ; 24A: int PlayFileV(const wchar_t * path,const wchar_t * fname, int vol);
;092C: xxxxxxxx yyyyyyyy ; 24B: int GetSilent(void);
;0930: xxxxxxxx yyyyyyyy ; 24C: int GetVibrator(int ignorevibrator,int ignoresilent);
;0934: xxxxxxxx yyyyyyyy ; 24D: int GetAudioSettings(int what, char* retvalue);
0938: 00000000 A57B2C44 ; 24E: int GetChipID(void);
;0948: xxxxxxxx yyyyyyyy ; 252: int List2LineGetCurrentIndex(void * msg);
;094C: xxxxxxxx yyyyyyyy ; 253: int GUIonMessage_GetCurrentItemIndex(void * msg);
0950: 00000000 7D74FA44 ; 254: void DestroyDirHandle(void *handle);
0954: 00000000 ACEFAC45 ;8255: DB_EXT *LastExtDB(void);
0958: 00000000 B9D1FD44 ; 256: void GetOtherExtMethods(FILESUBROUTINE **);
095C: 00000000 E5273D45 ; 257: void MessageBox(int HeaderStrID,int MessageStrID,wchar_t IconID, int style /*1 or 2*/,int time,BOOK * unk);
0960: 00000000 2DFF4845 ; 258: int Display_GetHeight(int Display);
0964: 00000000 39FF4845 ; 259: int Display_GetWidth(int Display);
;0968: xxxxxxxx yyyyyyyy ; 25A: void PlaySystemSound (int SndNumber);
0974: 00000000 E9DD4745 ; 25D: int TabMenuBar_GetFocusedTabIndex(GUI_TABMENUBAR * );
0978: 00000000 D9DD4745 ; 25E: void TabMenuBar_SetTabFocused(GUI_TABMENUBAR * , int tab_num);
;097C: xxxxxxxx yyyyyyyy ; 25F: int GC_GetPenColor (void* GC);
;0980: xxxxxxxx yyyyyyyy ; 260: void GC_SetPenColor(void* GC , int pen_color);
;0984: xxxxxxxx yyyyyyyy ; 261: void GC_SetPixel (void* GC,int x1,int y1,int color);
;0988: xxxxxxxx yyyyyyyy ; 262: void GC_DrawLine(void* GC,int x1, int y1, int x2, int y2);
;098C: xxxxxxxx yyyyyyyy ; 263: void GC_DrawFRect (void* GC,int color,int x1,int y1,int x2 ,int y2);
;0990: xxxxxxxx yyyyyyyy ; 264: int GC_DrawBitmap(void *GC, int x1, int y1, int x2, int y2, int * bmp);
;0994: xxxxxxxx yyyyyyyy ; 265: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
;0998: xxxxxxxx yyyyyyyy ; 266: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
;099C: xxxxxxxx yyyyyyyy ; 267: png_infop png_create_info_struct(png_structp png_ptr);
;09A0: xxxxxxxx yyyyyyyy ; 268: void png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr);
;09A4: xxxxxxxx yyyyyyyy ; 269: void png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr, png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn, png_progressive_end_ptr end_fn);
;09A8: xxxxxxxx yyyyyyyy ; 26A: void png_process_data(png_structp png_ptr, png_infop info_ptr, png_bytep buffer, png_size_t buffer_size);
;09AC: xxxxxxxx yyyyyyyy ; 26B: void png_read_update_info(png_structp png_ptr, png_infop info_ptr);
;09B0: xxxxxxxx yyyyyyyy ; 26C: png_voidp png_get_progressive_ptr(png_structp png_ptr);
;09B4: xxxxxxxx yyyyyyyy ; 26D: png_uint_32 png_get_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
;09B8: xxxxxxxx yyyyyyyy ; 26E: void png_set_strip_16(png_structp png_ptr);
;09BC: xxxxxxxx yyyyyyyy ; 26F: void png_set_gray_1_2_4_to_8(png_structp png_ptr);
;09C0: xxxxxxxx yyyyyyyy ; 270: void png_set_gray_to_rgb(png_structp png_ptr);
;09C4: xxxxxxxx yyyyyyyy ; 271: png_uint_32 png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag);
;09C8: xxxxxxxx yyyyyyyy ; 272: void png_set_tRNS_to_alpha(png_structp png_ptr);
;09CC: xxxxxxxx yyyyyyyy ; 273: void png_set_filler(png_structp png_ptr, png_uint_32 filler, int flags);
;09D0: xxxxxxxx yyyyyyyy ; 274: void png_set_palette_to_rgb(png_structp png_ptr);
;09D4: xxxxxxxx yyyyyyyy ; 275: png_uint_32 png_get_rowbytes(png_structp png_ptr, png_infop info_ptr);
;09D8: xxxxxxxx yyyyyyyy ; 276: void png_progressive_combine_row(png_structp png_ptr, png_bytep old_row, png_bytep new_row);
;09DC: xxxxxxxx yyyyyyyy ; 277: int png_sig_cmp(png_bytep sig, png_size_t start, png_size_t num_to_check);
;09E0: xxxxxxxx yyyyyyyy ; 278: int setjmp(jmp_buf jmpbuf);
;09E4: xxxxxxxx yyyyyyyy ; 279: void longjmp(jmp_buf, int);
;09E8: xxxxxxxx yyyyyyyy ; 27A: int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size);
;09EC: xxxxxxxx yyyyyyyy ; 27B: int inflate (z_streamp strm, int flush);
;09F0: xxxxxxxx yyyyyyyy ; 27C: int inflateEnd (z_streamp strm);
;09F4: xxxxxxxx yyyyyyyy ; 27D: int memcmp (const void *m1,const void *m2,int n);
;09F8: xxxxxxxx yyyyyyyy ; 27E: int strncmp(const char *s1, const char *s2, int len);
;09FC: xxxxxxxx yyyyyyyy ; 27F: char *strncpy (char *dest,const char *source,int maxlen);
;0A00: xxxxxxxx yyyyyyyy ; 280: char *strcat(char *dest, const char *src);
;0A04: xxxxxxxx yyyyyyyy ; 281: void GuiObject_SetTitleType(GUI *gui, int type);
0A08: 00000000 ED724345 ; 282: void GUIonMessage_SetItemDisabled (void * msg, int Disabled);
0A0C: 00000000 4D2AF644 ; 283: int REQUEST_IMAGEHANDLER_INTERNAL_REGISTER(const int * __zero,u16 ImageHandle,wchar_t *path,wchar_t *fname,int unk, wchar_t * ImageID ,char * error);
0A10: 00000000 FD2AF644 ; 284: int REQUEST_IMAGEHANDLER_INTERNAL_UNREGISTER (const int * __zero,u16 ImageHandle,u16* ,u16* ,wchar_t ImageID, int unk_1,char * error);
0A14: 00000000 CCCA2E20 ;8285: SURFACE ** get_Surfaces(void);
0A18: 00000000 B59DD544 ; 286: int iconidname2id(const wchar_t* idname,int maxnamelen,int *id);
0A1C: 00000000 F930E644 ; 287: int textidname2id(const wchar_t* idname,int maxnamelen,int* id);
0A20: 00000000 E5684345 ; 288: void ListMenu_SetNoItemText(GUI_LIST *, int str);
;0A28: xxxxxxxx yyyyyyyy ;828A: IS_NEEDED_BOOK isFmRadioBook(void);
;0A2C: xxxxxxxx yyyyyyyy ;828B: IS_NEEDED_BOOK isAudioPlayerBook(void);
;0A30: xxxxxxxx yyyyyyyy ; 28C: void PlayerControl(BOOK *AudioPlayerBook, int);
;0A34: xxxxxxxx yyyyyyyy ; 28D: void SwitchRadioStationFromList(BOOK *FmRadioBook, int);
;0A38: xxxxxxxx yyyyyyyy ; 28E: void Shortcut_Run (wchar_t * shortcut_name);
;0A3C: xxxxxxxx yyyyyyyy ; 28F: int mkdir(const wchar_t* path);
;0A40: xxxxxxxx yyyyyyyy ; 290: int rmdir(const wchar_t* path, int zero);
;0A44: xxxxxxxx yyyyyyyy ; 291: int chmod(const wchar_t* path, const wchar_t* fname, int amode);
;0A48: xxxxxxxx yyyyyyyy ; 292: int rename(const wchar_t* oldpath, const wchar_t* oldfname, const wchar_t* newpath, const wchar_t* newfname, int zero);
;0A4C: xxxxxxxx yyyyyyyy ; 293: int GetImageWidth(wchar_t ImageID);
;0A50: xxxxxxxx yyyyyyyy ; 294: int GetImageHeight(wchar_t ImageID);
;0A54: xxxxxxxx yyyyyyyy ; 295: void * CallID_GetCallStatusDesc(int CallID);
;0A58: xxxxxxxx yyyyyyyy ; 296: wchar_t * CallStatusDesc_GetName(void * CallStatusDesc);
;0A5C: xxxxxxxx yyyyyyyy ; 297: void List_FreeElements(LIST *,int (*cmp_proc)(void * elem_from_list),void (*freefunc)(void * elem_from_list));
;0A60: xxxxxxxx yyyyyyyy ; 298: char * strstr(const char * str1,const char * str2);
;0A64: xxxxxxxx yyyyyyyy ; 299: int GPRS_GetLastSessionInfo(int,GPRS_SESSION_INFO *);
;0A68: xxxxxxxx yyyyyyyy ; 29A: int wstrcmpni(const wchar_t * wstr1,const wchar_t * wstr2,int len);
;0A6C: xxxxxxxx yyyyyyyy ; 29B: int wtoi(const wchar_t * wstr,int len,int * dest);
0A70: 00000000 49041245 ; 29C: __thumb void DATE_GetWeekDay(DATE *,char * dest);
0A74: 00000000 2967E944 ; 29D: __thumb void Cale_GetSettings(int setID,void *);
0A78: 00000000 11846744 ; 29E: __thumb wchar_t * wstrwstr(const wchar_t * wstr1,const wchar_t * wstr2);
0A7C: 00000000 EDA8F644 ; 29F: __thumb int wstrcmpi(const wchar_t *ws1, const wchar_t *ws2);
0A80: 00000000 91826744 ; 2A0: __thumb wchar_t * wstrchr(const wchar_t * source,wchar_t chr);
;0A84: xxxxxxxx yyyyyyyy ; 2A1: void GUIObject_HideSoftkeys(void *gui);
;0A88: xxxxxxxx yyyyyyyy ; 2A2: void GUIObject_ShowSoftkeys(void *gui);
;0A8C: xxxxxxxx yyyyyyyy ; 2A3: DISP_OBJ* DispObject_SoftKeys_Get(void);
0A90: 00000000 11BA4645 ; 2A4: __thumb int StandbyBackground_SetImage(int type,int,int,const wchar_t* path,const wchar_t* fname,int);
0A94: 00000000 9DD84845 ; 2A5: __thumb GUI *CreateYesNoQuestionVA(int zero, ...);
;0A98: xxxxxxxx yyyyyyyy ; 2A6: void ListMenu_SetSecondLineText(GUI_LIST *,int elem_num,int StrID);
0A9C: 00000000 2D08FD44 ; 2A7: __thumb void _REQUEST_OAF_START_APPLICATION(const int * __one,int __zero,MIDP_DESC *,int ___zero);
0AA0: 00000000 85BDFA44 ; 2A8: __thumb int FSX_isNameInvalid(wchar_t * name);
0AA4: 00000000 0167FE44 ; 2A9: __thumb void DataBrowserDesc_SetFoldersNumber(void * DataBrowserDesc,int state);
0AA8: 00000000 D966FE44 ; 2AA: __thumb void DataBrowserDesc_SetActions(void * DataBrowserDesc,char * actions);
0AAC: 00000000 5166FE44 ; 2AB: __thumb void DataBrowserDesc_SetSelectAction(void * DataBrowserDesc,int state);
0AB0: 00000000 5966FE44 ; 2AC: __thumb void DataBrowserDesc_SetSelectActionOnFolders(void * DataBrowserDesc,int state);
0AB4: 00000000 2D66FE44 ; 2AD: __thumb void DataBrowserDesc_SetBookID(void * DataBrowserDesc,int BookID);
0AB8: 00000000 D565FE44 ; 2AE: __thumb void DataBrowserDesc_SetItemFilter(void * DataBrowserDesc,int (*proc)(const wchar_t * ExtList,const wchar_t * ItemPath,const wchar_t * ItemName));
0ABC: 00000000 3167FE44 ; 2AF: __thumb void DataBrowserDesc_SetOption(void * DataBrowserDesc,char * option);
0AC0: 00000000 C567FE44 ; 2B0: __thumb void DataBrowserDesc_SetOpenEmptyFolder(void * DataBrowserDesc,int state);
0AC4: 00000000 DD65FE44 ; 2B1: __thumb void DataBrowserDesc_SetFileExtList(void * DataBrowserDesc,const wchar_t * ExtList);
0AC8: 00000000 2909FF44 ; 2B2: __thumb void FSX_RemoveIllegalSymbolsName(FILEITEM *);
0ACC: 00000000 9101FF44 ; 2B3: __thumb FILEITEM * FILEITEM_Create(void);
0AD0: 00000000 8102FF44 ; 2B4: __thumb void FILEITEM_Destroy(FILEITEM *);
0AD4: 00000000 D5BC4845 ; 2B5: __thumb GUI *CreateDateInputVA(int zero, ...);
0AD8: 00000000 C5D44845 ; 2B6: __thumb GUI *CreateTimeInputVA(int zero, ...);
;0ADC: xxxxxxxx yyyyyyyy ; 2B7: void StringInput_SetCursorPosition(GUI *,u16 curs_pos,char unk);
;0AE0: xxxxxxxx yyyyyyyy ; 2B8: void BookObj_CallPage(BOOK * book, const PAGE_DESC * page);
;0AE4: xxxxxxxx yyyyyyyy ; 2B9: unsigned int DateInput_GetDateInt(void *dateinp_msg);
;0AE8: xxxxxxxx yyyyyyyy ; 2BA: unsigned int TimeInput_GetTimeInt(void *timeinp_msg);
;0AEC: xxxxxxxx yyyyyyyy ;82BB: FONT_DESC *GetFontDesc(void);
;0AF0: xxxxxxxx yyyyyyyy ;82BC: int *GetFontCount();
;0AF4: xxxxxxxx yyyyyyyy ; 2BD: int GC_GetBrushColor(void* GC);
;0AF8: xxxxxxxx yyyyyyyy ; 2BE: void GC_SetBrushColor(void* GC , int brush_color);
;0AFC: xxxxxxxx yyyyyyyy ; 2BF: void GC_DrawRoundRect(void* GC ,RECT *,int arcWidth,int arcHeight,int border_flag,int fill_flag);
;0B00: xxxxxxxx yyyyyyyy ; 2C0: BOOK * MenuBook_Desktop(int mode,int BookID);
;0B04: xxxxxxxx yyyyyyyy ; 2C1: wchar_t * MenuBook_Desktop_GetSelectedItemID(BOOK * MenuBook_Desktop);
;0B08: xxxxxxxx yyyyyyyy ; 2C2: void BookObj_Softkey_SetAction(BOOK *,int actionID,void (*proc)(BOOK *,void*));
;0B0C: xxxxxxxx yyyyyyyy ; 2C3: void BookObj_Softkey_SetText(BOOK *,int actionID,int StrID);
;0B10: xxxxxxxx yyyyyyyy ; 2C4: BOOK * FindBookByID(int BookID);
;0B14: xxxxxxxx yyyyyyyy ; 2C5: GUI_FEEDBACK *TextFeedbackWindow(BOOK *bk, int zero);
;0B18: xxxxxxxx yyyyyyyy ; 2C6: void Feedback_SetKeyHook(GUI_FEEDBACK *, void (*hook)(BOOK *bk, int key, int unk, int unk2));
;0B1C: xxxxxxxx yyyyyyyy ; 2C7: void Feedback_SetOnClose(GUI_FEEDBACK *, void (*OnClose)(BOOK *bk));
;0B20: xxxxxxxx yyyyyyyy ; 2C8: void Feedback_SetTimeout(GUI_FEEDBACK *, int time_ms);
;0B24: xxxxxxxx yyyyyyyy ; 2C9: void Feedback_SetTextExtended(GUI_FEEDBACK *, STRID text, int where);
;0B28: xxxxxxxx yyyyyyyy ; 2CA: void TabMenuBar_SetOnTabSwitch(GUI_TABMENUBAR *,void (*proc)(BOOK *,int act_tab));
;0B2C: xxxxxxxx yyyyyyyy ; 2CB: STRID KeyCode2Name(int key_code);
;0B30: xxxxxxxx yyyyyyyy ; 2CC: int ImageID_Get(const wchar_t * fpath,const wchar_t * fname,wchar_t * imageID);
;0B34: xxxxxxxx yyyyyyyy ; 2CD: void ImageID_Free(wchar_t imageID);
;0B38: xxxxxxxx yyyyyyyy ; 2CE: SUB_EXECUTE *DataBrowser_CreateSubExecute(int BookID, FILEITEM *f);
;0B3C: xxxxxxxx yyyyyyyy ; 2CF: int DataBrowser_ExecuteSubroutine(SUB_EXECUTE *sub, int action, u16 *unk);
;0B40: xxxxxxxx yyyyyyyy ; 2D0: int FILEITEM_SetFname(FILEITEM *f, const wchar_t *fname);
;0B44: xxxxxxxx yyyyyyyy ; 2D1: int FILEITEM_SetPath(FILEITEM *f, const wchar_t *fpath);
0B48: 00000000 8507FF44 ; 2D2: wchar_t *FILEITEM_GetFname(FILEITEM *f);
0B4C: 00000000 3908FF44 ; 2D3: wchar_t *FILEITEM_GetPath(FILEITEM *f);
;0B50: xxxxxxxx yyyyyyyy ; 2D4: int FILEITEM_SetFnameAndContentType(FILEITEM *f, const wchar_t *fname);
;0B54: xxxxxxxx yyyyyyyy ; 2D5: int FILEITEM_SetPathAndContentType(FILEITEM *f, const wchar_t *fpath);
;0B58: xxxxxxxx yyyyyyyy ; 2D6: int JavaDialog_Init(int unk1,char * unk2,void ** JavaDesc);
;0B5C: xxxxxxxx yyyyyyyy ; 2D7: void JavaDialog_Uninit(int unk1);
;0B60: xxxxxxxx yyyyyyyy ; 2D8: int JavaAppDesc_Get(int unk1,void ** JavaDesc);
;0B64: xxxxxxxx yyyyyyyy ; 2D9: int JavaAppDesc_GetFirstApp(void * JavaDesc);
;0B68: xxxxxxxx yyyyyyyy ; 2DA: int JavaAppDesc_GetNextApp(void * JavaDesc);
;0B6C: xxxxxxxx yyyyyyyy ; 2DB: int JavaAppDesc_GetJavaAppInfo(void * JavaDesc,int ID,wchar_t ** wstr);
;0B70: xxxxxxxx yyyyyyyy ; 2DC: void OrangeLED_Control(int _free_val, int or_LED_ID, int level, int fade_time);
;0B74: xxxxxxxx yyyyyyyy ; 2DD: void DispObject_SetRefreshTimer(DISP_OBJ *,int time);
;0B78: xxxxxxxx yyyyyyyy ; 2DE: void DispObject_KillRefreshTimer(DISP_OBJ *);
;0B7C: xxxxxxxx yyyyyyyy ; 2DF: int isDataBrowserBook(BOOK *);
0B80: 00000000 1DEDFD44 ; 2E0: SUB_EXECUTE * BrowserItem_Get_SUB_EXECUTE(BOOK * BrowserItemBook);
;0B84: xxxxxxxx yyyyyyyy ; 2E1: int Shortcut_Get_MenuItemName(wchar_t *);
;0B88: xxxxxxxx yyyyyyyy ; 2E2: int Shortcut_Get_MenuItemIconID(wchar_t *);
;0B8C: xxxxxxxx yyyyyyyy ; 2E3: BOOK * FindBookEx(int (*cmp_proc)(BOOK* book_from_list ,int * param), int * param);
;0B90: xxxxxxxx yyyyyyyy ; 2E4: FILEITEM *FILEITEM_CreateCopy (FILEITEM *);





;locale=Russian_Russia.1251
