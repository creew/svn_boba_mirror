;K750 SW-R1CA021
;Библиотека функций
;v
;(c) Hussein , IronMaster
;

+451CFC00
0448: FFFFFFFF B576B344 ; 112: void memset(void *mem,char chr,int size);
044C: FFFFFFFF 449D0644 ; 113: int memcpy(void *dest,const void *source,int cnt);
0450: FFFFFFFF DD81B344 ; 114: int sprintf(char *buf, const char *fmt, ...);
0454: FFFFFFFF C188B344 ; 115: int snwprintf(wchar_t* buffer, int size, const wchar_t* fmt, ...);
0458: FFFFFFFF A9740D45 ; 116: int _fopen(const wchar_t *filpath, const wchar_t *filname,unsigned int mode , unsigned int rights, unsigned int __0);
045C: FFFFFFFF 89860D45 ; 117: int fclose(int file);
0460: FFFFFFFF A5890D45 ; 118: int fread(int file , void *ptr, int size);
0464: FFFFFFFF 418C0D45 ; 119: int fwrite(int file , const void *ptr, int size);
046C: FFFFFFFF 9D1BCF44 ; 11B: int fputs(const char *s, int file)
0470: FFFFFFFF 697D0D45 ; 11C: int fstat(const wchar_t * path, const wchar_t *fname , FSTAT * fstat_stuct);
0474: FFFFFFFF 2D5A0D45 ; 11D: DIR_HANDLE * AllocDirHandle(const wchar_t * path);
0478: FFFFFFFF CD5B0D45 ; 11E: FILELISTITEM *GetFname(DIR_HANDLE *, FILELISTITEM *);
047C: FFFFFFFF 0DD7E144 ; 11F: void * DataBrowserDesc_Create(void);
0480: FFFFFFFF 1DD5E144 ; 120: void DataBrowserDesc_SetStyle(void * db , int style);
0484: FFFFFFFF ADD5E144 ; 121: void DataBrowserDesc_SetHeaderText(void * db , int StrID);
0488: FFFFFFFF 65D5E144 ; 122: void DataBrowserDesc_SetFolders(void * db , wchar_t const ** FolderList);
048C: FFFFFFFF D1D5E144 ; 123: void DataBrowserDesc_SetOKSoftKeyText(void * db , int StrID);
0490: FFFFFFFF 15C7E144 ; 124: void DataBrowser_Create(void * db);
0494: FFFFFFFF 99D7E144 ; 125: void DataBrowserDesc_Destroy(void * db);
0498: FFFFFFFF 599D0D45 ; 126: wchar_t * getFileExtention(wchar_t * fnane);
049C: FFFFFFFF 595E0D45 ; 127: int DataBrowser_isFileInListExt(const wchar_t * ext_table,const wchar_t * path ,const wchar_t *fname );
04A0: FFFFFFFF 3998E744 ; 128: void Timer_ReSet(u16 * timer ,int time, void (*onTimer)(u16 timerID, LPARAM lparam), LPARAM lparam);
04A4: FFFFFFFF 0198E744 ; 129: u16 Timer_Set(int time, void (*onTimer)(u16 timerID, LPARAM lparam), LPARAM lparam);
04A8: FFFFFFFF 8998E744 ; 12A: void Timer_Kill(u16 *timerID);
04AC: FFFFFFFF B5A4E744 ; 12B: int CreateBook(void * mem, void (* onClose)(BOOK*), const PAGE_DESC * bp, const char * name, int __0xFFFFFFFF,int __0);
04B0: FFFFFFFF C9A5E744 ; 12C: void BookObj_KillBook(void *Book);
04B4: FFFFFFFF 11A2E744 ; 12D: void BookObj_GotoPage(BOOK * book, const PAGE_DESC * page);
04B8: FFFFFFFF 9DA3E744 ; 12E: void BookObj_ReturnPage(BOOK * ,int);
04BC: FFFFFFFF A5AAE744 ; 12F: void FreeBook ( BOOK *book);
04C0: FFFFFFFF B9D30445 ; 130: BOOK * FindBook(IS_NEEDED_BOOK);
04C4: FFFFFFFF 9DF0E944 ; 131: BOOK * Find_StandbyBook(void);
04C8: FFFFFFFF 3DA7E744 ; 132: void BookObj_SetFocus(void *,int focus);
04CC: FFFFFFFF 85F6D244 ; 133: void GuiObject_SetTitleText (void * gui , int StrID);
04D0: FFFFFFFF 89F5D244 ; 134: void ShowWindow (void * gui);
04D4: FFFFFFFF 9D9CD544 ; 135: void SetCursorToItem ( void *obj , int item);
04D8: FFFFFFFF D9F5D244 ; 136: void GUI_SetStyle(GUI *,int style);
04DC: FFFFFFFF 6DA4D544 ; 137: int GUIonMessage_GetCreatedItemIndex ( void *msg);
04E0: FFFFFFFF 7DA4D544 ; 138: char SetMenuItemText0 ( GUI_MESSAGE *, int StrID);
04E4: FFFFFFFF ADA4D544 ; 139: char SetMenuItemText1 ( GUI_MESSAGE *, int StrID);
04E8: FFFFFFFF 8DA4D544 ; 13A: char SetMenuItemText2 ( GUI_MESSAGE *, int StrID);
04EC: FFFFFFFF 9DA4D544 ; 13B: char SetMenuItemText3 ( GUI_MESSAGE *, int StrID);
04F0: FFFFFFFF BDA4D544 ; 13C: void SetListObjectItemIcon ( void *msg , int align , wchar_t iconID);
04F4: FFFFFFFF 0139E844 ; 13D: void GUIObject_SetHeaderText(void *gui , int StrID);
04F8: FFFFFFFF B19CD544 ; 13E: int ListMenu_GetSelectedItem(GUI_LIST * );
04FC: FFFFFFFF FD9CD544 ; 13F: void SetMenuItemStyle( void *obj , int style);
0500: FFFFFFFF 6191D344 ; 140: void putchar( void *xx , int x, int y, int _zero, int zero1 , short wchar);
0504: FFFFFFFF 79EBD344 ;8141: __thumb IS_NEEDED_BOOK isScreenSaverBook(void);
0508: FFFFFFFF B139D344 ; 142: void StatusIndication_SetItemText(void *gui,int item,int StrID);
050C: FFFFFFFF 250FEA44 ; 143: void StatusIndication_ShowNotes(int StrID);
0510: FFFFFFFF D9E2D444 ; 144: GUI * CreateStringInput(int,...);
0514: FFFFFFFF 71B3D544 ; 145: GUI_ONEOFMANY * CreateOneOfMany(BOOK *);
0518: FFFFFFFF BD4DD344 ; 146: void OneOfMany_SetItemCount(GUI_ONEOFMANY * , int count);
051C: FFFFFFFF CDB4D544 ; 147: void OneOfMany_SetChecked(GUI_ONEOFMANY * , int checked);
0520: FFFFFFFF F5B4D544 ; 148: void OneOfMany_SetTexts(GUI_ONEOFMANY * , int * StrID , int Count);
0524: FFFFFFFF 6D4ED344 ; 149: int OneOfMany_GetSelected(GUI_ONEOFMANY * rb);
0528: FFFFFFFF 410EEA44 ; 14A: void StatusIndication_Item8_SetText(int StrID);
052C: FFFFFFFF D10BD344 ; 14B: void GUIObject_Softkey_SetAction(void * gui,u16 actionID,void (*proc)(BOOK *,void*));
0530: FFFFFFFF C50CD344 ; 14C: void GUIObject_Softkey_SetText(void * gui,u16 actionID , int StrID);
0534: FFFFFFFF 490ED344 ; 14D: void GUIObject_SoftKey_SetEnable(void *gui,u16 actionID,int ena);
0538: FFFFFFFF AD0DD344 ; 14E: void GUIObject_SoftKey_AddErrorStr(void *gui,u16 actionID,int StrID);
053C: FFFFFFFF 5D0BD344 ; 14F: void GUIObject_SoftKey_RemoveItem(void *gui,u16 actionID);
0540: FFFFFFFF 650DD344 ; 150: void GUIObject_SoftKey_SetVisible(void *gui,u16 actionID,int visible);
0544: FFFFFFFF 6512D344 ; 151: void GUIObject_SoftKey_SuppressDefaultAction(void *gui,u16 actionID);
0548: FFFFFFFF 1D72BE44 ; 152: wchar_t* wstrcpy(wchar_t * dest, const wchar_t * source);
054C: FFFFFFFF 6572BE44 ; 153: wchar_t* wstrncpy(wchar_t * dest, const wchar_t * source, int maxlen);
0550: FFFFFFFF C572BE44 ; 154: wchar_t* wstrcat(wchar_t * wstr, const wchar_t * subwstr);
0554: FFFFFFFF 1173BE44 ; 155: wchar_t *wstrncat(wchar_t *wstr, const wchar_t *subwstr , int maxlen);
0558: FFFFFFFF CD71BE44 ; 156: int wstrcmp(const wchar_t *wstr1, const wchar_t *wstr2);
055C: FFFFFFFF A171BE44 ; 157: int wstrlen(const wchar_t * wstr);
0560: FFFFFFFF 7186BE44 ; 158: wchar_t * str2wstr(wchar_t * wstr, const char * str);
0564: FFFFFFFF 4186B344 ; 159: int strcmp(const char * str1, const char * str2);
0568: FFFFFFFF A986B344 ; 15A: int strlen(const char *str);
056C: FFFFFFFF 0574BE44 ; 15B: char * wstr2strn (char * str , const wchar_t * wstr, int maxlen);
0570: FFFFFFFF E1BFEE44 ; 15C: int int2strID (int num);
0574: FFFFFFFF B1C3EE44 ; 15D: int Str2ID(const void * wstr , int flag , int len);
0578: FFFFFFFF 79D0EE44 ; 15E: void StrID2Str(int StrID,char * str,int maxlen);
057C: FFFFFFFF 35C8EE44 ; 15F: void TextID2wstr(int StrID,wchar_t * str,int maxlen);
0580: FFFFFFFF 15C7EE44 ; 160: int TextGetLength(int StrID);
0584: FFFFFFFF 81C6EE44 ; 161: void TextFree(int StrID);
0588: FFFFFFFF 9DCBDE44 ; 162: int AB_DEFAULTNBR_GET(int rec_num, void * mem_0x30, int * unk);
058C: FFFFFFFF 19EEDE44 ; 163: int AB_READSTRING(void * mem_0x30,int rec_num, int rec_item_num);
0590: FFFFFFFF F5F4DE44 ; 164: int AB_READPHONENBR(void * mem_0x30,int rec_num, int rec_item_num);
0594: FFFFFFFF 41F6DE44 ; 165: int AB_GETNBROFITEMS(int get_from,int unk_0);
0598: FFFFFFFF 59BCEE44 ; 166: int PNUM_len(void *pnum);
059C: FFFFFFFF 19CDF244 ; 167: void PNUM2str(char *str,void *pnum,int len, int max_len);
05A0: FFFFFFFF D1E1E944 ; 168: DISP_OBJ * GUIObj_GetDISPObj (void * gui);
05A4: FFFFFFFF 65EDE444 ; 169: LIST *List_New(void);
05A8: FFFFFFFF 89EDE444 ; 16A: void List_Free(LIST *lst);
05AC: FFFFFFFF A9EEE444 ; 16B: void ListElement_AddtoTop(LIST *lst,void *newElement);
05B0: FFFFFFFF A1CEF444 ; 16C: int Gif2ID(u16 IMAGEHANDLE,const wchar_t * path, const wchar_t * fname,wchar_t * ID);
05B4: FFFFFFFF 15090D45 ; 16D: int REQUEST_IMAGEHANDLER_INTERNAL_GETHANDLE(const int * __zero,u16 * IMAGEHANDLE,char * unk);
05B8: FFFFFFFF 698F0B45 ; 16E: void REQUEST_DATEANDTIME_GET(const int * __zero , DATETIME *dt);
05BC: FFFFFFFF 2D0C0545 ; 16F: void IndicationDevice_Backlight_FadeToLevel(int unk_zero ,int bl_level);
05C0: FFFFFFFF A9D9F744 ; 170: int GetFreeBytesOnHeap(void);
05C4: FFFFFFFF 6DA7E744 ; 171: void BookObj_Hide(BOOK *,int display_type);
05C8: FFFFFFFF 81A7E744 ; 172: void BookObj_Show(BOOK *,int display_type);
05CC: FFFFFFFF 39F4E944 ; 173: void StartAPP (const wchar_t * appname);
05D0: FFFFFFFF FD9DD544 ; 174: void ListMenu_SetOnMessages (GUI_LIST * , int (*proc)(GUI_MESSAGE *));
05D4: FFFFFFFF 85030845 ; 175: char * manifest_GetParam(const char *buf, const char *param_name,int unk);
05D8: FFFFFFFF CD8D0D45 ; 176: int lseek(int file,int offset,int mode);
05DC: FFFFFFFF 3474094C ;8177: int get_VBUFFER(void);
05E0: FFFFFFFF E1D4EA44 ; 178: void SetLampLevel (int level);
05E4: FFFFFFFF 31EEE444 ; 179: void * ListElement_Remove(LIST *lst,int index);
05E8: FFFFFFFF B11C0344 ; 17A: int GetCurrentPID(void);
05EC: FFFFFFFF 69EEE444 ; 17B: int ListElement_Prt2NumElement(LIST *lst,void *ptr);
05F0: FFFFFFFF 8C8C0644 ; 17C: union SIGNAL *alloc(OSBUFSIZE size,SIGSELECT signo);
05F4: FFFFFFFF A88C0644 ; 17D: union SIGNAL *receive(const SIGSELECT *sigsel);
05F8: FFFFFFFF 988C0644 ; 17E: void send(union SIGNAL **sig,PROCESS to);
05FC: FFFFFFFF E88C0644 ; 17F: PROCESS sender(union SIGNAL **sig);
0600: FFFFFFFF B88C0644 ; 180: void free_buf(union SIGNAL **sig);
0604: FFFFFFFF 848D0644 ; 181: PROCESS create_process(int proc_type,char *name,OSENTRYPOINT *entrypoint,OSADDRESS stack_size,OSPRIORITY priority,OSTIME timeslice,PROCESS pid_block,void *redir_table,OSVECTOR vector,OSUSER user);
0608: FFFFFFFF A48F0644 ; 182: void start(PROCESS pid);
060C: FFFFFFFF 548E0644 ; 183: int get_ptype(PROCESS pid);
0610: FFFFFFFF A08D0644 ; 184: PROCESS current_process(void);
0614: FFFFFFFF D88C0644 ; 185: void delay(OSTIME timeout);
;0618: xxxxxxxx yyyyyyyy ; 186: OSBOOLEAN hunt(const char *name, OSUSER user, PROCESS *name_, union SIGNAL **hunt_sig);
;061C: xxxxxxxx yyyyyyyy ; 187: void kill_proc(PROCESS pid);
;0620: xxxxxxxx yyyyyyyy ; 188: OSBOOLEAN set_bp (PROCESS pid,OSADDRESS address,OSADDRESS attribute,union SIGNAL **trapsig);
;0624: xxxxxxxx yyyyyyyy ; 189: union SIGNAL *receive_w_tmo (OSTIME timeout, SIGSELECT *sel);
;0628: xxxxxxxx yyyyyyyy ; 18A: OSBOOLEAN clear_bp (PROCESS pid, OSADDRESS addr);
0680: FFFFFFFF 7186B344 ; 1A0: char* strcpy(char * dest, const char * source);
0684: FFFFFFFF 9D75C944 ; 1A1: void *CreateMessage(int size,int ev,char *name);
0688: FFFFFFFF F175C944 ; 1A2: void SendMessage(void **signal,int PID);
068C: FFFFFFFF A976C944 ; 1A3: void * WaitMessage(void *SIGSEL);
0690: FFFFFFFF C976C944 ; 1A4: int FreeMessage(void **Mess);
0694: FFFFFFFF 0D93E344 ; 1A5: void SendDispatchMessage(int id, int unk_zero, int size,void *mess);
0698: FFFFFFFF BD101445 ; 1A6: char * UIEventName(int event);
069C: FFFFFFFF 75AF284C ;81A7: __thumb int * MissedEvents(void);
06A0: FFFFFFFF D5D40445 ; 1A8: void UI_Event(int event);
06A4: FFFFFFFF E1D40445 ; 1A9: void UI_Event_wData(int event,void *message,void (*mfree)(void*));
06A8: FFFFFFFF 05D50445 ; 1AA: void UI_Event_toBookID(int event,int BookID);
06AC: FFFFFFFF 15D50445 ; 1AB: void UI_Event_toBookIDwData(int event,int BookID,void *message,void (*mfree)(void*));
06B0: FFFFFFFF 6DF1E444 ; 1AC: int ListElement_Find(LIST *lst,void *element, int (*cmp_proc)(void *,void *));
06B4: FFFFFFFF 39F0E444 ; 1AD: void * ListElement_GetByIndex(LIST * , int index);
06B8: FFFFFFFF 1D8EB344 ; 1AE: wchar_t* wstrrchr(const wchar_t* wstr, wchar_t wchar);
06BC: FFFFFFFF 91A2E744 ; 1AF: void BookObj_CallSubroutine(BOOK * , BOOK_SUBROUTINE *subr);
06C0: FFFFFFFF B9EEE444 ; 1B0: void ListElement_Add(LIST *lst,void *newElement);
06C4: FFFFFFFF 957DAE44 ; 1B1: void debug_printf(const char * fmt,...);
06C8: FFFFFFFF 6536D344 ; 1B2: int PlayFile(const wchar_t * path, const wchar_t * fname);
06D0: FFFFFFFF E13E1545 ; 1B4: int REQUEST_PROFILE_GETACTIVEPROFILE(const int *__zero , int *level);
06D4: FFFFFFFF 3D3F1545 ; 1B5: int Profile_SetActive(int NUMprof,int set_in_gdfs_flag);
06D8: FFFFFFFF 512FC444 ; 1B6: void SetBrightnessOfScreen(int br);
06DC: FFFFFFFF A5D9D344 ; 1B7: int isKeylocked(void);
06E0: FFFFFFFF 9199F644 ;81B8: IS_NEEDED_BOOK isMediaPlayerVideoBook(void);
06E4: FFFFFFFF 49B3F644 ; 1B9: void VideoOnWholeScreen(BOOK * MediaPlayer_Video_Book); // вместо get_APP_DESC_TABLE
06E8: FFFFFFFF 15E6D344 ; 1BA: void ShuttingDown(void);
06EC: FFFFFFFF 714FF844 ; 1BB: void Vibra(int t1, int t2, int t3);
06F0: FFFFFFFF C9910B45 ; 1BC: int REQUEST_DATEFORMAT_GET(const int *SYNC, char *DateFormat);
06F4: FFFFFFFF 69920B45 ; 1BD: int REQUEST_TIMEFORMAT_GET(const int *SYNC, char *TimeFormat);
06F8: FFFFFFFF CD92D244 ; 1BE: int Date2ID(DATE *, int TimeFormat,int);
06FC: FFFFFFFF E591D244 ; 1BF: int Time2ID(TIME *, char TimeFormat,int);
0700: FFFFFFFF 119BD544 ; 1C0: GUI_LIST * CreateListObject(BOOK * , void * unk);
0704: FFFFFFFF CD9CD544 ; 1C1: void SetNumOfMenuItem(void * , int item_count);
0708: FFFFFFFF CC26184C ;81C2: LIST ** ROOT_APP(void);
070C: FFFFFFFF 850CD344 ; 1C3: void SoftKey_AddHelpStr(void *gui,int msg,int StrID);
0710: FFFFFFFF 990ED344 ; 1C4: void SoftKey_SetItemAsSubItem(void *gui,int item,int subitem);
0714: FFFFFFFF 217E1445 ; 1C5: int REQUEST_SYSTEM_SHUTDOWN(void);
0718: FFFFFFFF 317E1445 ; 1C6: int REQUEST_SYSTEM_RESTART(void);
071C: FFFFFFFF 110DD344 ; 1C7: void SoftKeys_SetText(void *gui,int msg,int StrID,int StrID1);
0720: FFFFFFFF 0D241445 ; 1C8: int isRightNowBook(BOOK *);
0724: FFFFFFFF 097B1445 ; 1C9: int isVolumeControllerBook(BOOK *);
0728: FFFFFFFF F914D344 ; 1CA: GUI_TABMENUBAR * CreateTabMenuBar(BOOK *);
072C: FFFFFFFF 1916D344 ; 1CB: void TabMenuBar_SetTabCount(GUI_TABMENUBAR * , int count);
0730: FFFFFFFF 0517D344 ; 1CC: void TabMenuBar_AssignGuiObj(GUI_TABMENUBAR * , int tab , GUI *);
0734: FFFFFFFF 7517D344 ; 1CD: void TabMenuBar_SetTabIcon(GUI_TABMENUBAR *,int tab, wchar_t icon , int for_state);
0738: FFFFFFFF 89DFE944 ; 1CE: GUI *GUI_Free(GUI*);
073C: FFFFFFFF 09F9D244 ; 1CF: void InputFeedback_SetIcon(GUI *gui, wchar_t icon);
0740: FFFFFFFF C1EFD444 ; 1D0: int StringInput_GetStringAndLen (GUI*,wchar_t**,u16*);
0744: FFFFFFFF 542D184C ;81D1: PAudioControl* GetAudioControlPtr();
0748: FFFFFFFF 75DDEF44 ; 1D2: int AudioControl_Vibrate(PAudioControl pIAudioControl, int vibratime, int pausetime, int totaltime);
074C: FFFFFFFF 159D0D45 ; 1D3: int GetVolumeSize(char * volume, VOLUMESIZE *);
0750: FFFFFFFF E9B0D544 ; 1D4: GUI_NOFMANY * CreateNOfMany(BOOK *);
0754: FFFFFFFF B9B2D544 ; 1D5: void NOfMany_SetTexts(GUI_NOFMANY * , int * StrIDtable, int items_count);
0758: FFFFFFFF 1DB2D544 ; 1D6: void NOfMany_SetChecked(GUI_NOFMANY * , u16 * checked_table, int items_count);
075C: FFFFFFFF DDB1D544 ; 1D7: void NOfMany_SetCursor(GUI_NOFMANY * , int item);
0760: FFFFFFFF 45B2D544 ; 1D8: int NOfMany_GetCheckedCount(GUI_NOFMANY *);
0764: FFFFFFFF 31B2D544 ; 1D9: int NOfMany_GetChecked(GUI_NOFMANY * , u16 * buffer );
0768: FFFFFFFF B1B2D544 ; 1DA: void NOfMany_SetonMessage(GUI_NOFMANY * , void * proc );
077C: FFFFFFFF 91190244 ; 1DF: PAudioControl AudioControl_Init(); //nullsub(ret 0)
0780: FFFFFFFF 8DB4D544 ; 1E0: void OneOfMany_SetFocused(GUI_ONEOFMANY * , int item);
0784: FFFFFFFF EDB4D544 ; 1E1: void OneOfMany_SetonMessage(GUI_ONEOFMANY * , int (*proc)(GUI_MESSAGE *));
0788: FFFFFFFF D91CD344 ; 1E2: GUI_FEEDBACK * CreateFeedBack (int,...);
078C: FFFFFFFF 851DD344 ; 1E3: void FeedBack_SetText(GUI_FEEDBACK*,int);
0790: FFFFFFFF 79A3A144 ; 1E4: int GetBattaryState(const int * , BATT *);
0794: FFFFFFFF 8186D344 ; 1E5: void * get_DisplayGC (void);
0798: FFFFFFFF 711EE844 ; 1E6: void GetGuiRect(void*,RECT*);
079C: FFFFFFFF 558CD344 ; 1E7: void get_GC_RECT(void*,RECT*);
07A0: FFFFFFFF 698FD344 ; 1E8: int get_GC_xx(void * GC);
07A4: FFFFFFFF 5D8FD344 ; 1E9: void *set_GC_xx(void * GC, int);
07A8: FFFFFFFF FD8BD344 ; 1EA: void GC_validate_RECT(void * GC , RECT*);
07AC: FFFFFFFF 49A8E744 ; 1EB: void addGui2book(BOOK*,GUI*);
07B0: FFFFFFFF C153E844 ; 1EC: void DrawRect(int x1, int y1,int x2 ,int y2,int pen_color,int brush_color);
07B4: FFFFFFFF C957E844 ; 1ED: void DrawString(int StrID,int align,int x1,int y1,int x2,int y2,int unk,int unk1,int pen_color ,int brush_color);
07B8: FFFFFFFF 41E3E944 ; 1EE: void addGui2XGuiList (void* xguilist , GUI*);
07BC: FFFFFFFF F11CE844 ; 1EF: void InvalidateRect(DISP_OBJ *,RECT*);
07C0: FFFFFFFF 11DFE944 ; 1F0: int CreateObject(GUI*,void (*)(DISP_DESC *),void (*)(DISP_DESC *),BOOK *,void(*)(),int,int size_obj);
07C4: FFFFFFFF 1D63E844 ; 1F1: int SetFont(int);
07C8: FFFFFFFF D028184C ;81F2: DISP_OBJ ** StatusRow_p(void);
07CC: FFFFFFFF ADD40445 ; 1F3: int root_list_get_session_count(void);
07D0: FFFFFFFF C1D40445 ; 1F4: UI_APP_SESSION *root_list_get_session(int num_session);
07D4: FFFFFFFF D9CD0445 ; 1F5: BOOK *SESSION_GetTopBook(UI_APP_SESSION *);
07D8: FFFFFFFF 0125D344 ; 1F6: int MainInput_getVisible(GUI *);
07DC: FFFFFFFF 0D25D344 ; 1F7: int MainInput_strlen(GUI *);
07E0: FFFFFFFF 2125D344 ; 1F8: char * MainInput_getPNUM(GUI *);
07E4: FFFFFFFF 2D25D344 ; 1F9: int MainInput_isPlus(GUI *);
07E8: FFFFFFFF E1ABE744 ; 1FA: int BOOK_GetBookID(BOOK * );
07EC: FFFFFFFF FD86BE44 ; 1FB: int wstrncmp(const wchar_t*,const wchar_t*,int);
07F0: FFFFFFFF BD37E844 ; 1FC: int DISP_OBJ_GetAbsoluteXPos(DISP_OBJ *);
07F4: FFFFFFFF E537E844 ; 1FD: int DISP_OBJ_GetAbsoluteYPos(DISP_OBJ *);
07F8: FFFFFFFF F922E844 ; 1FE: WINDOW * DISP_OBJ_GetWindow(DISP_OBJ *);
07FC: FFFFFFFF 714D0545 ; 1FF: int GetThemeColor(int , int);
0800: FFFFFFFF E9361545 ; 200: int REQUEST_SETTING_SILENCE_SET(const int * __zero,u16 profile,u16 value);
0804: FFFFFFFF 8D361545 ; 201: int REQUEST_SETTING_SILENCE_GET(const int * __zero,u16 profile, char * silence_mode);
0808: FFFFFFFF A509DE44 ; 202: void VCALL_Init (void* vc);
080C: FFFFFFFF 950ADE44 ; 203: void VCALL_SetName (void * vc , wchar_t * name ,unsigned short name_len);
0810: FFFFFFFF F10ADE44 ; 204: void VCALL_SetNameIcon (void * vc , wchar_t icon);
0814: FFFFFFFF B50ADE44 ; 205: void VCALL_SetNumber (void * vc , wchar_t * number , unsigned short num_len);
0818: FFFFFFFF DD0ADE44 ; 206: void VCALL_SetHZ1 (void * vc, int , u16 );
081C: FFFFFFFF E90ADE44 ; 207: void VCALL_SetHZ2 (void * vc , u16 );
0820: FFFFFFFF 6901DE44 ; 208: void MakeVoiceCall (int SessioID , void * vc ,int flag);
0824: FFFFFFFF 8D621345 ; 209: int isDirectory (wchar_t * path ,wchar_t * filename , int * error );
0828: FFFFFFFF BD7E0D45 ; 20A: void FileDelete (wchar_t * path ,wchar_t * filename , int * error );
082C: FFFFFFFF 9DF7D244 ; 20B: void SetFocus (GUI * , int);
0830: FFFFFFFF E9BDF944 ; 20C: int CreateSMSCont (int, void*);
0834: FFFFFFFF 81C2F944 ; 20D: int FreeSMSCont (void*);
0838: FFFFFFFF 49BFF944 ; 20E: int PrepareSMSCont (void*,wchar_t*,wchar_t*,int,int);
083C: FFFFFFFF D1C1F944 ; 20F: int CteateNewMessage (int,void*,int);
0840: FFFFFFFF 10512444 ;8210: void * get_APP_DESC_TABLE(void);
0844: FFFFFFFF 91F3D244 ; 211: C_INTERFACE *Window_GetComponentInterface(WINDOW*);
0848: FFFFFFFF 5DFBDE44 ; 212: int AB_POSITIONNBR_GET(void * ab_name,char * ,u16 * ,void * ab_num);
084C: FFFFFFFF 01F8DE44 ; 213: int AB_NAME_ITEM2StrID(void * ab_name);
0850: FFFFFFFF 69F8DE44 ; 214: int AB_NUM_ITEM2StrID(void * ab_num_item);
0854: FFFFFFFF 75610945 ; 215: int GetABRecNum(AB_GET_STRUCT *);
0858: FFFFFFFF 10972144 ;8216: AB_ITEM_DESC * get_AB_ITEMS_DESC();
085C: FFFFFFFF DD470A45 ; 217: GUI * SBY_GetMainInput(BOOK * StandBy);
0860: FFFFFFFF D9470A45 ; 218: GUI * SBY_GetStatusIndication(BOOK * StandBy);
0864: FFFFFFFF B1B80B45 ; 219: int REQUEST_PHONEBOOK_ACCESSSTATUS_TOTAL_GET(const int * __zero, int *);
0868: FFFFFFFF 707D0C4C ;821A: int * PID_MMI(void);
0874: FFFFFFFF 5917E844 ; 21D: DISP_OBJ* DISPBASE_GetFocused(int display);
0878: FFFFFFFF A51BE844 ; 21E: char DISP_OBJ_getVisible(DISP_OBJ*);
087C: FFFFFFFF 79130645 ; 21F: DISP_DESC* DISP_OBJ_GetDESC (DISP_OBJ*);
0880: FFFFFFFF DD0EE844 ; 220: void DISP_DESC_SetName (DISP_DESC* , const char * name);
0884: FFFFFFFF 7536E844 ; 221: char* DISP_OBJ_GetName (DISP_OBJ *);
0888: FFFFFFFF 090FE844 ; 222: void DISP_DESC_SetSize (DISP_DESC* , u16 size);
;088C: xxxxxxxx yyyyyyyy ; 223: u16 DISP_DESC_GetSize (DISP_OBJ *);
0890: FFFFFFFF 2D0FE844 ; 224: void DISP_DESC_SetOnCreate (DISP_DESC* , DISP_OBJ_ONCREATE_METHOD);
0894: FFFFFFFF 1113E844 ; 225: DISP_OBJ_ONCREATE_METHOD DISP_OBJ_GetOnCreate (DISP_OBJ *);
0898: FFFFFFFF 510FE844 ; 226: void DISP_DESC_SetOnClose (DISP_DESC* , DISP_OBJ_ONCLOSE_METHOD);
089C: FFFFFFFF 2513E844 ; 227: DISP_OBJ_ONCLOSE_METHOD DISP_OBJ_GetOnClose (DISP_OBJ *);
08A0: FFFFFFFF 750FE844 ; 228: void DISP_DESC_SetOnRedraw (DISP_DESC* , DISP_OBJ_ONREDRAW_METHOD);
08A4: FFFFFFFF 3913E844 ; 229: DISP_OBJ_ONREDRAW_METHOD DISP_OBJ_GetOnRedraw (DISP_OBJ *);
08A8: FFFFFFFF BD0FE844 ; 22A: void DISP_DESC_SetOnKey (DISP_DESC* , DISP_OBJ_ONKEY_METHOD);
08AC: FFFFFFFF 6113E844 ; 22B: DISP_OBJ_ONKEY_METHOD DISP_OBJ_GetOnKey (DISP_OBJ *);
08B0: FFFFFFFF 990FE844 ; 22C: void DISP_DESC_SetonRefresh (DISP_DESC* ,DISP_OBJ_METHOD);
08B4: FFFFFFFF 4D13E844 ; 22D: DISP_OBJ_METHOD DISP_OBJ_GetonRefresh (DISP_OBJ *);
;08B8: xxxxxxxx yyyyyyyy ; 22E: void DISP_DESC_SetMethod04 (DISP_DESC* ,void (*)(void*));
;08BC: xxxxxxxx yyyyyyyy ; 22F: DISP_OBJ_METHOD DISP_OBJ_GetMethod04 (DISP_OBJ *);
;08C0: xxxxxxxx yyyyyyyy ; 230: void DISP_DESC_SetMethod05 (DISP_DESC* ,void (*)(void*));
;08C4: xxxxxxxx yyyyyyyy ; 231: DISP_OBJ_METHOD DISP_OBJ_GetMethod05 (DISP_OBJ *);
08C8: FFFFFFFF E10FE844 ; 232: void DISP_DESC_SetMethod06 (DISP_DESC* ,DISP_OBJ_METHOD);
08CC: FFFFFFFF 7513E844 ; 233: DISP_OBJ_METHOD DISP_OBJ_GetMethod06 (DISP_OBJ *);
;08D0: xxxxxxxx yyyyyyyy ; 234: void DISP_DESC_SetMethod07 (DISP_DESC* ,void (*)(void*));
;08D4: xxxxxxxx yyyyyyyy ; 235: DISP_OBJ_METHOD DISP_OBJ_GetMethod07 (DISP_OBJ *);
08D8: FFFFFFFF 2910E844 ; 236: void DISP_DESC_SetMethod08 (DISP_DESC* ,DISP_OBJ_METHOD);
08DC: FFFFFFFF 9D13E844 ; 237: DISP_OBJ_METHOD DISP_OBJ_GetMethod08 (DISP_OBJ *);
;08E0: xxxxxxxx yyyyyyyy ; 238: void DISP_DESC_SetMethod09 (DISP_DESC* ,void (*)(void*));
;08E4: xxxxxxxx yyyyyyyy ; 239: DISP_OBJ_METHOD DISP_OBJ_GetMethod09 (DISP_OBJ *);
;08E8: xxxxxxxx yyyyyyyy ; 23A: void DISP_DESC_SetMethod0A (DISP_DESC* ,void (*)(void*));
;08EC: xxxxxxxx yyyyyyyy ; 23B: DISP_OBJ_METHOD DISP_OBJ_GetMethod0A (DISP_OBJ *);
;08F0: xxxxxxxx yyyyyyyy ; 23C: void DISP_DESC_SetMethod0B (DISP_DESC* ,void (*)(void*));
;08F4: xxxxxxxx yyyyyyyy ; 23D: DISP_OBJ_METHOD DISP_OBJ_GetMethod0B (DISP_OBJ *);
;08F8: xxxxxxxx yyyyyyyy ; 23E: void DISP_DESC_SetMethod0C (DISP_DESC* ,void (*)(void*));
;08FC: xxxxxxxx yyyyyyyy ; 23F: DISP_OBJ_METHOD DISP_OBJ_GetMethod0C (DISP_OBJ *);
0900: FFFFFFFF C9541445 ; 240: void JavaSession_Manager (int cmd);
0904: FFFFFFFF 11541445 ; 241: int JavaSession_GetName(void);
0908: FFFFFFFF 15C5EE44 ; 242: int TextCopyId(int);
090C: FFFFFFFF E5AAE744 ; 243: UI_APP_SESSION *Book_GetSession(BOOK*);
0910: FFFFFFFF 09A5D544 ; 244: void List2lineSetAsSubitem (void* msg,int unk,int n_sub_items);
0914: FFFFFFFF 95A5D544 ; 245: void List2lineSubitemAddText(void* msg,int StrID);
0918: FFFFFFFF 85A5D544 ; 246: int GUIonMessage_GetCreatedSubItemParrentIndex(void * msg);
091C: FFFFFFFF 0128D144 ; 247: void GoMusic(void);
0920: FFFFFFFF 4150F844 ; 248: void Vibra_Off (int t1);
0924: FFFFFFFF B5B3F644 ; 249: void VideoOnNormalScreen(BOOK * MediaPlayer_Video_Book);
0928: FFFFFFFF 7136D344 ; 24A: int PlayFileV(const wchar_t * path,const wchar_t * fname, int vol);
092C: FFFFFFFF F545F844 ; 24B: int GetSilent(void);
0930: FFFFFFFF B912F844 ; 24C: int GetVibrator(int ignorevibrator,int ignoresilent);
0934: FFFFFFFF C151F844 ; 24D: int GetAudioSettings(int what, char* retvalue);
0938: FFFFFFFF D5BC9A44 ; 24E: int GetChipID(void);
0948: FFFFFFFF 75A5D544 ; 252: int List2LineGetCurrentIndex(void * msg);
094C: FFFFFFFF 65A5D544 ; 253: int GUIonMessage_GetCurrentItemIndex(void * msg);
0950: FFFFFFFF A15D0D45 ; 254: void DestroyDirHandle(DIR_HANDLE *handle);
0954: FFFFFFFF 20CD2244 ;8255: DB_EXT *LastExtDB(void);
0958: FFFFFFFF B9910E45 ; 256: void GetOtherExtMethods(FILESUBROUTINE **);
095C: FFFFFFFF AD920545 ; 257: void MessageBox(int HeaderStrID,int MessageStrID,wchar_t IconID, int style /*1 or 2*/,int time,BOOK * unk);
0960: FFFFFFFF 1D5A0545 ; 258: int Display_GetHeight(int Display);
0964: FFFFFFFF 2D5A0545 ; 259: int Display_GetWidth(int Display);
0968: FFFFFFFF F135D344 ; 25A: void PlaySystemSound (int SndNumber);
0974: FFFFFFFF F115D344 ; 25D: int TabMenuBar_GetFocusedTabIndex(GUI_TABMENUBAR * );
0978: FFFFFFFF C515D344 ; 25E: void TabMenuBar_SetTabFocused(GUI_TABMENUBAR * , int tab_num);
097C: FFFFFFFF 698ED344 ; 25F: int GC_GetPenColor (void* GC);
0980: FFFFFFFF 298ED344 ; 260: void GC_SetPenColor(void* GC , int pen_color);
0984: FFFFFFFF E78AD344 ; 261: void GC_SetPixel (void* GC,int x1,int y1,int color);
0988: FFFFFFFF DD97D344 ; 262: void GC_DrawLine(void* GC,int x1, int y1, int x2, int y2);
098C: FFFFFFFF 7199D344 ; 263: void GC_DrawFRect (void* GC,int color,int x1,int y1,int x2 ,int y2);
0990: FFFFFFFF 218BD344 ; 264: int GC_DrawBitmap(void *GC, int x1, int y1, int x2, int y2, int * bmp);
;0994: xxxxxxxx yyyyyyyy ; 265: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
;0998: xxxxxxxx yyyyyyyy ; 266: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
;099C: xxxxxxxx yyyyyyyy ; 267: png_infop png_create_info_struct(png_structp png_ptr);
;09A0: xxxxxxxx yyyyyyyy ; 268: void png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr);
;09A4: xxxxxxxx yyyyyyyy ; 269: void png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr, png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn, png_progressive_end_ptr end_fn);
;09A8: xxxxxxxx yyyyyyyy ; 26A: void png_process_data(png_structp png_ptr, png_infop info_ptr, png_bytep buffer, png_size_t buffer_size);
;09AC: xxxxxxxx yyyyyyyy ; 26B: void png_read_update_info(png_structp png_ptr, png_infop info_ptr);
;09B0: xxxxxxxx yyyyyyyy ; 26C: png_voidp png_get_progressive_ptr(png_structp png_ptr);
;09B4: xxxxxxxx yyyyyyyy ; 26D: png_uint_32 png_get_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
;09B8: xxxxxxxx yyyyyyyy ; 26E: void png_set_strip_16(png_structp png_ptr);
;09BC: xxxxxxxx yyyyyyyy ; 26F: void png_set_gray_1_2_4_to_8(png_structp png_ptr);
;09C0: xxxxxxxx yyyyyyyy ; 270: void png_set_gray_to_rgb(png_structp png_ptr);
;09C4: xxxxxxxx yyyyyyyy ; 271: png_uint_32 png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag);
;09C8: xxxxxxxx yyyyyyyy ; 272: void png_set_tRNS_to_alpha(png_structp png_ptr);
;09CC: xxxxxxxx yyyyyyyy ; 273: void png_set_filler(png_structp png_ptr, png_uint_32 filler, int flags);
;09D0: xxxxxxxx yyyyyyyy ; 274: void png_set_palette_to_rgb(png_structp png_ptr);
;09D4: xxxxxxxx yyyyyyyy ; 275: png_uint_32 png_get_rowbytes(png_structp png_ptr, png_infop info_ptr);
;09D8: xxxxxxxx yyyyyyyy ; 276: void png_progressive_combine_row(png_structp png_ptr, png_bytep old_row, png_bytep new_row);
;09DC: xxxxxxxx yyyyyyyy ; 277: int png_sig_cmp(png_bytep sig, png_size_t start, png_size_t num_to_check);
09E0: FFFFFFFF 78E20644 ; 278: int setjmp(jmp_buf jmpbuf);
09E4: FFFFFFFF 9CE20644 ; 279: void longjmp(jmp_buf, int);
09E8: FFFFFFFF D76F0344 ; 27A: int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size);
09EC: FFFFFFFF A7700344 ; 27B: int inflate (z_streamp strm, int flush);
09F0: FFFFFFFF CF800344 ; 27C: int inflateEnd (z_streamp strm);
09F4: FFFFFFFF 4976B344 ; 27D: int memcmp (const void *m1,const void *m2,int n);
09F8: FFFFFFFF E186B344 ; 27E: int strncmp(const char *s1, const char *s2, int len);
09FC: FFFFFFFF 1D87B344 ; 27F: char *strncpy (char *dest,const char *source,int maxlen);
0A00: FFFFFFFF 0586B344 ; 280: char *strcat(char *dest, const char *src);
0A04: FFFFFFFF 6DF6D244 ; 281: void GuiObject_SetTitleType(GUI *gui, int type);
0A08: FFFFFFFF 15A5D544 ; 282: __thumb void GUIonMessage_SetItemDisabled (void * msg, int Disabled);
0A0C: FFFFFFFF 2D0A0D45 ; 283: __thumb int REQUEST_IMAGEHANDLER_INTERNAL_REGISTER(const int * __zero,u16 ImageHandle,wchar_t *path,wchar_t *fname,int unk, wchar_t * ImageID ,char * error);
0A10: FFFFFFFF AD0B0D45 ; 284: __thumb int REQUEST_IMAGEHANDLER_INTERNAL_UNREGISTER (const int * __zero,u16 ImageHandle,u16* ,u16* ,wchar_t ImageID, int unk_1,char * error);
;0A14: xxxxxxxx yyyyyyyy ;8285: SURFACE ** get_Surfaces(void);
0A18: FFFFFFFF BD88EF44 ; 286: int iconidname2id(const wchar_t* idname,int maxnamelen,int *id);
0A1C: FFFFFFFF A9BBDB44 ; 287: int textidname2id(const wchar_t* idname,int maxnamelen,int* id);
0A20: FFFFFFFF 49F29B44 ; 288: void ListMenu_SetNoItemText(GUI_LIST *, int str); //nullsub(void)
0A28: FFFFFFFF B9EB1145 ;828A: IS_NEEDED_BOOK isFmRadioBook(void);
0A2C: FFFFFFFF 1955F544 ;828B: IS_NEEDED_BOOK isAudioPlayerBook(void);
0A30: FFFFFFFF CDA3F544 ; 28C: void PlayerControl(BOOK *AudioPlayerBook, int);
0A34: FFFFFFFF 2DC91145 ; 28D: void SwitchRadioStationFromList(BOOK *FmRadioBook, int);
0A38: FFFFFFFF 250B0645 ; 28E: void Shortcut_Run (wchar_t * shortcut_name);
0A3C: FFFFFFFF 2D510D45 ; 28F: int mkdir(const wchar_t* path);
0A40: FFFFFFFF A9570D45 ; 290: int rmdir(const wchar_t* path, int zero);
0A44: FFFFFFFF D57D0D45 ; 291: int chmod(const wchar_t* path, const wchar_t* fname, int amode);
0A48: FFFFFFFF 29830D45 ; 292: int rename(const wchar_t* oldpath, const wchar_t* oldfname, const wchar_t* newpath, const wchar_t* newfname, int zero);
0A4C: FFFFFFFF 656AE844 ; 293: int GetImageWidth(wchar_t ImageID);
0A50: FFFFFFFF 7D6AE844 ; 294: int GetImageHeight(wchar_t ImageID);
0A54: FFFFFFFF 4987F444 ; 295: void * CallID_GetCallStatusDesc(int CallID);
0A58: FFFFFFFF D1519E44 ; 296: wchar_t * CallStatusDesc_GetName(void * CallStatusDesc);
0A5C: FFFFFFFF B1F1E444 ; 297: void List_FreeElements(LIST *,int (*cmp_proc)(void * elem_from_list),void (*freefunc)(void * elem_from_list));
0A60: FFFFFFFF B987B344 ; 298: char * strstr(const char * str1,const char * str2);
0A64: FFFFFFFF 6515D744 ; 299: int GPRS_GetLastSessionInfo(int,GPRS_SESSION_INFO *);
0A68: FFFFFFFF 9988BE44 ; 29A: int wstrcmpni(const wchar_t * wstr1,const wchar_t * wstr2,int len);
0A6C: FFFFFFFF D99BD244 ; 29B: int wtoi(const wchar_t * wstr,int len,int * dest);
0A70: FFFFFFFF C1FCE344 ; 29C: void DATE_GetWeekDay(DATE *,char * dest);
0A74: FFFFFFFF 6563BA44 ; 29D: void Cale_GetSettings(int setID,void *);
0A78: FFFFFFFF 2D8FB344 ; 29E: wchar_t * wstrwstr(const wchar_t * wstr1,const wchar_t * wstr2);
0A7C: FFFFFFFF 1189BE44 ; 29F: int wstrcmpi(const wchar_t *ws1, const wchar_t *ws2);
0A80: FFFFFFFF D58CB344 ; 2A0: wchar_t * wstrchr(const wchar_t * source,wchar_t chr);
0A84: FFFFFFFF 79F0E944 ; 2A1: void GUIObject_HideSoftkeys(void *gui); //nullsub(void)
0A88: FFFFFFFF 79F0E944 ; 2A2: void GUIObject_ShowSoftkeys(void *gui); //nullsub(void)
0A8C: FFFFFFFF A5CED244 ; 2A3: DISP_OBJ* DispObject_SoftKeys_Get(void);
0A90: FFFFFFFF 21010545 ; 2A4: int StandbyBackground_SetImage(int type,int,int,const wchar_t* path,const wchar_t* fname,int);
0A94: FFFFFFFF 7146D344 ; 2A5: GUI *CreateYesNoQuestionVA(int zero, ...);
0A98: FFFFFFFF D9A0D544 ; 2A6: void ListMenu_SetSecondLineText(GUI_LIST *,int elem_num,int StrID);
0A9C: FFFFFFFF E58CB344 ; 2A7: void _REQUEST_OAF_START_APPLICATION(const int * __one,int __zero,MIDP_DESC *,int ___zero); //nullsub(void)
0AA0: FFFFFFFF F59A0D45 ; 2A8: int FSX_isNameInvalid(wchar_t * name);
0AA4: FFFFFFFF 89D5E144 ; 2A9: void DataBrowserDesc_SetFoldersNumber(void * DataBrowserDesc,int state);
0AA8: FFFFFFFF F5D4E144 ; 2AA: void DataBrowserDesc_SetActions(void * DataBrowserDesc,char * actions);
0AAC: FFFFFFFF 45D3E144 ; 2AB: void DataBrowserDesc_SetSelectAction(void * DataBrowserDesc,int state);
0AB0: FFFFFFFF D1D3E144 ; 2AC: void DataBrowserDesc_SetSelectActionOnFolders(void * DataBrowserDesc,int state);
0AB4: FFFFFFFF C9D2E144 ; 2AD: void DataBrowserDesc_SetBookID(void * DataBrowserDesc,int BookID);
0AB8: FFFFFFFF 61D2E144 ; 2AE: void DataBrowserDesc_SetItemFilter(void * DataBrowserDesc,int (*proc)(const wchar_t * ExtList,const wchar_t * ItemPath,const wchar_t * ItemName));
0ABC: FFFFFFFF 3DD6E144 ; 2AF: void DataBrowserDesc_SetOption(void * DataBrowserDesc,char * option);
;0AC0: xxxxxxxx yyyyyyyy ; 2B0: void DataBrowserDesc_SetOpenEmptyFolder(void * DataBrowserDesc,int state);
0AC4: FFFFFFFF 85D2E144 ; 2B1: void DataBrowserDesc_SetFileExtList(void * DataBrowserDesc,const wchar_t * ExtList);
0AC8: FFFFFFFF 5DCD0E45 ; 2B2: void FSX_RemoveIllegalSymbolsName(FILEITEM *);
0ACC: FFFFFFFF 71C50E45 ; 2B3: FILEITEM * FILEITEM_Create(void);
0AD0: FFFFFFFF B9C60E45 ; 2B4: void FILEITEM_Destroy(FILEITEM *);
0AD4: FFFFFFFF 511ED344 ; 2B5: GUI *CreateDateInputVA(int zero, ...);
0AD8: FFFFFFFF B942D344 ; 2B6: GUI *CreateTimeInputVA(int zero, ...);
0ADC: FFFFFFFF 1DF0D444 ; 2B7: void StringInput_SetCursorPosition(GUI *,u16 curs_pos,char unk);
0AE0: FFFFFFFF 29A3E744 ; 2B8: void BookObj_CallPage(BOOK * book, const PAGE_DESC * page);
0AE4: FFFFFFFF 4920D344 ; 2B9: unsigned int DateInput_GetDateInt(void *dateinp_msg);
0AE8: FFFFFFFF E544D344 ; 2BA: unsigned int TimeInput_GetTimeInt(void *timeinp_msg);
0AEC: FFFFFFFF 582B184C ;82BB: FONT_DESC *GetFontDesc(void);
0AF0: FFFFFFFF 102D184C ;82BC: int *GetFontCount();
0AF4: FFFFFFFF 518FD344 ; 2BD: int GC_GetBrushColor(void* GC);
0AF8: FFFFFFFF 118FD344 ; 2BE: void GC_SetBrushColor(void* GC , int brush_color);
0AFC: FFFFFFFF 2D9AD344 ; 2BF: void GC_DrawRoundRect(void* GC ,RECT *,int arcWidth,int arcHeight,int border_flag,int fill_flag);
0B00: FFFFFFFF 65FC0545 ; 2C0: BOOK * MenuBook_Desktop(int mode,int BookID);
0B04: FFFFFFFF E9090645 ; 2C1: wchar_t * MenuBook_Desktop_GetSelectedItemID(BOOK * MenuBook_Desktop);
0B08: FFFFFFFF 35DD0445 ; 2C2: void BookObj_Softkey_SetAction(BOOK *,int actionID,void (*proc)(BOOK *,void*));
0B0C: FFFFFFFF 81DD0445 ; 2C3: void BookObj_Softkey_SetText(BOOK *,int actionID,int StrID);
0B10: FFFFFFFF 7DD30445 ; 2C4: BOOK * FindBookByID(int BookID);
0B14: FFFFFFFF 113CD344 ; 2C5: GUI_FEEDBACK *TextFeedbackWindow(BOOK *bk, int zero);
0B18: FFFFFFFF 5140D344 ; 2C6: void Feedback_SetKeyHook(GUI_FEEDBACK *, void (*hook)(BOOK *bk, int key, int unk, int unk2));
0B1C: FFFFFFFF F13FD344 ; 2C7: void Feedback_SetOnClose(GUI_FEEDBACK *, void (*OnClose)(BOOK *bk));
0B20: FFFFFFFF 3940D344 ; 2C8: void Feedback_SetTimeout(GUI_FEEDBACK *, int time_ms);
0B24: FFFFFFFF 9940D344 ; 2C9: void Feedback_SetTextExtended(GUI_FEEDBACK *, STRID text, int where);
0B28: FFFFFFFF 99270645 ; 2CA: void TabMenuBar_SetOnTabSwitch(GUI_TABMENUBAR *,void (*proc)(BOOK *,int act_tab));
0B2C: FFFFFFFF 4D61CA44 ; 2CB: STRID KeyCode2Name(int key_code);
0B30: FFFFFFFF 15C7F444 ; 2CC: int ImageID_Get(const wchar_t * fpath,const wchar_t * fname,wchar_t * imageID);
0B34: FFFFFFFF B5CAF444 ; 2CD: void ImageID_Free(wchar_t imageID);
0B38: FFFFFFFF ADD60D45 ; 2CE: SUB_EXECUTE *DataBrowser_CreateSubExecute(int BookID, FILEITEM *f);
0B3C: FFFFFFFF 01DB0D45 ; 2CF: int DataBrowser_ExecuteSubroutine(SUB_EXECUTE *sub, int action, u16 *unk);
;0B40: xxxxxxxx yyyyyyyy ; 2D0: int FILEITEM_SetFname(FILEITEM *f, const wchar_t *fname);
0B44: FFFFFFFF 7DCB0E45 ; 2D1: int FILEITEM_SetPath(FILEITEM *f, const wchar_t *fpath);
0B48: FFFFFFFF 45CB0E45 ; 2D2: wchar_t *FILEITEM_GetFname(FILEITEM *f);
0B4C: FFFFFFFF 31CC0E45 ; 2D3: wchar_t *FILEITEM_GetPath(FILEITEM *f);
0B50: FFFFFFFF 3DC70E45 ; 2D4: int FILEITEM_SetFnameAndContentType(FILEITEM *f, const wchar_t *fname);
0B54: FFFFFFFF E9CB0E45 ; 2D5: int FILEITEM_SetPathAndContentType(FILEITEM *f, const wchar_t *fpath);
0B58: FFFFFFFF 6D1DC244 ; 2D6: int JavaDialog_Open(int unk1,char * unk2,void ** JavaDesc);
0B5C: FFFFFFFF D956C244 ; 2D7: void JavaDialog_Close(int unk1);
0B60: FFFFFFFF 9558C244 ; 2D8: int JavaAppDesc_Get(int unk1,void ** JavaDesc);
0B64: FFFFFFFF DDBFC144 ; 2D9: int JavaAppDesc_GetFirstApp(void * JavaDesc);
0B68: FFFFFFFF 01C0C144 ; 2DA: int JavaAppDesc_GetNextApp(void * JavaDesc);
0B6C: FFFFFFFF 09BCC144 ; 2DB: int JavaAppDesc_GetJavaAppInfo(void * JavaDesc,int ID,wchar_t ** wstr);
;0B70: xxxxxxxx yyyyyyyy ; 2DC: void OrangeLED_Control(int _free_val, int or_LED_ID, int level, int fade_time);
0B74: FFFFFFFF AD18E844 ; 2DD: void DispObject_SetRefreshTimer(DISP_OBJ *,int time);
0B78: FFFFFFFF 1919E844 ; 2DE: void DispObject_KillRefreshTimer(DISP_OBJ *);
0B7C: FFFFFFFF 65CEE144 ; 2DF: int isDataBrowserBook(BOOK *);
0B80: FFFFFFFF DDA70E45 ; 2E0: SUB_EXECUTE * BrowserItem_Get_SUB_EXECUTE(BOOK * BrowserItemBook);
0B84: FFFFFFFF 094F1445 ; 2E1: int Shortcut_Get_MenuItemName(SHORTCUT *);
0B88: FFFFFFFF A50A0645 ; 2E2: int Shortcut_Get_MenuItemIconID(SHORTCUT *);
0B8C: FFFFFFFF 31D40445 ; 2E3: BOOK * FindBookEx(int (*cmp_proc)(BOOK* book_from_list ,int * param), int * param);
0B90: FFFFFFFF A1C50E45 ; 2E4: FILEITEM *FILEITEM_CreateCopy (FILEITEM *);
0B94: FFFFFFFF A59CE744 ; 2E5: ACTION *ActionCreate(int (*PROC)(void *msg,BOOK*), int BookID, u16 event, APP_DESC *app_desc, PAGE_DESC *pag_desc);
0B98: FFFFFFFF 15A0FB44 ; 2E6: int BOOK_GetSessionID(BOOK *);
0B9C: FFFFFFFF B51AFB44 ; 2E7: void UI_Event_toSID(int event, int sess_id);
0BA0: FFFFFFFF F52A6C44 ; 2E8: char *GetIMSI(void);
0BA4: FFFFFFFF 3DE6D344 ; 2E9: void UI_CONTROLLED_SHUTDOWN_RESPONSE(int book_id);
0BA8: FFFFFFFF 2125D344 ; 2EA: int MainInput_getCurPos(GUI*);
0BAC: FFFFFFFF E924D344 ; 2EB: void MainInput_Hide(GUI*);
0BB0: FFFFFFFF 1DC6D244 ; 2EC: void DispObject_SoftKey_RestoreDefaultAction(DISP_OBJ*,int action);
0BB4: FFFFFFFF 19BCF344 ; 2ED: STRID PNUM2Name(void *pnum, int isIconNeeded, int only_full_number_flag);
0BB8: FFFFFFFF 25450445 ; 2EE: int SpeedDial_GetPNUM(int _zero,char charter0__9, void * PNUM);
0BBC: FFFFFFFF 9D490445 ; 2EF: void * MetaData_Desc_Create(wchar_t * path,wchar_t * name);
0BC0: FFFFFFFF 914A0445 ; 2F0: void MetaData_Desc_Destroy(void * MetaData_Desc);
0BC4: FFFFFFFF 014A0445 ; 2F1: wchar_t * MetaData_Desc_GetTags(void * MetaData_Desc,int tagID);
0BC8: FFFFFFFF A5217B44 ; 2F2: int MetaData_Desc_GetTrackNum(void * MetaData_Desc,int __NULL);
0BCC: FFFFFFFF 7D37E844 ; 2F3: int DISP_OBJ_GetWindowWidth(DISP_OBJ *);
0BD0: FFFFFFFF 8D37E844 ; 2F4: int DISP_OBJ_GetWindowHeight(DISP_OBJ *);
0BD4: FFFFFFFF 19A0D244 ; 2F5: int get_system_langID(void);
0BD8: FFFFFFFF CDB4EC44 ; 2F6: char * lang_get_name(int langID);
0BDC: FFFFFFFF 694E1045 ; 2F7: int w_chdir(const wchar_t *path);
0BE0: FFFFFFFF 71F87544 ; 2F8: int w_fopen(const wchar_t *name, int attr, int rights, int err);
0BE4: FFFFFFFF 19F97544 ; 2F9: int w_fstat(const wchar_t *name, W_FSTAT *);
0BE8: FFFFFFFF C5F87544 ; 2FA: int w_fwrite(int f, void *buf, int size);
0BEC: FFFFFFFF A9F87544 ; 2FB: int w_fread(int f, void *buf, int size);
0BF0: FFFFFFFF 691DCF44 ; 2FC: int w_lseek(int f, int offs, int mode);
0BF4: FFFFFFFF FDF87544 ; 2FD: int w_fclose(int f);
0BF8: FFFFFFFF E1661045 ; 2FE: int w_mkdir(const wchar_t *path, int mode);
0BFC: FFFFFFFF 79400E45 ; 2FF: int DirHandle_SetFilterStr(DIR_HANDLE *, const wchar_t *filter);
0C00: FFFFFFFF 3D6BE844 ; 300: int Disp_GetStrIdWidth(STRID , int len);
0C04: FFFFFFFF 914A0445 ; 301: int MetaData_Desc_GetCoverInfo(void * MetaData_Desc,char * cover_type,int * size,int * cover_offset);
0C08: FFFFFFFF 6DC7F444 ; 302: int ImageID_GetIndirect(void * buf_image,int size,int __NULL,wchar_t * image_type,wchar_t * imageID);
0C0C: FFFFFFFF 11FBE344 ; 303: void unixtime2datetime(int, DATETIME * );
0C10: FFFFFFFF ADEDE444 ; 304: void ListElement_Insert(LIST *lst, int i, void *new_item);
0C14: FFFFFFFF B9810D45 ; 305: int FileCopy(wchar_t *src_path, wchar_t *src_name, wchar_t *dest_path, wchar_t *dest_name, int);
0C18: FFFFFFFF 29830D45 ; 306: int FileMove(wchar_t *src_path, wchar_t *src_name, wchar_t *dest_path, wchar_t *dest_name, int);
0C1C: FFFFFFFF ED24AE44 ; 307: void RedLED_On(int __NULL);
0C20: FFFFFFFF 4125AE44 ; 308: void RedLED_Off(int __NULL);
0C24: FFFFFFFF 713DE844 ; 309: void DispObject_SetLayerColor(DISP_OBJ *,int color);
0C28: FFFFFFFF 0958C244 ; 30A: int JavaAppDesc_GetJavaAppID(void * JavaDesc);
0C2C: FFFFFFFF D51D0F45 ; 30B: void REQUEST_UI_OAF_START_APPLICATION(const int *ASYNC,int appID,char * flag);
0C30: FFFFFFFF 25FBF644 ; 30C: int JavaApp_LogoImageID_Get(wchar_t * fullpath,wchar_t * imageID);
0C34: FFFFFFFF 812FD344 ; 30D: GUI * CreateProgressBar(BOOK*,int);
0C38: FFFFFFFF 8532D344 ; 30E: void ProgressBar_SetText(GUI*,STRID text);
0C3C: FFFFFFFF 1533D344 ; 30F: void ProgressBar_SetIcon(GUI*,u16 icon_id);
0C40: FFFFFFFF 6132D344 ; 310: void ProgressBar_SetPercentValue(GUI*,int value);
0C44: FFFFFFFF 2533D344 ; 311: void ProgressBar_SetBarDisabled(GUI*,int disabled);
0C48: FFFFFFFF 7187EB44 ; 312: void StringInput_DispObject_SetText(DISP_OBJ *,int StrID);
0C4C: FFFFFFFF 29CED544 ; 313: void GuiObject_SetTitleImage(void *gui, wchar_t imageID);
;0C50: xxxxxxxx yyyyyyyy ; 314: void GuiObject_SetTitleIcon(void *gui, wchar_t imageID);
;0C54: xxxxxxxx yyyyyyyy ; 315: void GuiObject_SetHighlightImage(void *gui, wchar_t imageID);
;0C58: xxxxxxxx yyyyyyyy ; 316: void GuiObject_SetBackgroundImage(void *gui, wchar_t imageID);
0C5C: FFFFFFFF 5DD8D244 ; 317: void *DispObject_Softkeys_GetParams(DISP_OBJ *);
0C60: FFFFFFFF A5D8D244 ; 318: LIST *DispObject_Softkeys_GetList(DISP_OBJ *, BOOK *bk, char __zero);
0C64: FFFFFFFF ADACE744 ; 319: int BookObj_GetDisplayOrientation(BOOK *bk);
0C68: FFFFFFFF 89ACE744 ; 31A: void BookObj_SetDisplayOrientation(BOOK *bk, int orientation);
0C6C: FFFFFFFF DD9DE744 ; 31B: BOOK *DISPLAY_GetTopBook(int display);
0C70: FFFFFFFF 99130545 ; 31C: void DISPLAY_SetBrightness(int display, int brightness);
0C74: FFFFFFFF DD130545 ; 31D: int DISPLAY_GetBrightness(int display);
0C78: FFFFFFFF EDD2E144 ; 31E: void DataBrowserDesc_Menu_AddFSFunctions(void * db , int);
0C7C: FFFFFFFF 41D4E144 ; 31F: void DataBrowserDesc_Menu_AddNewFolder(void * db , int);
0C80: FFFFFFFF 65D4E144 ; 320: void DataBrowserDesc_Menu_AddMarkFiles(void * db , int);
0C84: FFFFFFFF 7974EA44 ; 321: void SetTheme(wchar_t*path, wchar_t*name, int bookid, int unk_1);
0C88: FFFFFFFF F98CE944 ; 322: void Softkeys_GetLabel(DISP_OBJ *softkeys, SKLABEL *lbl, int id);
0C8C: FFFFFFFF 3D88E944 ; 323: void Softkeys_Update(DISP_OBJ *softkeys);
0C90: FFFFFFFF C419044C ;8324: void * get_CellData(void);
0C94: FFFFFFFF A5AADD44 ; 325: void * IncommingCall_Reject(BOOK* book);
0C98: FFFFFFFF F5BDDD44 ; 326: void * IncommingCall_Mute(BOOK* book);
0C9C: FFFFFFFF DD2E8444 ; 327: int GetRadioState(char* level, char* flag);
0CA0: FFFFFFFF 813E0C45 ; 328: int Bluetooth_GetState(void);
0CA4: FFFFFFFF 5D3E0C45 ; 329: int Bluetooth_GetPhoneVisibility(void);
0CA8: FFFFFFFF 053F0C45 ; 32A: int Bluetooth_isBusy(void);
0CAC: FFFFFFFF 09720645 ; 32B: int USB_isConnected(void);
0CB0: FFFFFFFF A1681045 ; 32C: void *w_diropen(const wchar_t *dir);
0CB4: FFFFFFFF 0122CF44 ; 32D: wchar_t *w_dirread(void *);
0CB8: FFFFFFFF 296B1045 ; 32E: int w_dirclose(void *);
0CBC: FFFFFFFF 9D22CF44 ; 32F: int w_rename(const wchar_t *dst, const wchar_t *src);
0CC0: FFFFFFFF 4D22CF44 ; 330: int w_remove(const wchar_t *dir);
0CC4: FFFFFFFF C552CF44 ; 331: int ConnectionManager_Connection_GetState(void);
0CC8: FFFFFFFF ED2E8444 ; 332: int GetSignalQuality(char *rssi,char *ber);
0CCC: FFFFFFFF CD7DF844 ;8333: IS_NEEDED_BOOK isCameraBook(void);
0CD0: FFFFFFFF E94DC744 ;8334: IS_NEEDED_BOOK isSoundRecorderBook(void);
;0CD4: xxxxxxxx yyyyyyyy ; 335: void StringInput_MenuItem_SetPriority(GUI * strinp, int prio, int actionID);
0CD8: FFFFFFFF 01B7F644 ; 336: void VideoPlayerControl(BOOK *VideoPlayerBook, int);
0CDC: FFFFFFFF 0DB0F644 ; 337: void Video_ActionBack(BOOK *VideoPlayerBook, void*);
0CE0: FFFFFFFF ADC7F644 ; 338: void Video_ExtractFrame(BOOK *VideoPlayerBook, void*);
;0CE4: xxxxxxxx yyyyyyyy ; 339: void Video_ZoomOn(BOOK *VideoPlayerBook, void*);
;0CE8: xxxxxxxx yyyyyyyy ; 33A: void RightNow_SetActive(int flag);
;0CEC: xxxxxxxx yyyyyyyy ; 33B: void VideoResize_AutomateMode(BOOK *VideoPlayerBook, u16 VideoWidth, u16 VideoHeight, u16* NewWidth, u16* NewHeight);
;0CF0: xxxxxxxx yyyyyyyy ; 33C: void VideoResize_AllScreenMode(BOOK *VideoPlayerBook, u16 VideoWidth, u16 VideoHeight, u16* NewWidth, u16* NewHeight);
;0CF4: xxxxxxxx yyyyyyyy ; 33D: int Video_GetCurrentSkinID(BOOK *VideoPlayerBook);
;0CF8: xxxxxxxx yyyyyyyy ; 33E: void Video_SetSkin(GUI* VideoPlayerGUI, int skinID);
0CFC: FFFFFFFF E1B2F644 ; 33F: int Video_SetPermit(BOOK *VideoPlayerBook, u16 NewWidth, u16 NewHeight);
0D00: FFFFFFFF A1AEF644 ; 340: int Video_Refresh(BOOK *VideoPlayerBook, GUI* VideoPlayerGUI);
0D04: FFFFFFFF BDB0F644 ; 341: void Video_Play(BOOK *VideoPlayerBook, void*);
0D08: FFFFFFFF 15B2F644 ; 342: void Video_Pause(BOOK *VideoPlayerBook, void*);
0D0C: FFFFFFFF D5B1F644 ; 343: void Video_Stop(BOOK *VideoPlayerBook, void*);
0D10: FFFFFFFF A574F544 ; 344: void Audio_Pause(BOOK *);
0D14: FFFFFFFF 6172F544 ; 345: void Audio_Play(BOOK *);
0D18: FFFFFFFF E92BD344 ; 346: GUI * CreatePercentInputVA(int zero, ...);
0D1C: FFFFFFFF 792DD344 ; 347: int PercentInput_GetPercent(GUI * PercentInput);
0D20: FFFFFFFF 2DA5D544 ; 348: void GUIonMessage_SetLineSeparator(GUI_MESSAGE *,int _unk1);
;0D2C: xxxxxxxx yyyyyyyy ; 34B: void GUIObject_Softkeys_RemoveBackground(void *gui);
;0D30: xxxxxxxx yyyyyyyy ; 34C: void GUIObject_Softkeys_RestoreBackground(void *gui);
0D34: FFFFFFFF 3511EA44 ; 34D: void SetTrayIcon(wchar_t iconID, char mode);
0D38: FFFFFFFF 95321545 ; 34E: int REQUEST_SETTING_RINGVOLUME_SET(const int *sync, int unk, int null, int vol);
0D3C: FFFFFFFF 75351545 ; 34F: int REQUEST_SETTING_VIBRATOR_SET(const int *sync, int unk, int mode);
0D40: FFFFFFFF 79341545 ; 350: int REQUEST_SETTING_RINGTYPESOUNDFILE_SET(const int *sync, int null, wchar_t *path, wchar_t *name);
0D44: FFFFFFFF 3D3A1545 ; 351: int REQUEST_SETTING_ANSWERINGMODE_SET(const int *sync, int unk, int mode);
0D48: FFFFFFFF 59331545 ; 352: int REQUEST_SETTING_INCREASINGRING_SET(const int *sync, int unk, int unk2, int mode);
0D4C: FFFFFFFF FD371545 ; 353: int REQUEST_SETTING_ALLOWEDCALLERS_SET(const int *sync, int unk, int mode);
0D50: FFFFFFFF 9DB1C144 ; 354: int JavaAppDesc_GetJavaAppFullpath(void * JavaDesc,JavaAppFullpath *);
0D54: FFFFFFFF EDF5F644 ; 355: void *SoundRecorderDesc_Create(void);
0D58: FFFFFFFF 25F6F644 ; 356: void SoundRecorderDesc_Destroy(void * desc);
0D5C: FFFFFFFF 3DF6F644 ; 357: int SoundRecorderDesc_SetBookID(void * desc,int BookID);
0D60: FFFFFFFF 49F6F644 ; 358: int SoundRecorderDesc_SetType(void * desc,const int type);
0D64: FFFFFFFF 5DF6F644 ; 359: int SoundRecorderDesc_SetFolder(void * desc,const wchar_t * fpath);
0D68: FFFFFFFF 7DF6F644 ; 35A: int SoundRecorderDesc_SetFname(void * desc,const wchar_t * fname);
0D6C: FFFFFFFF 99F6F644 ; 35B: int SoundRecorderDesc_SetRecordSize(void * desc,const int size);
0D70: FFFFFFFF C5F6F644 ; 35C: int SoundRecorder_Create(void * desc);
;0D74: xxxxxxxx yyyyyyyy ; 35D: int SoundRecorder_RecordCall(BOOK * OngoingCallBook);
0D78: FFFFFFFF 49CB0B45 ; 35E: int Browser_OpenURI(BOOK*, char * URI, int mode);
0D7C: FFFFFFFF 69280245 ; 35F: char* GetURIScheme (int schemeID);
0D80: FFFFFFFF F12C0245 ; 360: char* CreateURI (wchar_t * fpath, wchar_t * fname, char * URIScheme);
0D84: FFFFFFFF 41D5E144 ; 361: void DataBrowserDesc_SetViewModeAndSortOrder(void * db,int view_sort_ID);





;locale=Russian_Russia.1251
