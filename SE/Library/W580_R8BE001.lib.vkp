;W580 SW-R8BE001
;Библиотека функций
;v221207
;(c) Hussein , IronMaster
;(p) -=Tanusha_Se=-,UltraShot

+45C3FC00
0448: 00000000 50531444 ; 112: void memset(void *mem,char chr,int size);
044C: 00000000 44082D44 ; 113: int memcpy(void *dest,const void *source,int cnt);
0450: 00000000 79705544 ; 114: int sprintf(char *buf, char *str, ...);
0454: 00000000 41765544 ; 115: int snwprintf(u16* buffer, int size, const u16* fmt, ...);
0458: 00000000 4D7AE844 ; 116: int _fopen(const unsigned short *filpath, const unsigned short *filname,unsigned int mode , unsigned int rights, unsigned int __0);
045C: 00000000 1990E844 ; 117: int fclose(int file);
0460: 00000000 A192E844 ; 118: int fread(int file , void *ptr, int size);
0464: 00000000 6D94E844 ; 119: int fwrite(int file , const void *ptr, int size);
0468: 00000000 890E8544 ; 11A: int _wstat(short *path, void *statbuf)
046C: 00000000 79301B45 ; 11B: int fputs(const char *s, int file)
0470: 00000000 E183E844 ; 11C: int isFileExist(u16 * pach, u16 *fname , FSTAT * fstat_stuct);
0474: 00000000 015AE844 ; 11D: void * AllocDirHandle(u16 * path);
0478: 00000000 C15BE844 ; 11E: void *GetFname(void *, void*);
047C: 00000000 C151EC44 ; 11F: void * CreateDataBrowser(void);
0480: 00000000 8554EC44 ; 120: void DataBrowser_SetStyle(void * db , int style);
0484: 00000000 B554EC44 ; 121: void DataBrowser_SetHeaderText(void * db , int StrID);
0488: 00000000 9D54EC44 ; 122: void DataBrowser_SetFolders(void * db , int * FolderList);
048C: 00000000 BD54EC44 ; 123: void DataBrowser_SetOKSoftKeyText(void * db , int StrID);
0490: 00000000 691AEC44 ; 124: void DataBrowser_Show(void * db);
0494: 00000000 7552EC44 ; 125: void DataBrowser_XXX(void * db);
0498: 00000000 31ABE844 ; 126: unsigned short * getFileExtention(unsigned short * fnane);
049C: 00000000 2D5EE844 ; 127: int DataBrowser_isFileInListExt(unsigned short * ext_table,unsigned short * patch ,unsigned short * fname );
04A0: 00000000 39B42A45 ; 128: void Timer_ReSet(u16 *timerID ,int time, void (*onTimer)(u16 *timerID, void *), void *);
04A4: 00000000 05B42A45 ; 129: u16 Timer_Set(int time, void (*onTimer)(u16 *timerID, void *), void *);
04A8: 00000000 91B42A45 ; 12A: void Timer_Kill(u16 *timerID);
04AC: 00000000 49E42A45 ; 12B: int CreateBook(void * mem, void (* onClose)(BOOK*), const PAGE_DESC * bp, const char * name, int __0xFFFFFFFF,int __0);
04B0: 00000000 0D2BF044 ; 12C: void BookObj_KillBook(void *Book);
04B4: 00000000 C5E12A45 ; 12D: void BookObj_GotoPage(BOOK * book, const PAGE_DESC * page);
04B8: 00000000 2DE32A45 ; 12E: void BookObj_ReturnPage(BOOK * ,int);
04BC: 00000000 65EA2A45 ; 12F: void FreeBook ( void *book);
04C0: 00000000 09CB2A45 ; 130: BOOK * FindBook(IS_NEEDED_BOOK);
04C4: 00000000 351A2C45 ; 131: BOOK * Find_StandbyBook(void);
04C8: 00000000 F5E62A45 ; 132: void BookObj_SetFocus(void *,int focus);
04CC: 00000000 C9533645 ; 133: void GuiObject_SetTitleText (void * gui , int StrID);
04D0: 00000000 994E3645 ; 134: void ShowWindow (void * gui);
04D4: 00000000 49E43145 ; 135: void SetCursorToItem ( void *obj , int item);
04D8: 00000000 E94E3645 ; 136: void GUI_SetStyle(GUI_NOFMANY *,int style);
04DC: 00000000 99EF3145 ; 137: int GUIonMessage_GetCreatedItemIndex ( void *msg);
04E0: 00000000 A5EF3145 ; 138: char SetMenuItemText0 ( GUI_MESSAGE *, int StrID);
04E4: 00000000 D5EF3145 ; 139: char SetMenuItemText1 ( GUI_MESSAGE *, int StrID);
04E8: 00000000 B5EF3145 ; 13A: char SetMenuItemText2 ( GUI_MESSAGE *, int StrID);
04EC: 00000000 C5EF3145 ; 13B: char SetMenuItemText3 ( GUI_MESSAGE *, int StrID);
04F0: 00000000 1DF03145 ; 13C: void SetListObjectItemIcon ( void *msg , int align , int iconID);
04F4: 00000000 3D9D3545 ; 13D: void SetHeaderText( void *obj , int StrID);
04F8: 00000000 5DE43145 ; 13E: int GetFocusetListObjectItem( void *obj);
04FC: 00000000 ADE43145 ; 13F: void SetMenuItemStyle( void *obj , int style);
0500: 00000000 ED313645 ; 140: void putchar( void *xx , int x, int y, int _zero, int zero1 , short wchar);
0504: 00000000 A5403945 ;8141: IS_NEEDED_BOOK isScreenSaverBook(void);
0508: 00000000 99493745 ; 142: void StatusIndication_SetItemText(void *gui,int item,int StrID);
050C: 00000000 ED362C45 ; 143: void StatusIndication_ShowNotes(int StrID);
0510: 00000000 19652F45 ; 144: void * CreateStringInput(int,...);
0514: 00000000 FD033245 ; 145: GUI_ONEOFMANY * CreateOneOfMany(BOOK *);
0518: 00000000 A9053245 ; 146: void OneOfMany_SetItemCount(GUI_ONEOFMANY * , int count);
051C: 00000000 E1053245 ; 147: void OneOfMany_SetChecked(GUI_ONEOFMANY * , int checked);
0520: 00000000 15063245 ; 148: void OneOfMany_SetTexts(GUI_ONEOFMANY * , int * StrID , int Count);
0524: 00000000 F1053245 ; 149: int OneOfMany_GetSelected(GUI_ONEOFMANY * rb);
0528: 00000000 1D362C45 ; 14A: void StatusIndication_Item8_SetText(int StrID);
052C: 00000000 01173845 ; 14B: void AddMSGHook(void * menu,short msg,void (*proc)(BOOK *,void*));
0530: 00000000 79173845 ; 14C: void AddCommand(void * menu,int cmd , int StrID);
0534: 00000000 35183845 ; 14D: void SoftKey_SetEnable(void *gui,int msg,int ena);
0538: 00000000 ED173845 ; 14E: void SoftKey_AddErrorStr(void *gui,int msg,int StrID);
053C: 00000000 C5163845 ; 14F: void SoftKey_RemoveItem(void *gui,u16 action);
0540: 00000000 C9173845 ; 150: void SoftKey_SetVisible(void *gui,int action,int visible);
0544: 00000000 391A3845 ; 151: void SoftKey_SuppressDefaultAction(void *gui,int action);
0548: 00000000 4D7D5544 ; 152: u16* wstrcpy(u16 * dest, u16 * source);
054C: 00000000 F97D5544 ; 153: u16* wstrncpy(u16 * dest, u16 * source, int maxlen);
0550: 00000000 F17C5544 ; 154: u16* wstrcat(u16 * wstr, u16 * subwstr);
0554: 00000000 997D5544 ; 155: u16 *wstrncat(u16 *wstr, u16 *subwstr , int maxlen);
0558: 00000000 257D5544 ; 156: int wstrcmp(u16 *wstr1, u16 *wstr2);
055C: 00000000 C97DE444 ; 157: int wstrlen(u16 * wstr);
0560: 00000000 9190E444 ; 158: u16 * str2wstr(u16 * wstr,char * str);
0564: 00000000 25745544 ; 159: int strcmp(char * str1, char * str2);
0568: 00000000 81745544 ; 15A: int strlen(char *str);
056C: 00000000 E97EE444 ; 15B: char * wstr2strn (char * str , u16 * wstr, int maxlen);
0570: 00000000 81713445 ; 15C: int int2strID (int num);
0574: 00000000 35743445 ; 15D: int Str2ID(const void * wstr , int flag , int len);
0578: 00000000 C9783445 ; 15E: void StrID2Str(int StrID,char * str,int maxlen);
057C: 00000000 B9773445 ; 15F: void TextID2wstr(int StrID,u16 * str,int maxlen);
0580: 00000000 99763445 ; 160: int TextGetLength(int StrID);
0584: 00000000 FD753445 ; 161: void TextFree(int StrID);
0588: 00000000 896DDE44 ; 162: int AB_DEFAULTNBR_GET(int rec_num, void * mem_0x30, int * unk);
058C: 00000000 59BEDE44 ; 163: int AB_READSTRING(void * mem_0x30,int rec_num, int rec_item_num);
0590: 00000000 25BFDE44 ; 164: int AB_READPHONENBR(void * mem_0x30,int rec_num, int rec_item_num);
0594: 00000000 DDBFDE44 ; 165: int AB_GETNBROFITEMS(int get_from,int unk_0);
0598: 00000000 A56A3445 ; 166: int PNUM_len(void *pnum);
059C: 00000000 A1402345 ; 167: void PNUM2str(char *str,void *pnum,int len, int max_len);
05A0: 00000000 994C3645 ; 168: DISP_OBJ * GUIObj_GetDISPObj (void * gui);
05A4: 00000000 15581B45 ; 169: LIST *List_New(void);
05A8: 00000000 51581B45 ; 16A: void List_Free(LIST *lst);
05AC: 00000000 C5591B45 ; 16B: void ListElement_AddtoTop(LIST *lst,void *newElement);
05B0: 00000000 15D8E344 ; 16C: int Gif2ID(u16 IMAGEHANDLE,u16 * path, u16 * fname,u16 * ID);
05B4: 00000000 ED12E444 ; 16D: int REQUEST_IMAGEHANDLER_INTERNAL_GETHANDLE(const int * __zero,u16 * IMAGEHANDLE,char * unk);
05B8: 00000000 3198D444 ; 16E: void REQUEST_DATEANDTIME_GET(const int * __zero , DATETIME *dt);
05BC: 00000000 2D103945 ; 16F: void IndicationDevice_Backlight_FadeToLevel(int unk_zero ,int bl_level);
05C0: 00000000 65DDF744 ; 170: int GetFreeBytesOnHeap(void);
05C4: 00000000 1DE72A45 ; 171: void Hide(void * udata, int zero);
05C8: 00000000 2DE72A45 ; 172: void Show(void * udata, int zero);
05CC: 00000000 B11B2C45 ; 173: void StartAPP (u16 * appname);
05D0: 00000000 9DE53145 ; 174: void ListMenu_SetOnMessages (GUI_LIST * , void * onMessage);
05D4: 00000000 99CB2745 ; 175: char * manifest_GetParam(char *buf,char *param_name,int unk);
05D8: 00000000 1596E844 ; 176: int lseek(int file,int offset,int mode);
05DC: 00000000 B7251444 ;8177: int get_VBUFFER(void);
05E0: 00000000 1D1B2E45 ; 178: void SetLampLevel (int level);
05E4: 00000000 51591B45 ; 179: void * ListElement_Remove(LIST *lst,int index);
05E8: 00000000 9D0E2C44 ; 17A: int GetCurrentPID(void);
05EC: 00000000 85591B45 ; 17B: int ListElement_Prt2NumElement(LIST *lst,void *ptr);
05F0: 00000000 D4963044 ; 17C: union SIGNAL *alloc(OSBUFSIZE size,SIGSELECT signo);
05F4: 00000000 F0963044 ; 17D: union SIGNAL *receive(const SIGSELECT *sigsel);
05F8: 00000000 E0963044 ; 17E: void send(union SIGNAL **sig,PROCESS to);
05FC: 00000000 30973044 ; 17F: PROCESS sender(union SIGNAL **sig);
0600: 00000000 00973044 ; 180: void free_buf(union SIGNAL **sig);
0604: 00000000 CC973044 ; 181: PROCESS create_process(int proc_type,char *name,OSENTRYPOINT *entrypoint,OSADDRESS stack_size,OSPRIORITY priority,OSTIME timeslice,PROCESS pid_block,void *redir_table,OSVECTOR vector,OSUSER user);
0608: 00000000 EC993044 ; 182: void start(PROCESS pid);
060C: 00000000 98963044 ; 183: int get_ptype(PROCESS pid);
0610: 00000000 E8973044 ; 184: PROCESS current_process(void);
0614: 00000000 20973044 ; 185: void delay(OSTIME timeout);
0618: 00000000 E8983044 ; 186: OSBOOLEAN hunt(const char *name, OSUSER user, PROCESS *name_, union SIGNAL **hunt_sig);
061C: 00000000 08993044 ; 187: void kill_proc(PROCESS pid);
0680: 00000000 4D745544 ; 1A0: char* strcpy(char * dest, char * source);
0684: 00000000 F958FF44 ; 1A1: void *CreateMessage(int size,int ev,char *name);
0688: 00000000 4D59FF44 ; 1A2: void SendMessage(void **signal,int PID);
068C: 00000000 D559FF44 ; 1A3: void * WaitMessage(void *SIGSEL);
0690: 00000000 E959FF44 ; 1A4: int FreeMessage(void **Mess);
0694: 00000000 F9C1FC44 ; 1A5: void SendDispatchMessage(int id, int unk_zero, int size,void *mess);
0698: 00000000 15BA2A45 ; 1A6: char * UIEventName(int event);
069C: 00000000 A87D1820 ;81A7: int * MissedEvents(void);
06A0: 00000000 D1CE2A45 ; 1A8: void UI_Event(int event);
06A4: 00000000 E1CE2A45 ; 1A9: void UI_Event_wData(int event,void *message,void (*mfree)(void*));
06A8: 00000000 29CF2A45 ; 1AA: void UI_Event_toSID(int event,int SessionID);
06AC: 00000000 3DCF2A45 ; 1AB: void UI_Event_toSIDwData(int event,int SedionID,void *message,void (*mfree)(void*));
06B0: 00000000 E55B1B45 ; 1AC: int ListElement_Find(LIST *lst,void *element, int (*cmp_proc)(void *,void *));
06B4: 00000000 E95A1B45 ; 1AD: void * ListElement_GetByIndex(LIST * , int index);
06B8: 00000000 4D7E5544 ; 1AE: u16* wstrrchr(u16*wstr, u16 wchar);
06BC: 00000000 39E22A45 ; 1AF: void BookObj_CallSubroutine(BOOK * , void * SubProcDesc);
06C0: 00000000 CD591B45 ; 1B0: void ListElement_Add(LIST *lst,void *newElement);
06C4: 00000000 516C2344 ; 1B1: void debug_printf(char * fmt,...);
06C8: 00000000 35480045 ; 1B2: int PlayFile(u16 * path, u16 * fname);
06D0: 00000000 515C2E45 ; 1B4: int REQUEST_PROFILE_GETACTIVEPROFILE(const int *__zero , int *level);
06D4: 00000000 AD5C2E45 ; 1B5: void REQUEST_PROFILE_SETACTIVEPROFILE(const int *__zero , int NUMprof);
06D8: 00000000 65E72D45 ; 1B6: void SetBrightnessOfScreen(int br);
06DC: 00000000 25413945 ; 1B7: int isKeylocked(void);
06E0: 00000000 B508F544 ;81B8: IS_NEEDED_BOOK isMediaPlayerVideoBook(void);
06E8: 00000000 3FDC2B45 ; 1BA: void ShuttingDown(void);
06EC: 00000000 4D60FD44 ; 1BB: void Vibra(int t1, int t2, int t3);
06F0: 00000000 119AD444 ; 1BC: char REQUEST_DATEFORMAT_GET(const int *SYNC, char *DateFormat);
06F4: 00000000 A59AD444 ; 1BD: char REQUEST_TIMEFORMAT_GET(const int *SYNC, char *TimeFormat);
06F8: 00000000 E1A52A45 ; 1BE: int Date2ID(DATE *, int TimeFormat,int);
06FC: 00000000 09A52A45 ; 1BF: int Time2ID(TIME *, char TimeFormat,int);
0700: 00000000 41E23145 ; 1C0: GUI_LIST * CreateListObject(BOOK * , void * unk);
0704: 00000000 71E43145 ; 1C1: void SetNumOfMenuItem(void * , int item_count);
0708: 00000000 C0201820 ;81C2: LIST ** ROOT_APP(void);
070C: 00000000 65173845 ; 1C3: void SoftKey_AddHelpStr(void *gui,int msg,int StrID);
0710: 00000000 59183845 ; 1C4: void SoftKey_SetItemAsSubItem(void *gui,int item,int subitem);
0714: 00000000 69462C45 ; 1C5: int REQUEST_SYSTEM_SHUTDOWN(void);
0718: 00000000 79462C45 ; 1C6: int REQUEST_SYSTEM_RESTART(void);
071C: 00000000 9D173845 ; 1C7: void SoftKeys_SetText(void *gui,int msg,int StrID,int StrID1);
0720: 00000000 A1B13845 ; 1C8: int isRightNowBook(BOOK *);
0724: 00000000 A10F2C45 ; 1C9: int isVolumeControllerBook(BOOK *);
0728: 00000000 015D3645 ; 1CA: GUI_TABMENUBAR * CreateTabMenuBar(BOOK *);
072C: 00000000 D55D3645 ; 1CB: void TabMenuBar_SetTabCount(GUI_TABMENUBAR * , int count);
0730: 00000000 895E3645 ; 1CC: void TabMenuBar_AssignGuiObj(GUI_TABMENUBAR * , int tab , GUI_NOFMANY *);
0734: 00000000 C55E3645 ; 1CD: void TabMenuBar_SetTabIcon(GUI_TABMENUBAR *,int tab, u16 icon , int for_state);
0738: 00000000 294C3645 ; 1CE: void GUI_Free(GUI*);
073C: 00000000 B98E1445 ; 1CF: void GUI_SetIcon(GUI* , int icon);
0740: 00000000 BD6D2F45 ; 1D0: int StringInput_GetStringAndLen (GUI*,u16**,u16*);
074C: 00000000 4DA8E844 ; 1D3: int GetVolumeSize(char * volume, VOLUMESIZE *);
0750: 00000000 3DFE3145 ; 1D4: GUI_NOFMANY * CreateNOfMany(BOOK *);
0754: 00000000 7D003245 ; 1D5: void NOfMany_SetTexts(GUI_NOFMANY * , int * StrIDtable, int items_count);
0758: 00000000 01003245 ; 1D6: void NOfMany_SetChecked(GUI_NOFMANY * , u16 * checked_table, int items_count);
075C: 00000000 C9FF3145 ; 1D7: void NOfMany_SetCursor(GUI_NOFMANY * , int item);
0760: 00000000 25003245 ; 1D8: int NOfMany_GetCheckedCount(GUI_NOFMANY *);
0764: 00000000 15003245 ; 1D9: int NOfMany_GetChecked(GUI_NOFMANY * , u16 * buffer );
0768: 00000000 75003245 ; 1DA: void NOfMany_SetonMessage(GUI_NOFMANY * , void * proc );
0780: 00000000 A9053245 ; 1E0: void OneOfMany_SetFocused(GUI_ONEOFMANY * , int item);
0784: 00000000 0D063245 ; 1E1: void OneOfMany_SetonMessage(GUI_ONEOFMANY * , int (*proc)(GUI_MESSAGE *));
0788: 00000000 6DCB2B45 ; 1E2: GUI_FEEDBACK * CreateFeedBack (int,...);
078C: 00000000 39CC2B45 ; 1E3: void FeedBack_SetText(GUI_FEEDBACK*,int);
0790: 00000000 895C9C44 ; 1E4: int GetBattaryState(const int * , BATT *);
0794: 00000000 15273645 ; 1E5: void * get_DisplayGC (void);
0798: 00000000 D1B13545 ; 1E6: void GetGuiRect(void*,RECT*);
079C: 00000000 ED2D3645 ; 1E7: void get_GC_RECT(void*,RECT*);
07A0: 00000000 F1303645 ; 1E8: int get_GC_xx(void * GC);
07A4: 00000000 E5303645 ; 1E9: void *set_GC_xx(void * GC, int);
07A8: 00000000 9D2D3645 ; 1EA: void GC_validate_RECT(void * GC , RECT*);
07AC: 00000000 A9E72A45 ; 1EB: void addGui2book(BOOK*,GUI*);
07B0: 00000000 01DA3545 ; 1EC: void DrawRect(int x1, int y1,int x2 ,int y2,int pen_color,int brush_color);
07B4: 00000000 01DD3545 ; 1ED: void DrawString(int StrID,int align,int x1,int y1,int x2,int y2,int unk,int unk1,int pen_color ,int brush_color);
07B8: 00000000 85EC2A45 ; 1EE: void addGui2XGuiList (void* xguilist , GUI*);
07BC: 00000000 3DB03545 ; 1EF: void InvalidateRect(DISP_OBJ *,RECT*);
07C0: 00000000 4D4B3645 ; 1F0: int CreateObject(GUI*,void (*)(DISP_DESC *),void (*)(DISP_DESC *),BOOK *,void(*)(),int,int size_obj);
07C4: 00000000 5DE73545 ; 1F1: int SetFont(int);
07C8: 00000000 986E1820 ;81F2: DISP_OBJ ** StatusRow_p(void);
07CC: 00000000 09CC2A45 ; 1F3: int root_list_get_session_count(void);
07D0: 00000000 15CC2A45 ; 1F4: UI_APP_SESSION *root_list_get_session(int num_session);
07D4: 00000000 F9C42A45 ; 1F5: BOOK *SESSION_GetTopBook(UI_APP_SESSION *);
07D8: 00000000 C9CF2B45 ; 1F6: int MainInput_getVisible(GUI *);
07DC: 00000000 D5CF2B45 ; 1F7: int MainInput_strlen(GUI *);
07E0: 00000000 EDCF2B45 ; 1F8: char * MainInput_getPNUM(GUI *);
07E4: 00000000 F9CF2B45 ; 1F9: int MainInput_isPlus(GUI *);
07E8: 00000000 25EB2A45 ; 1FA: int BOOK_GetSessionID(BOOK * );
07EC: 00000000 C57D5544 ; 1FB: int wstrncmp(u16*,u16*,int);
07F0: 00000000 C1C13545 ; 1FC: int DISP_OBJ_GetAbsoluteXPos(DISP_OBJ *);
07F4: 00000000 F5C13545 ; 1FD: int DISP_OBJ_GetAbsoluteYPos(DISP_OBJ *);
07F8: 00000000 EDB43545 ; 1FE: WINDOW * DISP_OBJ_GetWindow(DISP_OBJ *);
07FC: 00000000 61443845 ; 1FF: int GetThemeColor(int , int);
0800: 00000000 29552E45 ; 200: int REQUEST_SETTING_SILENCE_SET(const int * __zero,u16 profile,u16 value);
0804: 00000000 D1542E45 ; 201: int REQUEST_SETTING_SILENCE_GET(const int * __zero,u16 profile, char * silence_mode);
0808: 00000000 01EFDD44 ; 202: void VCALL_Init (void* vc);
080C: 00000000 F9EFDD44 ; 203: void VCALL_SetName (void * vc , u16 * name ,unsigned short name_len);
0810: 00000000 59F0DD44 ; 204: void VCALL_SetNameIcon (void * vc , u16 icon);
0814: 00000000 19F0DD44 ; 205: void VCALL_SetNumber (void * vc , u16 * number , unsigned short num_len);
0818: 00000000 3DF0DD44 ; 206: void VCALL_SetHZ1 (void * vc, int , u16 );
081C: 00000000 49F0DD44 ; 207: void VCALL_SetHZ2 (void * vc , u16 );
0820: 00000000 D9EADD44 ; 208: void MakeVoiceCall (int SessioID , void * vc ,int flag);
0824: 00000000 29580045 ; 209: int isDirectory (u16 * path ,u16 * filename , int * error ); ?????????
0828: 00000000 2585E844 ; 20A: void FileDelete (u16 * path ,u16 * filename , int * error );
082C: 00000000 454E3645 ; 20B: void SetFocus (GUI * , int);
0830: 00000000 61820245 ; 20C: int CreateSMSCont (int, void*);
0834: 00000000 01890245 ; 20D: int FreeSMSCont (void*);
0838: 00000000 39840245 ; 20E: int PrepareSMSCont (void*,u16*,u16*,int,int);
083C: 00000000 61880245 ; 20F: int CteateNewMessage (int,void*,int);
0840: 00000000 F475AF45 ;8210: void * get_APP_DESC_TABLE(void);
0844: 00000000 491E3645 ; 211: C_INTERFACE *Window_GetComponentInterface(WINDOW*);
0848: 00000000 B5C1DE44 ; 212: int AB_POSITIONNBR_GET(void * ab_name,char * ,u16 * ,void * ab_num);
084C: 00000000 DDC0DE44 ; 213: int AB_NAME_ITEM2StrID(void * ab_name);
0850: 00000000 25C1DE44 ; 214: int AB_NUM_ITEM2StrID(void * ab_num_item);
0854: 00000000 AFB4A544 ; 215: int GetABRecNum(AB_GET_STRUCT *);
0858: 00000000 18D1AA45 ;8216: AB_ITEM_DESC * get_AB_ITEMS_DESC();
085C: 00000000 0598A644 ; 217: GUI * SBY_GetMainInput(BOOK * StandBy);
0860: 00000000 0198A644 ; 218: GUI * SBY_GetStatusIndication(BOOK * StandBy);
0864: 00000000 A977D644 ; 219: int REQUEST_PHONEBOOK_ACCESSSTATUS_TOTAL_GET(const int * __zero, int *);
0868: 00000000 44D00920 ;821A: int * PID_MMI(void);
0874: 00000000 1FA93545 ; 21D: DISP_OBJ* DISPBASE_GetFocused(int display);
0878: 00000000 D1AE3545 ; 21E: char DISP_OBJ_getVisible(DISP_OBJ*);
087C: 00000000 E9ED8E44 ; 21F: DISP_DESC* DISP_OBJ_GetDESC (DISP_OBJ*);
0880: 00000000 256A3545 ; 220: void DISP_DESC_SetName (DISP_DESC* , const char * name);
0884: 00000000 81BF3545 ; 221: char* DISP_OBJ_GetName (DISP_OBJ *);
0888: 00000000 296A3545 ; 222: void DISP_DESC_SetSize (DISP_DESC* , u16 size);
;088C: xxxxxxxx yyyyyyyy ; 223: u16 DISP_DESC_GetSize (DISP_OBJ *);
0890: 00000000 2D6A3545 ; 224: void DISP_DESC_SetOnCreate (DISP_DESC* , DISP_OBJ_ONCREATE_METHOD);
0894: 00000000 B56A3545 ; 225: DISP_OBJ_ONCREATE_METHOD DISP_OBJ_GetOnCreate (DISP_OBJ *);
0898: 00000000 316A3545 ; 226: void DISP_DESC_SetOnClose (DISP_DESC* , DISP_OBJ_ONCLOSE_METHOD);
089C: 00000000 D16A3545 ; 227: DISP_OBJ_ONCLOSE_METHOD DISP_OBJ_GetOnClose (DISP_OBJ *);
08A0: 00000000 356A3545 ; 228: void DISP_DESC_SetOnRedraw (DISP_DESC* , DISP_OBJ_ONREDRAW_METHOD);
08A4: 00000000 ED6A3545 ; 229: DISP_OBJ_ONREDRAW_METHOD DISP_OBJ_GetOnRedraw (DISP_OBJ *);
08A8: 00000000 3D6A3545 ; 22A: void DISP_DESC_SetOnKey (DISP_DESC* , DISP_OBJ_ONKEY_METHOD);
08AC: 00000000 256B3545 ; 22B: DISP_OBJ_ONKEY_METHOD DISP_OBJ_GetOnKey (DISP_OBJ *);
;08B0: xxxxxxxx yyyyyyyy ; 22C: void DISP_DESC_SetMethod03 (DISP_DESC* ,void (*)(void*));
;08B4: xxxxxxxx yyyyyyyy ; 22D: DISP_OBJ_METHOD DISP_OBJ_GetMethod03 (DISP_OBJ *);
;08B8: xxxxxxxx yyyyyyyy ; 22E: void DISP_DESC_SetMethod04 (DISP_DESC* ,void (*)(void*));
;08BC: xxxxxxxx yyyyyyyy ; 22F: DISP_OBJ_METHOD DISP_OBJ_GetMethod04 (DISP_OBJ *);
;08C0: xxxxxxxx yyyyyyyy ; 230: void DISP_DESC_SetMethod05 (DISP_DESC* ,void (*)(void*));
;08C4: xxxxxxxx yyyyyyyy ; 231: DISP_OBJ_METHOD DISP_OBJ_GetMethod05 (DISP_OBJ *);
08C8: 00000000 416A3545 ; 232: void DISP_DESC_SetMethod06 (DISP_DESC* ,DISP_OBJ_METHOD);
08CC: 00000000 416B3545 ; 233: DISP_OBJ_METHOD DISP_OBJ_GetMethod06 (DISP_OBJ *);
;08D0: xxxxxxxx yyyyyyyy ; 234: void DISP_DESC_SetMethod07 (DISP_DESC* ,void (*)(void*));
;08D4: xxxxxxxx yyyyyyyy ; 235: DISP_OBJ_METHOD DISP_OBJ_GetMethod07 (DISP_OBJ *);
08D8: 00000000 496A3545 ; 236: void DISP_DESC_SetMethod08 (DISP_DESC* ,DISP_OBJ_METHOD);
08DC: 00000000 796B3545 ; 237: DISP_OBJ_METHOD DISP_OBJ_GetMethod08 (DISP_OBJ *);
08E0: 00000000 4D6A3545 ; 238: void DISP_DESC_SetMethod09 (DISP_DESC* ,void (*)(void*));
;08E4: xxxxxxxx yyyyyyyy ; 239: DISP_OBJ_METHOD DISP_OBJ_GetMethod09 (DISP_OBJ *);
;08E8: xxxxxxxx yyyyyyyy ; 23A: void DISP_DESC_SetMethod0A (DISP_DESC* ,void (*)(void*));
;08EC: xxxxxxxx yyyyyyyy ; 23B: DISP_OBJ_METHOD DISP_OBJ_GetMethod0A (DISP_OBJ *);
;08F0: xxxxxxxx yyyyyyyy ; 23C: void DISP_DESC_SetMethod0B (DISP_DESC* ,void (*)(void*));
;08F4: xxxxxxxx yyyyyyyy ; 23D: DISP_OBJ_METHOD DISP_OBJ_GetMethod0B (DISP_OBJ *);
;08F8: xxxxxxxx yyyyyyyy ; 23E: void DISP_DESC_SetMethod0C (DISP_DESC* ,void (*)(void*));
;08FC: xxxxxxxx yyyyyyyy ; 23F: DISP_OBJ_METHOD DISP_OBJ_GetMethod0C (DISP_OBJ *);
0900: 00000000 DB051444 ; 240: void JavaSession_Manager (int cmd);
0904: 00000000 D9051444 ; 241: int JavaSession_GetName(void);
0908: 00000000 65753445 ; 242: int TextCopyId(int);
090C: 00000000 C5EA2A45 ; 243: UI_APP_SESSION *Book_GetSession(BOOK*);
0910: 00000000 35F03145 ; 244: void List2lineSetAsSubitem (void* msg,int unk,int n_sub_items);
0914: 00000000 ADF03145 ; 245: void List2lineSubitemAddText(void* msg,int StrID);
0918: 00000000 A1F03145 ; 246: int GUIonMessage_GetCreatedSubItemParrentIndex(void * msg);
091C: 00000000 2D632145 ; 247: void GoMusic(void);
0920: 00000000 2161FD44 ; 248: void Vibra_Off (int t1);
0928: 00000000 35480045 ; 24A: int PlayFileV(u16 * path, u16 * fname, int vol);
092C: 00000000 0555FD44 ; 24B: int GetSilent(void);
0930: 00000000 6D2BFD44 ; 24C: int GetVibrator(int ignorevibrator,int ignoresilent);
0934: 00000000 9963FD44 ; 24D: int GetAudioSettings(int what, char* retvalue);
0938: 00000000 315F2344 ; 24E: int GetChipID(void);
0948: 00000000 49F13145 ; 252: int List2LineGetCurrentIndex(void * msg);
094C: 00000000 55961F44 ; 253: int GUIonMessage_GetCurrentItemIndex(void * msg);
0950: 00000000 3D5DE844 ; 254: void DestroyDirHandle(void *handle);
0954: 00000000 F097AC45 ;8255: DB_EXT *LastExtDB(void);
0958: 00000000 EDBEEB44 ; 256: void GetOtherExtMethods(FILESUBROUTINE **);
095C: 00000000 7D982B45 ; 257: void MessageBox(int HeaderStrID,int MessageStrID,int IconID, int style /*1 or 2*/,int time,BOOK * unk);
0960: 00000000 817E3745 ; 258: int Display_GetHeight(int Display);
0964: 00000000 8D7E3745 ; 259: int Display_GetWidth(int Display);
0968: 00000000 E1470045 ; 25A: void PlaySystemSound (int SndNumber);
0974: 00000000 C95D3645 ; 25D: int TabMenuBar_GetFocusedTabIndex(GUI * );
0978: 00000000 B95D3645 ; 25E: void TabMenuBar_SetTabFocused(GUI_TABMENUBAR * , int tab_num);
097C: 00000000 F92F3645 ; 25F: int GC_GetPenColor (void* GC);
0980: 00000000 BD2F3645 ; 260: void GC_SetPenColor(void* GC , int pen_color);
0984: 00000000 FD2B3645 ; 261: void GC_SetPixel (void* GC,int x1,int y1,int color);
0988: 00000000 75373645 ; 262: void GC_DrawLine(void* GC,int x1, int y1, int x2, int y2);
098C: 00000000 01393645 ; 263: void GC_DrawFRect (void* GC,int color,int x1,int y1,int x2 ,int y2);
0990: 00000000 C92C3645 ; 264: int GC_DrawBitmap(void *GC, int x1, int y1, int x2, int y2, int * bmp);
0994: 00000000 B1A5AE44 ; 265: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
0998: 00000000 FDA6AE44 ; 266: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
099C: 00000000 558DAE44 ; 267: png_infop png_create_info_struct(png_structp png_ptr);
09A0: 00000000 898DAE44 ; 268: void png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr);
09A4: 00000000 89A5AE44 ; 269: void png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr, png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn, png_progressive_end_ptr end_fn);
09A8: 00000000 4995AE44 ; 26A: void png_process_data(png_structp png_ptr, png_infop info_ptr, png_bytep buffer, png_size_t buffer_size);
09AC: 00000000 D1A6AE44 ; 26B: void png_read_update_info(png_structp png_ptr, png_infop info_ptr);
09B0: 00000000 ADA5AE44 ; 26C: png_voidp png_get_progressive_ptr(png_structp png_ptr);
09B4: 00000000 1192AE44 ; 26D: png_uint_32 png_get_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
09B8: 00000000 9DA8AE44 ; 26E: void png_set_strip_16(png_structp png_ptr);
09BC: 00000000 B5A8AE44 ; 26F: void png_set_gray_1_2_4_to_8(png_structp png_ptr);
09C0: 00000000 CDA8AE44 ; 270: void png_set_gray_to_rgb(png_structp png_ptr);
09C4: 00000000 E591AE44 ; 271: png_uint_32 png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag);
09C8: 00000000 C1A8AE44 ; 272: void png_set_tRNS_to_alpha(png_structp png_ptr);
09CC: 00000000 05D69C44 ; 273: void png_set_filler(png_structp png_ptr, png_uint_32 filler, int flags);
09D0: 00000000 A9A8AE44 ; 274: void png_set_palette_to_rgb(png_structp png_ptr);
09D4: 00000000 FD91AE44 ; 275: png_uint_32 png_get_rowbytes(png_structp png_ptr, png_infop info_ptr);
09D8: 00000000 69A5AE44 ; 276: void png_progressive_combine_row(png_structp png_ptr, png_bytep old_row, png_bytep new_row);
09DC: 00000000 4D8CAE44 ; 277: int png_sig_cmp(png_bytep sig, png_size_t start, png_size_t num_to_check);
09E0: 00000000 684B2D44 ; 278: int setjmp(jmp_buf jmpbuf);
09E4: 00000000 8C4B2D44 ; 279: void longjmp(jmp_buf, int);
09E8: 00000000 69E2AE44 ; 27A: int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size);
09EC: 00000000 09E4AE44 ; 27B: int inflate (z_streamp strm, int flush);
09F0: 00000000 69F6AE44 ; 27C: int inflateEnd (z_streamp strm);
09F4: 00000000 0C310020 ; 27D: int memcmp (const void *m1,const void *m2,int n);
09F8: 00000000 BD745544 ; 27E: int strncmp(const char *s1, const char *s2, int len);
09FC: 00000000 F1745544 ; 27F: char *strncpy (char *dest,const char *source,int maxlen);
0A00: 00000000 ED735544 ; 280: char *strcat(char *dest, const char *src);
0A04: 00000000 AD533645 ; 281: void GuiObject_SetTitleType(GUI *gui, int type);
0A08: 00000000 41F03145 ; 282: void GUIonMessage_SetItemDisabled (void * msg, int Disabled);
0A0C: 00000000 5513E444 ; 283: int REQUEST_IMAGEHANDLER_INTERNAL_REGISTER(const int * __zero,u16 ImageHandle,u16*,u16*,int unk, u16 * ImageID ,char * error);
0A10: 00000000 0514E444 ; 284: int REQUEST_IMAGEHANDLER_INTERNAL_UNREGISTER (const int * __zero,u16 ImageHandle,u16* ,u16* ,int ImageID, int unk_1,char * error);
0A14: 00000000 D8782F20 ;8285: SURFACE ** get_Surfaces(void);
0A18: 00000000 994EC344 ; 286: int iconidname2id(u16* idname,int maxnamelen,int* id);
0A1C: 00000000 7517D444 ; 287: int textidname2id(u16* idname,int maxnamelen,int* id);
0A20: 00000000 41E63145 ; 288: void ListMenu_SetNoItemText(GUI_LIST *, int str);
0A28: 00000000 09AD0F45 ;828A: IS_NEEDED_BOOK isFmRadioBook(void);
0A2C: 00000000 5D65F344 ;828B: IS_NEEDED_BOOK isAudioPlayerBook(void);
0A30: 00000000 89B0F344 ; 28C: void PlayerControl(BOOK *AudioPlayerBook, int);
0A34: 00000000 F18E0F45 ; 28D: void SwitchRadioStationFromList(BOOK *FmRadioBook, int);
0A38: 00000000 19F03845 ; 28E: void Shortcut_Run (u16 * shortcut_name);
0A3C: 00000000 894FE844 ; 28F: int mkdir(u16* path);
0A40: 00000000 7556E844 ; 290: int rmdir(u16* path, int zero);
0A44: 00000000 5584E844 ; 291: int chmod(u16* path, u16* fname, int amode);
0A48: 00000000 458AE844 ; 292: int rename(u16* oldpath, u16* oldfname, u16* newpath, u16* newfname, int zero);
0A4C: 00000000 F5EC3545 ; 293: int GetImageWidth(int ImageID);
0A50: 00000000 09ED3545 ; 294: int GetImageHeight(int ImageID);
0A54: 00000000 0DFADA44 ; 295: void * CallID_GetCallStatusDesc(int CallID);
0A58: 00000000 B5F0DA44 ; 296: u16 * CallStatusDesc_GetName(void * CallStatusDesc);
0A5C: 00000000 295C1B45 ; 297: void List_FreeElements(LIST *,int (*cmp_proc)(void * elem_from_list),void * freefunc);
0A60: 00000000 89755544 ; 298: char * strstr(char * str1,char * str2);
0A64: 00000000 11713B45 ; 299: int GPRS_GetLastSessionInfo(int,GPRS_SESSION_INFO *);
0A68: 00000000 A991E444 ; 29A: int wstrcmpni(u16 * wstr1,u16 * wstr2,int len);
0A6C: 00000000 D5AD2A45 ; 29B: int wtoi(u16 * wstr,int len,int * dest);
0A70: 00000000 A164FF44 ; 29C: void DATE_GetWeekDay(DATE *,char * dest);
0A74: 00000000 5952D744 ; 29D: void Cale_GetSettings(int setID,void *);
0A78: 00000000 8D7E5544 ; 29E: u16 * wstrwstr(u16 * wstr1,u16 * wstr2);
0A7C: 00000000 ED91E444 ; 29F: int wstrcmpi(const u16 *ws1, const u16 *ws2);
0A80: 00000000 0D7D5544 ; 2A0: u16 * wstrchr(u16 * source,u16 chr);
0A84: 00000000 851A3845 ; 2A1: void GUIObject_HideSoftkeys(void *gui);
0A88: 00000000 911A3845 ; 2A2: void GUIObject_ShowSoftkeys(void *gui);
0A8C: 00000000 15023845 ; 2A3: DISP_OBJ* DispObject_SoftKeys_Get(void);
0A90: 00000000 01383545 ; 2A4: int StandbyBackground_SetImage(int type,int,int,u16* path,u16* fname,int);
0A94: 00000000 F1573745 ; 2A5: GUI *CreateYesNoQuestionVA(int zero, ...);
0A98: 00000000 65E83145 ; 2A6: void ListMenu_SetSecondLineText(GUI_LIST *,int elem_num,int StrID);
0A9C: 00000000 45F2EA44 ; 2A7: void _REQUEST_OAF_START_APPLICATION(const int * __one,int __zero,MIDP_DESC *,int ___zero);




;locale=Russian_Russia.1251