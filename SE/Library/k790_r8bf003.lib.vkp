;K790 SW-R8BF003
;Библиотека функций
;v190208
;(c) Hussein , IronMaster
;(p) IronMaster , GPcH
;($) GPcH
;

+45B1FC00
0448: 00000000 94300020 ; 112: void memset(void *mem,char chr,int size);
044C: 00000000 BC5B2D44 ; 113: int memcpy(void *dest,const void *source,int cnt);
0450: 00000000 51335544 ; 114: int sprintf(char *buf, const char *fmt, ...);
0454: 00000000 19395544 ; 115: int snwprintf(wchar_t* buffer, int size, const wchar_t* fmt, ...);
0458: 00000000 C11CE644 ; 116: int _fopen(const wchar_t *filpath, const wchar_t *filname,unsigned int mode , unsigned int rights, unsigned int __0);
045C: 00000000 8D32E644 ; 117: int fclose(int file);
0460: 00000000 1535E644 ; 118: int fread(int file , void *ptr, int size);
0464: 00000000 E136E644 ; 119: int fwrite(int file , const void *ptr, int size);
0468: 00000000 15708544 ; 11A: int _wstat(short *path, void *statbuf)
046C: 00000000 31921745 ; 11B: int fputs(const char *s, int file)
0470: 00000000 5526E644 ; 11C: int fstat(const wchar_t * path, const wchar_t *fname , FSTAT * fstat_stuct);
0474: 00000000 75FCE544 ; 11D: DIR_HANDLE * AllocDirHandle(const wchar_t * path);
0478: 00000000 35FEE544 ; 11E: FILELISTITEM *GetFname(DIR_HANDLE *, FILELISTITEM *);
047C: 00000000 A9F5E944 ; 11F: void * DataBrowserDesc_Create(void);
0480: 00000000 75F8E944 ; 120: void DataBrowserDesc_SetStyle(void * db , int style);
0484: 00000000 ADF8E944 ; 121: void DataBrowserDesc_SetHeaderText(void * db , int StrID);
0488: 00000000 95F8E944 ; 122: void DataBrowserDesc_SetFolders(void * db , wchar_t const ** FolderList);
048C: 00000000 B5F8E944 ; 123: void DataBrowserDesc_SetOKSoftKeyText(void * db , int StrID);
0490: 00000000 19BCE944 ; 124: void DataBrowser_Create(void * db);
0494: 00000000 5DF6E944 ; 125: void DataBrowserDesc_Destroy(void * db);
0498: 00000000 A54DE644 ; 126: wchar_t * getFileExtention(wchar_t * fnane);
049C: 00000000 A100E644 ; 127: int DataBrowser_isFileInListExt(const wchar_t * ext_table,const wchar_t * path ,const wchar_t *fname );
04A0: 00000000 ED782645 ; 128: void Timer_ReSet(u16 * timer ,int time, void (*onTimer)(u16 timerID, LPARAM lparam), LPARAM lparam);
04A4: 00000000 B9782645 ; 129: u16 Timer_Set(int time, void (*onTimer)(u16 timerID, LPARAM lparam), LPARAM lparam);
04A8: 00000000 45792645 ; 12A: void Timer_Kill(u16 *timerID);
04AC: 00000000 05AB2645 ; 12B: int CreateBook(void * mem, void (* onClose)(BOOK*), const PAGE_DESC * bp, const char * name, int __0xFFFFFFFF,int __0);
04B0: 00000000 2DAC2645 ; 12C: void BookObj_KillBook(void *Book);
04B4: 00000000 81A82645 ; 12D: void BookObj_GotoPage(BOOK * book, const PAGE_DESC * page);
04B8: 00000000 E9A92645 ; 12E: void BookObj_ReturnPage(BOOK * ,int);
04BC: 00000000 21B12645 ; 12F: void FreeBook ( BOOK *book);
04C0: 00000000 55A32645 ; 130: BOOK * FindBook(IS_NEEDED_BOOK);
04C4: 00000000 C9DE2745 ; 131: BOOK * Find_StandbyBook(void);
04C8: 00000000 B1AD2645 ; 132: void BookObj_SetFocus(void *,int focus);
04CC: 00000000 A5043245 ; 133: void GuiObject_SetTitleText (void * gui , int StrID);
04D0: 00000000 29003245 ; 134: void ShowWindow (void * gui);
04D4: 00000000 259C2D45 ; 135: void SetCursorToItem ( void *obj , int item);
04D8: 00000000 79003245 ; 136: void GUI_SetStyle(GUI *,int style);
04DC: 00000000 0DA72D45 ; 137: int GUIonMessage_GetCreatedItemIndex ( void *msg);
04E0: 00000000 19A72D45 ; 138: char SetMenuItemText0 ( GUI_MESSAGE *, int StrID);
04E4: 00000000 49A72D45 ; 139: char SetMenuItemText1 ( GUI_MESSAGE *, int StrID);
04E8: 00000000 29A72D45 ; 13A: char SetMenuItemText2 ( GUI_MESSAGE *, int StrID);
04EC: 00000000 39A72D45 ; 13B: char SetMenuItemText3 ( GUI_MESSAGE *, int StrID);
04F0: 00000000 91A72D45 ; 13C: void SetListObjectItemIcon ( void *msg , int align , wchar_t iconID);
04F4: 00000000 BD4E3145 ; 13D: void GUIObject_SetHeaderText(void *gui , int StrID);
04F8: 00000000 399C2D45 ; 13E: int ListMenu_GetSelectedItem(GUI_LIST * );
04FC: 00000000 899C2D45 ; 13F: void SetMenuItemStyle( void *obj , int style);
0500: 00000000 7DE33145 ; 140: void putchar( void *xx , int x, int y, int _zero, int zero1 , short wchar);
0504: 00000000 9DE43445 ;8141: IS_NEEDED_BOOK isScreenSaverBook(void);
0508: 00000000 E5FA3245 ; 142: void StatusIndication_SetItemText(void *gui,int item,int StrID);
050C: 00000000 19FB2745 ; 143: void StatusIndication_ShowNotes(int StrID);
0510: 00000000 E11D2B45 ; 144: GUI * CreateStringInput(int,...);
0514: 00000000 59BB2D45 ; 145: GUI_ONEOFMANY * CreateOneOfMany(BOOK *);
0518: 00000000 21BD2D45 ; 146: void OneOfMany_SetItemCount(GUI_ONEOFMANY * , int count);
051C: 00000000 3DBD2D45 ; 147: void OneOfMany_SetChecked(GUI_ONEOFMANY * , int checked);
0520: 00000000 71BD2D45 ; 148: void OneOfMany_SetTexts(GUI_ONEOFMANY * , int * StrID , int Count);
0524: 00000000 4DBD2D45 ; 149: int OneOfMany_GetSelected(GUI_ONEOFMANY * rb);
0528: 00000000 49FA2745 ; 14A: void StatusIndication_Item8_SetText(int StrID);
052C: 00000000 1DC83345 ; 14B: void GUIObject_Softkey_SetAction(void * gui,u16 actionID,void (*proc)(BOOK *,void*));
0530: 00000000 95C83345 ; 14C: void GUIObject_Softkey_SetText(void * gui,u16 actionID , int StrID);
0534: 00000000 51C93345 ; 14D: void GUIObject_SoftKey_SetEnable(void *gui,u16 actionID,int ena);
0538: 00000000 09C93345 ; 14E: void GUIObject_SoftKey_AddErrorStr(void *gui,u16 actionID,int StrID);
053C: 00000000 E1C73345 ; 14F: void GUIObject_SoftKey_RemoveItem(void *gui,u16 actionID);
0540: 00000000 E5C83345 ; 150: void GUIObject_SoftKey_SetVisible(void *gui,u16 actionID,int visible);
0544: 00000000 55CB3345 ; 151: void GUIObject_SoftKey_SuppressDefaultAction(void *gui,u16 actionID);
0548: 00000000 25405544 ; 152: wchar_t* wstrcpy(wchar_t * dest, const wchar_t * source);
054C: 00000000 D1405544 ; 153: wchar_t* wstrncpy(wchar_t * dest, const wchar_t * source, int maxlen);
0550: 00000000 C93F5544 ; 154: wchar_t* wstrcat(wchar_t * wstr, const wchar_t * subwstr);
0554: 00000000 D920E244 ; 155: wchar_t *wstrncat(wchar_t *wstr, const wchar_t *subwstr , int maxlen);
0558: 00000000 FD3F5544 ; 156: int wstrcmp(const wchar_t *wstr1, const wchar_t *wstr2);
055C: 00000000 3520E244 ; 157: int wstrlen(const wchar_t * wstr);
0560: 00000000 FD32E244 ; 158: wchar_t * str2wstr(wchar_t * wstr, const char * str);
0564: 00000000 FD365544 ; 159: int strcmp(const char * str1, const char * str2);
0568: 00000000 59375544 ; 15A: int strlen(const char *str);
056C: 00000000 5521E244 ; 15B: char * wstr2strn (char * str , const wchar_t * wstr, int maxlen);
0570: 00000000 79283045 ; 15C: int int2strID (int num);
0574: 00000000 2D2B3045 ; 15D: int Str2ID(const void * wstr , int flag , int len);
0578: 00000000 C12F3045 ; 15E: void StrID2Str(int StrID,char * str,int maxlen);
057C: 00000000 B12E3045 ; 15F: void TextID2wstr(int StrID,wchar_t * str,int maxlen);
0580: 00000000 912D3045 ; 160: int TextGetLength(int StrID);
0584: 00000000 F52C3045 ; 161: void TextFree(int StrID);
0588: 00000000 0924DC44 ; 162: int AB_DEFAULTNBR_GET(int rec_num, void * mem_0x30, int * unk);
058C: 00000000 BD73DC44 ; 163: int AB_READSTRING(void * mem_0x30,int rec_num, int rec_item_num);
0590: 00000000 8974DC44 ; 164: int AB_READPHONENBR(void * mem_0x30,int rec_num, int rec_item_num);
0594: 00000000 4175DC44 ; 165: int AB_GETNBROFITEMS(int get_from,int unk_0);
0598: 00000000 9D213045 ; 166: int PNUM_len(void *pnum);
059C: 00000000 A9A71F45 ; 167: void PNUM2str(char *str,void *pnum,int len, int max_len);
05A0: 00000000 29FE3145 ; 168: DISP_OBJ * GUIObj_GetDISPObj (void * gui);
05A4: 00000000 D9B91745 ; 169: LIST *List_New(void);
05A8: 00000000 15BA1745 ; 16A: void List_Free(LIST *lst);
05AC: 00000000 89BB1745 ; 16B: void ListElement_AddtoTop(LIST *lst,void *newElement);
05B0: 00000000 817AE144 ; 16C: int Gif2ID(u16 IMAGEHANDLE,const wchar_t * path, const wchar_t * fname,wchar_t * ID);
05B4: 00000000 59B5E144 ; 16D: int REQUEST_IMAGEHANDLER_INTERNAL_GETHANDLE(const int * __zero,u16 * IMAGEHANDLE,char * unk);
05B8: 00000000 0D5BD244 ; 16E: void REQUEST_DATEANDTIME_GET(const int * __zero , DATETIME *dt);
05BC: 00000000 C1B63445 ; 16F: void IndicationDevice_Backlight_FadeToLevel(int unk_zero ,int bl_level);
05C0: 00000000 5D4AF544 ; 170: int GetFreeBytesOnHeap(void);
05C4: 00000000 D9AD2645 ; 171: void BookObj_Hide(BOOK *,int display_type);
05C8: 00000000 E9AD2645 ; 172: void BookObj_Show(BOOK *,int display_type);
05CC: 00000000 A1E02745 ; 173: void StartAPP (const wchar_t * appname); /
05D0: 00000000 619D2D45 ; 174: void ListMenu_SetOnMessages (GUI_LIST * , int (*proc)(GUI_MESSAGE *));
05D4: 00000000 B9BA2345 ; 175: char * manifest_GetParam(const char *buf, const char *param_name,int unk);
05D8: 00000000 8938E644 ; 176: int lseek(int file,int offset,int mode);
05DC: 00000000 7B251444 ;8177: int get_VBUFFER(void); //nullsub(void)
05E0: 00000000 7B251444 ; 178: void SetLampLevel (int level); //nullsub(void)
05E4: 00000000 15BB1745 ; 179: void * ListElement_Remove(LIST *lst,int index);
05E8: 00000000 95632C44 ; 17A: int GetCurrentPID(void);
05EC: 00000000 49BB1745 ; 17B: int ListElement_Prt2NumElement(LIST *lst,void *ptr);
05F0: 00000000 4CEA3044 ; 17C: union SIGNAL *alloc(OSBUFSIZE size,SIGSELECT signo);
05F4: 00000000 68EA3044 ; 17D: union SIGNAL *receive(const SIGSELECT *sigsel);
05F8: 00000000 58EA3044 ; 17E: void send(union SIGNAL **sig,PROCESS to);
05FC: 00000000 A8EA3044 ; 17F: PROCESS sender(union SIGNAL **sig);
0600: 00000000 78EA3044 ; 180: void free_buf(union SIGNAL **sig);
0604: 00000000 44EB3044 ; 181: PROCESS create_process(int proc_type,char *name,OSENTRYPOINT *entrypoint,OSADDRESS stack_size,OSPRIORITY priority,OSTIME timeslice,PROCESS pid_block,void *redir_table,OSVECTOR vector,OSUSER user);
0608: 00000000 64ED3044 ; 182: void start(PROCESS pid);
060C: 00000000 14EC3044 ; 183: int get_ptype(PROCESS pid);
0610: 00000000 60EB3044 ; 184: PROCESS current_process(void);
0614: 00000000 98EA3044 ; 185: void delay(OSTIME timeout);
0618: 00000000 60EC3044 ; 186: OSBOOLEAN hunt(const char *name, OSUSER user, PROCESS *name_, union SIGNAL **hunt_sig);
061C: 00000000 8CEC3044 ; 187: void kill_proc(PROCESS pid);
;0620: xxxxxxxx yyyyyyyy ; 188: OSBOOLEAN set_bp (PROCESS pid,OSADDRESS address,OSADDRESS attribute,union SIGNAL **trapsig);
;0624: xxxxxxxx yyyyyyyy ; 189: union SIGNAL *receive_w_tmo (OSTIME timeout, SIGSELECT *sel);
;0628: xxxxxxxx yyyyyyyy ; 18A: OSBOOLEAN clear_bp (PROCESS pid, OSADDRESS addr);
0680: 00000000 25375544 ; 1A0: char* strcpy(char * dest, char * source);
0684: 00000000 41D0FC44 ; 1A1: void *CreateMessage(int size,int ev,char *name);
0688: 00000000 95D0FC44 ; 1A2: void SendMessage(void **signal,int PID);
068C: 00000000 1DD1FC44 ; 1A3: void * WaitMessage(void *SIGSEL);
0690: 00000000 31D1FC44 ; 1A4: int FreeMessage(void **Mess);
0694: 00000000 C93BFA44 ; 1A5: void SendDispatchMessage(int id, int unk_zero, int size,void *mess);
0698: 00000000 E9802645 ; 1A6: char * UIEventName(int event);
069C: 00000000 40921820 ;81A7: int * MissedEvents(void);
06A0: 00000000 8D952645 ; 1A8: void UI_Event(int event);
06A4: 00000000 9D952645 ; 1A9: void UI_Event_wData(int event,void *message,void (*mfree)(void*));
06A8: 00000000 E5952645 ; 1AA: void UI_Event_toBookID(int event,int BookID);
06AC: 00000000 F9952645 ; 1AB: void UI_Event_toBookIDwData(int event,int BookID,void *message,void (*mfree)(void*));
06B0: 00000000 A9BD1745 ; 1AC: int ListElement_Find(LIST *lst,void *element, int (*cmp_proc)(void *,void *));
06B4: 00000000 ADBC1745 ; 1AD: void * ListElement_GetByIndex(LIST * , int index);
06B8: 00000000 25415544 ; 1AE: wchar_t* wstrrchr(const wchar_t* wstr, wchar_t wchar);
06BC: 00000000 F5A82645 ; 1AF: void BookObj_CallSubroutine(BOOK * , BOOK_SUBROUTINE *subr);
06C0: 00000000 91BB1745 ; 1B0: void ListElement_Add(LIST *lst,void *newElement);
06C4: 00000000 E9AF2344 ; 1B1: void debug_printf(const char * fmt,...);
06C8: 00000000 4DC0FD44 ; 1B2: int PlayFile(const wchar_t * path, const wchar_t * fname);
06D0: 00000000 ED142A45 ; 1B4: int REQUEST_PROFILE_GETACTIVEPROFILE(const int *__zero , int *level);
06D4: 00000000 BD292945 ; 1B5: int Profile_SetActive(int NUMprof,int set_in_gdfs_flag);
06DC: 00000000 25E13445 ; 1B7: int isKeylocked(void);
06E0: 00000000 9175F244 ;81B8: IS_NEEDED_BOOK isMediaPlayerVideoBook(void);
06EC: 00000000 91D7FA44 ; 1BB: void Vibra(int t1, int t2, int t3);
06F0: 00000000 ED5CD244 ; 1BC: int REQUEST_DATEFORMAT_GET(const int *SYNC, char *DateFormat);
06F4: 00000000 815DD244 ; 1BD: int REQUEST_TIMEFORMAT_GET(const int *SYNC, char *TimeFormat);
06F8: 00000000 956A2645 ; 1BE: int Date2ID(DATE *, int TimeFormat,int);
06FC: 00000000 BD692645 ; 1BF: int Time2ID(TIME *, char TimeFormat,int);
0700: 00000000 1D9A2D45 ; 1C0: GUI_LIST * CreateListObject(BOOK * , void * unk);
0704: 00000000 4D9C2D45 ; 1C1: void SetNumOfMenuItem(void * , int item_count);
0708: 00000000 B8381820 ;81C2: LIST ** ROOT_APP(void);
070C: 00000000 81C83345 ; 1C3: void SoftKey_AddHelpStr(void *gui,int msg,int StrID);
0710: 00000000 75C93345 ; 1C4: void SoftKey_SetItemAsSubItem(void *gui,int item,int subitem);
0714: 00000000 7D0A2845 ; 1C5: int REQUEST_SYSTEM_SHUTDOWN(void);
0718: 00000000 8D0A2845 ; 1C6: int REQUEST_SYSTEM_RESTART(void);
071C: 00000000 B9C83345 ; 1C7: void SoftKeys_SetText(void *gui,int msg,int StrID,int StrID1);
0720: 00000000 AD5A3445 ; 1C8: int isRightNowBook(BOOK *);
0724: 00000000 A5D42745 ; 1C9: int isVolumeControllerBook(BOOK *);
0728: 00000000 BD0D3245 ; 1CA: GUI_TABMENUBAR * CreateTabMenuBar(BOOK *);
072C: 00000000 910E3245 ; 1CB: void TabMenuBar_SetTabCount(GUI_TABMENUBAR * , int count);
0730: 00000000 450F3245 ; 1CC: void TabMenuBar_AssignGuiObj(GUI_TABMENUBAR * , int tab , GUI *);
0734: 00000000 810F3245 ; 1CD: void TabMenuBar_SetTabIcon(GUI_TABMENUBAR *,int tab, wchar_t icon , int for_state);
0738: 00000000 B9FD3145 ; 1CE: GUI *GUI_Free(GUI*);
073C: 00000000 35013245 ; 1CF: void InputFeedback_SetIcon(GUI *gui, wchar_t icon);
0740: 00000000 85262B45 ; 1D0: int StringInput_GetStringAndLen (GUI*,wchar_t**,u16*);
0744: 00000000 C4061820 ;81D1: PAudioControl* GetAudioControlPtr();
0748: 00000000 C90DC344 ; 1D2: int AudioControl_Vibrate(PAudioControl pIAudioControl, int vibratime, int pausetime, int totaltime);
074C: 00000000 C14AE644 ; 1D3: int GetVolumeSize(char * volume, VOLUMESIZE *);
0750: 00000000 99B52D45 ; 1D4: GUI_NOFMANY * CreateNOfMany(BOOK *);
0754: 00000000 D9B72D45 ; 1D5: void NOfMany_SetTexts(GUI_NOFMANY * , int * StrIDtable, int items_count);
0758: 00000000 5DB72D45 ; 1D6: void NOfMany_SetChecked(GUI_NOFMANY * , u16 * checked_table, int items_count);
075C: 00000000 25B72D45 ; 1D7: void NOfMany_SetCursor(GUI_NOFMANY * , int item);
0760: 00000000 81B72D45 ; 1D8: int NOfMany_GetCheckedCount(GUI_NOFMANY *);
0764: 00000000 71B72D45 ; 1D9: int NOfMany_GetChecked(GUI_NOFMANY * , u16 * buffer );
0768: 00000000 D1B72D45 ; 1DA: void NOfMany_SetonMessage(GUI_NOFMANY * , void * proc );
077C: 00000000 9DC1FD44 ; 1DF: PAudioControl AudioControl_Init();
0780: 00000000 05BD2D45 ; 1E0: void OneOfMany_SetFocused(GUI_ONEOFMANY * , int item);
0784: 00000000 69BD2D45 ; 1E1: void OneOfMany_SetonMessage(GUI_ONEOFMANY * , int (*proc)(GUI_MESSAGE *));
0788: 00000000 1D902745 ; 1E2: GUI_FEEDBACK * CreateFeedBack (int,...);
078C: 00000000 E9902745 ; 1E3: void FeedBack_SetText(GUI_FEEDBACK*,int);
0790: 00000000 11BC9C44 ; 1E4: int GetBattaryState(const int * , BATT *);
0794: 00000000 A5D83145 ; 1E5: void * get_DisplayGC (void);
0798: 00000000 39633145 ; 1E6: void GetGuiRect(void*,RECT*);
079C: 00000000 7DDF3145 ; 1E7: void get_GC_RECT(void*,RECT*);
07A0: 00000000 81E23145 ; 1E8: int get_GC_xx(void * GC);
07A4: 00000000 75E23145 ; 1E9: void *set_GC_xx(void * GC, int);
07A8: 00000000 2DDF3145 ; 1EA: void GC_validate_RECT(void * GC , RECT*);
07AC: 00000000 65AE2645 ; 1EB: void addGui2book(BOOK*,GUI*);
07B0: 00000000 698B3145 ; 1EC: void DrawRect(int x1, int y1,int x2 ,int y2,int pen_color,int brush_color);
07B4: 00000000 698E3145 ; 1ED: void DrawString(int StrID,int align,int x1,int y1,int x2,int y2,int unk,int unk1,int pen_color ,int brush_color);
07B8: 00000000 41B32645 ; 1EE: void addGui2XGuiList (void* xguilist , GUI*);
07BC: 00000000 A5613145 ; 1EF: void InvalidateRect(DISP_OBJ *,RECT*);
07C0: 00000000 DDFC3145 ; 1F0: int CreateObject(GUI*,void (*)(DISP_DESC *),void (*)(DISP_DESC *),BOOK *,void(*)(),int,int size_obj);
07C4: 00000000 C5983145 ; 1F1: int SetFont(int);
07C8: 00000000 78861820 ;81F2: DISP_OBJ ** StatusRow_p(void);
07CC: 00000000 C5922645 ; 1F3: int root_list_get_session_count(void);
07D0: 00000000 D1922645 ; 1F4: UI_APP_SESSION *root_list_get_session(int num_session);
07D4: 00000000 C98B2645 ; 1F5: BOOK *SESSION_GetTopBook(UI_APP_SESSION *);
07D8: 00000000 79942745 ; 1F6: int MainInput_getVisible(GUI *);
07DC: 00000000 85942745 ; 1F7: int MainInput_strlen(GUI *);
07E0: 00000000 9D942745 ; 1F8: char * MainInput_getPNUM(GUI *);
07E4: 00000000 A9942745 ; 1F9: int MainInput_isPlus(GUI *);
07E8: 00000000 E1B12645 ; 1FA: int BOOK_GetBookID(BOOK * );
07EC: 00000000 9D405544 ; 1FB: int wstrncmp(const wchar_t*,const wchar_t*,int);
07F0: 00000000 29733145 ; 1FC: int DISP_OBJ_GetAbsoluteXPos(DISP_OBJ *);
07F4: 00000000 5D733145 ; 1FD: int DISP_OBJ_GetAbsoluteYPos(DISP_OBJ *);
07F8: 00000000 55663145 ; 1FE: WINDOW * DISP_OBJ_GetWindow(DISP_OBJ *);
07FC: 00000000 CDF33345 ; 1FF: int GetThemeColor(int , int);
0800: 00000000 C50D2A45 ; 200: int REQUEST_SETTING_SILENCE_SET(const int * __zero,u16 profile,u16 value);
0804: 00000000 6D0D2A45 ; 201: int REQUEST_SETTING_SILENCE_GET(const int * __zero,u16 profile, char * silence_mode);
0808: 00000000 29A6DB44 ; 202: void VCALL_Init (void* vc);
080C: 00000000 21A7DB44 ; 203: void VCALL_SetName (void * vc , wchar_t * name ,unsigned short name_len);
0810: 00000000 81A7DB44 ; 204: void VCALL_SetNameIcon (void * vc , wchar_t icon);
0814: 00000000 41A7DB44 ; 205: void VCALL_SetNumber (void * vc , wchar_t * number , unsigned short num_len);
0818: 00000000 65A7DB44 ; 206: void VCALL_SetHZ1 (void * vc, int , u16 );
081C: 00000000 71A7DB44 ; 207: void VCALL_SetHZ2 (void * vc , u16 );
0820: 00000000 01A2DB44 ; 208: void MakeVoiceCall (int SessioID , void * vc ,int flag);
0824: 00000000 7B251444 ; 209: int isDirectory (wchar_t * path ,wchar_t * filename , int * error ); //nullsub(void)
0828: 00000000 9927E644 ; 20A: void FileDelete (wchar_t * path ,wchar_t * filename , int * error );
082C: 00000000 D5FF3145 ; 20B: void SetFocus (GUI * , int);
0830: 00000000 85D9FF44 ; 20C: int CreateSMSCont (int, void*);
0834: 00000000 25E0FF44 ; 20D: int FreeSMSCont (void*);
0838: 00000000 5DDBFF44 ; 20E: int PrepareSMSCont (void*,wchar_t*,wchar_t*,int,int);
083C: 00000000 85DFFF44 ; 20F: int CteateNewMessage (int,void*,int);
0840: 00000000 905DA045 ;8210: void * get_APP_DESC_TABLE(void);
0844: 00000000 D9CF3145 ; 211: C_INTERFACE *Window_GetComponentInterface(WINDOW*);
0848: 00000000 1977DC44 ; 212: int AB_POSITIONNBR_GET(void * ab_name,char * ,u16 * ,void * ab_num);
084C: 00000000 4176DC44 ; 213: int AB_NAME_ITEM2StrID(void * ab_name);
0850: 00000000 8976DC44 ; 214: int AB_NUM_ITEM2StrID(void * ab_num_item);
0854: 00000000 0B261444 ; 215: int GetABRecNum(AB_GET_STRUCT *); //nullsub(void)
0858: 00000000 18C49B45 ;8216: AB_ITEM_DESC * get_AB_ITEMS_DESC();
085C: 00000000 09F1A644 ; 217: GUI * SBY_GetMainInput(BOOK * StandBy)
0860: 00000000 05F1A644 ; 218: GUI * SBY_GetStatusIndication(BOOK * StandBy)
0864: 00000000 1D35D444 ; 219: int REQUEST_PHONEBOOK_ACCESSSTATUS_TOTAL_GET(const int * __zero, int *); /
0868: 00000000 30EA0920 ;821A: int * PID_MMI(void);
0874: 00000000 855A3145 ; 21D: DISP_OBJ* DISPBASE_GetFocused(int display);
0878: 00000000 39603145 ; 21E: char DISP_OBJ_getVisible(DISP_OBJ*);
087C: 00000000 E14E8F44 ; 21F: DISP_DESC* DISP_OBJ_GetDESC (DISP_OBJ*);
0880: 00000000 A5203145 ; 220: void DISP_DESC_SetName (DISP_DESC* , const char * name);
0884: 00000000 E9703145 ; 221: char* DISP_OBJ_GetName (DISP_OBJ *);
0888: 00000000 A9203145 ; 222: void DISP_DESC_SetSize (DISP_DESC* , u16 size);
;088C: xxxxxxxx yyyyyyyy ; 223: u16 DISP_DESC_GetSize (DISP_OBJ *);
0890: 00000000 AD203145 ; 224: void DISP_DESC_SetOnCreate (DISP_DESC* , DISP_OBJ_ONCREATE_METHOD);
0894: 00000000 35213145 ; 225: DISP_OBJ_ONCREATE_METHOD DISP_OBJ_GetOnCreate (DISP_OBJ *);
0898: 00000000 B1203145 ; 226: void DISP_DESC_SetOnClose (DISP_DESC* , DISP_OBJ_ONCLOSE_METHOD);
089C: 00000000 51213145 ; 227: DISP_OBJ_ONCLOSE_METHOD DISP_OBJ_GetOnClose (DISP_OBJ *);
08A0: 00000000 B5203145 ; 228: void DISP_DESC_SetOnRedraw (DISP_DESC* , DISP_OBJ_ONREDRAW_METHOD);
08A4: 00000000 6D213145 ; 229: DISP_OBJ_ONREDRAW_METHOD DISP_OBJ_GetOnRedraw (DISP_OBJ *);
08A8: 00000000 BD203145 ; 22A: void DISP_DESC_SetOnKey (DISP_DESC* , DISP_OBJ_ONKEY_METHOD);
08AC: 00000000 A5213145 ; 22B: DISP_OBJ_ONKEY_METHOD DISP_OBJ_GetOnKey (DISP_OBJ *);
08B0: 00000000 B9203145 ; 22C: void DISP_DESC_SetonRefresh (DISP_DESC* ,DISP_OBJ_METHOD);
08B4: 00000000 89213145 ; 22D: DISP_OBJ_METHOD DISP_OBJ_GetonRefresh (DISP_OBJ *);
;08B8: xxxxxxxx yyyyyyyy ; 22E: void DISP_DESC_SetMethod04 (DISP_DESC* ,void (*)(void*));
;08BC: xxxxxxxx yyyyyyyy ; 22F: DISP_OBJ_METHOD DISP_OBJ_GetMethod04 (DISP_OBJ *);
;08C0: xxxxxxxx yyyyyyyy ; 230: void DISP_DESC_SetMethod05 (DISP_DESC* ,void (*)(void*));
;08C4: xxxxxxxx yyyyyyyy ; 231: DISP_OBJ_METHOD DISP_OBJ_GetMethod05 (DISP_OBJ *);
08C8: 00000000 C1203145 ; 232: void DISP_DESC_SetMethod06 (DISP_DESC* ,DISP_OBJ_METHOD);
08CC: 00000000 C1213145 ; 233: DISP_OBJ_METHOD DISP_OBJ_GetMethod06 (DISP_OBJ *);
;08D0: xxxxxxxx yyyyyyyy ; 234: void DISP_DESC_SetMethod07 (DISP_DESC* ,void (*)(void*));
;08D4: xxxxxxxx yyyyyyyy ; 235: DISP_OBJ_METHOD DISP_OBJ_GetMethod07 (DISP_OBJ *);
08D8: 00000000 C9203145 ; 236: void DISP_DESC_SetMethod08 (DISP_DESC* ,DISP_OBJ_METHOD);
08DC: 00000000 F9213145 ; 237: DISP_OBJ_METHOD DISP_OBJ_GetMethod08 (DISP_OBJ *);
;08E0: xxxxxxxx yyyyyyyy ; 238: void DISP_DESC_SetMethod09 (DISP_DESC* ,void (*)(void*));
;08E4: xxxxxxxx yyyyyyyy ; 239: DISP_OBJ_METHOD DISP_OBJ_GetMethod09 (DISP_OBJ *);
;08E8: xxxxxxxx yyyyyyyy ; 23A: void DISP_DESC_SetMethod0A (DISP_DESC* ,void (*)(void*));
;08EC: xxxxxxxx yyyyyyyy ; 23B: DISP_OBJ_METHOD DISP_OBJ_GetMethod0A (DISP_OBJ *);
;08F0: xxxxxxxx yyyyyyyy ; 23C: void DISP_DESC_SetMethod0B (DISP_DESC* ,void (*)(void*));
;08F4: xxxxxxxx yyyyyyyy ; 23D: DISP_OBJ_METHOD DISP_OBJ_GetMethod0B (DISP_OBJ *);
;08F8: xxxxxxxx yyyyyyyy ; 23E: void DISP_DESC_SetMethod0C (DISP_DESC* ,void (*)(void*));
;08FC: xxxxxxxx yyyyyyyy ; 23F: DISP_OBJ_METHOD DISP_OBJ_GetMethod0C (DISP_OBJ *);
0900: 00000000 CDDEE344 ; 240: void JavaSession_Manager (int cmd);
0904: 00000000 0B261444 ; 241: int JavaSession_GetName(void); //nullsub(void)
0908: 00000000 5D2C3045 ; 242: int TextCopyId(int);
090C: 00000000 81B12645 ; 243: UI_APP_SESSION *Book_GetSession(BOOK*);
0910: 00000000 A9A72D45 ; 244: void List2lineSetAsSubitem (void* msg,int unk,int n_sub_items);
0914: 00000000 21A82D45 ; 245: void List2lineSubitemAddText(void* msg,int StrID);
0918: 00000000 15A82D45 ; 246: int GUIonMessage_GetCreatedSubItemParrentIndex(void * msg);
091C: 00000000 75C71D45 ; 247: void GoMusic(void);
0920: 00000000 65D8FA44 ; 248: void Vibra_Off (int t1);
0928: 00000000 51C0FD44 ; 24A: int PlayFileV(const wchar_t * path,const wchar_t * fname, int vol);
092C: 00000000 65CCFA44 ; 24B: int GetSilent(void);
0930: 00000000 9DA4FA44 ; 24C: int GetVibrator(int ignorevibrator,int ignoresilent);
0934: 00000000 DDDAFA44 ; 24D: int GetAudioSettings(int what, char* retvalue);
0938: 00000000 C9A22344 ; 24E: int GetChipID(void);
0948: 00000000 09A82D45 ; 252: int List2LineGetCurrentIndex(void * msg);
094C: 00000000 FDA72D45 ; 253: int GUIonMessage_GetCurrentItemIndex(void * msg);
0950: 00000000 B1FFE544 ; 254: void DestroyDirHandle(DIR_HANDLE *handle);
0954: 00000000 80879D45 ;8255: DB_EXT *LastExtDB(void);
0958: 00000000 755FE944 ; 256: void GetOtherExtMethods(FILESUBROUTINE **);
095C: 00000000 315D2745 ; 257: void MessageBox(int HeaderStrID,int MessageStrID,wchar_t IconID, int style /*1 or 2*/,int time,BOOK * unk);
0960: 00000000 C52F3345 ; 258: int Display_GetHeight(int Display);
0964: 00000000 D12F3345 ; 259: int Display_GetWidth(int Display);
0968: 00000000 FDBFFD44 ; 25A: void PlaySystemSound (int SndNumber);
0974: 00000000 850E3245 ; 25D: int TabMenuBar_GetFocusedTabIndex(GUI_TABMENUBAR * );
0978: 00000000 750E3245 ; 25E: void TabMenuBar_SetTabFocused(GUI_TABMENUBAR * , int tab_num);
097C: 00000000 89E13145 ; 25F: int GC_GetPenColor (void* GC);
0980: 00000000 4DE13145 ; 260: void GC_SetPenColor(void* GC , int pen_color);
0984: 00000000 8DDD3145 ; 261: void GC_SetPixel (void* GC,int x1,int y1,int color);
0988: 00000000 05E93145 ; 262: void GC_DrawLine(void* GC,int x1, int y1, int x2, int y2);
098C: 00000000 91EA3145 ; 263: void GC_DrawFRect (void* GC,int color,int x1,int y1,int x2 ,int y2);
0990: 00000000 59DE3145 ; 264: int GC_DrawBitmap(void *GC, int x1, int y1, int x2, int y2, int * bmp);
0994: 00000000 D988AC44 ; 265: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
0998: 00000000 258AAC44 ; 266: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
099C: 00000000 7D70AC44 ; 267: png_infop png_create_info_struct(png_structp png_ptr);
09A0: 00000000 B170AC44 ; 268: void png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr);
09A4: 00000000 B188AC44 ; 269: void png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr, png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn, png_progressive_end_ptr end_fn);
09A8: 00000000 7178AC44 ; 26A: void png_process_data(png_structp png_ptr, png_infop info_ptr, png_bytep buffer, png_size_t buffer_size);
09AC: 00000000 F989AC44 ; 26B: void png_read_update_info(png_structp png_ptr, png_infop info_ptr);
09B0: 00000000 D588AC44 ; 26C: png_voidp png_get_progressive_ptr(png_structp png_ptr);
09B4: 00000000 3975AC44 ; 26D: png_uint_32 png_get_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
09B8: 00000000 C58BAC44 ; 26E: void png_set_strip_16(png_structp png_ptr);
09BC: 00000000 D18BAC44 ; 26F: void png_set_gray_1_2_4_to_8(png_structp png_ptr);
09C0: 00000000 F58BAC44 ; 270: void png_set_gray_to_rgb(png_structp png_ptr);
09C4: 00000000 0D75AC44 ; 271: png_uint_32 png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag);
09C8: 00000000 E98BAC44 ; 272: void png_set_tRNS_to_alpha(png_structp png_ptr);
09CC: 00000000 2DB9AC44 ; 273: void png_set_filler(png_structp png_ptr, png_uint_32 filler, int flags);
09D0: 00000000 D18BAC44 ; 274: void png_set_palette_to_rgb(png_structp png_ptr);
09D4: 00000000 2575AC44 ; 275: png_uint_32 png_get_rowbytes(png_structp png_ptr, png_infop info_ptr);
09D8: 00000000 9188AC44 ; 276: void png_progressive_combine_row(png_structp png_ptr, png_bytep old_row, png_bytep new_row);
09DC: 00000000 756FAC44 ; 277: int png_sig_cmp(png_bytep sig, png_size_t start, png_size_t num_to_check);
09E0: 00000000 E09E2D44 ; 278: int setjmp(jmp_buf jmpbuf);
09E4: 00000000 049F2D44 ; 279: void longjmp(jmp_buf, int);
09E8: 00000000 91C5AC44 ; 27A: int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size);
09EC: 00000000 31C7AC44 ; 27B: int inflate (z_streamp strm, int flush);
09F0: 00000000 91D9AC44 ; 27C: int inflateEnd (z_streamp strm);
09F4: 00000000 0C310020 ; 27D: int memcmp (const void *m1,const void *m2,int n);
09F8: 00000000 95375544 ; 27E: int strncmp(const char *s1, const char *s2, int len);
09FC: 00000000 C9375544 ; 27F: char *strncpy (char *dest,const char *source,int maxlen);
0A00: 00000000 C5365544 ; 280: char *strcat(char *dest, const char *src);
0A04: 00000000 89043245 ; 281: void GuiObject_SetTitleType(GUI *gui, int type);
0A08: 00000000 B5A72D45 ; 282: void GUIonMessage_SetItemDisabled (void * msg, int Disabled);
0A0C: 00000000 C1B5E144 ; 283: int REQUEST_IMAGEHANDLER_INTERNAL_REGISTER(const int * __zero,u16 ImageHandle,wchar_t *path,wchar_t *fname,int unk, wchar_t * ImageID ,char * error);
0A10: 00000000 71B6E144 ; 284: int REQUEST_IMAGEHANDLER_INTERNAL_UNREGISTER (const int * __zero,u16 ImageHandle,u16* ,u16* ,wchar_t ImageID, int unk_1,char * error);
0A14: 00000000 948C2F20 ;8285: SURFACE ** get_Surfaces(void);
0A18: 00000000 C131C144 ; 286: int iconidname2id(const wchar_t* idname,int maxnamelen,int *id);
0A1C: 00000000 65DAD144 ; 287: int textidname2id(const wchar_t* idname,int maxnamelen,int* id);
0A20: 00000000 F19D2D45 ; 288: void ListMenu_SetNoItemText(GUI_LIST *, int str);
0A28: 00000000 85FF0C45 ;828A: IS_NEEDED_BOOK isFmRadioBook(void);
0A2C: 00000000 3DEBF044 ;828B: IS_NEEDED_BOOK isAudioPlayerBook(void);
0A30: 00000000 CD2CF144 ; 28C: void PlayerControl(BOOK *AudioPlayerBook, int);
0A34: 00000000 ADE10C45 ; 28D: void SwitchRadioStationFromList(BOOK *FmRadioBook, int);
0A38: 00000000 2D993445 ; 28E: void Shortcut_Run (wchar_t * shortcut_name);
0A3C: 00000000 FDF1E544 ; 28F: int mkdir(const wchar_t* path);
0A40: 00000000 E9F8E544 ; 290: int rmdir(const wchar_t* path, int zero);
0A44: 00000000 C926E644 ; 291: int chmod(const wchar_t* path, const wchar_t* fname, int amode);
0A48: 00000000 B92CE644 ; 292: int rename(const wchar_t* oldpath, const wchar_t* oldfname, const wchar_t* newpath, const wchar_t* newfname, int zero);
0A4C: 00000000 5D9E3145 ; 293: int GetImageWidth(wchar_t ImageID);
0A50: 00000000 719E3145 ; 294: int GetImageHeight(wchar_t ImageID);
0A54: 00000000 99B7D844 ; 295: void * CallID_GetCallStatusDesc(int CallID);
0A58: 00000000 41AED844 ; 296: wchar_t * CallStatusDesc_GetName(void * CallStatusDesc);
0A5C: 00000000 EDBD1745 ; 297: void List_FreeElements(LIST *,int (*cmp_proc)(void * elem_from_list),void (*freefunc)(void * elem_from_list));
0A60: 00000000 61385544 ; 298: char * strstr(const char * str1,const char * str2);
0A64: 00000000 09103745 ; 299: int GPRS_GetLastSessionInfo(int,GPRS_SESSION_INFO *);
0A68: 00000000 1534E244 ; 29A: int wstrcmpni(const wchar_t * wstr1,const wchar_t * wstr2,int len);
0A6C: 00000000 89722645 ; 29B: int wtoi(const wchar_t * wstr,int len,int * dest);
0A70: 00000000 F9DBFC44 ; 29C: void DATE_GetWeekDay(DATE *,char * dest);
0A74: 00000000 DD0FD544 ; 29D: void Cale_GetSettings(int setID,void *);
0A78: 00000000 65415544 ; 29E: wchar_t * wstrwstr(const wchar_t * wstr1,const wchar_t * wstr2);
0A7C: 00000000 5934E244 ; 29F: int wstrcmpi(const wchar_t *ws1, const wchar_t *ws2);
0A80: 00000000 E53F5544 ; 2A0: wchar_t * wstrchr(const wchar_t * source,wchar_t chr);
0A84: 00000000 A1CB3345 ; 2A1: void GUIObject_HideSoftkeys(void *gui);
0A88: 00000000 ADCB3345 ; 2A2: void GUIObject_ShowSoftkeys(void *gui);
0A8C: 00000000 39B33345 ; 2A3: DISP_OBJ* DispObject_SoftKeys_Get(void);
0A90: 00000000 11EF3045 ; 2A4: int StandbyBackground_SetImage(int type,int,int,const wchar_t* path,const wchar_t* fname,int);
0A94: 00000000 3D093345 ; 2A5: GUI *CreateYesNoQuestionVA(int zero, ...);
0A98: 00000000 01A02D45 ; 2A6: void ListMenu_SetSecondLineText(GUI_LIST *,int elem_num,int StrID);
0A9C: 00000000 2595E844 ; 2A7: void _REQUEST_OAF_START_APPLICATION(const int * __one,int __zero,MIDP_DESC *,int ___zero);
0AA0: 00000000 A948E644 ; 2A8: __thumb int FSX_isNameInvalid(wchar_t * name);
0AA4: 00000000 9DF8E944 ; 2A9: __thumb void DataBrowserDesc_SetFoldersNumber(void * DataBrowserDesc,int state);
0AA8: 00000000 6DF8E944 ; 2AA: __thumb void DataBrowserDesc_SetActions(void * DataBrowserDesc,char * actions);
0AAC: 00000000 DDF7E944 ; 2AB: __thumb void DataBrowserDesc_SetSelectAction(void * DataBrowserDesc,int state);
0AB0: 00000000 E5F7E944 ; 2AC: __thumb void DataBrowserDesc_SetSelectActionOnFolders(void * DataBrowserDesc,int state);
0AB4: 00000000 B9F7E944 ; 2AD: __thumb void DataBrowserDesc_SetBookID(void * DataBrowserDesc,int BookID);
0AB8: 00000000 61F7E944 ; 2AE: __thumb void DataBrowserDesc_SetItemFilter(void * DataBrowserDesc,int (*proc)(const wchar_t * ExtList,const wchar_t * ItemPath,const wchar_t * ItemName));
0ABC: 00000000 D5F8E944 ; 2AF: __thumb void DataBrowserDesc_SetOption(void * DataBrowserDesc,char * option);
0AC0: 00000000 69F9E944 ; 2B0: __thumb void DataBrowserDesc_SetOpenEmptyFolder(void * DataBrowserDesc,int state);
0AC4: 00000000 69F7E944 ; 2B1: __thumb void DataBrowserDesc_SetFileExtList(void * DataBrowserDesc,const wchar_t * ExtList);
0AC8: 00000000 619CEA44 ; 2B2: __thumb void FSX_RemoveIllegalSymbolsName(FILEITEM *);
0ACC: 00000000 C994EA44 ; 2B3: __thumb FILEITEM * FILEITEM_Create(void);
0AD0: 00000000 B995EA44 ; 2B4: __thumb void FILEITEM_Destroy(FILEITEM *);
0AD4: 00000000 6DED3245 ; 2B5: __thumb GUI *CreateDateInputVA(int zero, ...);
0AD8: 00000000 5D053345 ; 2B6: __thumb GUI *CreateTimeInputVA(int zero, ...);
0ADC: 00000000 D1262B45 ; 2B7: void StringInput_SetCursorPosition(GUI *,u16 curs_pos,char unk);
0AE0: 00000000 81A92645 ; 2B8: void BookObj_CallPage(BOOK * book, const PAGE_DESC * page);
0AE4: 00000000 71EF3245 ; 2B9: unsigned int DateInput_GetDateInt(void *dateinp_msg);
0AE8: 00000000 A5073345 ; 2BA: unsigned int TimeInput_GetTimeInt(void *timeinp_msg);
0AEC: 00000000 E0891820 ;82BB: FONT_DESC *GetFontDesc(void);
0AF0: 00000000 748C1820 ;82BC: int *GetFontCount();
0AF4: 00000000 69E23145 ; 2BD: int GC_GetBrushColor(void* GC);
0AF8: 00000000 29E23145 ; 2BE: void GC_SetBrushColor(void* GC , int brush_color);
0AFC: 00000000 D9EA3145 ; 2BF: void GC_DrawRoundRect(void* GC ,RECT *,int arcWidth,int arcHeight,int border_flag,int fill_flag);
0B00: 00000000 4D133445 ; 2C0: BOOK * MenuBook_Desktop(int mode,int BookID);
0B04: 00000000 DD143445 ; 2C1: wchar_t * MenuBook_Desktop_GetSelectedItemID(BOOK * MenuBook_Desktop);
0B08: 00000000 097A3345 ; 2C2: void BookObj_Softkey_SetAction(BOOK *,int actionID,void (*proc)(BOOK *,void*));
0B0C: 00000000 417A3345 ; 2C3: void BookObj_Softkey_SetText(BOOK *,int actionID,int StrID);
0B10: 00000000 91912645 ; 2C4: BOOK * FindBookByID(int BookID);
0B14: 00000000 DDFD3245 ; 2C5: GUI_FEEDBACK *TextFeedbackWindow(BOOK *bk, int zero);
0B18: 00000000 15023345 ; 2C6: void Feedback_SetKeyHook(GUI_FEEDBACK *, void (*hook)(BOOK *bk, int key, int unk, int unk2));
0B1C: 00000000 B5013345 ; 2C7: void Feedback_SetOnClose(GUI_FEEDBACK *, void (*OnClose)(BOOK *bk));
0B20: 00000000 D5003345 ; 2C8: void Feedback_SetTimeout(GUI_FEEDBACK *, int time_ms);
0B24: 00000000 79023345 ; 2C9: void Feedback_SetTextExtended(GUI_FEEDBACK *, STRID text, int where);
0B28: 00000000 D90F3245 ; 2CA: void TabMenuBar_SetOnTabSwitch(GUI_TABMENUBAR *,void (*proc)(BOOK *,int act_tab));
0B2C: 00000000 4981FF44 ; 2CB: STRID KeyCode2Name(int key_code);
0B30: 00000000 AD6CE144 ; 2CC: int ImageID_Get(const wchar_t * fpath,const wchar_t * fname,wchar_t * imageID);
0B34: 00000000 A16CE144 ; 2CD: void ImageID_Free(wchar_t imageID);
0B38: 00000000 159EE844 ; 2CE: SUB_EXECUTE *DataBrowser_CreateSubExecute(int BookID, FILEITEM *f);
0B3C: 00000000 35A8E844 ; 2CF: int DataBrowser_ExecuteSubroutine(SUB_EXECUTE *sub, int action, u16 *unk);
0B40: 00000000 B596EA44 ; 2D0: int FILEITEM_SetFname(FILEITEM *f, const wchar_t *fname);
0B44: 00000000 C59AEA44 ; 2D1: int FILEITEM_SetPath(FILEITEM *f, const wchar_t *fpath);
0B48: 00000000 BD9AEA44 ; 2D2: wchar_t *FILEITEM_GetFname(FILEITEM *f);
0B4C: 00000000 719BEA44 ; 2D3: wchar_t *FILEITEM_GetPath(FILEITEM *f);
0B50: 00000000 3D97EA44 ; 2D4: int FILEITEM_SetFnameAndContentType(FILEITEM *f, const wchar_t *fname);
0B54: 00000000 499BEA44 ; 2D5: int FILEITEM_SetPathAndContentType(FILEITEM *f, const wchar_t *fpath);
0B58: 00000000 617DE744 ; 2D6: int JavaDialog_Open(int unk1,char * unk2,void ** JavaDesc);
0B5C: 00000000 15B8E744 ; 2D7: void JavaDialog_Close(int unk1);
0B60: 00000000 D9B9E744 ; 2D8: int JavaAppDesc_Get(int unk1,void ** JavaDesc);
0B64: 00000000 7917E744 ; 2D9: int JavaAppDesc_GetFirstApp(void * JavaDesc);
0B68: 00000000 8117E744 ; 2DA: int JavaAppDesc_GetNextApp(void * JavaDesc);
0B6C: 00000000 9913E744 ; 2DB: int JavaAppDesc_GetJavaAppInfo(void * JavaDesc,int ID,wchar_t ** wstr);
;0B70: xxxxxxxx yyyyyyyy ; 2DC: void OrangeLED_Control(int _free_val, int or_LED_ID, int level, int fade_time);
0B74: 00000000 695C3145 ; 2DD: void DispObject_SetRefreshTimer(DISP_OBJ *,int time);
0B78: 00000000 E95C3145 ; 2DE: void DispObject_KillRefreshTimer(DISP_OBJ *);
0B7C: 00000000 C1C4E944 ; 2DF: int isDataBrowserBook(BOOK *);
0B80: 00000000 717BE944 ; 2E0: SUB_EXECUTE * BrowserItem_Get_SUB_EXECUTE(BOOK * BrowserItemBook);
0B84: 00000000 65853445 ; 2E1: int Shortcut_Get_MenuItemName(wchar_t *);
0B88: 00000000 F5153445 ; 2E2: int Shortcut_Get_MenuItemIconID(wchar_t *);
0B8C: 00000000 25922645 ; 2E3: BOOK * FindBookEx(int (*cmp_proc)(BOOK* book_from_list ,int * param), int * param);
0B90: 00000000 0995EA44 ; 2E4: FILEITEM *FILEITEM_CreateCopy (FILEITEM *);
0B94: 00000000 A9A22645 ; 2E5: ACTION *ActionCreate(int (*PROC)(void *msg,BOOK*), int BookID, u16 event, APP_DESC *app_desc, PAGE_DESC *pag_desc);
0B98: 00000000 D1B02645 ; 2E6: int BOOK_GetSessionID(BOOK *);
0B9C: 00000000 B1952645 ; 2E7: void UI_Event_toSID(int event, int sess_id);
0BA0: 00000000 B92D2344 ; 2E8: char *GetIMSI(void);
0BA4: 00000000 11A12745 ; 2E9: void UI_CONTROLLED_SHUTDOWN_RESPONSE(int book_id);
0BA8: 00000000 91942745 ; 2EA: int MainInput_getCurPos(GUI*);
0BAC: 00000000 61942745 ; 2EB: void MainInput_Hide(GUI*);
0BB0: 00000000 35923345 ; 2EC: void DispObject_SoftKey_RestoreDefaultAction(DISP_OBJ*,int action);
0BB4: 00000000 356EDB44 ; 2ED: STRID PNUM2Name(void *pnum, int isIconNeeded, int only_full_number_flag);
0BB8: 00000000 0146DD44 ; 2EE: int SpeedDial_GetPNUM(int _zero,char charter0__9, void * PNUM);
0BBC: 00000000 CDAD1F45 ; 2EF: void * MetaData_Desc_Create(wchar_t * path,wchar_t * name);
0BC0: 00000000 8DAE1F45 ; 2F0: void MetaData_Desc_Destroy(void * MetaData_Desc);
0BC4: 00000000 CDAE1F45 ; 2F1: wchar_t * MetaData_Desc_GetTags(void * MetaData_Desc,int tagID);
0BC8: 00000000 2DAF1F45 ; 2F2: int MetaData_Desc_GetTrackNum(void * MetaData_Desc,int __NULL);
0BCC: 00000000 A9723145 ; 2F3: int DISP_OBJ_GetWindowWidth(DISP_OBJ *);
0BD0: 00000000 C9723145 ; 2F4: int DISP_OBJ_GetWindowHeight(DISP_OBJ *);
0BD4: 00000000 41012945 ; 2F5: int get_system_langID(void);
0BD8: 00000000 A9EB2B45 ; 2F6: char * lang_get_name(int langID);
0BDC: 00000000 0526F644 ; 2F7: int w_chdir(const wchar_t *path);
0BE0: 00000000 5D6F8544 ; 2F8: int w_fopen(const wchar_t *name, int attr, int rights, int err);
0BE4: 00000000 15708544 ; 2F9: int w_fstat(const wchar_t *name, W_FSTAT *);
0BE8: 00000000 A56F8544 ; 2FA: int w_fwrite(int f, void *buf, int size);
0BEC: 00000000 8D6F8544 ; 2FB: int w_fread(int f, void *buf, int size);
0BF0: 00000000 DD931745 ; 2FC: int w_lseek(int f, int offs, int mode);
0BF4: 00000000 BD6F8544 ; 2FD: int w_fclose(int f);
0BF8: 00000000 C145F644 ; 2FE: int w_mkdir(const wchar_t *path, int mode);
0BFC: 00000000 1100E644 ; 2FF: int DirHandle_SetFilterStr(DIR_HANDLE *, const wchar_t *filter);
0C00: 00000000 F99E3145 ; 300: int Disp_GetStrIdWidth(STRID , int len);
0C04: 00000000 79AF1F45 ; 301: int MetaData_Desc_GetCoverInfo(void * MetaData_Desc,char * cover_type,int * size,int * cover_offset);
0C08: 00000000 D16EE144 ; 302: int ImageID_GetIndirect(void * buf_image,int size,int __NULL,wchar_t * image_type,wchar_t * imageID);
0C0C: 00000000 11DAFC44 ; 303: void unixtime2datetime(int, DATETIME * );
0C10: 00000000 55BA1745 ; 304: void ListElement_Insert(LIST *lst, int i, void *new_item);
0C14: 00000000 952AE644 ; 305: int FileCopy(wchar_t *src_path, wchar_t *src_name, wchar_t *dest_path, wchar_t *dest_name, int);
0C18: 00000000 B92CE644 ; 306: int FileMove(wchar_t *src_path, wchar_t *src_name, wchar_t *dest_path, wchar_t *dest_name, int);
0C1C: 00000000 F1962344 ; 307: void RedLED_On(int __NULL);
0C20: 00000000 3D972344 ; 308: void RedLED_Off(int __NULL);
0C24: 00000000 29803145 ; 309: void DispObject_SetLayerColor(DISP_OBJ *,int color);
0C28: 00000000 35B9E744 ; 30A: int JavaAppDesc_GetJavaAppID(void * JavaDesc);
0C2C: 00000000 DDC7F444 ; 30B: void REQUEST_UI_OAF_START_APPLICATION(const int *ASYNC,int appID,char * flag);
0C30: 00000000 4921F444 ; 30C: int JavaApp_LogoImageID_Get(wchar_t * fullpath,wchar_t * imageID);
0C34: 00000000 39F43245 ; 30D: GUI * CreateProgressBar(BOOK*,int);
0C38: 00000000 81F73245 ; 30E: void ProgressBar_SetText(GUI*,STRID text);
0C3C: 00000000 75F83245 ; 30F: void ProgressBar_SetIcon(GUI*,u16 icon_id);
0C40: 00000000 3DF73245 ; 310: void ProgressBar_SetPercentValue(GUI*,int value);
0C44: 00000000 85F83245 ; 311: void ProgressBar_SetBarDisabled(GUI*,int disabled);
0C48: 00000000 25852A45 ; 312: void StringInput_DispObject_SetText(DISP_OBJ *,int StrID);
0C4C: 00000000 35053245 ; 313: void GuiObject_SetTitleImage(void *gui, wchar_t imageID);
0C50: 00000000 DD043245 ; 314: void GuiObject_SetTitleIcon(void *gui, wchar_t imageID);
0C54: 00000000 3DB22D45 ; 315: void GuiObject_SetHighlightImage(void *gui, wchar_t imageID);
0C58: 00000000 4DB22D45 ; 316: void GuiObject_SetBackgroundImage(void *gui, wchar_t imageID);
0C5C: 00000000 49A43345 ; 317: void *DispObject_Softkeys_GetParams(DISP_OBJ *);
0C60: 00000000 91A43345 ; 318: LIST *DispObject_Softkeys_GetList(DISP_OBJ *, BOOK *bk, char __zero);
0C64: 00000000 E9B22645 ; 319: int BookObj_GetDisplayOrientation(BOOK *bk);
0C68: 00000000 45B22645 ; 31A: void BookObj_SetDisplayOrientation(BOOK *bk, int orientation);
0C6C: 00000000 71A32645 ; 31B: BOOK *DISPLAY_GetTopBook(int display);
0C70: 00000000 75123245 ; 31C: void DISPLAY_SetBrightness(int display, int brightness);
0C74: 00000000 F5123245 ; 31D: int DISPLAY_GetBrightness(int display);
0C78: 00000000 C1F7E944 ; 31E: void DataBrowserDesc_Menu_AddFSFunctions(void * db , int);
0C7C: 00000000 4DF8E944 ; 31F: void DataBrowserDesc_Menu_AddNewFolder(void * db , int);
0C80: 00000000 55F8E944 ; 320: void DataBrowserDesc_Menu_AddMarkFiles(void * db , int);
0C84: 00000000 11D83345 ; 321: void SetTheme(wchar_t*path, wchar_t*name, int bookid, int unk_1);
0C88: 00000000 7DC33345 ; 322: void Softkeys_GetLabel(DISP_OBJ *softkeys, SKLABEL *lbl, int id);
0C8C: 00000000 41BF3345 ; 323: void Softkeys_Update(DISP_OBJ *softkeys);
0C90: 00000000 E0FE1820 ;8324: void * get_CellData(void);
0C94: 00000000 9528D944 ; 325: void * IncommingCall_Reject(BOOK* book);
0C98: 00000000 8539D944 ; 326: void * IncommingCall_Mute(BOOK* book);
0C9C: 00000000 6D901A44 ; 327: int GetRadioState(char* level, char* flag);
0CA0: 00000000 FDFBD544 ; 328: int Bluetooth_GetState(void);
0CA4: 00000000 C5FBD544 ; 329: int Bluetooth_GetPhoneVisibility(void);
0CA8: 00000000 85FCD544 ; 32A: int Bluetooth_isBusy(void);
0CAC: 00000000 55E01845 ; 32B: int USB_isConnected(void);
0CB0: 00000000 7947F644 ; 32C: void *w_diropen(const wchar_t *dir);
0CB4: 00000000 D99A1745 ; 32D: wchar_t *w_dirread(void *);
0CB8: 00000000 E54AF644 ; 32E: int w_dirclose(void *);
0CBC: 00000000 819B1745 ; 32F: int w_rename(const wchar_t *dst, const wchar_t *src);
0CC0: 00000000 259B1745 ; 330: int w_remove(const wchar_t *dir);
0CC4: 00000000 91011945 ; 331: int ConnectionManager_Connection_GetState(void);
0CC8: 00000000 79901A44 ; 332: int GetSignalQuality(char *rssi,char *ber);
0CCC: 00000000 A966FE44 ;8333: IS_NEEDED_BOOK isCameraBook(void);
0CD0: 00000000 0DEBF244 ;8334: IS_NEEDED_BOOK isSoundRecorderBook(void);
0CD4: 00000000 E1272B45 ; 335: void StringInput_MenuItem_SetPriority(GUI * strinp, int prio,int actionID);






;locale=Russian_Russia.1251
