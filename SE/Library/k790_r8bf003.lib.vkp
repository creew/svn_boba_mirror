;K790 SW-R8BF003
;Библиотека функций
;v221207
;(c) Hussein , IronMaster , GPcH
;

+45B1FC00
0440: 00000000 3D86A744   ; 110:  void *memalloc(int size,int f1,int f2,const char *fname,int fline)  ////
0444: 00000000 6986A744   ; 111:  void memfree(void * mem,const char * fname ,int fline)  ////
0448: 00000000 94300020   ; 112:  void memset(void *mem,char chr,int size)  ///
044C: 00000000 BC5B2D44   ; 113:  int memcpy(void *dest,const void *source,int cnt)  ///
0450: 00000000 51335544   ; 114:  int sprintf(char *buf, char *str, ...)  ////
0454: 00000000 19395544   ; 115:  int snwprintf(u16* buffer, int size, const u16* fmt, ...)  ////

0458: 00000000 C11CE644   ; 116:  int fopen(const unsigned short *filename, const char *mode)  ////
045C: 00000000 8D32E644   ; 117:  int fclose(int  file)  ////
0460: 00000000 1535E644   ; 118:  int fread(int file , void *ptr, int size)  ////
0464: 00000000 E136E644   ; 119:  int fwrite(const void *ptr, int size, int n, int file)  ////
0468: 00000000 15708544   ; 11A:  int _wstat(short *path, void *statbuf)  ////
046C: 00000000 31921745   ; 11B:  int fputs(const char *s, int file)  ////

0470: 00000000 5526E644   ; 11C:  int isFileExist(u16 * pach, u16 *fname , FSTAT * fstat_stuct)  ////
0474: 00000000 75FCE544   ; 11D:  void * AllocDirHandle(u16 * path)  ///
0478: 00000000 35FEE544   ; 11E:  void *GetFname(void *, void*)  ////
047C: 00000000 A9F5E944	   ; 11F:  void * CreateDataBrowser(void)  ///

0480: 00000000 D5F7E944   ; 120:  void DataBrowser_SetStyle(void * db , int style)  ////
0484: 00000000 ADF8E944   ; 121:  void DataBrowser_SetHeaderText(void * db , int StrID)  ////
0488: 00000000 95F8E944   ; 122:  void DataBrowser_SetFolders(void * db , int * FolderList)  ////
048C: 00000000 B5F8E944   ; 123:  void DataBrowser_SetOKSoftKeyText(void * db , int StrID)  ////
0490: 00000000 19BCE944   ; 124:  void DataBrowser_Show(void * db)  ////
0494: 00000000 5DF6E944   ; 125:  void DataBrowser_XXX(void * db)  ////
0498: 00000000 A54DE644   ; 126:  unsigned short * getFileExtention(unsigned short * fnane)  ////
049C: 00000000 A100E644   ; 127:  int DataBrowser_isFileInListExt(unsigned short * ext_table,unsigned short * patch ,unsigned short * fname )  ////
04A0: 00000000 ED782645   ; 128:  void CreateTimer(void *unk,int time,void *proc,void *book)  ////
04A4: 00000000 B9782645   ; 129:  void  SetTimer(int time, int (*_PROC_)(void *,void *),void* timer)  ////
04A8: 00000000 45792645   ; 12A:  void FreeTimer(void *timer)  ////
04AC: 00000000 05AB2645   ; 12B:  int CreateBook(void * mem, void * onClose, const PAGE_DESC * bp, const char * name, int __0x00000000,int __0)  ////
04B0: 00000000 2DAC2645   ; 12C:  void BookObj_KillBook(void *Book)  ///
04B4: 00000000 81A82645   ; 12D:  void BookObj_GotoPage(BOOK * book, const PAGE_DESC * page)  ////
04B8: 00000000 E9A92645   ; 12E:  void BookObj_ReturnPage(BOOK * ,int)  ////
04BC: 00000000 21B12645   ; 12F:  void FreeBook ( void *book)  ////

04C0: 00000000 55A32645   ; 130:  void * FindBook(int (* proc)(BOOK * ))  ////
04C4: 00000000 C9DE2745   ; 131:  BOOK * Find_StandbyBook(void)  ////
04C8: 00000000 B1AD2645   ; 132:  void BookObj_SetFocus(void *,int focus)  ////
04CC: 00000000 A5043245   ; 133:  void SetMenuHeaderText (void * gui , int StrID)  ////
04D0: 00000000 29003245   ; 134:  void ShowWindow (void * gui)  ////
04D4: 00000000 259C2D45   ; 135:  void SetCursorToItem ( void *obj , int item)  ////
04D8: 00000000 79003245   ; 136:  void SetMenuStyle ( void *obj , int style)  ////
04DC: 00000000 0DA72D45   ; 137:  int GetCreatedListObjectItemNum ( void *msg)  ////
04E0: 00000000 19A72D45   ; 138:  char SetMenuItemText0 ( void *msg , int StrID)  ////
04E4: 00000000 49A72D45   ; 139:  char SetMenuItemText1 ( void *msg , int StrID)  ////
04E8: 00000000 29A72D45   ; 13A:  char SetMenuItemText2 ( void *msg , int StrID)  ////
04EC: 00000000 39A72D45   ; 13B:  char SetMenuItemText3 ( void *msg , int StrID)  ////
04F0: 00000000 91A72D45   ; 13C:  void SetListObjectItemIcon ( void *msg , int align , int iconID)  ////
04F4: 00000000 BD4E3145   ; 13D:  void SetHeaderText( void *obj , int StrID)  ////
04F8: 00000000 399C2D45   ; 13E:  int GetFocusetListObjectItem( void *obj)  ////
04FC: 00000000 899C2D45   ; 13F:  void SetMenuItemStyle( void *obj , int style)  ////

0500: 00000000 7DE33145   ; 140:  void putchar( void *xx , int x, int y, int _zero, int zero1 , short wchar)  ////
0504: 00000000 E5FA3245   ; 141:  void SetGuiItemText(void *gui,int item,int StrID)  ////
0508: 00000000 E5FA3245   ; 142:  void StatusIndication_SetItemText(void *gui,int item,int StrID)  ////
050C: 00000000 19FB2745   ; 143:  void StatusIndication_ShowNotes(int StrID)  ////
0510: 00000000 E11D2B45   ; 144:  void * CreateStringInput(int,...)  ////
0514: 00000000 59BB2D45   ; 145:  void * CreateRadioButtons(void * gui)  ////
0518: 00000000 21BD2D45   ; 146:  void SetRadioButtonsCount(void * gui , int count)  ////
051C: 00000000 3DBD2D45   ; 147:  void SetRadioButtonsChecked(void * gui , int checked)  ////
0520: 00000000 71BD2D45   ; 148:  void SetRadioButtonsText(void * gui , int * textTable , int rbCount)  ////
0524: 00000000 4DBD2D45   ; 149:  int GetSelectedRadioButton(void * rb)  ////
0528: 00000000 49FA2745   ; 14A:  void StatusIndication_Item8_SetText(int StrID)  ////
052C: 00000000 1DC83345   ; 14B:  void AddMSGHook(void * menu,short msg,void (*proc)(BOOK *,void*))  ////
0530: 00000000 95C83345   ; 14C:  void AddCommand(void * menu,int cmd , int StrID)  ////
0534: 00000000 51C93345   ; 14D:  void SoftKey_SetEnable(void *gui,int msg,int ena)  ////
0538: 00000000 09C93345   ; 14E:  void SoftKey_AddErrorStr(void *gui,int msg,int StrID)  ////
053C: 00000000 E1C73345   ; 14F:  void SoftKey_RemoveItem(void *gui,u16 action)  ////

0540: 00000000 E5C83345   ; 150:  void SoftKey_SetVisible(void *gui,int action,int visible)  ////
0544: 00000000 55CB3345   ; 151:  void SoftKey_SuppressDefaultAction(void *gui,int action)  ////
0548: 00000000 25405544   ; 152:  u16* wstrcpy(u16 * dest, u16 * source)  ////
054C: 00000000 D1405544   ; 153:  short* wstrncpy(short * dest, short * source, int maxlen)  ////
0550: 00000000 C93F5544   ; 154:  u16* wstrcat(u16 * wstr, u16 * subwstr)  ////
0554: 00000000 D920E244   ; 155:  short* wstrncat(short * wstr, short * subwstr , int maxlen)  ////
0558: 00000000 FD3F5544   ; 156:  int wstrcmp(unsigned short * wstr1, unsigned short * wstr2)  ////
055C: 00000000 3520E244   ; 157:  int wstrlen(u16 * wstr)  ////

0560: 00000000 FD32E244   ; 158:  u16 * str2wstr(u16 * wstr,char * str)  ////
0564: 00000000 FD365544   ; 159:  int strcmp(char * str1, char * str2)  ////
0568: 00000000 59375544   ; 15A:  int strlen(char *str)  ////
056C: 00000000 5521E244   ; 15B:  char * wstr2str (char * str , u16 * wstr)  ////
0570: 00000000 79283045   ; 15C:  int int2strID (int num)  ////
0574: 00000000 2D2B3045   ; 15D:  int Str2ID(const void * wstr , int  flag , int len)  ////
0578: 00000000 C12F3045   ; 15E:  void StrID2Str(int StrID,char * str,int maxlen)  ////
057C: 00000000 B12E3045   ; 15F:  void TextID2wstr(int StrID,u16 * str,int maxlen)  ////

0580: 00000000 912D3045   ; 160:  int TextGetLength(int StrID)  ////
0584: 00000000 F52C3045   ; 161:  void TextFree(int StrID)  ////
0588: 00000000 0924DC44   ; 162:  int AB_DEFAULTNBR_GET(int rec_num, void * mem_0x30, int * unk)  ////
058C: 00000000 BD73DC44   ; 163:  int AB_READSTRING(void * mem_0x30,int rec_num, int rec_item_num)  ////
0590: 00000000 8974DC44   ; 164:  int AB_READPHONENBR(void * mem_0x30,int rec_num, int rec_item_num)  ////
0594: 00000000 4175DC44   ; 165:  int AB_GETNBROFITEMS(int get_from,int unk_0)  ////
0598: 00000000 9D213045   ; 166:  int PNUM_len(void *pnum)  ////
059C: 00000000 A9A71F45   ; 167:  void PNUM2str(char *str,void *pnum,int len, int max_len)  ////
05A0: 00000000 29FE3145   ; 168:  GUIObject_GetDispObject  ////
05A4: 00000000 D9B91745   ; 169:  LIST *List_New(void)   ////
05A8: 00000000 15BA1745   ; 16A:  void List_Free(LIST *lst)  ////
05AC: 00000000 89BB1745   ; 16B:  void ListElement_AddtoTop(LIST *lst,void *newElement)  ////
05B0: 00000000 817AE144   ; 16C:  int Gif2ID(u16 IMAGEHANDLE,u16 * path, u16 * fname,u16 * ID)  ////
05B4: 00000000 59B5E144   ; 16D:  int REQUEST_IMAGEHANDLER_INTERNAL_GETHANDLE(const int * __zero,u16 * IMAGEHANDLE,u16 * unk)  ////
05B8: 00000000 0D5BD244   ; 16E:  void REQUEST_DATEANDTIME_GET(const int * __zero , DATETIME * dt)  ////
05BC: 00000000 C1B63445   ; 16F:  void IndicationDevice_Backlight_FadeToLevel(int unk_zero ,int bl_level)  ////

05C0: 00000000 5D4AF544   ; 170:  int GetFreeBytesOnHeap(void)  ////
05C4: 00000000 D9AD2645   ; 171:  void Hide(void * udata)  ////
05C8: 00000000 E9AD2645   ; 172:  void Show(void * udata)  ////
05CC: 00000000 A1E02745   ; 173:  void StartAPP (u16 * appname)  /////
05D0: 00000000 619D2D45   ; 174:  ListMenu_SetOnMessages  ////
05D4: 00000000 B9BA2345   ; 175:  char * manifest_GetParam(char *buf,char *param_name,int unk)  ////
05D8: 00000000 8938E644   ; 176:  int lseek(int file,int offset,int mode)  ////
05DC: 00000000 00000000   ;8177:  int get_VBUFFER(void)   ????????
05E0: 00000000 00000000   ; 178:  viod SetLampLevel (int level)  ////
05E4: 00000000 15BB1745   ; 179:  void * ListElement_Remove(LIST *lst,int index)  ////
05E8: 00000000 95632C44   ; 17A:  int GetCurrentPID(void)  ////
05EC: 00000000 49BB1745   ; 17B:  int ListElement_Prt2NumElement(LIST *lst,void *ptr) ////

05F0: 00000000 4CEA3044   ; 17C:  void *alloc(int size,int signo)
05F4: 00000000 68EA3044   ; 17D:  void * recive(void *sigsel);
05F8: 00000000 58EA3044   ; 17E:  void send(void **sig,int PID);
05FC: 00000000 A8EA3044   ; 17F:  int sender(void **sig);
0600: 00000000 78EA3044   ; 180:  void free_buf(void **sig);
0604: 00000000 44EB3044   ; 181:  int create_process(int proc_type,char *name,void (*entrypoint)(void),int stack_size,int priority,int timeslice,int pid_block,void *redir_table,int vector,int user);
0608: 00000000 64ED3044   ; 182:  void start (int pid)
060C: 00000000 14EC3044   ; 183:  int get_ptype(int pid);
0610: 00000000 60EB3044   ; 184:  int current_process (void);
0614: 00000000 98EA3044   ; 184:  int delay

0680: 00000000 25375544   ; 1A0:  char* strcpy(char * dest, char * source);  ////
0684: 00000000 41D0FC44   ; 1A1:  void *CreateMessage(int size,int ev,char *name);  ////
0688: 00000000 95D0FC44   ; 1A2:  void SendMessage(void **signal,int PID);  ////
068C: 00000000 1DD1FC44   ; 1A3:  void * WaitMessage(void *SIGSEL);  ////
0690: 00000000 31D1FC44   ; 1A4:  iint FreeMessage(void **Mess);  ////
0694: 00000000 C93BFA44   ; 1A5:  void SendDispatchMessage(int id, int unk_zero, int size,void *mess);  ////

0698: 00000000 E9802645   ; 1A6:  char * UIEventName (int event);  ////
069C: 00000000 905DA045   ; 81A7:  void *  get_APP_DESC_TABLE(void);  ////

06A0: 00000000 8D952645   ; 1A8:  void  UI_Event(int event);  ////
06A4: 00000000 9D952645   ; 1A9:  void  UI_Event_wData(int event,void *message,void (*mfree)(void*));  ////
06A8: 00000000 E5952645   ; 1AA:  void  UI_Event_toSID(int event,int SessionID);  ////
06AC: 00000000 F9952645   ; 1AB:  void  UI_Event_toSIDwData(void *event,int SedionID,void *message,void (*mfree)(void*));  ////
06B0: 00000000 A9BD1745   ; 1AC:  int ListElement_Find(LIST *lst,void *element, int (*cmp_proc)(void *,void *));   ////

06B4: 00000000 ADBC1745   ; 1AD:  int ListElement_GetByIndex(LIST * , int index);  ////
06B8: 00000000 25415544   ; 1AE:  u16* wstrrchr(u16*wstr, u16 wchar);  ////
06BC: 00000000 F5A82645   ; 1AF:  void BookObj_CallSubroutine(BOOK * , void * SubProcDesc);  ////
06C0: 00000000 91BB1745   ; 1B0:  void ListElement_Add(LIST *lst,void *newElement);  ////
06C4: 00000000 E9AF2344   ; 1B1: printf  ////
06C8: 00000000 51C0FD44   ; 1B2:  int PlayFile(u16 * path, u16 * fname);  ////

;06CC: 00000000 4D03D444 ; 1B3: int GetChargeBatteryInPercent(BOOK *standby , int *level);  // нах не надо
06D0: 00000000 ED142A45 ; 1B4: int REQUEST_PROFILE_GETACTIVEPROFILE(const int *__zero , int *level);  ////
06D4: 00000000 49152A45 ; 1B5: void REQUEST_PROFILE_SETACTIVEPROFILE(const int *__zero , int NUMprof);  ////
;06D8: 00000000 ADA9EA44 ; 1B6: void SetBrightnessOfScreen(int br); // нах не надо
06DC: 00000000 25E13445 ; 1B7: Keylock_GetStatus  ////
06E0: 00000000 9175F244 ; 81B8: isMediaPlayerVideoBook(void);  ////

;06E4: 00000000 49B3F644   ; 1B9: void VideoOnWholeScreen(BOOK * MediaPlayer_Video_Book);  // вместо  get_APP_DESC_TABLE
;06C8: 00000000    ; 1BA:
;06CC: 00000000    ; 1BB:
;06C0: 00000000    ; 1BC:
;06C4: 00000000    ; 1BD:
;06C8: 00000000    ; 1BE:



06FC: 00000000 BD692645   ; 1BF: int Time2ID(TIME *, char TimeFormat,int);  ////

0700: 00000000 1D9A2D45   ; 1C0: LIST_OBJECT * CreateListObject(BOOK * , void * unk);  ////
0704: 00000000 4D9C2D45   ; 1C1: void SetNumOfMenuItem(void * , int  item_count);  ////
0708: 00000000 B8381820   ;81C2: void * ROOT_APP(void);  ////
070C: 00000000 81C83345   ; 1C3: void SoftKey_AddHelpStr(void *gui,int msg,int StrID);  ////
0710: 00000000 75C93345   ; 1C4: void SoftKey_SetItemAsSubItem(void *gui,int item,int subitem);  ////
0714: 00000000 7D0A2845   ; 1C5: int REQUEST_SYSTEM_SHUTDOWN(void);  ////
0718: 00000000 8D0A2845   ; 1C6: int REQUEST_SYSTEM_RESTART(void);  ////

071C: 00000000 95C83345 ; 1C7: void SoftKeys_SetText(void *gui,int msg,int StrID,int StrID1);  ////
0720: 00000000 AD5A3445 ; 1C8: int isRightNowBook(BOOK *);  ////
0724: 00000000 A5D42745 ; 1C9: int isVolumeControllerBook(BOOK *);  ////

0728: 00000000 BD0D3245   ; 1CA: GUI_TABMENUBAR * CreateTabMenuBar(BOOK *);  ////
072C: 00000000 910E3245   ; 1CB: void TabMenuBar_SetTabCount(GUI_TABMENUBAR * , int count);  ////
0730: 00000000 450F3245   ; 1CC: void TabMenuBar_AssignListObj(GUI_TABMENUBAR * , int tab , GUI*);  ////
0734: 00000000 810F3245   ; 1CD: void TabMenuBar_SetTabIcon(GUI_TABMENUBAR *,int tab, u16 icon , int for_state);  ////
0738: 00000000 B9FD3145   ; 1CE: void  GUI_Free(void*);  ////
073C: 00000000 35013245   ; 1CF: void GUI_SetIcon(GUI* , int icon);  ////
0740: 00000000 85262B45   ; 1D0: int StringInput_GetStringAndLen (GUI*,u16**,u16*);  ////
;0744: 00000000    ; 1D1: 
;0748: 00000000    ; 1D2: 
074C: 00000000 C14AE644   ; 1D3: int GetVolumeSize(char * volume, VOLUMESIZE *);  ////
0750: 00000000 99B52D45   ; 1D4: GUI_NOFMANY * CreateNOfMany(BOOK *);  ////
0754: 00000000 D9B72D45   ; 1D5: void NOfMany_SetTexts(GUI_NOFMANY * , int * StrIDtable, int items_count);  ////
0758: 00000000 5DB72D45   ; 1D6: void NOfMany_SetChecked(GUI_NOFMANY * , u16 * checked_table, int items_count);  ////
075C: 00000000 25B72D45   ; 1D7: void NOfMany_SetCursor(GUI_NOFMANY * , int item);  ////
0760: 00000000 81B72D45   ; 1D8: int NOfMany_GetCheckedCount(GUI_NOFMANY *);  ////
0764: 00000000 71B72D45   ; 1D9: int NOfMany_GetChecked(GUI_NOFMANY * , u16 * buffer );  ////
0768: 00000000 D1B72D45   ; 1DA: void NOfMany_SetonMessage(GUI_NOFMANY * , void * proc );  ////
;076C: 00000000    ; 1DB: 
;0770: 00000000    ; 1DC: 
;0774: 00000000    ; 1DD: 
;0778: 00000000    ; 1DE: 
;077C: 00000000    ; 1DF: 
0780: 00000000 05BD2D45   ; 1E0: void OneOfMany_SetFocused(GUI_ONEOFMANY * , int item);  ////
0784: 00000000 69BD2D45   ; 1E1: void OneOfMany_SetonMessage(GUI_ONEOFMANY * , void * proc);  ////

0788: 00000000 1D902745   ; 1E2: GUI_FEEDBACK * CreateFeedBack (int,...);  ////
078C: 00000000 E9902745   ; 1E3: void  FeedBack_SetText(GUI_FEEDBACK*,int);  ////
0790: 00000000 11BC9C44   ; 1E4: int GetBattaryState(const int * , BATT *);  ////
0794: 00000000 A5D83145   ; 1E5: void * get_DisplayGC (void);  ////
0798: 00000000 39633145   ; 1E6: void GetGuiRect(void*,RECT*);  ////
079C: 00000000 7DDF3145   ; 1E7: void get_GC_RECT(void*,RECT*);  ////
07A0: 00000000 81E23145   ; 1E8: char *get_GC_xx(void * GC);  ////
07A4: 00000000 75E23145   ; 1E9: void *set_GC_xx(void * GC, int);  ////
07A8: 00000000 2DDF3145   ; 1EA: void GC_validate_RECT(void * GC , RECT*);  ////
07AC: 00000000 65AE2645   ; 1EB: void addGui2book(BOOK*,GUI*)  ////
07B0: 00000000 698B3145   ; 1EC: void DrawRect(int x1, int y1,int x2 ,int y2,int pen_color,int brush_color);  ////
07B4: 00000000 698E3145   ; 1ED: void DrawString(int StrID,int align,int x1,int y1,int x2,int y2,int unk,int unk1,int pen_color ,int brush_color);  ////
07B8: 00000000 41B32645   ; 1EE: void addGui2XGuiList (void* xguilist , GUI*);  ////
07BC: 00000000 A5613145   ; 1EF: void InvalidateRect(DISP_BASE *,RECT*);  ////

07C0: 00000000 DDFC3145   ; 1F0: int CreateObject(GUI*,void (*)(DISP_DESC *),void (*)(DISP_DESC *),BOOK *,int,int);  ///
07C4: 00000000 C5983145   ; 1F1: void SetFont(int);  ////
07C8: 00000000 78861820   ;81F2: StatusRow_p;  ////
07CC: 00000000 C5922645   ; 1F3: int root_list_get_session_count(void);  ////
07D0: 00000000 D1922645   ; 1F4: UI_APP_SESSION *root_list_get_session(int num_session);  ////
07D4: 00000000 C98B2645   ; 1F5: BOOK *SESSION_GetTopBook(UI_APP_SESSION *);  ////


07D8: 00000000 79942745   ; 1F6: int MainInput_getVisible(GUI *);  ////
07DC: 00000000 85942745   ; 1F7: int MainInput_strlen(GUI *);  ////
07E0: 00000000 9D942745   ; 1F8:  char * MainInput_getPNUM(GUI *);  ////
07E4: 00000000 A9942745   ; 1F9: int MainInput_isPlus(GUI *);  ////
07E8: 00000000 E1B12645   ; 1FA: int BOOK_GetSessionID(BOOK * );  ////
07EC: 00000000 9D405544   ; 1FB: int wstrncmp(u16*,u16*,int);  ////
07F0: 00000000 29733145   ; 1FC: int DISP_BASE_GetAbsoluteXPos(DISP_BASE *);  ////
07F4: 00000000 5D733145   ; 1FD: int DISP_BASE_GetAbsoluteYPos(DISP_BASE *);  ////
07F8: 00000000 55663145   ; 1FE: WINDOW * DISP_BASE_GetWindow(DISP_BASE *);  ////
07FC: 00000000 CDF33345   ; 1FF: int GetThemeColor(int , int);  ////

0800: 00000000 C50D2A45   ; 200: int REQUEST_SETTING_SILENCE_SET(const int * __zero,u16 profile,u16 value);  ////
0804: 00000000 6D0D2A45   ; 201: int REQUEST_SETTING_SILENCE_GET(const int * __zero,u16 profile, char * silence_mode);  ////
0808: 00000000 29A6DB44   ; 202: void VCALL_Init (void* vc);  ////
080C: 00000000 21A7DB44   ; 203: void VCALL_SetName (void * vc , u16 * name ,char name_len);  ////
0810: 00000000 81A7DB44   ; 204: void VCALL_SetNameIcon (void * vc , u16 icon);  ////
0814: 00000000 41A7DB44   ; 205: void VCALL_SetNumber (void * vc , u16 * number , char num_len);  ////
0818: 00000000 65A7DB44   ; 206: void VCALL_SetHZ1 (void * vc, int , u16 );  ////
081C: 00000000 71A7DB44   ; 207: void VCALL_SetHZ2 (void * vc , u16 );  ////
0820: 00000000 01A2DB44   ; 208: void MakeVoiceCall (int SessioID , void * vc ,int flag);  ////
0824: 00000000 00000000   ; 209: int isDirectory (u16 * path ,u16 * filename , int * error );  ?????????
0828: 00000000 9927E644   ; 20A: void FileDelete (u16 * path ,u16 * filename , int * error );  ////
082C: 00000000 D5FF3145   ; 20B: void SetFocus (GUI * , int);  ////

0830: 00000000 85D9FF44   ; 20C: int CreateSMSCont (int, void*);  ////
0834: 00000000 25E0FF44   ; 20D: int FreeSMSCont (void*);  ////
0838: 00000000 5DDBFF44   ; 20E: int PrepareSMSCont (void*,u16*,u16*,int,int);  ////
083C: 00000000 85DFFF44   ; 20F: int CteateNewMessage (int,void*,int);  ////

0840: 00000000 905DA045   ;8210: get_APP_DESC_TABLE(void);  ////
0844: 00000000 D9CF3145   ; 211: C_INTERFACE *Window_GetComponentInterface  ////
0848: 00000000 1977DC44   ; 212: AB_POSITIONNBR_GET  ////
084C: 00000000 4176DC44   ; 213: AB_str2ID  ////
0850: 00000000 8976DC44   ; 214: int AB_NUM_ITEM2StrID(void * ab_num_item);  ////
0854: 00000000 0B261444   ; 215: int GetABRecNum(AB_GET_STRUCT *);  nullstub
0858: 00000000 18C49B45   ;8216: AB_ITEM_DESC * get_AB_ITEMS_DESC()  ////
 
085C: 00000000 09F1A644   ; 217: StandbyBook_GetMainInput  ////
0860: 00000000 05F1A644   ; 218: StandbyBook_GetStatusIndication ////

0864: 00000000 1D35D444   ; 219: REQUEST_PHONEBOOK_ACCESSSTATUS_TOTAL_GET  /////
0868: 00000000 30EA0920   ; 21A: MMI_ProcessID_ptr  ////
;086C: 00000000    ; 21B: 
;0870: 00000000    ; 21C: 
0874: 00000000 855A3145   ; 21D: DISP_BASE* DISPBASE_GetFocused(int display);  ////
0878: 00000000 39603145   ; 21E: char DISP_BASE_getVisible(DISP_BASE*);  ////
087C: 00000000 E14E8F44   ; 21F: DISP_DESC* DISP_BASE_GetDESC (DISP_BASE*);   ////

0880: 00000000 A5203145   ; 220: void DISP_DESC_SetName (DISP_DESC *  , char * name);  ////
0884: 00000000 E9703145   ; 221: char* DISP_BASE_GetName (DISP_BASE *);  ////
0888: 00000000 A9203145   ; 222: void DISP_DESC_SetSize (DISP_DESC* , u16 size);  ////
;088C: 00000000    ; 223: u16 DISP_DESC_GetSize (DISP_BASE *);
0890: 00000000 AD203145   ; 224: void DISP_DESC_SetOnCreate (DISP_DESC* , DISP_BASE_ONCREATE_METHOD);  ////
0894: 00000000 35213145   ; 225: DISP_BASE_ONCREATE_METHOD DISP_BASE_GetOnCreate (DISP_BASE *);  ////
0898: 00000000 B1203145   ; 226: void DISP_DESC_SetOnClose (DISP_DESC* , DISP_BASE_ONCLOSE_METHOD);  ////
089C: 00000000 51213145   ; 227: DISP_BASE_ONCLOSE_METHOD DISP_BASE_GetOnClose (DISP_BASE *);  ////
08A0: 00000000 B5203145   ; 228: void DISP_DESC_SetOnRedraw (DISP_DESC* , DISP_BASE_ONREDRAW_METHOD);  ////
08A4: 00000000 6D213145   ; 229: DISP_BASE_ONREDRAW_METHOD DISP_BASE_GetOnRedraw (DISP_BASE *);  ////
08A8: 00000000 BD203145   ; 22A: void DISP_DESC_SetOnKey (DISP_DESC* , DISP_BASE_ONKEY_METHOD);  ////
08AC: 00000000 A5213145   ; 22B: DISP_BASE_ONKEY_METHOD DISP_BASE_GetOnKey (DISP_BASE *);  ////
;08B0: 00000000    ; 22C: void DISP_DESC_SetMethod03 (DISP_DESC* ,void (*)(void*));
;08B4: 00000000    ; 22D: DISP_BASE_METHOD DISP_BASE_GetMethod03 (DISP_BASE *);
;08B8: 00000000    ; 22E: void DISP_DESC_SetMethod04 (DISP_DESC* ,void (*)(void*));
;08BC: 00000000    ; 22F: DISP_BASE_METHOD DISP_BASE_GetMethod04 (DISP_BASE *);

;08C0: 00000000    ; 230: void DISP_DESC_SetMethod05 (DISP_DESC* ,void (*)(void*));
;08C4: 00000000    ; 231: DISP_BASE_METHOD DISP_BASE_GetMethod05 (DISP_BASE *);
08C8: 00000000 C1203145   ; 232: void DISP_DESC_SetMethod06 (DISP_DESC* ,void (*)(void*));  ////
08CC: 00000000 C1213145   ; 233: DISP_BASE_METHOD DISP_BASE_GetMethod06 (DISP_BASE *); ////
;08D0: 00000000    ; 234: void DISP_DESC_SetMethod07 (DISP_DESC* ,void (*)(void*));
;08D4: 00000000    ; 235: DISP_BASE_METHOD DISP_BASE_GetMethod07 (DISP_BASE *);
08D8: 00000000 C9203145   ; 236: void DISP_DESC_SetMethod08 (DISP_DESC* ,void (*)(void*));
08DC: 00000000 F9213145   ; 237: DISP_BASE_METHOD DISP_BASE_GetMethod08 (DISP_BASE *);
;08E0: 00000000    ; 238: void DISP_DESC_SetMethod09 (DISP_DESC* ,void (*)(void*));
;08E4: 00000000    ; 239: DISP_BASE_METHOD DISP_BASE_GetMethod09 (DISP_BASE *);
;08E8: 00000000    ; 23A: void DISP_DESC_SetMethod0A (DISP_DESC* ,void (*)(void*));
;08EC: 00000000    ; 23B: DISP_BASE_METHOD DISP_BASE_GetMethod0A (DISP_BASE *);
;08F0: 00000000    ; 23C: void DISP_DESC_SetMethod0B (DISP_DESC* ,void (*)(void*));
;08F4: 00000000    ; 23D: DISP_BASE_METHOD DISP_BASE_GetMethod0B (DISP_BASE *);
;08F8: 00000000    ; 23E: void DISP_DESC_SetMethod0C (DISP_DESC* ,void (*)(void*));
;08FC: 00000000    ; 23F: DISP_BASE_METHOD DISP_BASE_GetMethod0C (DISP_BASE *);

0900: 00000000 00000000   ; 240: void JavaSession_Manager (int cmd);
0904: 00000000 00000000   ; 241: int JavaSession_GetName(void);
0908: 00000000 5D2C3045   ; 242: int TextCopyId(int);
090C: 00000000 81B12645   ; 243: UI_APP_SESSION *Book_GetSession(BOOK*);
0910: 00000000 A9A72D45   ; 244: void List2lineSetAsSubitem (void* msg,int unk,int n_sub_items);
0914: 00000000 21A82D45   ; 245: void List2lineSubitemAddText(void* msg,int StrID);
0918: 00000000 15A82D45   ; 246: int GUIonMessage_GetCreatedSubItemParrentIndex(void * msg);


0948: 00000000 09A82D45   ; 252: int List2LineGetCurrentIndex(void * msg);
094C: 00000000 FDA72D45   ; 253: int GUIonMessage_GetCurrentItemIndex(void * msg);
0950: 00000000 B1FFE544   ; 254: void DestroyDirHandle(void *handle);
0954: 00000000 80879D45   ;8255: DB_EXT *LastExtDB(void);
0958: 00000000 755FE944   ; 256: void GetOtherExtMethods(FILESUBROUTINE **);
;095C: FFFFFFFF 315D2745   ; 257: void infobox(int HeaderStrID,int MessageStrID,int IconID, int style /*1 or 2*/,int time,int shouldbe0);
