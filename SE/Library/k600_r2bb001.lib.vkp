;K600 SW-R2BB001
;Библиотека функций
;v
;(c) Hussein , IronMaster
;(p) vetaxa-manchyk

+2146FC00
0448: FFFFFFFF 6967D620 ; 112: void memset(void *mem,char chr,int size);
044C: FFFFFFFF 00500A20 ; 113: int memcpy(void *dest,const void *source,int cnt);
0450: FFFFFFFF A172D620 ; 114: int sprintf(char *buf, const char *fmt, ...);
0454: FFFFFFFF 9179D620 ; 115: int snwprintf(wchar_t* buffer, int size, const wchar_t* fmt, ...);
0458: FFFFFFFF F5BD4D20 ; 116: int _fopen(const wchar_t *filpath, const wchar_t *filname,unsigned int mode , unsigned int rights, unsigned int __0);
045C: FFFFFFFF D5CF4D20 ; 117: int fclose(int file);
0460: FFFFFFFF F1D24D20 ; 118: int fread(int file , void *ptr, int size);
0464: FFFFFFFF 8DD54D20 ; 119: int fwrite(int file , const void *ptr, int size);
0468: FFFFFFFF D5D18E20 ; 11A: int _wstat(short *path, void *statbuf)
046C: FFFFFFFF 1D5C7120 ; 11B: int fputs(const char *s, int file)
0470: FFFFFFFF B5C64D20 ; 11C: int fstat(const wchar_t * path, const wchar_t *fname , FSTAT * fstat_stuct);
0474: FFFFFFFF 75A34D20 ; 11D: DIR_HANDLE * AllocDirHandle(const wchar_t * path);
0478: FFFFFFFF 19A54D20 ; 11E: FILELISTITEM *GetFname(DIR_HANDLE *, FILELISTITEM *);
047C: FFFFFFFF 01F81F20 ; 11F: void * DataBrowserDesc_Create(void);
0480: FFFFFFFF 19F61F20 ; 120: void DataBrowserDesc_SetStyle(void * db , int style);
0484: FFFFFFFF A9F61F20 ; 121: void DataBrowserDesc_SetHeaderText(void * db , int StrID);
0488: FFFFFFFF 61F61F20 ; 122: void DataBrowserDesc_SetFolders(void * db , wchar_t const ** FolderList);
048C: FFFFFFFF CDF61F20 ; 123: void DataBrowserDesc_SetOKSoftKeyText(void * db , int StrID);
0490: FFFFFFFF 69E81F20 ; 124: void DataBrowser_Create(void * db);
0494: FFFFFFFF 89F81F20 ; 125: void DataBrowserDesc_Destroy(void * db);
0498: FFFFFFFF 6DE64D20 ; 126: wchar_t * getFileExtention(wchar_t * fnane);
049C: FFFFFFFF ADA74D20 ; 127: int DataBrowser_isFileInListExt(const wchar_t * ext_table,const wchar_t * path ,const wchar_t *fname );
04A0: FFFFFFFF D9C12520 ; 128: void Timer_ReSet(u16 * timer ,int time, void (*onTimer)(u16 timerID, LPARAM lparam), LPARAM lparam);
04A4: FFFFFFFF A1C12520 ; 129: u16 Timer_Set(int time, void (*onTimer)(u16 timerID, LPARAM lparam), LPARAM lparam);
04A8: FFFFFFFF 29C22520 ; 12A: void Timer_Kill(u16 *timerID);
04AC: FFFFFFFF 39CF2520 ; 12B: int CreateBook(void * mem, void (* onClose)(BOOK*), const PAGE_DESC * bp, const char * name, int __0xFFFFFFFF,int __0);
04B0: FFFFFFFF 51D02520 ; 12C: void BookObj_KillBook(void *Book);
04B4: FFFFFFFF 91CC2520 ; 12D: void BookObj_GotoPage(BOOK * book, const PAGE_DESC * page);
04B8: FFFFFFFF 19CE2520 ; 12E: void BookObj_ReturnPage(BOOK * ,int);
04BC: FFFFFFFF 51D52520 ; 12F: void FreeBook ( BOOK *book);
04C0: FFFFFFFF 9D5C4220 ; 130: BOOK * FindBook(IS_NEEDED_BOOK);
04C4: FFFFFFFF FD212820 ; 131: BOOK * Find_StandbyBook(void);
04C8: FFFFFFFF C9D12520 ; 132: void BookObj_SetFocus(void *,int focus);
04CC: FFFFFFFF 111F7520 ; 133: void GuiObject_SetTitleText (void * gui , int StrID);
04D0: FFFFFFFF 151E7520 ; 134: void ShowWindow (void * gui);
04D4: FFFFFFFF 41CB7720 ; 135: void SetCursorToItem ( void *obj , int item);
04D8: FFFFFFFF 651E7520 ; 136: void GUI_SetStyle(GUI *,int style);
04DC: FFFFFFFF 65D57720 ; 137: int GUIonMessage_GetCreatedItemIndex ( void *msg);
04E0: FFFFFFFF 75D57720 ; 138: char SetMenuItemText0 ( GUI_MESSAGE *, int StrID);
04E4: FFFFFFFF A5D57720 ; 139: char SetMenuItemText1 ( GUI_MESSAGE *, int StrID);
04E8: FFFFFFFF 85D57720 ; 13A: char SetMenuItemText2 ( GUI_MESSAGE *, int StrID);
04EC: FFFFFFFF 95D57720 ; 13B: char SetMenuItemText3 ( GUI_MESSAGE *, int StrID);
04F0: FFFFFFFF B5D57720 ; 13C: void SetListObjectItemIcon ( void *msg , int align , wchar_t iconID);
04F4: FFFFFFFF BD642620 ; 13D: void GUIObject_SetHeaderText(void *gui , int StrID);
04F8: FFFFFFFF 55CB7720 ; 13E: int ListMenu_GetSelectedItem(GUI_LIST * );
04FC: FFFFFFFF A1CB7720 ; 13F: void SetMenuItemStyle( void *obj , int style);
0500: FFFFFFFF 55BF7520 ; 140: void putchar( void *xx , int x, int y, int _zero, int zero1 , short wchar);
0504: FFFFFFFF 1D1A7620 ;8141: IS_NEEDED_BOOK isScreenSaverBook(void);
0508: FFFFFFFF 99667520 ; 142: void StatusIndication_SetItemText(void *gui,int item,int StrID);
050C: FFFFFFFF 993F2820 ; 143: void StatusIndication_ShowNotes(int StrID);
0510: FFFFFFFF 49107720 ; 144: GUI * CreateStringInput(int,...);
0514: FFFFFFFF 09E77720 ; 145: GUI_ONEOFMANY * CreateOneOfMany(BOOK *);
0518: FFFFFFFF 3D7B7520 ; 146: void OneOfMany_SetItemCount(GUI_ONEOFMANY * , int count);
051C: FFFFFFFF 65E87720 ; 147: void OneOfMany_SetChecked(GUI_ONEOFMANY * , int checked);
0520: FFFFFFFF 8DE87720 ; 148: void OneOfMany_SetTexts(GUI_ONEOFMANY * , int * StrID , int Count);
0524: FFFFFFFF ED7B7520 ; 149: int OneOfMany_GetSelected(GUI_ONEOFMANY * rb);
0528: FFFFFFFF B53E2820 ; 14A: void StatusIndication_Item8_SetText(int StrID);
052C: FFFFFFFF 05377520 ; 14B: void GUIObject_Softkey_SetAction(void * gui,u16 actionID,void (*proc)(BOOK *,void*));
0530: FFFFFFFF ED377520 ; 14C: void GUIObject_Softkey_SetText(void * gui,u16 actionID , int StrID);
0534: FFFFFFFF 5D397520 ; 14D: void GUIObject_SoftKey_SetEnable(void *gui,u16 actionID,int ena);
0538: FFFFFFFF C9387520 ; 14E: void GUIObject_SoftKey_AddErrorStr(void *gui,u16 actionID,int StrID);
053C: FFFFFFFF 95367520 ; 14F: void GUIObject_SoftKey_RemoveItem(void *gui,u16 actionID);
0540: FFFFFFFF 85387520 ; 150: void GUIObject_SoftKey_SetVisible(void *gui,u16 actionID,int visible);
0544: FFFFFFFF 493D7520 ; 151: void GUIObject_SoftKey_SuppressDefaultAction(void *gui,u16 actionID);
0548: FFFFFFFF 61F16020 ; 152: wchar_t* wstrcpy(wchar_t * dest, const wchar_t * source);
054C: FFFFFFFF A9F16020 ; 153: wchar_t* wstrncpy(wchar_t * dest, const wchar_t * source, int maxlen);
0550: FFFFFFFF 09F26020 ; 154: wchar_t* wstrcat(wchar_t * wstr, const wchar_t * subwstr);
0554: FFFFFFFF 55F26020 ; 155: wchar_t *wstrncat(wchar_t *wstr, const wchar_t *subwstr , int maxlen);
0558: FFFFFFFF 11F16020 ; 156: int wstrcmp(const wchar_t *wstr1, const wchar_t *wstr2);
055C: FFFFFFFF E5F06020 ; 157: int wstrlen(const wchar_t * wstr);
0560: FFFFFFFF B5056120 ; 158: wchar_t * str2wstr(wchar_t * wstr, const char * str);
0564: FFFFFFFF 1177D620 ; 159: int strcmp(const char * str1, const char * str2);
0568: FFFFFFFF 7977D620 ; 15A: int strlen(const char *str);
056C: FFFFFFFF 49F36020 ; 15B: char * wstr2strn (char * str , const wchar_t * wstr, int maxlen);
0570: FFFFFFFF 69FB2C20 ; 15C: int int2strID (int num);
0574: FFFFFFFF 39FF2C20 ; 15D: int Str2ID(const void * wstr , int flag , int len);
0578: FFFFFFFF 090C2D20 ; 15E: void StrID2Str(int StrID,char * str,int maxlen);
057C: FFFFFFFF C5032D20 ; 15F: void TextID2wstr(int StrID,wchar_t * str,int maxlen);
0580: FFFFFFFF A5022D20 ; 160: int TextGetLength(int StrID);
0584: FFFFFFFF 11022D20 ; 161: void TextFree(int StrID);
0588: FFFFFFFF CDF01C20 ; 162: int AB_DEFAULTNBR_GET(int rec_num, void * mem_0x30, int * unk);
058C: FFFFFFFF 1D141D20 ; 163: int AB_READSTRING(void * mem_0x30,int rec_num, int rec_item_num);
0590: FFFFFFFF 011B1D20 ; 164: int AB_READPHONENBR(void * mem_0x30,int rec_num, int rec_item_num);
0594: FFFFFFFF 4D1C1D20 ; 165: int AB_GETNBROFITEMS(int get_from,int unk_0);
0598: FFFFFFFF DDF72C20 ; 166: int PNUM_len(void *pnum);
059C: FFFFFFFF 8D6C3120 ; 167: void PNUM2str(char *str,void *pnum,int len, int max_len);
05A0: FFFFFFFF C50E2820 ; 168: DISP_OBJ * GUIObj_GetDISPObj (void * gui);
05A4: FFFFFFFF F11D2320 ; 169: LIST *List_New(void);
05A8: FFFFFFFF 151E2320 ; 16A: void List_Free(LIST *lst);
05AC: FFFFFFFF 351F2320 ; 16B: void ListElement_AddtoTop(LIST *lst,void *newElement);
05B0: FFFFFFFF 556E3320 ; 16C: int Gif2ID(u16 IMAGEHANDLE,const wchar_t * path, const wchar_t * fname,wchar_t * ID);
05B4: FFFFFFFF DD524D20 ; 16D: int REQUEST_IMAGEHANDLER_INTERNAL_GETHANDLE(const int * __zero,u16 * IMAGEHANDLE,char * unk);
05B8: FFFFFFFF DDD54B20 ; 16E: void REQUEST_DATEANDTIME_GET(const int * __zero , DATETIME *dt);
05BC: FFFFFFFF F9934220 ; 16F: void IndicationDevice_Backlight_FadeToLevel(int unk_zero ,int bl_level);
05C0: FFFFFFFF 09613620 ; 170: int GetFreeBytesOnHeap(void);
05C4: FFFFFFFF F9D12520 ; 171: void BookObj_Hide(BOOK *,int display_type);
05C8: FFFFFFFF 0DD22520 ; 172: void BookObj_Show(BOOK *,int display_type);
05CC: FFFFFFFF 99252820 ; 173: void StartAPP (const wchar_t * appname);
05D0: FFFFFFFF A1CC7720 ; 174: void ListMenu_SetOnMessages (GUI_LIST * , int (*proc)(GUI_MESSAGE *));
05D4: FFFFFFFF FD8A4520 ; 175: char * manifest_GetParam(const char *buf, const char *param_name,int unk);
05D8: FFFFFFFF 19D74D20 ; 176: int lseek(int file,int offset,int mode);
;05DC: xxxxxxxx yyyyyyyy ;8177: int get_VBUFFER(void);
05E0: FFFFFFFF 1D0B2920 ; 178: void SetLampLevel (int level);
05E4: FFFFFFFF BD1E2320 ; 179: void * ListElement_Remove(LIST *lst,int index);
05E8: FFFFFFFF 69D10620 ; 17A: int GetCurrentPID(void);
05EC: FFFFFFFF F51E2320 ; 17B: int ListElement_Prt2NumElement(LIST *lst,void *ptr);
05F0: FFFFFFFF 483F0A20 ; 17C: union SIGNAL *alloc(OSBUFSIZE size,SIGSELECT signo);
05F4: FFFFFFFF 643F0A20 ; 17D: union SIGNAL *receive(const SIGSELECT *sigsel);
05F8: FFFFFFFF 543F0A20 ; 17E: void send(union SIGNAL **sig,PROCESS to);
05FC: FFFFFFFF A43F0A20 ; 17F: PROCESS sender(union SIGNAL **sig);
0600: FFFFFFFF 743F0A20 ; 180: void free_buf(union SIGNAL **sig);
0604: FFFFFFFF 40400A20 ; 181: PROCESS create_process(int proc_type,char *name,OSENTRYPOINT *entrypoint,OSADDRESS stack_size,OSPRIORITY priority,OSTIME timeslice,PROCESS pid_block,void *redir_table,OSVECTOR vector,OSUSER user);
0608: FFFFFFFF 60420A20 ; 182: void start(PROCESS pid);
060C: FFFFFFFF 10410A20 ; 183: int get_ptype(PROCESS pid);
0610: FFFFFFFF 5C400A20 ; 184: PROCESS current_process(void);
0614: FFFFFFFF 943F0A20 ; 185: void delay(OSTIME timeout);
;0618: xxxxxxxx yyyyyyyy ; 186: OSBOOLEAN hunt(const char *name, OSUSER user, PROCESS *name_, union SIGNAL **hunt_sig);
;061C: xxxxxxxx yyyyyyyy ; 187: void kill_proc(PROCESS pid);
;0620: xxxxxxxx yyyyyyyy ; 188: OSBOOLEAN set_bp (PROCESS pid,OSADDRESS address,OSADDRESS attribute,union SIGNAL **trapsig);
;0624: xxxxxxxx yyyyyyyy ; 189: union SIGNAL *receive_w_tmo (OSTIME timeout, SIGSELECT *sel);
;0628: xxxxxxxx yyyyyyyy ; 18A: OSBOOLEAN clear_bp (PROCESS pid, OSADDRESS addr);
;062C: xxxxxxxx yyyyyyyy ; 18B:
;0630: xxxxxxxx yyyyyyyy ; 18C:
;0634: xxxxxxxx yyyyyyyy ; 18D:
;0638: xxxxxxxx yyyyyyyy ; 18E:
;063C: xxxxxxxx yyyyyyyy ; 18F:
;0640: xxxxxxxx yyyyyyyy ; 190:
;0644: xxxxxxxx yyyyyyyy ; 191:
;0648: xxxxxxxx yyyyyyyy ; 192:
;064C: xxxxxxxx yyyyyyyy ; 193:
;0650: xxxxxxxx yyyyyyyy ; 194:
;0654: xxxxxxxx yyyyyyyy ; 195:
;0658: xxxxxxxx yyyyyyyy ; 196:
;065C: xxxxxxxx yyyyyyyy ; 197:
;0660: xxxxxxxx yyyyyyyy ; 198:
;0664: xxxxxxxx yyyyyyyy ; 199:
;0668: xxxxxxxx yyyyyyyy ; 19A:
;066C: xxxxxxxx yyyyyyyy ; 19B:
;0670: xxxxxxxx yyyyyyyy ; 19C:
;0674: xxxxxxxx yyyyyyyy ; 19D:
;0678: xxxxxxxx yyyyyyyy ; 19E:
;067C: xxxxxxxx yyyyyyyy ; 19F:
0680: FFFFFFFF 4177D620 ; 1A0: char* strcpy(char * dest, const char * source);
0684: FFFFFFFF 3DE86B20 ; 1A1: void *CreateMessage(int size,int ev,char *name);
0688: FFFFFFFF 91E86B20 ; 1A2: void SendMessage(void **signal,int PID);
068C: FFFFFFFF 4DE96B20 ; 1A3: void * WaitMessage(void *SIGSEL);
0690: FFFFFFFF 6DE96B20 ; 1A4: int FreeMessage(void **Mess);
0694: FFFFFFFF 15AF2120 ; 1A5: void SendDispatchMessage(int id, int unk_zero, int size,void *mess);
0698: FFFFFFFF 192A5420 ; 1A6: char * UIEventName(int event);
069C: FFFFFFFF 64432428 ;81A7: int * MissedEvents(void); //возможно не правильно(
06A0: FFFFFFFF B95D4220 ; 1A8: void UI_Event(int event);
06A4: FFFFFFFF C55D4220 ; 1A9: void UI_Event_wData(int event,void *message,void (*mfree)(void*));
06A8: FFFFFFFF E95D4220 ; 1AA: void UI_Event_toBookID(int event,int BookID);
06AC: FFFFFFFF F95D4220 ; 1AB: void UI_Event_toBookIDwData(int event,int BookID,void *message,void (*mfree)(void*));
06B0: FFFFFFFF F9212320 ; 1AC: int ListElement_Find(LIST *lst,void *element, int (*cmp_proc)(void *,void *));
06B4: FFFFFFFF C5202320 ; 1AD: void * ListElement_GetByIndex(LIST * , int index);
06B8: FFFFFFFF CD066120 ; 1AE: wchar_t* wstrrchr(const wchar_t* wstr, wchar_t wchar);
06BC: FFFFFFFF 11CD2520 ; 1AF: void BookObj_CallSubroutine(BOOK * , BOOK_SUBROUTINE *subr);
06C0: FFFFFFFF 451F2320 ; 1B0: void ListElement_Add(LIST *lst,void *newElement);
06C4: FFFFFFFF 858ED220 ; 1B1: void debug_printf(const char * fmt,...);
06C8: FFFFFFFF 4D637520 ; 1B2: int PlayFile(const wchar_t * path, const wchar_t * fname);
;06CC: xxxxxxxx yyyyyyyy ; 1B3:
06D0: FFFFFFFF 7D525520 ; 1B4: int REQUEST_PROFILE_GETACTIVEPROFILE(const int *__zero , int *level);
;06D4: xxxxxxxx yyyyyyyy ; 1B5: int Profile_SetActive(int NUMprof,int set_in_gdfs_flag);
06D8: FFFFFFFF 7DDD2820 ; 1B6: void SetBrightnessOfScreen(int br);
06DC: FFFFFFFF 11087620 ; 1B7: int isKeylocked(void);
06E0: FFFFFFFF D53B3520 ;81B8: IS_NEEDED_BOOK isMediaPlayerVideoBook(void);
06E4: FFFFFFFF 29553520 ; 1B9: void VideoOnWholeScreen(BOOK * MediaPlayer_Video_Book);
06E8: FFFFFFFF 7D147620 ; 1BA: void ShuttingDown(void);
06EC: FFFFFFFF 8D834620 ; 1BB: void Vibra(int t1, int t2, int t3);
06F0: FFFFFFFF 3DD84B20 ; 1BC: int REQUEST_DATEFORMAT_GET(const int *SYNC, char *DateFormat);
06F4: FFFFFFFF DDD84B20 ; 1BD: int REQUEST_TIMEFORMAT_GET(const int *SYNC, char *TimeFormat);
06F8: FFFFFFFF 19B97420 ; 1BE: int Date2ID(DATE *, int TimeFormat,int);
06FC: FFFFFFFF 31B87420 ; 1BF: int Time2ID(TIME *, char TimeFormat,int isSec);
0700: FFFFFFFF B5C97720 ; 1C0: GUI_LIST * CreateListObject(BOOK * , void * unk);
0704: FFFFFFFF 71CB7720 ; 1C1: void SetNumOfMenuItem(void * , int item_count);
0708: FFFFFFFF 8C911128 ;81C2: LIST ** ROOT_APP(void);
070C: FFFFFFFF B1377520 ; 1C3: void SoftKey_AddHelpStr(void *gui,int msg,int StrID);
0710: FFFFFFFF A9397520 ; 1C4: void SoftKey_SetItemAsSubItem(void *gui,int item,int subitem);
0714: FFFFFFFF 41945420 ; 1C5: int REQUEST_SYSTEM_SHUTDOWN(void);
0718: FFFFFFFF 51945420 ; 1C6: int REQUEST_SYSTEM_RESTART(void);
071C: FFFFFFFF 35387520 ; 1C7: void SoftKeys_SetText(void *gui,int msg,int StrID,int StrID1);
0720: FFFFFFFF E93C5420 ; 1C8: int isRightNowBook(BOOK *);
0724: FFFFFFFF 51915420 ; 1C9: int isVolumeControllerBook(BOOK *);
0728: FFFFFFFF 21407520 ; 1CA: GUI_TABMENUBAR * CreateTabMenuBar(BOOK *);
072C: FFFFFFFF 41417520 ; 1CB: void TabMenuBar_SetTabCount(GUI_TABMENUBAR * , int count);
0730: FFFFFFFF 2D427520 ; 1CC: void TabMenuBar_AssignGuiObj(GUI_TABMENUBAR * , int tab , GUI *);
0734: FFFFFFFF 9D427520 ; 1CD: void TabMenuBar_SetTabIcon(GUI_TABMENUBAR *,int tab, wchar_t icon , int for_state);
0738: FFFFFFFF 7D0C2820 ; 1CE: GUI *GUI_Free(GUI*);
073C: FFFFFFFF FD217520 ; 1CF: void InputFeedback_SetIcon(GUI *gui, wchar_t icon);
0740: FFFFFFFF 091D7720 ; 1D0: int StringInput_GetStringAndLen (GUI*,wchar_t**,u16*);
0744: FFFFFFFF 14981128 ;81D1: PAudioControl* GetAudioControlPtr();
0748: FFFFFFFF 7D8E2E20 ; 1D2: int AudioControl_Vibrate(PAudioControl pIAudioControl, int vibratime, int pausetime, int totaltime);
074C: FFFFFFFF 29E64D20 ; 1D3: int GetVolumeSize(char * volume, VOLUMESIZE *);
0750: FFFFFFFF F1E37720 ; 1D4: GUI_NOFMANY * CreateNOfMany(BOOK *);
0754: FFFFFFFF C1E57720 ; 1D5: void NOfMany_SetTexts(GUI_NOFMANY * , int * StrIDtable, int items_count);
0758: FFFFFFFF 25E57720 ; 1D6: void NOfMany_SetChecked(GUI_NOFMANY * , u16 * checked_table, int items_count);
075C: FFFFFFFF E5E47720 ; 1D7: void NOfMany_SetCursor(GUI_NOFMANY * , int item);
0760: FFFFFFFF 4DE57720 ; 1D8: int NOfMany_GetCheckedCount(GUI_NOFMANY *);
0764: FFFFFFFF 39E57720 ; 1D9: int NOfMany_GetChecked(GUI_NOFMANY * , u16 * buffer );
0768: FFFFFFFF B9E57720 ; 1DA: void NOfMany_SetonMessage(GUI_NOFMANY * , void * proc );
;076C: xxxxxxxx yyyyyyyy ; 1DB:
;0770: xxxxxxxx yyyyyyyy ; 1DC:
;0774: xxxxxxxx yyyyyyyy ; 1DD:
;0778: xxxxxxxx yyyyyyyy ; 1DE:
077C: FFFFFFFF 89280220 ; 1DF: PAudioControl AudioControl_Init(); //nullsub(ret 0)
0780: FFFFFFFF 25E87720 ; 1E0: void OneOfMany_SetFocused(GUI_ONEOFMANY * , int item);
0784: FFFFFFFF 85E87720 ; 1E1: void OneOfMany_SetonMessage(GUI_ONEOFMANY * , int (*proc)(GUI_MESSAGE *));
0788: FFFFFFFF E1487520 ; 1E2: GUI_FEEDBACK * CreateFeedBack (int,...);
078C: FFFFFFFF 8D497520 ; 1E3: void FeedBack_SetText(GUI_FEEDBACK*,int);
0790: FFFFFFFF ED178120 ; 1E4: int GetBattaryState(const int * , BATT *);
0794: FFFFFFFF 75B47520 ; 1E5: void * get_DisplayGC (void);
0798: FFFFFFFF 55492620 ; 1E6: void GetGuiRect(void*,RECT*);
079C: FFFFFFFF 49BA7520 ; 1E7: void get_GC_RECT(void*,RECT*);
07A0: FFFFFFFF 5DBD7520 ; 1E8: int get_GC_xx(void * GC);
07A4: FFFFFFFF 51BD7520 ; 1E9: void *set_GC_xx(void * GC, int);
07A8: FFFFFFFF F1B97520 ; 1EA: void GC_validate_RECT(void * GC , RECT*);
07AC: FFFFFFFF D9D22520 ; 1EB: void addGui2book(BOOK*,GUI*);
07B0: FFFFFFFF BD7F2620 ; 1EC: void DrawRect(int x1, int y1,int x2 ,int y2,int pen_color,int brush_color);
07B4: FFFFFFFF C5832620 ; 1ED: void DrawString(int StrID,int align,int x1,int y1,int x2,int y2,int unk,int unk1,int pen_color ,int brush_color);
07B8: FFFFFFFF 7D102820 ; 1EE: void addGui2XGuiList (void* xguilist , GUI*);
07BC: FFFFFFFF D5472620 ; 1EF: void InvalidateRect(DISP_OBJ *,RECT*);
07C0: FFFFFFFF 050C2820 ; 1F0: int CreateObject(GUI*,void (*)(DISP_DESC *),void (*)(DISP_DESC *),BOOK *,void(*)(),int,int size_obj);
07C4: FFFFFFFF 198F2620 ; 1F1: int SetFont(int);
07C8: FFFFFFFF 90931128 ;81F2: DISP_OBJ ** StatusRow_p(void);
07CC: FFFFFFFF 915D4220 ; 1F3: int root_list_get_session_count(void);
07D0: FFFFFFFF A55D4220 ; 1F4: UI_APP_SESSION *root_list_get_session(int num_session);
07D4: FFFFFFFF BD564220 ; 1F5: BOOK *SESSION_GetTopBook(UI_APP_SESSION *);
07D8: FFFFFFFF 49517520 ; 1F6: int MainInput_getVisible(GUI *);
07DC: FFFFFFFF 55517520 ; 1F7: int MainInput_strlen(GUI *);
07E0: FFFFFFFF 69517520 ; 1F8: char * MainInput_getPNUM(GUI *);
07E4: FFFFFFFF 75517520 ; 1F9: int MainInput_isPlus(GUI *);
07E8: FFFFFFFF A5D62520 ; 1FA: int BOOK_GetBookID(BOOK * );
07EC: FFFFFFFF 41066120 ; 1FB: int wstrncmp(const wchar_t*,const wchar_t*,int);
07F0: FFFFFFFF 79632620 ; 1FC: int DISP_OBJ_GetAbsoluteXPos(DISP_OBJ *);
07F4: FFFFFFFF A1632620 ; 1FD: int DISP_OBJ_GetAbsoluteYPos(DISP_OBJ *);
07F8: FFFFFFFF DD4D2620 ; 1FE: WINDOW * DISP_OBJ_GetWindow(DISP_OBJ *);
07FC: FFFFFFFF A1D44220 ; 1FF: int GetThemeColor(int , int);
0800: FFFFFFFF 214A5520 ; 200: int REQUEST_SETTING_SILENCE_SET(const int * __zero,u16 profile,u16 value);
0804: FFFFFFFF C5495520 ; 201: int REQUEST_SETTING_SILENCE_GET(const int * __zero,u16 profile, char * silence_mode);
0808: FFFFFFFF 3D291C20 ; 202: void VCALL_Init (void* vc);
080C: FFFFFFFF 312A1C20 ; 203: void VCALL_SetName (void * vc , wchar_t * name ,unsigned short name_len);
0810: FFFFFFFF 8D2A1C20 ; 204: void VCALL_SetNameIcon (void * vc , wchar_t icon);
0814: FFFFFFFF 512A1C20 ; 205: void VCALL_SetNumber (void * vc , wchar_t * number , unsigned short num_len);
0818: FFFFFFFF 792A1C20 ; 206: void VCALL_SetHZ1 (void * vc, int , u16 );
081C: FFFFFFFF 852A1C20 ; 207: void VCALL_SetHZ2 (void * vc , u16 );
0820: FFFFFFFF 55201C20 ; 208: void MakeVoiceCall (int SessioID , void * vc ,int flag);
0824: FFFFFFFF 7D7F5320 ; 209: int isDirectory (wchar_t * path ,wchar_t * filename , int * error );
0828: FFFFFFFF 09C84D20 ; 20A: void FileDelete (wchar_t * path ,wchar_t * filename , int * error );
082C: FFFFFFFF 91207520 ; 20B: void SetFocus (GUI * , int);
0830: FFFFFFFF 254E3720 ; 20C: int CreateSMSCont (int, void*);
0834: FFFFFFFF BD523720 ; 20D: int FreeSMSCont (void*);
0838: FFFFFFFF 854F3720 ; 20E: int PrepareSMSCont (void*,wchar_t*,wchar_t*,int,int);
083C: FFFFFFFF 0D523720 ; 20F: int CteateNewMessage (int,void*,int);
0840: FFFFFFFF 387BF320 ;8210: void * get_APP_DESC_TABLE(void);
0844: FFFFFFFF 1D1C7520 ; 211: C_INTERFACE *Window_GetComponentInterface(WINDOW*);
0848: FFFFFFFF 69211D20 ; 212: int AB_POSITIONNBR_GET(void * ab_name,char * ,u16 * ,void * ab_num);
084C: FFFFFFFF 0D1E1D20 ; 213: int AB_NAME_ITEM2StrID(void * ab_name);
0850: FFFFFFFF 751E1D20 ; 214: int AB_NUM_ITEM2StrID(void * ab_num_item);
0854: FFFFFFFF 61F84820 ; 215: int GetABRecNum(AB_GET_STRUCT *);
0858: FFFFFFFF 58A8F020 ;8216: AB_ITEM_DESC * get_AB_ITEMS_DESC();
085C: FFFFFFFF C9DE4920 ; 217: GUI * SBY_GetMainInput(BOOK * StandBy);
0860: FFFFFFFF C5DE4920 ; 218: GUI * SBY_GetStatusIndication(BOOK * StandBy);
0864: FFFFFFFF E1004C20 ; 219: int REQUEST_PHONEBOOK_ACCESSSTATUS_TOTAL_GET(const int * __zero, int *);
0868: FFFFFFFF 0CED0728 ;821A: int * PID_MMI(void);
;086C: xxxxxxxx yyyyyyyy ; 21B:
;0870: xxxxxxxx yyyyyyyy ; 21C:
0874: FFFFFFFF 3D422620 ; 21D: DISP_OBJ* DISPBASE_GetFocused(int display);
0878: FFFFFFFF 89462620 ; 21E: char DISP_OBJ_getVisible(DISP_OBJ*);
087C: FFFFFFFF 259C4320 ; 21F: DISP_DESC* DISP_OBJ_GetDESC (DISP_OBJ*);
0880: FFFFFFFF 093A2620 ; 220: void DISP_DESC_SetName (DISP_DESC* , const char * name);
0884: FFFFFFFF 51612620 ; 221: char* DISP_OBJ_GetName (DISP_OBJ *);
0888: FFFFFFFF 313A2620 ; 222: void DISP_DESC_SetSize (DISP_DESC* , u16 size);
;088C: xxxxxxxx yyyyyyyy ; 223: u16 DISP_DESC_GetSize (DISP_OBJ *);
0890: FFFFFFFF 513A2620 ; 224: void DISP_DESC_SetOnCreate (DISP_DESC* , DISP_OBJ_ONCREATE_METHOD);
0894: FFFFFFFF FD3D2620 ; 225: DISP_OBJ_ONCREATE_METHOD DISP_OBJ_GetOnCreate (DISP_OBJ *);
0898: FFFFFFFF 713A2620 ; 226: void DISP_DESC_SetOnClose (DISP_DESC* , DISP_OBJ_ONCLOSE_METHOD);
089C: FFFFFFFF 113E2620 ; 227: DISP_OBJ_ONCLOSE_METHOD DISP_OBJ_GetOnClose (DISP_OBJ *);
08A0: FFFFFFFF 913A2620 ; 228: void DISP_DESC_SetOnRedraw (DISP_DESC* , DISP_OBJ_ONREDRAW_METHOD);
08A4: FFFFFFFF 253E2620 ; 229: DISP_OBJ_ONREDRAW_METHOD DISP_OBJ_GetOnRedraw (DISP_OBJ *);
08A8: FFFFFFFF D13A2620 ; 22A: void DISP_DESC_SetOnKey (DISP_DESC* , DISP_OBJ_ONKEY_METHOD);
08AC: FFFFFFFF 4D3E2620 ; 22B: DISP_OBJ_ONKEY_METHOD DISP_OBJ_GetOnKey (DISP_OBJ *);
;08B0: xxxxxxxx yyyyyyyy ; 22C: void DISP_DESC_SetonRefresh (DISP_DESC* ,DISP_OBJ_METHOD);
;08B4: xxxxxxxx yyyyyyyy ; 22D: DISP_OBJ_METHOD DISP_OBJ_GetonRefresh (DISP_OBJ *);
;08B8: xxxxxxxx yyyyyyyy ; 22E: void DISP_DESC_SetMethod04 (DISP_DESC* ,void (*)(void*));
;08BC: xxxxxxxx yyyyyyyy ; 22F: DISP_OBJ_METHOD DISP_OBJ_GetMethod04 (DISP_OBJ *);
;08C0: xxxxxxxx yyyyyyyy ; 230: void DISP_DESC_SetMethod05 (DISP_DESC* ,void (*)(void*));
;08C4: xxxxxxxx yyyyyyyy ; 231: DISP_OBJ_METHOD DISP_OBJ_GetMethod05 (DISP_OBJ *);
08C8: FFFFFFFF F13A2620 ; 232: void DISP_DESC_SetMethod06 (DISP_DESC* ,DISP_OBJ_METHOD);
08CC: FFFFFFFF 613E2620 ; 233: DISP_OBJ_METHOD DISP_OBJ_GetMethod06 (DISP_OBJ *);
;08D0: xxxxxxxx yyyyyyyy ; 234: void DISP_DESC_SetMethod07 (DISP_DESC* ,void (*)(void*));
;08D4: xxxxxxxx yyyyyyyy ; 235: DISP_OBJ_METHOD DISP_OBJ_GetMethod07 (DISP_OBJ *);
08D8: FFFFFFFF 313B2620 ; 236: void DISP_DESC_SetMethod08 (DISP_DESC* ,DISP_OBJ_METHOD);
08DC: FFFFFFFF 893E2620 ; 237: DISP_OBJ_METHOD DISP_OBJ_GetMethod08 (DISP_OBJ *);
;08E0: xxxxxxxx yyyyyyyy ; 238: void DISP_DESC_SetMethod09 (DISP_DESC* ,void (*)(void*));
;08E4: xxxxxxxx yyyyyyyy ; 239: DISP_OBJ_METHOD DISP_OBJ_GetMethod09 (DISP_OBJ *);
;08E8: xxxxxxxx yyyyyyyy ; 23A: void DISP_DESC_SetMethod0A (DISP_DESC* ,void (*)(void*));
;08EC: xxxxxxxx yyyyyyyy ; 23B: DISP_OBJ_METHOD DISP_OBJ_GetMethod0A (DISP_OBJ *);
;08F0: xxxxxxxx yyyyyyyy ; 23C: void DISP_DESC_SetMethod0B (DISP_DESC* ,void (*)(void*));
;08F4: xxxxxxxx yyyyyyyy ; 23D: DISP_OBJ_METHOD DISP_OBJ_GetMethod0B (DISP_OBJ *);
;08F8: xxxxxxxx yyyyyyyy ; 23E: void DISP_DESC_SetMethod0C (DISP_DESC* ,void (*)(void*));
;08FC: xxxxxxxx yyyyyyyy ; 23F: DISP_OBJ_METHOD DISP_OBJ_GetMethod0C (DISP_OBJ *);
0900: FFFFFFFF F96B5420 ; 240: void JavaSession_Manager (int cmd);
0904: FFFFFFFF 416B5420 ; 241: int JavaSession_GetName(void);
0908: FFFFFFFF A5002D20 ; 242: int TextCopyId(int);
090C: FFFFFFFF 95D52520 ; 243: UI_APP_SESSION *Book_GetSession(BOOK*);
0910: FFFFFFFF 01D67720 ; 244: void List2lineSetAsSubitem (void* msg,int unk,int n_sub_items);
0914: FFFFFFFF 8DD67720 ; 245: void List2lineSubitemAddText(void* msg,int StrID);
0918: FFFFFFFF 7DD67720 ; 246: int GUIonMessage_GetCreatedSubItemParrentIndex(void * msg);
091C: FFFFFFFF E14D7320 ; 247: void GoMusic(void);
0920: FFFFFFFF 5D844620 ; 248: void Vibra_Off(int t1);
0924: FFFFFFFF 95553520 ; 249: void VideoOnNormalScreen(BOOK * MediaPlayer_Video_Book);
0928: FFFFFFFF 59637520 ; 24A: int PlayFileV(const wchar_t * path,const wchar_t * fname, int vol);
092C: FFFFFFFF 697A4620 ; 24B: int GetSilent(void);
0930: FFFFFFFF AD454620 ; 24C: int GetVibrator(int ignorevibrator,int ignoresilent);
0934: FFFFFFFF DD854620 ; 24D: int GetAudioSettings(int what, char* retvalue);
0938: FFFFFFFF 5968B320 ; 24E: int GetChipID(void);
;093C: xxxxxxxx yyyyyyyy ; 24F:
;0940: xxxxxxxx yyyyyyyy ; 250:
;0944: xxxxxxxx yyyyyyyy ; 251:
0948: FFFFFFFF 6DD67720 ; 252: int List2LineGetCurrentIndex(void * msg);
094C: FFFFFFFF 5DD67720 ; 253: int GUIonMessage_GetCurrentItemIndex(void * msg);
0950: FFFFFFFF F1A64D20 ; 254: void DestroyDirHandle(DIR_HANDLE *handle);
0954: FFFFFFFF 74E1F120 ;8255: DB_EXT *LastExtDB(void);
0958: FFFFFFFF 4DD34E20 ; 256: void GetOtherExtMethods(FILESUBROUTINE **);
095C: FFFFFFFF A51A4320 ; 257: void MessageBox(int HeaderStrID,int MessageStrID,wchar_t IconID, int style /*1 or 2*/,int time,BOOK * unk);
0960: FFFFFFFF 45E14220 ; 258: int Display_GetHeight(int Display);
0964: FFFFFFFF 55E14220 ; 259: int Display_GetWidth(int Display);
0968: FFFFFFFF D9627520 ; 25A: void PlaySystemSound (int SndNumber);
;096C: xxxxxxxx yyyyyyyy ; 25B:
;0970: xxxxxxxx yyyyyyyy ; 25C:
0974: FFFFFFFF ED407520 ; 25D: int TabMenuBar_GetFocusedTabIndex(GUI_TABMENUBAR * );
0978: FFFFFFFF 19417520 ; 25E: void TabMenuBar_SetTabFocused(GUI_TABMENUBAR * , int tab_num);
097C: FFFFFFFF 5DBC7520 ; 25F: int GC_GetPenColor (void* GC);
0980: FFFFFFFF 1DBC7520 ; 260: void GC_SetPenColor(void* GC , int pen_color);
0984: FFFFFFFF DBB87520 ; 261: void GC_SetPixel (void* GC,int x1,int y1,int color);
0988: FFFFFFFF D9C57520 ; 262: void GC_DrawLine(void* GC,int x1, int y1, int x2, int y2);
098C: FFFFFFFF 6DC77520 ; 263: void GC_DrawFRect (void* GC,int color,int x1,int y1,int x2 ,int y2);
0990: FFFFFFFF 85B97520 ; 264: int GC_DrawBitmap(void *GC, int x1, int y1, int x2, int y2, int * bmp);
;0994: xxxxxxxx yyyyyyyy ; 265: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
;0998: xxxxxxxx yyyyyyyy ; 266: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
;099C: xxxxxxxx yyyyyyyy ; 267: png_infop png_create_info_struct(png_structp png_ptr);
;09A0: xxxxxxxx yyyyyyyy ; 268: void png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr);
;09A4: xxxxxxxx yyyyyyyy ; 269: void png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr, png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn, png_progressive_end_ptr end_fn);
;09A8: xxxxxxxx yyyyyyyy ; 26A: void png_process_data(png_structp png_ptr, png_infop info_ptr, png_bytep buffer, png_size_t buffer_size);
;09AC: xxxxxxxx yyyyyyyy ; 26B: void png_read_update_info(png_structp png_ptr, png_infop info_ptr);
;09B0: xxxxxxxx yyyyyyyy ; 26C: png_voidp png_get_progressive_ptr(png_structp png_ptr);
;09B4: xxxxxxxx yyyyyyyy ; 26D: png_uint_32 png_get_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
;09B8: xxxxxxxx yyyyyyyy ; 26E: void png_set_strip_16(png_structp png_ptr);
;09BC: xxxxxxxx yyyyyyyy ; 26F: void png_set_gray_1_2_4_to_8(png_structp png_ptr);
;09C0: xxxxxxxx yyyyyyyy ; 270: void png_set_gray_to_rgb(png_structp png_ptr);
;09C4: xxxxxxxx yyyyyyyy ; 271: png_uint_32 png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag);
;09C8: xxxxxxxx yyyyyyyy ; 272: void png_set_tRNS_to_alpha(png_structp png_ptr);
;09CC: xxxxxxxx yyyyyyyy ; 273: void png_set_filler(png_structp png_ptr, png_uint_32 filler, int flags);
;09D0: xxxxxxxx yyyyyyyy ; 274: void png_set_palette_to_rgb(png_structp png_ptr);
;09D4: xxxxxxxx yyyyyyyy ; 275: png_uint_32 png_get_rowbytes(png_structp png_ptr, png_infop info_ptr);
;09D8: xxxxxxxx yyyyyyyy ; 276: void png_progressive_combine_row(png_structp png_ptr, png_bytep old_row, png_bytep new_row);
;09DC: xxxxxxxx yyyyyyyy ; 277: int png_sig_cmp(png_bytep sig, png_size_t start, png_size_t num_to_check);
09E0: FFFFFFFF 34950A20 ; 278: int setjmp(jmp_buf jmpbuf);
09E4: FFFFFFFF 58950A20 ; 279: void longjmp(jmp_buf, int);
09E8: FFFFFFFF 73250720 ; 27A: int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size);
09EC: FFFFFFFF 43260720 ; 27B: int inflate (z_streamp strm, int flush);
09F0: FFFFFFFF 6B360720 ; 27C: int inflateEnd (z_streamp strm);
09F4: FFFFFFFF FD66D620 ; 27D: int memcmp (const void *m1,const void *m2,int n);
09F8: FFFFFFFF B177D620 ; 27E: int strncmp(const char *s1, const char *s2, int len);
09FC: FFFFFFFF ED77D620 ; 27F: char *strncpy (char *dest,const char *source,int maxlen);
0A00: FFFFFFFF D576D620 ; 280: char *strcat(char *dest, const char *src);
0A04: FFFFFFFF 95AE4320 ; 281: void GuiObject_SetTitleType(GUI *gui, int type);
0A08: FFFFFFFF 0DD67720 ; 282: __thumb void GUIonMessage_SetItemDisabled (void * msg, int Disabled);
0A0C: FFFFFFFF F5534D20 ; 283: __thumb int REQUEST_IMAGEHANDLER_INTERNAL_REGISTER(const int * __zero,u16 ImageHandle,wchar_t *path,wchar_t *fname,int unk, wchar_t * ImageID ,char * error);
0A10: FFFFFFFF 75554D20 ; 284: __thumb int REQUEST_IMAGEHANDLER_INTERNAL_UNREGISTER (const int * __zero,u16 ImageHandle,u16* ,u16* ,wchar_t ImageID, int unk_1,char * error);
;0A14: xxxxxxxx yyyyyyyy ;8285: SURFACE ** get_Surfaces(void);
0A18: FFFFFFFF 293C2E20 ; 286: int iconidname2id(const wchar_t* idname,int maxnamelen,int *id);
0A1C: FFFFFFFF 81D41920 ; 287: int textidname2id(const wchar_t* idname,int maxnamelen,int* id);
0A20: FFFFFFFF 1964A320 ; 288: void ListMenu_SetNoItemText(GUI_LIST *, int str); //nullsub(void)
;0A24: xxxxxxxx yyyyyyyy ; 289:
0A28: FFFFFFFF 1D115220 ;828A: IS_NEEDED_BOOK isFmRadioBook(void);
0A2C: FFFFFFFF ECF33320 ;828B: IS_NEEDED_BOOK isAudioPlayerBook(void);
0A30: FFFFFFFF DD413420 ; 28C: void PlayerControl(BOOK *AudioPlayerBook, int);
0A34: FFFFFFFF D5ED5120 ; 28D: void SwitchRadioStationFromList(BOOK *FmRadioBook, int);
0A38: FFFFFFFF 91934320 ; 28E: void Shortcut_Run (wchar_t * shortcut_name);
0A3C: FFFFFFFF 359B4D20 ; 28F: int mkdir(const wchar_t* path);
0A40: FFFFFFFF D5A14D20 ; 290: int rmdir(const wchar_t* path, int zero);
0A44: FFFFFFFF 21C74D20 ; 291: int chmod(const wchar_t* path, const wchar_t* fname, int amode);
0A48: FFFFFFFF 75CC4D20 ; 292: int rename(const wchar_t* oldpath, const wchar_t* oldfname, const wchar_t* newpath, const wchar_t* newfname, int zero);
0A4C: FFFFFFFF 61962620 ; 293: int GetImageWidth(wchar_t ImageID);
0A50: FFFFFFFF 79962620 ; 294: int GetImageHeight(wchar_t ImageID);
;0A54: xxxxxxxx yyyyyyyy ; 295: void * CallID_GetCallStatusDesc(int CallID);
0A58: FFFFFFFF 2908A520 ; 296: wchar_t * CallStatusDesc_GetName(void * CallStatusDesc);
0A5C: FFFFFFFF 3D222320 ; 297: void List_FreeElements(LIST *,int (*cmp_proc)(void * elem_from_list),void (*freefunc)(void * elem_from_list));
0A60: FFFFFFFF 8978D620 ; 298: char * strstr(const char * str1,const char * str2);
0A64: FFFFFFFF 914B7920 ; 299: int GPRS_GetLastSessionInfo(int,GPRS_SESSION_INFO *);
0A68: FFFFFFFF DD076120 ; 29A: int wstrcmpni(const wchar_t * wstr1,const wchar_t * wstr2,int len);
0A6C: FFFFFFFF 31C27420 ; 29B: int wtoi(const wchar_t * wstr,int len,int * dest);
0A70: FFFFFFFF 25362220 ; 29C: void DATE_GetWeekDay(DATE *,char * dest);
0A74: FFFFFFFF 2DEE5C20 ; 29D: void Cale_GetSettings(int setID,void *);
0A78: FFFFFFFF 7981D620 ; 29E: wchar_t * wstrwstr(const wchar_t * wstr1,const wchar_t * wstr2);
0A7C: FFFFFFFF 55086120 ; 29F: int wstrcmpi(const wchar_t *ws1, const wchar_t *ws2);
0A80: FFFFFFFF 217FD620 ; 2A0: wchar_t * wstrchr(const wchar_t * source,wchar_t chr);
0A84: FFFFFFFF D9212820 ; 2A1: void GUIObject_HideSoftkeys(void *gui); //nullsub(void)
0A88: FFFFFFFF D9212820 ; 2A2: void GUIObject_ShowSoftkeys(void *gui); //nullsub(void)
0A8C: FFFFFFFF A9F57420 ; 2A3: DISP_OBJ* DispObject_SoftKeys_Get(void);
0A90: FFFFFFFF 61894220 ; 2A4: int StandbyBackground_SetImage(int type,int,int,const wchar_t* path,const wchar_t* fname,int);
0A94: FFFFFFFF D1737520 ; 2A5: GUI *CreateYesNoQuestionVA(int zero, ...);
0A98: FFFFFFFF 7DCF7720 ; 2A6: void ListMenu_SetSecondLineText(GUI_LIST *,int elem_num,int StrID);
;0A9C: xxxxxxxx yyyyyyyy ; 2A7: void _REQUEST_OAF_START_APPLICATION(const int * __one,int __zero,MIDP_DESC *,int ___zero);
0AA0: FFFFFFFF 09E44D20 ; 2A8: int FSX_isNameInvalid(wchar_t * name);
0AA4: FFFFFFFF 85F61F20 ; 2A9: void DataBrowserDesc_SetFoldersNumber(void * DataBrowserDesc,int state);
0AA8: FFFFFFFF F1F51F20 ; 2AA: void DataBrowserDesc_SetActions(void * DataBrowserDesc,char * actions);
0AAC: FFFFFFFF 41F41F20 ; 2AB: void DataBrowserDesc_SetSelectAction(void * DataBrowserDesc,int state);
0AB0: FFFFFFFF CDF41F20 ; 2AC: void DataBrowserDesc_SetSelectActionOnFolders(void * DataBrowserDesc,int state);
0AB4: FFFFFFFF C5F31F20 ; 2AD: void DataBrowserDesc_SetBookID(void * DataBrowserDesc,int BookID);
0AB8: FFFFFFFF 5DF31F20 ; 2AE: void DataBrowserDesc_SetItemFilter(void * DataBrowserDesc,int (*proc)(const wchar_t * ExtList,const wchar_t * ItemPath,const wchar_t * ItemName));
0ABC: FFFFFFFF 39F71F20 ; 2AF: void DataBrowserDesc_SetOption(void * DataBrowserDesc,char * option);
;0AC0: xxxxxxxx yyyyyyyy ; 2B0: void DataBrowserDesc_SetOpenEmptyFolder(void * DataBrowserDesc,int state);
0AC4: FFFFFFFF 81F31F20 ; 2B1: void DataBrowserDesc_SetFileExtList(void * DataBrowserDesc,const wchar_t * ExtList);
0AC8: FFFFFFFF C10F4F20 ; 2B2: void FSX_RemoveIllegalSymbolsName(FILEITEM *);
0ACC: FFFFFFFF 09084F20 ; 2B3: FILEITEM * FILEITEM_Create(void);
0AD0: FFFFFFFF 49094F20 ; 2B4: void FILEITEM_Destroy(FILEITEM *);
0AD4: FFFFFFFF 694A7520 ; 2B5: GUI *CreateDateInputVA(int zero, ...);
0AD8: FFFFFFFF 01707520 ; 2B6: GUI *CreateTimeInputVA(int zero, ...);
0ADC: FFFFFFFF 651D7720 ; 2B7: void StringInput_SetCursorPosition(GUI *,u16 curs_pos,char unk);
0AE0: FFFFFFFF A9CD2520 ; 2B8: void BookObj_CallPage(BOOK * book, const PAGE_DESC * page);
0AE4: FFFFFFFF 614C7520 ; 2B9: unsigned int DateInput_GetDateInt(void *dateinp_msg);
0AE8: FFFFFFFF 2D727520 ; 2BA: unsigned int TimeInput_GetTimeInt(void *timeinp_msg);
0AEC: FFFFFFFF 18961128 ;82BB: FONT_DESC *GetFontDesc(void);
0AF0: FFFFFFFF D0971128 ;82BC: int *GetFontCount();
0AF4: FFFFFFFF 45BD7520 ; 2BD: int GC_GetBrushColor(void* GC);
0AF8: FFFFFFFF 05BD7520 ; 2BE: void GC_SetBrushColor(void* GC , int brush_color);
0AFC: FFFFFFFF 31C87520 ; 2BF: void GC_DrawRoundRect(void* GC ,RECT *,int arcWidth,int arcHeight,int border_flag,int fill_flag);
0B00: FFFFFFFF D1844320 ; 2C0: BOOK * MenuBook_Desktop(int mode,int BookID);
0B04: FFFFFFFF 55924320 ; 2C1: wchar_t * MenuBook_Desktop_GetSelectedItemID(BOOK * MenuBook_Desktop);
0B08: FFFFFFFF 11664220 ; 2C2: void BookObj_Softkey_SetAction(BOOK *,int actionID,void (*proc)(BOOK *,void*));
0B0C: FFFFFFFF 5D664220 ; 2C3: void BookObj_Softkey_SetText(BOOK *,int actionID,int StrID);
0B10: FFFFFFFF 615C4220 ; 2C4: BOOK * FindBookByID(int BookID);
0B14: FFFFFFFF 21697520 ; 2C5: GUI_FEEDBACK *TextFeedbackWindow(BOOK *bk, int zero);
0B18: FFFFFFFF 616D7520 ; 2C6: void Feedback_SetKeyHook(GUI_FEEDBACK *, void (*hook)(BOOK *bk, int key, int unk, int unk2));
0B1C: FFFFFFFF 016D7520 ; 2C7: void Feedback_SetOnClose(GUI_FEEDBACK *, void (*OnClose)(BOOK *bk));
0B20: FFFFFFFF 496D7520 ; 2C8: void Feedback_SetTimeout(GUI_FEEDBACK *, int time_ms);
0B24: FFFFFFFF A96D7520 ; 2C9: void Feedback_SetTextExtended(GUI_FEEDBACK *, STRID text, int where);
0B28: FFFFFFFF 3DB04320 ; 2CA: void TabMenuBar_SetOnTabSwitch(GUI_TABMENUBAR *,void (*proc)(BOOK *,int act_tab));
0B2C: FFFFFFFF F1B46C20 ; 2CB: STRID KeyCode2Name(int key_code);
0B30: FFFFFFFF B5663320 ; 2CC: int ImageID_Get(const wchar_t * fpath,const wchar_t * fname,wchar_t * imageID);
0B34: FFFFFFFF 556A3320 ; 2CD: void ImageID_Free(wchar_t imageID);
0B38: FFFFFFFF D11D4E20 ; 2CE: SUB_EXECUTE *DataBrowser_CreateSubExecute(int BookID, FILEITEM *f);
0B3C: FFFFFFFF 85224E20 ; 2CF: int DataBrowser_ExecuteSubroutine(SUB_EXECUTE *sub, int action, u16 *unk);
;0B40: xxxxxxxx yyyyyyyy ; 2D0: int FILEITEM_SetFname(FILEITEM *f, const wchar_t *fname);
0B44: FFFFFFFF F50D4F20 ; 2D1: int FILEITEM_SetPath(FILEITEM *f, const wchar_t *fpath);
0B48: FFFFFFFF BD0D4F20 ; 2D2: wchar_t *FILEITEM_GetFname(FILEITEM *f);
0B4C: FFFFFFFF A50E4F20 ; 2D3: wchar_t *FILEITEM_GetPath(FILEITEM *f);
0B50: FFFFFFFF CD094F20 ; 2D4: int FILEITEM_SetFnameAndContentType(FILEITEM *f, const wchar_t *fname);
0B54: FFFFFFFF 610E4F20 ; 2D5: int FILEITEM_SetPathAndContentType(FILEITEM *f, const wchar_t *fpath);
0B58: FFFFFFFF 55996420 ; 2D6: int JavaDialog_Open(int unk1,char * unk2,void ** JavaDesc);
0B5C: FFFFFFFF 3DD26420 ; 2D7: void JavaDialog_Close(int unk1);
0B60: FFFFFFFF F9D36420 ; 2D8: int JavaAppDesc_Get(int unk1,void ** JavaDesc);
0B64: FFFFFFFF 353D6420 ; 2D9: int JavaAppDesc_GetFirstApp(void * JavaDesc);
0B68: FFFFFFFF 593D6420 ; 2DA: int JavaAppDesc_GetNextApp(void * JavaDesc);
0B6C: FFFFFFFF 61396420 ; 2DB: int JavaAppDesc_GetJavaAppInfo(void * JavaDesc,int ID,wchar_t ** wstr);
;0B70: xxxxxxxx yyyyyyyy ; 2DC: void OrangeLED_Control(int _free_val, int or_LED_ID, int level, int fade_time);
;0B74: xxxxxxxx yyyyyyyy ; 2DD: void DispObject_SetRefreshTimer(DISP_OBJ *,int time);
;0B78: xxxxxxxx yyyyyyyy ; 2DE: void DispObject_KillRefreshTimer(DISP_OBJ *);
;0B7C: xxxxxxxx yyyyyyyy ; 2DF: int isDataBrowserBook(BOOK *);
0B80: FFFFFFFF 3DEC4E20 ; 2E0: SUB_EXECUTE * BrowserItem_Get_SUB_EXECUTE(BOOK * BrowserItemBook);
0B84: FFFFFFFF 39665420 ; 2E1: int Shortcut_Get_MenuItemName(SHORTCUT *);
0B88: FFFFFFFF 11934320 ; 2E2: int Shortcut_Get_MenuItemIconID(SHORTCUT *);
;0B8C: xxxxxxxx yyyyyyyy ; 2E3: BOOK * FindBookEx(int (*cmp_proc)(BOOK* book_from_list ,int * param), int * param);
0B90: FFFFFFFF 39084F20 ; 2E4: FILEITEM *FILEITEM_CreateCopy (FILEITEM *);
;0B94: xxxxxxxx yyyyyyyy ; 2E5: ACTION *ActionCreate(int (*PROC)(void *msg,BOOK*), int BookID, u16 event, APP_DESC *app_desc, PAGE_DESC *pag_desc);
;0B98: xxxxxxxx yyyyyyyy ; 2E6: int BOOK_GetSessionID(BOOK *);
;0B9C: xxxxxxxx yyyyyyyy ; 2E7: void UI_Event_toSID(int event, int sess_id);
;0BA0: xxxxxxxx yyyyyyyy ; 2E8: char *GetIMSI(void);
0BA4: FFFFFFFF 155C8A20 ; 2E9: void UI_CONTROLLED_SHUTDOWN_RESPONSE(int book_id);
;0BA8: xxxxxxxx yyyyyyyy ; 2EA: int MainInput_getCurPos(GUI*);
;0BAC: xxxxxxxx yyyyyyyy ; 2EB: void MainInput_Hide(GUI*);
;0BB0: xxxxxxxx yyyyyyyy ; 2EC: void DispObject_SoftKey_RestoreDefaultAction(DISP_OBJ*,int action);
;0BB4: xxxxxxxx yyyyyyyy ; 2ED: STRID PNUM2Name(void *pnum, int isIconNeeded, int only_full_number_flag);
;0BB8: xxxxxxxx yyyyyyyy ; 2EE: int SpeedDial_GetPNUM(int _zero,char charter0__9, void * PNUM);
0BBC: FFFFFFFF E1D54120 ; 2EF: void * MetaData_Desc_Create(wchar_t * path,wchar_t * name);
0BC0: FFFFFFFF D5D64120 ; 2F0: void MetaData_Desc_Destroy(void * MetaData_Desc);
0BC4: FFFFFFFF 45D64120 ; 2F1: wchar_t * MetaData_Desc_GetTags(void * MetaData_Desc,int tagID);
0BC8: FFFFFFFF B1009220 ; 2F2: int MetaData_Desc_GetTrackNum(void * MetaData_Desc,int __NULL);
0BCC: FFFFFFFF 39632620 ; 2F3: int DISP_OBJ_GetWindowWidth(DISP_OBJ *);
0BD0: FFFFFFFF 49632620 ; 2F4: int DISP_OBJ_GetWindowHeight(DISP_OBJ *);
0BD4: FFFFFFFF 71C67420 ; 2F5: int get_system_langID(void);
0BD8: FFFFFFFF 2DEF2A20 ; 2F6: char * lang_get_name(int langID);
0BDC: FFFFFFFF 6D8C5020 ; 2F7: int w_chdir(const wchar_t *path);
0BE0: FFFFFFFF 2DD18E20 ; 2F8: int w_fopen(const wchar_t *name, int attr, int rights, int err);
0BE4: FFFFFFFF D5D18E20 ; 2F9: int w_fstat(const wchar_t *name, W_FSTAT *);
0BE8: FFFFFFFF 81D18E20 ; 2FA: int w_fwrite(int f, void *buf, int size);
0BEC: FFFFFFFF 65D18E20 ; 2FB: int w_fread(int f, void *buf, int size);
0BF0: FFFFFFFF E95D7120 ; 2FC: int w_lseek(int f, int offs, int mode);
0BF4: FFFFFFFF B9D18E20 ; 2FD: int w_fclose(int f);
0BF8: FFFFFFFF B5A35020 ; 2FE: int w_mkdir(const wchar_t *path, int mode);
0BFC: FFFFFFFF D97E4E20 ; 2FF: int DirHandle_SetFilterStr(DIR_HANDLE *, const wchar_t *filter);
0C00: FFFFFFFF 39972620 ; 300: int Disp_GetStrIdWidth(STRID , int len);
0C04: FFFFFFFF D5D64120 ; 301: int MetaData_Desc_GetCoverInfo(void * MetaData_Desc,char * cover_type,int * size,int * cover_offset);
0C08: FFFFFFFF 0D673320 ; 302: int ImageID_GetIndirect(void * buf_image,int size,int __NULL,wchar_t * image_type,wchar_t * imageID);
0C0C: FFFFFFFF 75342220 ; 303: void unixtime2datetime(int, DATETIME * );
0C10: FFFFFFFF 391E2320 ; 304: void ListElement_Insert(LIST *lst, int i, void *new_item);
0C14: FFFFFFFF 05CB4D20 ; 305: int FileCopy(wchar_t *src_path, wchar_t *src_name, wchar_t *dest_path, wchar_t *dest_name, int);
0C18: FFFFFFFF 75CC4D20 ; 306: int FileMove(wchar_t *src_path, wchar_t *src_name, wchar_t *dest_path, wchar_t *dest_name, int);
0C1C: FFFFFFFF C1BF9A20 ; 307: void RedLED_On(int __NULL);
0C20: FFFFFFFF 15C09A20 ; 308: void RedLED_Off(int __NULL);
;0C24: xxxxxxxx yyyyyyyy ; 309: void DispObject_SetLayerColor(DISP_OBJ *,int color);
0C28: FFFFFFFF 6DD36420 ; 30A: int JavaAppDesc_GetJavaAppID(void * JavaDesc);
0C2C: FFFFFFFF FD5C4F20 ; 30B: void REQUEST_UI_OAF_START_APPLICATION(const int *ASYNC,int appID,char * flag);
0C30: FFFFFFFF 2D9D3520 ; 30C: int JavaApp_LogoImageID_Get(wchar_t * fullpath,wchar_t * imageID);
0C34: FFFFFFFF 395C7520 ; 30D: GUI * CreateProgressBar(BOOK*,int);
0C38: FFFFFFFF 3D5F7520 ; 30E: void ProgressBar_SetText(GUI*,STRID text);
0C3C: FFFFFFFF CD5F7520 ; 30F: void ProgressBar_SetIcon(GUI*,u16 icon_id);
0C40: FFFFFFFF 195F7520 ; 310: void ProgressBar_SetPercentValue(GUI*,int value);
0C44: FFFFFFFF DD5F7520 ; 311: void ProgressBar_SetBarDisabled(GUI*,int disabled);
;0C48: xxxxxxxx yyyyyyyy ; 312: void StringInput_DispObject_SetText(DISP_OBJ *,int StrID);
;0C4C: xxxxxxxx yyyyyyyy ; 313: void GuiObject_SetTitleImage(void *gui, wchar_t imageID);
;0C50: xxxxxxxx yyyyyyyy ; 314: void GuiObject_SetTitleIcon(void *gui, wchar_t imageID);
;0C54: xxxxxxxx yyyyyyyy ; 315: void GuiObject_SetHighlightImage(void *gui, wchar_t imageID);
;0C58: xxxxxxxx yyyyyyyy ; 316: void GuiObject_SetBackgroundImage(void *gui, wchar_t imageID);
;0C5C: xxxxxxxx yyyyyyyy ; 317: void *DispObject_Softkeys_GetParams(DISP_OBJ *);
;0C60: xxxxxxxx yyyyyyyy ; 318: LIST *DispObject_Softkeys_GetList(DISP_OBJ *, BOOK *bk, char __zero);
;0C64: xxxxxxxx yyyyyyyy ; 319: int BookObj_GetDisplayOrientation(BOOK *bk);
;0C68: xxxxxxxx yyyyyyyy ; 31A: void BookObj_SetDisplayOrientation(BOOK *bk, int orientation);
;0C6C: xxxxxxxx yyyyyyyy ; 31B: BOOK *DISPLAY_GetTopBook(int display);
;0C70: xxxxxxxx yyyyyyyy ; 31C: void DISPLAY_SetBrightness(int display, int brightness);
;0C74: xxxxxxxx yyyyyyyy ; 31D: int DISPLAY_GetBrightness(int display);
;0C78: xxxxxxxx yyyyyyyy ; 31E: void DataBrowserDesc_Menu_AddFSFunctions(void * db , int);
;0C7C: xxxxxxxx yyyyyyyy ; 31F: void DataBrowserDesc_Menu_AddNewFolder(void * db , int);
;0C80: xxxxxxxx yyyyyyyy ; 320: void DataBrowserDesc_Menu_AddMarkFiles(void * db , int);
;0C84: xxxxxxxx yyyyyyyy ; 321: void SetTheme(wchar_t*path, wchar_t*name, int bookid, int unk_1);
;0C88: xxxxxxxx yyyyyyyy ; 322: void Softkeys_GetLabel(DISP_OBJ *softkeys, SKLABEL *lbl, int id);
;0C8C: xxxxxxxx yyyyyyyy ; 323: void Softkeys_Update(DISP_OBJ *softkeys);
;0C90: xxxxxxxx yyyyyyyy ;8324: void * get_CellData(void);
;0C94: xxxxxxxx yyyyyyyy ; 325: void * IncommingCall_Reject(BOOK* book);
;0C98: xxxxxxxx yyyyyyyy ; 326: void * IncommingCall_Mute(BOOK* book);
0C9C: FFFFFFFF 519AAE20 ; 327: int GetRadioState(char* level, char* flag);
;0CA0: xxxxxxxx yyyyyyyy ; 328: int Bluetooth_GetState(void);
;0CA4: xxxxxxxx yyyyyyyy ; 329: int Bluetooth_GetPhoneVisibility(void);
;0CA8: xxxxxxxx yyyyyyyy ; 32A: int Bluetooth_isBusy(void);
;0CAC: xxxxxxxx yyyyyyyy ; 32B: int USB_isConnected(void);
;0CB0: xxxxxxxx yyyyyyyy ; 32C: void *w_diropen(const wchar_t *dir);
;0CB4: xxxxxxxx yyyyyyyy ; 32D: wchar_t *w_dirread(void *);
;0CB8: xxxxxxxx yyyyyyyy ; 32E: int w_dirclose(void *);
;0CBC: xxxxxxxx yyyyyyyy ; 32F: int w_rename(const wchar_t *dst, const wchar_t *src);
;0CC0: xxxxxxxx yyyyyyyy ; 330: int w_remove(const wchar_t *dir);
;0CC4: xxxxxxxx yyyyyyyy ; 331: int ConnectionManager_Connection_GetState(void);
0CC8: FFFFFFFF 619AAE20 ; 332: int GetSignalQuality(char *rssi,char *ber);
;0CCC: xxxxxxxx yyyyyyyy ;8333: IS_NEEDED_BOOK isCameraBook(void);
;0CD0: xxxxxxxx yyyyyyyy ;8334: IS_NEEDED_BOOK isSoundRecorderBook(void);
;0CD4: xxxxxxxx yyyyyyyy ; 335: void StringInput_MenuItem_SetPriority(GUI * strinp, int prio, int actionID);
;0CD8: xxxxxxxx yyyyyyyy ; 336: void VideoPlayerControl(BOOK *VideoPlayerBook, int);
;0CDC: xxxxxxxx yyyyyyyy ; 337: void Video_ActionBack(BOOK *VideoPlayerBook, void*);
;0CE0: xxxxxxxx yyyyyyyy ; 338: void Video_ExtractFrame(BOOK *VideoPlayerBook, void*);
;0CE4: xxxxxxxx yyyyyyyy ; 339: void Video_ZoomOn(BOOK *VideoPlayerBook, void*);
;0CE8: xxxxxxxx yyyyyyyy ; 33A: void RightNow_SetActive(int flag);
;0CEC: xxxxxxxx yyyyyyyy ; 33B: void VideoResize_AutomateMode(BOOK *VideoPlayerBook, u16 VideoWidth, u16 VideoHeight, u16* NewWidth, u16* NewHeight);
;0CF0: xxxxxxxx yyyyyyyy ; 33C: void VideoResize_AllScreenMode(BOOK *VideoPlayerBook, u16 VideoWidth, u16 VideoHeight, u16* NewWidth, u16* NewHeight);
;0CF4: xxxxxxxx yyyyyyyy ; 33D: int Video_GetCurrentSkinID(BOOK *VideoPlayerBook);
;0CF8: xxxxxxxx yyyyyyyy ; 33E: void Video_SetSkin(GUI* VideoPlayerGUI, int skinID);
;0CFC: xxxxxxxx yyyyyyyy ; 33F: int Video_SetPermit(BOOK *VideoPlayerBook, u16 NewWidth, u16 NewHeight);
;0D00: xxxxxxxx yyyyyyyy ; 340: int Video_Refresh(BOOK *VideoPlayerBook, GUI* VideoPlayerGUI);
;0D04: xxxxxxxx yyyyyyyy ; 341: void Video_Play(BOOK *VideoPlayerBook, void*);
;0D08: xxxxxxxx yyyyyyyy ; 342: void Video_Pause(BOOK *VideoPlayerBook, void*);
;0D0C: xxxxxxxx yyyyyyyy ; 343: void Video_Stop(BOOK *VideoPlayerBook, void*);
;0D10: xxxxxxxx yyyyyyyy ; 344: void Audio_Pause(BOOK *);
;0D14: xxxxxxxx yyyyyyyy ; 345: void Audio_Play(BOOK *);
;0D18: xxxxxxxx yyyyyyyy ; 346: GUI * CreatePercentInputVA(int zero, ...);
;0D1C: xxxxxxxx yyyyyyyy ; 347: int PercentInput_GetPercent(GUI * PercentInput);
;0D20: xxxxxxxx yyyyyyyy ; 348: void GUIonMessage_SetLineSeparator(GUI_MESSAGE *,int _unk1);
;0D24: xxxxxxxx yyyyyyyy ; 349:
;0D28: xxxxxxxx yyyyyyyy ; 34A:
;0D2C: xxxxxxxx yyyyyyyy ; 34B: void GUIObject_Softkeys_RemoveBackground(void *gui);
;0D30: xxxxxxxx yyyyyyyy ; 34C: void GUIObject_Softkeys_RestoreBackground(void *gui);
;0D34: xxxxxxxx yyyyyyyy ; 34D: void SetTrayIcon(wchar_t iconID, char mode);
;0D38: xxxxxxxx yyyyyyyy ; 34E: int REQUEST_SETTING_RINGVOLUME_SET(const int *sync, int unk, int null, int vol);
;0D3C: xxxxxxxx yyyyyyyy ; 34F: int REQUEST_SETTING_VIBRATOR_SET(const int *sync, int unk, int mode);
;0D40: xxxxxxxx yyyyyyyy ; 350: int REQUEST_SETTING_RINGTYPESOUNDFILE_SET(const int *sync, int null, wchar_t *path, wchar_t *name);
;0D44: xxxxxxxx yyyyyyyy ; 351: int REQUEST_SETTING_ANSWERINGMODE_SET(const int *sync, int unk, int mode);
;0D48: xxxxxxxx yyyyyyyy ; 352: int REQUEST_SETTING_INCREASINGRING_SET(const int *sync, int unk, int unk2, int mode);
;0D4C: xxxxxxxx yyyyyyyy ; 353: int REQUEST_SETTING_ALLOWEDCALLERS_SET(const int *sync, int unk, int mode);
;0D50: xxxxxxxx yyyyyyyy ; 354: int JavaAppDesc_GetJavaAppFullpath(void * JavaDesc,JavaAppFullpath *);
;0D54: xxxxxxxx yyyyyyyy ; 355: void *SoundRecorderDesc_Create(void);
;0D58: xxxxxxxx yyyyyyyy ; 356: void SoundRecorderDesc_Destroy(void * desc);
;0D5C: xxxxxxxx yyyyyyyy ; 357: int SoundRecorderDesc_SetBookID(void * desc,int BookID);
;0D60: xxxxxxxx yyyyyyyy ; 358: int SoundRecorderDesc_SetType(void * desc,const int type);
;0D64: xxxxxxxx yyyyyyyy ; 359: int SoundRecorderDesc_SetFolder(void * desc,const wchar_t * fpath);
;0D68: xxxxxxxx yyyyyyyy ; 35A: int SoundRecorderDesc_SetFname(void * desc,const wchar_t * fname);
;0D6C: xxxxxxxx yyyyyyyy ; 35B: int SoundRecorderDesc_SetRecordSize(void * desc,const int size);
;0D70: xxxxxxxx yyyyyyyy ; 35C: int SoundRecorder_Create(void * desc);
;0D74: xxxxxxxx yyyyyyyy ; 35D: int SoundRecorder_RecordCall(BOOK * OngoingCallBook);
;0D78: xxxxxxxx yyyyyyyy ; 35E: int Browser_OpenURI(BOOK *, char * URI, int mode);
;0D7C: xxxxxxxx yyyyyyyy ; 35F: char * GetURIScheme (int schemeID);
;0D80: xxxxxxxx yyyyyyyy ; 360: char * CreateURI (wchar_t * fpath, wchar_t * fname, char * URIScheme);
;0D84: xxxxxxxx yyyyyyyy ; 361: void DataBrowserDesc_SetViewModeAndSortOrder(void * db,int view_sort_ID);





;locale=Russian_Russia.1251
