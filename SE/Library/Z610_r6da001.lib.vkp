;Z610 SW-R6DA001
;Библиотека функций
;v
;(c) Hussein , IronMaster
;(p) den_po

+45B87C00
440: 00000000 095AE344 ; 110: void *memalloc(int size,int f1,int f2,const char *fname,int fline)
444: 00000000 355AE344 ; 111: void memfree(void * mem,const char * fname ,int fline)
448: 00000000 B4521444 ; 112: void memset(void *mem,char chr,int size);
44C: 00000000 EC213F44 ; 113: int memcpy(void *dest,const void *source,int cnt);
450: 00000000 41F26644 ; 114: int sprintf(char *buf, char *str, ...);
454: 00000000 09F86644 ; 115: int snwprintf(u16* buffer, int size, const u16* fmt, ...);
458: 00000000 91AEF744 ; 116: int _fopen(const unsigned short *filpath, const unsigned short *filname,unsigned int mode , unsigned int rights, unsigned int __0);
45C: 00000000 69C4F744 ; 117: int fclose(int file);
460: 00000000 F1C6F744 ; 118: int fread(int file , void *ptr, int size);
464: 00000000 BDC8F744 ; 119: int fwrite(int file , const void *ptr, int size);
468: 00000000 F94C9644 ; 11A: int _wstat(short *path, void *statbuf)
46C: 00000000 E5F32845 ; 11B: int fputs(const char *s, int file)
470: 00000000 25B8F744 ; 11C: int isFileExist(u16 * pach, u16 *fname , FSTAT * fstat_stuct);
474: 00000000 498EF744 ; 11D: void * AllocDirHandle(u16 * path);
478: 00000000 0990F744 ; 11E: void *GetFname(void *, void*);
47C: 00000000 217EFB44 ; 11F: void * CreateDataBrowser(void);
480: 00000000 E180FB44 ; 120: void DataBrowser_SetStyle(void * db , int style);
484: 00000000 1181FB44 ; 121: void DataBrowser_SetHeaderText(void * db , int StrID);
488: 00000000 F980FB44 ; 122: void DataBrowser_SetFolders(void * db , int * FolderList);
48C: 00000000 1981FB44 ; 123: void DataBrowser_SetOKSoftKeyText(void * db , int StrID);
490: 00000000 8147FB44 ; 124: void DataBrowser_Show(void * db);
494: 00000000 D57EFB44 ; 125: void DataBrowser_XXX(void * db);
498: 00000000 8DDFF744 ; 126: unsigned short * getFileExtention(unsigned short * fnane);
49C: 00000000 7592F744 ; 127: int DataBrowser_isFileInListExt(unsigned short * ext_table,unsigned short * patch ,unsigned short * fname );
4A0: 00000000 71C73745 ; 128: void Timer_ReSet(u16 *timerID ,int time, void (*onTimer)(u16 *timerID, void *), void *);
4A4: 00000000 3DC73745 ; 129: u16 Timer_Set(int time, void (*onTimer)(u16 *timerID, void *), void *);
4A8: 00000000 C9C73745 ; 12A: void Timer_Kill(u16 *timerID);
4AC: 00000000 BDFA3745 ; 12B: int CreateBook(void * mem, void (* onClose)(BOOK*), const PAGE_DESC * bp, const char * name, int __0xFFFFFFFF,int __0);
4B0: 00000000 E5FB3745 ; 12C: void BookObj_KillBook(void *Book);
4B4: 00000000 39F93745 ; 12D: void BookObj_GotoPage(BOOK * book, const PAGE_DESC * page);
4B8: 00000000 A1F93745 ; 12E: void BookObj_ReturnPage(BOOK * ,int);
4BC: 00000000 D9003845 ; 12F: void FreeBook ( void *book);
4C0: 00000000 7DE13745 ; 130: BOOK * FindBook(IS_NEEDED_BOOK);
4C4: 00000000 6D353945 ; 131: BOOK * Find_StandbyBook(void);
4C8: 00000000 69FD3745 ; 132: void BookObj_SetFocus(void *,int focus);
4CC: 00000000 11644345 ; 133: void GuiObject_SetTitleText (void * gui , int StrID);
4D0: 00000000 955F4345 ; 134: void ShowWindow (void * gui);
4D4: 00000000 71F83E45 ; 135: void SetCursorToItem ( void *obj , int item);
4D8: 00000000 E55F4345 ; 136: void GUI_SetStyle(GUI_NOFMANY *,int style);
4DC: 00000000 59033F45 ; 137: int GUIonMessage_GetCreatedItemIndex ( void *msg);
4E0: 00000000 65033F45 ; 138: char SetMenuItemText0 ( GUI_MESSAGE *, int StrID);
4E4: 00000000 95033F45 ; 139: char SetMenuItemText1 ( GUI_MESSAGE *, int StrID);
4E8: 00000000 75033F45 ; 13A: char SetMenuItemText2 ( GUI_MESSAGE *, int StrID);
4EC: 00000000 85033F45 ; 13B: char SetMenuItemText3 ( GUI_MESSAGE *, int StrID);
4F0: 00000000 DD033F45 ; 13C: void SetListObjectItemIcon ( void *msg , int align , int iconID);
4F4: 00000000 41AD4245 ; 13D: void SetHeaderText( void *obj , int StrID);
4F8: 00000000 85F83E45 ; 13E: int GetFocusetListObjectItem( void *obj);
4FC: 00000000 D5F83E45 ; 13F: void SetMenuItemStyle( void *obj , int style);
500: 00000000 F1424345 ; 140: void putchar( void *xx , int x, int y, int _zero, int zero1 , short wchar);
504: 00000000 993F4645 ;8141: IS_NEEDED_BOOK isScreenSaverBook(void);
508: 00000000 39594445 ; 142: void StatusIndication_SetItemText(void *gui,int item,int StrID);
50C: 00000000 ED533945 ; 143: void StatusIndication_ShowNotes(int StrID);
510: 00000000 5D7A3C45 ; 144: void * CreateStringInput(int,...);
514: 00000000 A5173F45 ; 145: GUI_ONEOFMANY * CreateOneOfMany(BOOK *);
518: 00000000 6D193F45 ; 146: void OneOfMany_SetItemCount(GUI_ONEOFMANY * , int count);
51C: 00000000 89193F45 ; 147: void OneOfMany_SetChecked(GUI_ONEOFMANY * , int checked);
520: 00000000 BD193F45 ; 148: void OneOfMany_SetTexts(GUI_ONEOFMANY * , int * StrID , int Count);
524: 00000000 99193F45 ; 149: int OneOfMany_GetSelected(GUI_ONEOFMANY * rb);
528: 00000000 B1523945 ; 14A: void StatusIndication_Item8_SetText(int StrID);
52C: 00000000 55274545 ; 14B: void AddMSGHook(void * menu,short msg,void (*proc)(BOOK *,void*));
530: 00000000 CD274545 ; 14C: void AddCommand(void * menu,int cmd , int StrID);
534: 00000000 89284545 ; 14D: void SoftKey_SetEnable(void *gui,int msg,int ena);
538: 00000000 41284545 ; 14E: void SoftKey_AddErrorStr(void *gui,int msg,int StrID);
53C: 00000000 19274545 ; 14F: void SoftKey_RemoveItem(void *gui,u16 action);
540: 00000000 1D284545 ; 150: void SoftKey_SetVisible(void *gui,int action,int visible);
544: 00000000 7D2A4545 ; 151: void SoftKey_SuppressDefaultAction(void *gui,int action);
548: 00000000 05B2F344 ; 152: u16* wstrcpy(u16 * dest, u16 * source);
54C: 00000000 1DB2F344 ; 153: u16* wstrncpy(u16 * dest, u16 * source, int maxlen);
550: 00000000 49B2F344 ; 154: u16* wstrcat(u16 * wstr, u16 * subwstr);
554: 00000000 65B2F344 ; 155: short* wstrncat(short * wstr, short * subwstr , int maxlen);
558: 00000000 D5B1F344 ; 156: int wstrcmp(unsigned short * wstr1, unsigned short * wstr2);
55C: 00000000 C1B1F344 ; 157: int wstrlen(u16 * wstr);
560: 00000000 89C4F344 ; 158: u16 * str2wstr(u16 * wstr,char * str);
564: 00000000 EDF56644 ; 159: int strcmp(char * str1, char * str2);
568: 00000000 49F66644 ; 15A: int strlen(char *str);
56C: 00000000 E1B2F344 ; 15B: char * wstr2strn (char * str , u16 * wstr, int maxlen);
570: 00000000 C5844145 ; 15C: int int2strID (int num);
574: 00000000 79874145 ; 15D: int Str2ID(const void * wstr , int flag , int len);
578: 00000000 0D8C4145 ; 15E: void StrID2Str(int StrID,char * str,int maxlen);
57C: 00000000 FD8A4145 ; 15F: void TextID2wstr(int StrID,u16 * str,int maxlen);
580: 00000000 DD894145 ; 160: int TextGetLength(int StrID);
584: 00000000 41894145 ; 161: void TextFree(int StrID);
588: 00000000 05B4ED44 ; 162: int AB_DEFAULTNBR_GET(int rec_num, void * mem_0x30, int * unk);
58C: 00000000 AD03EE44 ; 163: int AB_READSTRING(void * mem_0x30,int rec_num, int rec_item_num);
590: 00000000 7904EE44 ; 164: int AB_READPHONENBR(void * mem_0x30,int rec_num, int rec_item_num);
594: 00000000 3105EE44 ; 165: int AB_GETNBROFITEMS(int get_from,int unk_0);
598: 00000000 E57D4145 ; 166: int PNUM_len(void *pnum);
59C: 00000000 21FB3045 ; 167: void PNUM2str(char *str,void *pnum,int len, int max_len);
5A0: 00000000 955D4345 ; 168: DISP_OBJ * GUIObj_GetDISPObj (void * gui);
5A4: 00000000 F11A2945 ; 169: LIST *List_New(void);
5A8: 00000000 2D1B2945 ; 16A: void List_Free(LIST *lst);
5AC: 00000000 A11C2945 ; 16B: void ListElement_AddtoTop(LIST *lst,void *newElement);
5B0: 00000000 010CF344 ; 16C: int Gif2ID(u16 IMAGEHANDLE,u16 * path, u16 * fname,u16 * ID);
5B4: 00000000 DD46F344 ; 16D: int REQUEST_IMAGEHANDLER_INTERNAL_GETHANDLE(const int * __zero,u16 * IMAGEHANDLE,char * unk);
5B8: 00000000 11BFE344 ; 16E: void REQUEST_DATEANDTIME_GET(const int * __zero , DATETIME *dt);
5BC: 00000000 55184645 ; 16F: void IndicationDevice_Backlight_FadeToLevel(int unk_zero ,int bl_level);
5C0: 00000000 1DAC0645 ; 170: int GetFreeBytesOnHeap(void);
5C4: 00000000 91FD3745 ; 171: void Hide(void * udata, int zero);
5C8: 00000000 A1FD3745 ; 172: void Show(void * udata, int zero);
5CC: 00000000 E9373945 ; 173: void StartAPP (u16 * appname);
5D0: 00000000 ADF93E45 ; 174: void ListMenu_SetOnMessages (GUI_LIST * , void * onMessage);
5D4: 00000000 850D3545 ; 175: char * manifest_GetParam(char *buf,char *param_name,int unk);
5D8: 00000000 6DCAF744 ; 176: int lseek(int file,int offset,int mode);
;05DC: xxxxxxxx yyyyyyyy ;8177: int get_VBUFFER(void);
5E0: 00000000 9D450345 ; 178: void SetLampLevel (int level); // nullsub
5E4: 00000000 2D1C2945 ; 179: void * ListElement_Remove(LIST *lst,int index);
5E8: 00000000 F5293E44 ; 17A: int GetCurrentPID(void);
5EC: 00000000 611C2945 ; 17B: int ListElement_Prt2NumElement(LIST *lst,void *ptr);
5F0: 00000000 7CB04244 ; 17C: union SIGNAL *alloc(OSBUFSIZE size,SIGSELECT signo);
5F4: 00000000 98B04244 ; 17D: union SIGNAL *receive(const SIGSELECT *sigsel);
5F8: 00000000 88B04244 ; 17E: void send(union SIGNAL **sig,PROCESS to);
5FC: 00000000 D8B04244 ; 17F: PROCESS sender(union SIGNAL **sig);
600: 00000000 A8B04244 ; 180: void free_buf(union SIGNAL **sig);
604: 00000000 74B14244 ; 181: PROCESS create_process(int proc_type,char *name,OSENTRYPOINT *entrypoint,OSADDRESS stack_size,OSPRIORITY priority,OSTIME timeslice,PROCESS pid_block,void *redir_table,OSVECTOR vector,OSUSER user);
608: 00000000 94B34244 ; 182: void start(PROCESS pid);
60C: 00000000 44B24244 ; 183: int get_ptype(PROCESS pid);
610: 00000000 90B14244 ; 184: PROCESS current_process(void);
614: 00000000 C8B04244 ; 185: void delay(OSTIME timeout);
618: 00000000 90B24244 ; 186: OSBOOLEAN hunt(const char *name, OSUSER user, PROCESS *name_, union SIGNAL **hunt_sig);
61C: 00000000 BCB24244 ; 187: void kill_proc(PROCESS pid);
680: 00000000 15F66644 ; 1A0: char* strcpy(char * dest, char * source);
684: 00000000 6DD40E45 ; 1A1: void *CreateMessage(int size,int ev,char *name);
688: 00000000 C1D40E45 ; 1A2: void SendMessage(void **signal,int PID);
68C: 00000000 49D50E45 ; 1A3: void * WaitMessage(void *SIGSEL);
690: 00000000 5DD50E45 ; 1A4: int FreeMessage(void **Mess);
694: 00000000 19590B45 ; 1A5: void SendDispatchMessage(int id, int unk_zero, int size,void *mess);
698: 00000000 4DD03745 ; 1A6: char * UIEventName(int event);
69C: 00000000 48D81620 ;81A7: int * MissedEvents(void);
6A0: 00000000 45E53745 ; 1A8: void UI_Event(int event);
6A4: 00000000 55E53745 ; 1A9: void UI_Event_wData(int event,void *message,void (*mfree)(void*));
6A8: 00000000 9DE53745 ; 1AA: void UI_Event_toSID(int event,int SessionID);
6AC: 00000000 B1E53745 ; 1AB: void UI_Event_toSIDwData(int event,int SedionID,void *message,void (*mfree)(void*));
6B0: 00000000 C11E2945 ; 1AC: int ListElement_Find(LIST *lst,void *element, int (*cmp_proc)(void *,void *));
6B4: 00000000 C51D2945 ; 1AD: void * ListElement_GetByIndex(LIST * , int index);
6B8: 00000000 15006744 ; 1AE: u16* wstrrchr(u16*wstr, u16 wchar);
6BC: 00000000 ADF83745 ; 1AF: void BookObj_CallSubroutine(BOOK * , void * SubProcDesc);
6C0: 00000000 A91C2945 ; 1B0: void ListElement_Add(LIST *lst,void *newElement);
6C4: 00000000 F9E02344 ; 1B1: void debug_printf(char * fmt,...);
6C8: 00000000 2DC30F45 ; 1B2: int PlayFile(u16 * path, u16 * fname);
6D0: 00000000 4D713B45 ; 1B4: int REQUEST_PROFILE_GETACTIVEPROFILE(const int *__zero , int *level);
6D4: 00000000 A9713B45 ; 1B5: void REQUEST_PROFILE_SETACTIVEPROFILE(const int *__zero , int NUMprof);
6DC: 00000000 2D3C4645 ; 1B7: int isKeylocked(void);
6E0: 00000000 E5ED0345 ;81B8: IS_NEEDED_BOOK isMediaPlayerVideoBook(void);
6EC: 00000000 51F30B45 ; 1BB: void Vibra(int t1, int t2, int t3);
6F8: 00000000 31B93745 ; 1BE: int Date2ID(DATE *, int TimeFormat,int);
6FC: 00000000 59B83745 ; 1BF: int Time2ID(TIME *, char TimeFormat,int);
700: 00000000 69F63E45 ; 1C0: GUI_LIST * CreateListObject(BOOK * , void * unk);
704: 00000000 99F83E45 ; 1C1: void SetNumOfMenuItem(void * , int item_count);
708: 00000000 907E1620 ;81C2: LIST ** ROOT_APP(void);
70C: 00000000 B9274545 ; 1C3: void SoftKey_AddHelpStr(void *gui,int msg,int StrID);
710: 00000000 AD284545 ; 1C4: void SoftKey_SetItemAsSubItem(void *gui,int item,int subitem);
714: 00000000 CD633945 ; 1C5: int REQUEST_SYSTEM_SHUTDOWN(void);
718: 00000000 DD633945 ; 1C6: int REQUEST_SYSTEM_RESTART(void);
71C: 00000000 F1274545 ; 1C7: void SoftKeys_SetText(void *gui,int msg,int StrID,int StrID1);
720: 00000000 D1B94545 ; 1C8: int isRightNowBook(BOOK *);
724: 00000000 212B3945 ; 1C9: int isVolumeControllerBook(BOOK *);
728: 00000000 2D6D4345 ; 1CA: GUI_TABMENUBAR * CreateTabMenuBar(BOOK *);
72C: 00000000 016E4345 ; 1CB: void TabMenuBar_SetTabCount(GUI_TABMENUBAR * , int count);
730: 00000000 B56E4345 ; 1CC: void TabMenuBar_AssignGuiObj(GUI_TABMENUBAR * , int tab , GUI_NOFMANY *);
734: 00000000 F16E4345 ; 1CD: void TabMenuBar_SetTabIcon(GUI_TABMENUBAR *,int tab, u16 icon , int for_state);
738: 00000000 255D4345 ; 1CE: void GUI_Free(GUI*);
73C: 00000000 A1604345 ; 1CF: void GUI_SetIcon(GUI* , int icon);
740: 00000000 FD823C45 ; 1D0: int StringInput_GetStringAndLen (GUI*,u16**,u16*);
74C: 00000000 A5DCF744 ; 1D3: int GetVolumeSize(char * volume, VOLUMESIZE *);
750: 00000000 E5113F45 ; 1D4: GUI_NOFMANY * CreateNOfMany(BOOK *);
754: 00000000 25143F45 ; 1D5: void NOfMany_SetTexts(GUI_NOFMANY * , int * StrIDtable, int items_count);
758: 00000000 A9133F45 ; 1D6: void NOfMany_SetChecked(GUI_NOFMANY * , u16 * checked_table, int items_count);
75C: 00000000 71133F45 ; 1D7: void NOfMany_SetCursor(GUI_NOFMANY * , int item);
760: 00000000 CD133F45 ; 1D8: int NOfMany_GetCheckedCount(GUI_NOFMANY *);
764: 00000000 BD133F45 ; 1D9: int NOfMany_GetChecked(GUI_NOFMANY * , u16 * buffer );
768: 00000000 1D143F45 ; 1DA: void NOfMany_SetonMessage(GUI_NOFMANY * , void * proc );
780: 00000000 51193F45 ; 1E0: void OneOfMany_SetFocused(GUI_ONEOFMANY * , int item);
784: 00000000 B5193F45 ; 1E1: void OneOfMany_SetonMessage(GUI_ONEOFMANY * , void * proc);
788: 00000000 49E03845 ; 1E2: GUI_FEEDBACK * CreateFeedBack (int,...);
78C: 00000000 15E13845 ; 1E3: void FeedBack_SetText(GUI_FEEDBACK*,int);
790: 00000000 DDF8AC44 ; 1E4: int GetBattaryState(const int * , BATT *);
794: 00000000 59384345 ; 1E5: void * get_DisplayGC (void);
798: 00000000 BDC14245 ; 1E6: void GetGuiRect(void*,RECT*);
79C: 00000000 F13E4345 ; 1E7: void get_GC_RECT(void*,RECT*);
7A0: 00000000 F5414345 ; 1E8: int get_GC_xx(void * GC);
7A4: 00000000 E9414345 ; 1E9: void *set_GC_xx(void * GC, int);
7A8: 00000000 A13E4345 ; 1EA: void GC_validate_RECT(void * GC , RECT*);
7AC: 00000000 1DFE3745 ; 1EB: void addGui2book(BOOK*,GUI*);
7B0: 00000000 7DEA4245 ; 1EC: void DrawRect(int x1, int y1,int x2 ,int y2,int pen_color,int brush_color);
7B4: 00000000 7DED4245 ; 1ED: void DrawString(int StrID,int align,int x1,int y1,int x2,int y2,int unk,int unk1,int pen_color ,int brush_color);
7B8: 00000000 F9023845 ; 1EE: void addGui2XGuiList (void* xguilist , GUI*);
7BC: 00000000 29C04245 ; 1EF: void InvalidateRect(DISP_OBJ *,RECT*);
7C0: 00000000 495C4345 ; 1F0: int CreateObject(GUI*,void (*)(DISP_DESC *),void (*)(DISP_DESC *),BOOK *,void(*)(),int,int size_obj);
7C4: 00000000 D9F74245 ; 1F1: int SetFont(int);
7C8: 00000000 80CC1620 ;81F2: DISP_OBJ ** StatusRow_p(void);
7CC: 00000000 7DE23745 ; 1F3: int root_list_get_session_count(void);
7D0: 00000000 89E23745 ; 1F4: UI_APP_SESSION *root_list_get_session(int num_session);
7D4: 00000000 75DB3745 ; 1F5: BOOK *SESSION_GetTopBook(UI_APP_SESSION *);
7D8: 00000000 ADE43845 ; 1F6: int MainInput_getVisible(GUI *);
7DC: 00000000 B9E43845 ; 1F7: int MainInput_strlen(GUI *);
7E0: 00000000 C5E43845 ; 1F8: char * MainInput_getPNUM(GUI *);
7E4: 00000000 D1E43845 ; 1F9: int MainInput_isPlus(GUI *);
7E8: 00000000 99013845 ; 1FA: int BOOK_GetSessionID(BOOK * );
7EC: 00000000 8DFF6644 ; 1FB: int wstrncmp(u16*,u16*,int);
7F0: 00000000 6DD24245 ; 1FC: int DISP_OBJ_GetAbsoluteXPos(DISP_OBJ *);
7F4: 00000000 A1D24245 ; 1FD: int DISP_OBJ_GetAbsoluteYPos(DISP_OBJ *);
7F8: 00000000 F9C44245 ; 1FE: WINDOW * DISP_OBJ_GetWindow(DISP_OBJ *);
7FC: 00000000 F1524545 ; 1FF: int GetThemeColor(int , int);
800: 00000000 256A3B45 ; 200: int REQUEST_SETTING_SILENCE_SET(const int * __zero,u16 profile,u16 value);
804: 00000000 CD693B45 ; 201: int REQUEST_SETTING_SILENCE_GET(const int * __zero,u16 profile, char * silence_mode);
808: 00000000 B534ED44 ; 202: void VCALL_Init (void* vc);
80C: 00000000 AD35ED44 ; 203: void VCALL_SetName (void * vc , u16 * name ,unsigned short name_len);
810: 00000000 0D36ED44 ; 204: void VCALL_SetNameIcon (void * vc , u16 icon);
814: 00000000 CD35ED44 ; 205: void VCALL_SetNumber (void * vc , u16 * number , unsigned short num_len);
818: 00000000 F135ED44 ; 206: void VCALL_SetHZ1 (void * vc, int , u16 );
81C: 00000000 FD35ED44 ; 207: void VCALL_SetHZ2 (void * vc , u16 );
820: 00000000 0930ED44 ; 208: void MakeVoiceCall (int SessioID , void * vc ,int flag);
;0824: xxxxxxxx yyyyyyyy ; 209: int isDirectory (u16 * path ,u16 * filename , int * error );
828: 00000000 69B9F744 ; 20A: void FileDelete (u16 * path ,u16 * filename , int * error );
82C: 00000000 415F4345 ; 20B: void SetFocus (GUI * , int);
830: 00000000 F9A31145 ; 20C: int CreateSMSCont (int, void*);
834: 00000000 8DAA1145 ; 20D: int FreeSMSCont (void*);
838: 00000000 D1A51145 ; 20E: int PrepareSMSCont (void*,u16*,u16*,int,int);
83C: 00000000 EDA91145 ; 20F: int CteateNewMessage (int,void*,int);
840: 00000000 C0B1A745 ;8210: void * get_APP_DESC_TABLE(void);
844: 00000000 8D2F4345 ; 211: C_INTERFACE *Window_GetComponentInterface(WINDOW*);
848: 00000000 0907EE44 ; 212: int AB_POSITIONNBR_GET(void * ab_name,char * ,u16 * ,void * ab_num);
84C: 00000000 3106EE44 ; 213: int AB_NAME_ITEM2StrID(void * ab_name);
850: 00000000 7906EE44 ; 214: int AB_NUM_ITEM2StrID(void * ab_num_item);
;0854: xxxxxxxx yyyyyyyy ; 215: int GetABRecNum(AB_GET_STRUCT *);
858: 00000000 FC1EA345 ;8216: AB_ITEM_DESC * get_AB_ITEMS_DESC();
85C: 00000000 156BB844 ; 217: GUI * SBY_GetMainInput(BOOK * StandBy);
860: 00000000 116BB844 ; 218: GUI * SBY_GetStatusIndication(BOOK * StandBy);
864: 00000000 299AE544 ; 219: int REQUEST_PHONEBOOK_ACCESSSTATUS_TOTAL_GET(const int * __zero, int *);
868: 00000000 E8300820 ;821A: int * PID_MMI(void);
874: 00000000 09B94245 ; 21D: DISP_OBJ* DISPBASE_GetFocused(int display);
878: 00000000 BDBE4245 ; 21E: char DISP_OBJ_getVisible(DISP_OBJ*);
87C: 00000000 AD5D9F44 ; 21F: DISP_DESC* DISP_OBJ_GetDESC (DISP_OBJ*);
880: 00000000 657F4245 ; 220: void DISP_DESC_SetName (DISP_DESC* , const char * name);
884: 00000000 2DD04245 ; 221: char* DISP_OBJ_GetName (DISP_OBJ *);
888: 00000000 697F4245 ; 222: void DISP_DESC_SetSize (DISP_DESC* , u16 size);
;088C: xxxxxxxx yyyyyyyy ; 223: u16 DISP_DESC_GetSize (DISP_OBJ *);
890: 00000000 6D7F4245 ; 224: void DISP_DESC_SetOnCreate (DISP_DESC* , DISP_OBJ_ONCREATE_METHOD);
894: 00000000 F57F4245 ; 225: DISP_OBJ_ONCREATE_METHOD DISP_OBJ_GetOnCreate (DISP_OBJ *);
898: 00000000 717F4245 ; 226: void DISP_DESC_SetOnClose (DISP_DESC* , DISP_OBJ_ONCLOSE_METHOD);
89C: 00000000 11804245 ; 227: DISP_OBJ_ONCLOSE_METHOD DISP_OBJ_GetOnClose (DISP_OBJ *);
8A0: 00000000 757F4245 ; 228: void DISP_DESC_SetOnRedraw (DISP_DESC* , DISP_OBJ_ONREDRAW_METHOD);
8A4: 00000000 2D804245 ; 229: DISP_OBJ_ONREDRAW_METHOD DISP_OBJ_GetOnRedraw (DISP_OBJ *);
8A8: 00000000 7D7F4245 ; 22A: void DISP_DESC_SetOnKey (DISP_DESC* , DISP_OBJ_ONKEY_METHOD);
8AC: 00000000 65804245 ; 22B: DISP_OBJ_ONKEY_METHOD DISP_OBJ_GetOnKey (DISP_OBJ *);
;08B0: xxxxxxxx yyyyyyyy ; 22C: void DISP_DESC_SetMethod03 (DISP_DESC* ,void (*)(void*));
;08B4: xxxxxxxx yyyyyyyy ; 22D: DISP_OBJ_METHOD DISP_OBJ_GetMethod03 (DISP_OBJ *);
;08B8: xxxxxxxx yyyyyyyy ; 22E: void DISP_DESC_SetMethod04 (DISP_DESC* ,void (*)(void*));
;08BC: xxxxxxxx yyyyyyyy ; 22F: DISP_OBJ_METHOD DISP_OBJ_GetMethod04 (DISP_OBJ *);
;08C0: xxxxxxxx yyyyyyyy ; 230: void DISP_DESC_SetMethod05 (DISP_DESC* ,void (*)(void*));
;08C4: xxxxxxxx yyyyyyyy ; 231: DISP_OBJ_METHOD DISP_OBJ_GetMethod05 (DISP_OBJ *);
8C8: 00000000 817F4245 ; 232: void DISP_DESC_SetMethod06 (DISP_DESC* ,DISP_OBJ_METHOD);
;08CC: xxxxxxxx yyyyyyyy ; 233: DISP_OBJ_METHOD DISP_OBJ_GetMethod06 (DISP_OBJ *);
;08D0: xxxxxxxx yyyyyyyy ; 234: void DISP_DESC_SetMethod07 (DISP_DESC* ,void (*)(void*));
;08D4: xxxxxxxx yyyyyyyy ; 235: DISP_OBJ_METHOD DISP_OBJ_GetMethod07 (DISP_OBJ *);
8D8: 00000000 897F4245 ; 236: void DISP_DESC_SetMethod08 (DISP_DESC* ,DISP_OBJ_METHOD);
8DC: 00000000 B9804245 ; 237: DISP_OBJ_METHOD DISP_OBJ_GetMethod08 (DISP_OBJ *);
8E0: 00000000 8D7F4245 ; 238: void DISP_DESC_SetMethod09 (DISP_DESC* ,void (*)(void*));
;08E4: xxxxxxxx yyyyyyyy ; 239: DISP_OBJ_METHOD DISP_OBJ_GetMethod09 (DISP_OBJ *);
;08E8: xxxxxxxx yyyyyyyy ; 23A: void DISP_DESC_SetMethod0A (DISP_DESC* ,void (*)(void*));
;08EC: xxxxxxxx yyyyyyyy ; 23B: DISP_OBJ_METHOD DISP_OBJ_GetMethod0A (DISP_OBJ *);
;08F0: xxxxxxxx yyyyyyyy ; 23C: void DISP_DESC_SetMethod0B (DISP_DESC* ,void (*)(void*));
;08F4: xxxxxxxx yyyyyyyy ; 23D: DISP_OBJ_METHOD DISP_OBJ_GetMethod0B (DISP_OBJ *);
;08F8: xxxxxxxx yyyyyyyy ; 23E: void DISP_DESC_SetMethod0C (DISP_DESC* ,void (*)(void*));
;08FC: xxxxxxxx yyyyyyyy ; 23F: DISP_OBJ_METHOD DISP_OBJ_GetMethod0C (DISP_OBJ *);
;0900: xxxxxxxx yyyyyyyy ; 240: void JavaSession_Manager (int cmd);
904: 00000000 39384645 ; 241: int JavaSession_GetName(void); //nullsub
908: 00000000 A9884145 ; 242: int TextCopyId(int);
90C: 00000000 39013845 ; 243: UI_APP_SESSION *Book_GetSession(BOOK*);
910: 00000000 F5033F45 ; 244: void List2lineSetAsSubitem (void* msg,int unk,int n_sub_items);
914: 00000000 6D043F45 ; 245: void List2lineSubitemAddText(void* msg,int StrID);
918: 00000000 61043F45 ; 246: int GUIonMessage_GetCreatedSubItemParrentIndex(void * msg);
920: 00000000 25F40B45 ; 248: void Vibra_Off (int t1);
928: 00000000 31C30F45 ; 24A: int PlayFileV(u16 * path, u16 * fname, int vol);
92C: 00000000 2DE80B45 ; 24B: int GetSilent(void);
930: 00000000 39BF0B45 ; 24C: int GetVibrator(int ignorevibrator,int ignoresilent);
934: 00000000 9DF60B45 ; 24D: int GetAudioSettings(int what, char* retvalue);
938: 00000000 55CA2344 ; 24E: int GetChipID(void);
948: 00000000 55043F45 ; 252: int List2LineGetCurrentIndex(void * msg);
94C: 00000000 49043F45 ; 253: int GUIonMessage_GetCurrentItemIndex(void * msg);
950: 00000000 8591F744 ; 254: void DestroyDirHandle(void *handle);
954: 00000000 4CE2A445 ;8255: DB_EXT *LastExtDB(void);
958: 00000000 65EDFA44 ; 256: void GetOtherExtMethods(FILESUBROUTINE **);
95C: 00000000 FDAC3845 ; 257: void MessageBox(int HeaderStrID,int MessageStrID,int IconID, int style /*1 or 2*/,int time,BOOK * unk);
960: 00000000 998E4445 ; 258: int Display_GetHeight(int Display);
964: 00000000 A58E4445 ; 259: int Display_GetWidth(int Display);
968: 00000000 DDC20F45 ; 25A: void PlaySystemSound (int SndNumber);
974: 00000000 F56D4345 ; 25D: int TabMenuBar_GetFocusedTabIndex(GUI * );
978: 00000000 E56D4345 ; 25E: void TabMenuBar_SetTabFocused(GUI_TABMENUBAR * , int tab_num);
;097C: xxxxxxxx yyyyyyyy ; 25F: int GC_GetPenColor (void* GC);
;0980: xxxxxxxx yyyyyyyy ; 260: void GC_SetPenColor(void* GC , int pen_color);
;0984: xxxxxxxx yyyyyyyy ; 261: void GC_SetPixel (void* GC,int x1,int y1,int color);
;0988: xxxxxxxx yyyyyyyy ; 262: void GC_DrawLine(void* GC,int x1, int y1, int x2, int y2);
;098C: xxxxxxxx yyyyyyyy ; 263: void GC_DrawFRect (void* GC,int color,int x1,int y1,int x2 ,int y2);
;0990: xxxxxxxx yyyyyyyy ; 264: int GC_DrawBitmap(void *GC, int x1, int y1, int x2, int y2, int * bmp);
994: 00000000 0D10BE44 ; 265: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
998: 00000000 5911BE44 ; 266: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
99C: 00000000 B1F7BD44 ; 267: png_infop png_create_info_struct(png_structp png_ptr);
9A0: 00000000 E5F7BD44 ; 268: void png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr);
9A4: 00000000 E50FBE44 ; 269: void png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr, png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn, png_progressive_end_ptr end_fn);
9A8: 00000000 A5FFBD44 ; 26A: void png_process_data(png_structp png_ptr, png_infop info_ptr, png_bytep buffer, png_size_t buffer_size);
9AC: 00000000 2D11BE44 ; 26B: void png_read_update_info(png_structp png_ptr, png_infop info_ptr);
9B0: 00000000 0910BE44 ; 26C: png_voidp png_get_progressive_ptr(png_structp png_ptr);
9B4: 00000000 6DFCBD44 ; 26D: png_uint_32 png_get_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
9B8: 00000000 F912BE44 ; 26E: void png_set_strip_16(png_structp png_ptr);
;09BC: xxxxxxxx yyyyyyyy ; 26F: void png_set_gray_1_2_4_to_8(png_structp png_ptr);
;09C0: xxxxxxxx yyyyyyyy ; 270: void png_set_gray_to_rgb(png_structp png_ptr);
;09C4: xxxxxxxx yyyyyyyy ; 271: png_uint_32 png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag);
;09C8: xxxxxxxx yyyyyyyy ; 272: void png_set_tRNS_to_alpha(png_structp png_ptr);
;09CC: xxxxxxxx yyyyyyyy ; 273: void png_set_filler(png_structp png_ptr, png_uint_32 filler, int flags);
;09D0: xxxxxxxx yyyyyyyy ; 274: void png_set_palette_to_rgb(png_structp png_ptr);
;09D4: xxxxxxxx yyyyyyyy ; 275: png_uint_32 png_get_rowbytes(png_structp png_ptr, png_infop info_ptr);
;09D8: xxxxxxxx yyyyyyyy ; 276: void png_progressive_combine_row(png_structp png_ptr, png_bytep old_row, png_bytep new_row);
;09DC: xxxxxxxx yyyyyyyy ; 277: int png_sig_cmp(png_bytep sig, png_size_t start, png_size_t num_to_check);
9E0: 00000000 10653F44 ; 278: int setjmp(jmp_buf jmpbuf);
9E4: 00000000 34653F44 ; 279: void longjmp(jmp_buf, int);
9E8: 00000000 C54CBE44 ; 27A: int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size);
9EC: 00000000 654EBE44 ; 27B: int inflate (z_streamp strm, int flush);
9F0: 00000000 C560BE44 ; 27C: int inflateEnd (z_streamp strm);
;09F4: xxxxxxxx yyyyyyyy ; 27D: int memcmp (const void *m1,const void *m2,int n);
9F8: 00000000 85F66644 ; 27E: int strncmp(const char *s1, const char *s2, int len);
9FC: 00000000 B9F66644 ; 27F: char *strncpy (char *dest,const char *source,int maxlen);
A00: 00000000 B5F56644 ; 280: char *strcat(char *dest, const char *src);
A04: 00000000 F5634345 ; 281: void GuiObject_SetTitleType(GUI *gui, int type);
A08: 00000000 01043F45 ; 282: void GUIonMessage_SetItemDisabled (void * msg, int Disabled);
A0C: 00000000 4547F344 ; 283: int REQUEST_IMAGEHANDLER_INTERNAL_REGISTER(const int * __zero,u16 ImageHandle,u16*,u16*,int unk, u16 * ImageID ,char * error);
A10: 00000000 F547F344 ; 284: __thumb int REQUEST_IMAGEHANDLER_INTERNAL_UNREGISTER (const int * __zero,u16 ImageHandle,u16* ,u16* ,int ImageID, int unk_1,char * error);
A14: 00000000 20462E20 ;8285: SURFACE ** get_Surfaces(void);





;locale=Russian_Russia.1251
