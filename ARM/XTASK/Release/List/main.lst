##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.40A/W32 EVALUATION    24/Sep/2006  17:29:17 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\ARM\XTASK\main.c                                  #
#    Command line    =  E:\ARM\XTASK\main.c -lC E:\ARM\XTASK\Release\List\   #
#                       -o E:\ARM\XTASK\Release\Obj\ -s9 --no_unroll         #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None -I D:\IARARM\ARM\INC\                     #
#    List file       =  E:\ARM\XTASK\Release\List\main.lst                   #
#    Object file     =  E:\ARM\XTASK\Release\Obj\main.r79                    #
#                                                                            #
#                                                                            #
##############################################################################

E:\ARM\XTASK\main.c
      1          #include "..\swilib.h"
      2          

   \                                 In segment DATA_Z, align 4, align-sorted
      3          WSHDR *ws_nogui;
   \                     ws_nogui:
   \   00000000                      DS8 4
      4          

   \                                 In segment DATA_Z, align 4, align-sorted
      5          CSM_RAM *under_idle;
   \                     under_idle:
   \   00000000                      DS8 4
      6          

   \                                 In segment CODE, align 4, keep-with-next
      7          void ElfKiller(void)
      8          {
      9            extern void *ELF_BEGIN;
     10            FreeWS(ws_nogui);
   \                     ElfKiller:
   \   00000000   ........           LDR      R0,??DataTable7  ;; ws_nogui
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   290100EF           SWI      +297
     11            ((void (*)(void *))(mfree_adr()))(&ELF_BEGIN);
   \   00000010   158000EF           SWI      +32789
   \   00000014   0010A0E1           MOV      R1,R0
   \   00000018   04009FE5           LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
   \   0000001C   0040BDE8           POP      {LR}             ;; Pop
   \   00000020   01F0A0E1           MOV      PC,R1            ;; tailcall
   \                     ??ElfKiller_0:
   \   00000024   ........           DC32     ELF_BEGIN
     12          }
     13          

   \                                 In segment DATA_Z, align 4, align-sorted
     14          int mode;
   \                     mode:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     15          int mode_red;
   \                     mode_red:
   \   00000000                      DS8 4
     16          

   \                                 In segment CODE, align 4, keep-with-next
     17          int my_keyhook(int submsg, int msg)
     18          {
   \                     my_keyhook:
   \   00000000   00402DE9           PUSH     {LR}
     19          /*  void *icsm=FindCSMbyID(CSM_root()->idle_id);
     20            if (submsg==RED_BUTTON)
     21            {
     22              if (IsGuiOnTop(((int *)icsm)[0x2C/4]))
     23              {
     24                if (msg==KEY_UP)
     25                {
     26          	if (mode_red)
     27          	{
     28          	  mode_red=0;
     29          	  return(2);
     30          	}
     31                }
     32              }
     33              else
     34              {
     35                if (msg==KEY_DOWN)
     36                {
     37          	if (mode_red==1)
     38          	{
     39          	  mode_red=0;
     40          	  return(0);
     41          	}
     42          	GBS_SendMessage(MMI_CEPID,KEY_DOWN,RIGHT_SOFT);
     43          	mode_red=2;
     44          	//GeneralFuncF0(0);
     45                }
     46                if (msg==LONG_PRESS)
     47                {
     48          	mode_red=1;
     49          	GBS_SendMessage(MMI_CEPID,KEY_DOWN,RED_BUTTON);
     50                }
     51                return(2);
     52              }
     53            }*/
     54            if (submsg!=INTERNET_BUTTON) return(0);
   \   00000004   110050E3           CMP      R0,#+17
   \   00000008   0000A013           MOVNE    R0,#+0
   \   0000000C   0080BD18           POPNE    {PC}
     55            if (mode==-1)
   \   00000010   ........           LDR      R0,??DataTable4  ;; mode
   \   00000014   002090E5           LDR      R2,[R0, #+0]
   \   00000018   010072E3           CMN      R2,#+1
   \   0000001C   0900001A           BNE      ??my_keyhook_0
     56            {
     57              if (msg==KEY_UP)
   \   00000020   650F51E3           CMP      R1,#+404
   \   00000024   0500001A           BNE      ??my_keyhook_1
     58              {
     59                GBS_SendMessage(MMI_CEPID,KEY_DOWN,ENTER_BUTTON);
   \   00000028   1A20A0E3           MOV      R2,#+26
   \   0000002C   9310A0E3           MOV      R1,#+147
   \   00000030   401F81E3           ORR      R1,R1,#0x100
   \   00000034   0900A0E3           MOV      R0,#+9
   \   00000038   420C80E3           ORR      R0,R0,#0x4200
   \   0000003C   000100EF           SWI      +256
     60              }
     61              return(2);
   \                     ??my_keyhook_1:
   \   00000040   0200A0E3           MOV      R0,#+2
   \   00000044   0080BDE8           POP      {PC}
     62            }
     63            switch(msg)
   \                     ??my_keyhook_0:
   \   00000048   651F51E2           SUBS     R1,R1,#+404
   \   0000004C   0300000A           BEQ      ??my_keyhook_2
   \   00000050   011051E2           SUBS     R1,R1,#+1
   \   00000054   0110A003           MOVEQ    R1,#+1
   \   00000058   00108005           STREQ    R1,[R0, #+0]
   \   0000005C   080000EA           B        ??my_keyhook_3
     64            {
     65            case KEY_DOWN:
     66              break;
     67            case KEY_UP:
     68              if (mode==1)
   \                     ??my_keyhook_2:
   \   00000060   010052E3           CMP      R2,#+1
   \   00000064   0800001A           BNE      ??my_keyhook_4
     69              {
     70                RemoveKeybMsgHook((void *)my_keyhook);
   \   00000068   ........           LDR      R0,??DataTable5  ;; my_keyhook
   \   0000006C   2D0100EF           SWI      +301
     71                ShowMSG(1,(int)"XTask отлючен!");
   \   00000070   1C109FE5           LDR      R1,??my_keyhook_5  ;; `?<Constant "XTask \\356\\362\\353\\376\\367\\345\\355`
   \   00000074   0100A0E3           MOV      R0,#+1
   \   00000078   480100EF           SWI      +328
     72                SUBPROC((void *)ElfKiller);
   \   0000007C   ........           LDR      R0,??DataTable6  ;; ElfKiller
   \   00000080   710100EF           SWI      +369
     73                break;
   \                     ??my_keyhook_3:
   \   00000084   0200A0E3           MOV      R0,#+2
   \   00000088   0080BDE8           POP      {PC}
     74              }
     75              {
     76                extern void do_gui(void);
     77                do_gui();
   \                     ??my_keyhook_4:
   \   0000008C   ........           _BLF     do_gui,??do_gui??rA
   \   00000090   FBFFFFEA           B        ??my_keyhook_3
   \                     ??my_keyhook_5:
   \   00000094   ........           DC32     `?<Constant "XTask \\356\\362\\353\\376\\367\\345\\355`
     78              }
     79              break;
     80            case LONG_PRESS:
     81              mode=1;
     82            }
     83            return(2);
     84          }
     85          

   \                                 In segment CODE, align 4, keep-with-next
     86          void main(void)
     87          {
     88            mode=0;
   \                     main:
   \   00000000   ........           LDR      R0,??DataTable4  ;; mode
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   001080E5           STR      R1,[R0, #+0]
     89            LockSched();
   \   00000010   460100EF           SWI      +326
     90            if (!AddKeybMsgHook_end((void *)my_keyhook))
   \   00000014   ........           LDR      R0,??DataTable5  ;; my_keyhook
   \   00000018   2C0100EF           SWI      +300
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0600001A           BNE      ??main_0
     91            {
     92              ShowMSG(1,(int)"Невозможно зарегистрировать обработчик!");
   \   00000024   60109FE5           LDR      R1,??main_1+0x4  ;; `?<Constant "\\315\\345\\342\\356\\347\\354\\356\\346\\3`
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   480100EF           SWI      +328
     93              SUBPROC((void *)ElfKiller);
   \   00000030   ........           LDR      R0,??DataTable6  ;; ElfKiller
   \   00000034   710100EF           SWI      +369
   \   00000038   470100EF           SWI      +327
   \   0000003C   1080BDE8           POP      {R4,PC}
     94            }
   \                     ??main_0:
   \   00000040   ........           LDR      R4,??DataTable7  ;; ws_nogui
     95            else
     96            {
     97              ShowMSG(1,(int)"XTask установлен!");
   \   00000044   44109FE5           LDR      R1,??main_1+0x8  ;; `?<Constant "XTask \\363\\361\\362\\340\\355\\356\\342`
   \   00000048   0100A0E3           MOV      R0,#+1
   \   0000004C   480100EF           SWI      +328
     98              ws_nogui=AllocWS(256);
   \   00000050   400FA0E3           MOV      R0,#+256
   \   00000054   250100EF           SWI      +293
     99              wsprintf(ws_nogui,"%t","Нет GUI!");
   \   00000058   34209FE5           LDR      R2,??main_1+0xC  ;; `?<Constant "\\315\\345\\362 GUI!">`
   \   0000005C   000084E5           STR      R0,[R4, #+0]
   \   00000060   081F8FE2           ADR      R1,??main_1      ;; "%t"
   \   00000064   240100EF           SWI      +292
    100              under_idle=(FindCSMbyID(CSM_root()->idle_id))->prev; //Ищем idle_dialog
   \   00000068   068100EF           SWI      +33030
   \   0000006C   040090E5           LDR      R0,[R0, #+4]
   \   00000070   080100EF           SWI      +264
   \   00000074   040090E5           LDR      R0,[R0, #+4]
   \   00000078   18109FE5           LDR      R1,??main_1+0x10  ;; under_idle
   \   0000007C   000081E5           STR      R0,[R1, #+0]
    101            }
    102            UnlockSched();
   \   00000080   470100EF           SWI      +327
   \   00000084   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??main_1:
   \   00000088   25740000           DC8      "%t",+0
   \   0000008C   ........           DC32     `?<Constant "\\315\\345\\342\\356\\347\\354\\356\\346\\3`
   \   00000090   ........           DC32     `?<Constant "XTask \\363\\361\\362\\340\\355\\356\\342`
   \   00000094   ........           DC32     `?<Constant "\\315\\345\\362 GUI!">`
   \   00000098   ........           DC32     under_idle
    103          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     mode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     my_keyhook

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     ElfKiller

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     ws_nogui

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "XTask \\356\\362\\353\\376\\367\\345\\355`:
   \   00000000   585461736B20       DC8 "XTask \356\362\353\376\367\345\355!"
   \              EEF2EBFEF7E5
   \              ED2100      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\315\\345\\342\\356\\347\\354\\356\\346\\3`:
   \   00000000   CDE5E2EEE7EC       DC8 "\315\345\342\356\347\354\356\346\355\356 \347\340\360\345\343\350\361\362\360\350\360\356\342\340\362\374 \356\341\360\340\341\356\362\367\350\352!"
   \              EEE6EDEE20E7
   \              E0F0E5E3E8F1
   \              F2F0E8F0EEE2
   \              E0F2FC20EEE1
   \              F0E0E1EEF2F7
   \              E8EA2100    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "XTask \\363\\361\\362\\340\\355\\356\\342`:
   \   00000000   585461736B20       DC8 "XTask \363\361\362\340\355\356\342\353\345\355!"
   \              F3F1F2E0EDEE
   \              E2EBE5ED2100
   \   00000012   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257400             DC8 "%t"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\315\\345\\362 GUI!">`:
   \   00000000   CDE5F2204755       DC8 "\315\345\362 GUI!"
   \              492100      
   \   00000009   000000             DC8 0, 0, 0

   Maximum stack usage in bytes:

     Function   CSTACK
     --------   ------
     ElfKiller      4
     main           8
     my_keyhook     4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     ws_nogui                          4
     under_idle                        4
     ElfKiller                        40
     mode                              4
     mode_red                          4
     my_keyhook                      152
     main                            156
     ??DataTable4                      4
     ??DataTable5                      4
     ??DataTable6                      4
     ??DataTable7                      4
     ?<Constant "XTask \356\362\353\376\367\345\355
                                      16
     ?<Constant "\315\345\342\356\347\354\356\346\3
                                      40
     ?<Constant "XTask \363\361\362\340\355\356\342
                                      20
     ?<Constant "%t">                  3
     ?<Constant "\315\345\362 GUI!">
                                      12
      Others                          36

 
 388 bytes in segment CODE
  91 bytes in segment DATA_C
  16 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 364 bytes of CODE  memory (+ 36 bytes shared)
  91 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: none
