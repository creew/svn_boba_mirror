##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.40A/W32 EVALUATION    14/Oct/2006  12:47:05 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\ARM\GSMS\main.c                                   #
#    Command line    =  E:\ARM\GSMS\main.c -lC E:\ARM\GSMS\Release\List\ -o  #
#                       E:\ARM\GSMS\Release\Obj\ -s9 --no_unroll             #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None -I D:\IARARM\ARM\INC\                     #
#    List file       =  E:\ARM\GSMS\Release\List\main.lst                    #
#    Object file     =  E:\ARM\GSMS\Release\Obj\main.r79                     #
#                                                                            #
#                                                                            #
##############################################################################

E:\ARM\GSMS\main.c
      1          #include "..\inc\swilib.h"
      2          

   \                                 In segment DATA_I, align 4, align-sorted
      3          char txt[]="upor";
   \                     txt:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for txt>`

   \                                 In segment DATA_Z, align 4, align-sorted
      4          char buf[16384];
   \                     buf:
   \   00000000                      DS8 16384

   \                                 In segment DATA_Z, align 4, align-sorted
      5          int pbuf=0;
   \                     pbuf:
   \   00000000                      DS8 4
      6          
      7          typedef struct
      8          {
      9            CSM_RAM csm;
     10            int gui_id;
     11          }MAIN_CSM;
     12          
     13          typedef struct
     14          {
     15            GUI gui;
     16            WSHDR *ws1;
     17            WSHDR *ws2;
     18            int i1;
     19          }MAIN_GUI;
     20          

   \                                 In segment DATA_Z, align 4, align-sorted
     21          int connect_state=0;
   \                     connect_state:
   \   00000000                      DS8 4
     22          

   \                                 In segment DATA_I, align 4, align-sorted
     23          int sock=-1;
   \                     sock:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for sock>`
     24          
     25          extern void kill_data(void *p, void (*func_p)(void *));
     26          

   \                                 In segment CODE, align 4, keep-with-next
     27          void ElfKiller(void)
     28          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
     29            extern void *ELF_BEGIN;
     30            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     ELF_BEGIN
     31          }
     32          

   \                                 In segment CODE, align 4, keep-with-next
     33          void create_connect(void)
     34          {
   \                     create_connect:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
     35            SOCK_ADDR sa;
     36            //Устанавливаем соединение
     37            connect_state=0;
   \   00000004   ........           LDR      R4,??DataTable12  ;; connect_state
     38            sock=socket(1,1,0);
   \   00000008   ........           LDR      R5,??DataTable13  ;; sock
   \   0000000C   10D04DE2           SUB      SP,SP,#+16
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   000084E5           STR      R0,[R4, #+0]
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   0110A0E3           MOV      R1,#+1
   \   00000020   0100A0E1           MOV      R0,R1
   \   00000024   730100EF           SWI      +371
   \   00000028   000085E5           STR      R0,[R5, #+0]
     39            if (sock!=-1)
   \   0000002C   0060E0E3           MVN      R6,#+0
   \   00000030   060050E1           CMP      R0,R6
   \   00000034   1000000A           BEQ      ??create_connect_0
     40            {
     41              sa.family=1;
   \   00000038   0170A0E3           MOV      R7,#+1
   \   0000003C   B070CDE1           STRH     R7,[SP, #+0]
     42              sa.port=htons(80);
   \   00000040   5000A0E3           MOV      R0,#+80
   \   00000044   7A0100EF           SWI      +378
   \   00000048   B200CDE1           STRH     R0,[SP, #+2]
     43              sa.ip=htonl(IP_ADDR(62,149,13,117));
   \   0000004C   30009FE5           LDR      R0,??create_connect_1  ;; 0x3e950d75
   \   00000050   7B0100EF           SWI      +379
   \   00000054   04008DE5           STR      R0,[SP, #+4]
     44              if (connect(sock,&sa,sizeof(sa))!=-1)
   \   00000058   000095E5           LDR      R0,[R5, #+0]
   \   0000005C   1020A0E3           MOV      R2,#+16
   \   00000060   0D10A0E1           MOV      R1,SP
   \   00000064   740100EF           SWI      +372
   \   00000068   060050E1           CMP      R0,R6
     45              {
     46                connect_state=1;
   \   0000006C   00708415           STRNE    R7,[R4, #+0]
   \   00000070   0100001A           BNE      ??create_connect_0
     47              }
     48              else
     49                closesocket(sock);
   \   00000074   000095E5           LDR      R0,[R5, #+0]
   \   00000078   760100EF           SWI      +374
     50            }
     51          }
   \                     ??create_connect_0:
   \   0000007C   10D08DE2           ADD      SP,SP,#+16       ;; stack cleaning
   \   00000080   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??create_connect_1:
   \   00000084   750D953E           DC32     0x3e950d75
     52          

   \                                 In segment CODE, align 4, keep-with-next
     53          void send_req(void)
     54          {
   \                     send_req:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     55            sprintf(buf,
     56                    "POST /scripts/wap-status.php HTTP/1.1\r\n"
     57          		  "Host: sms.n-host.info\r\n"
     58          		    "Content-Type: application/x-www-form-urlencoded\r\n"
     59          		      "Content-Length: %d\r\n"
     60          			"\r\n"
     61          			  "sms=%s&nomer=0661653392",
     62          			  strlen(txt)+21,txt
     63          			    );
   \   00000004   64409FE5           LDR      R4,??send_req_0  ;; txt
   \   00000008   ........           LDR      R5,??DataTable8  ;; buf
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   1B0000EF           SWI      +27
   \   00000014   58109FE5           LDR      R1,??send_req_0+0x4  ;; `?<Constant "POST /scripts/wap-sta...">`
   \   00000018   0430A0E1           MOV      R3,R4
   \   0000001C   152080E2           ADD      R2,R0,#+21
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   160000EF           SWI      +22
     64            send(sock,buf,strlen(buf),0);
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   1B0000EF           SWI      +27
   \   00000030   0020A0E1           MOV      R2,R0
   \   00000034   ........           LDR      R0,??DataTable13  ;; sock
   \   00000038   0030A0E3           MOV      R3,#+0
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   790100EF           SWI      +377
     65            zeromem(buf,sizeof(buf));
   \   00000048   401CA0E3           MOV      R1,#+16384
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   1D0100EF           SWI      +285
     66            pbuf=0;
   \   00000054   ........           LDR      R0,??DataTable15  ;; pbuf
   \   00000058   0010A0E3           MOV      R1,#+0
   \   0000005C   001080E5           STR      R1,[R0, #+0]
     67            connect_state=2;
   \   00000060   ........           LDR      R0,??DataTable12  ;; connect_state
   \   00000064   0210A0E3           MOV      R1,#+2
   \   00000068   001080E5           STR      R1,[R0, #+0]
   \   0000006C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??send_req_0:
   \   00000070   ........           DC32     txt
   \   00000074   ........           DC32     `?<Constant "POST /scripts/wap-sta...">`
     68          }
     69          

   \                                 In segment CODE, align 4, keep-with-next
     70          void end_socket(void)
     71          {
   \                     end_socket:
   \   00000000   10402DE9           PUSH     {R4,LR}
     72            if (sock>=0)
   \   00000004   ........           LDR      R4,??DataTable13  ;; sock
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1080BD48           POPMI    {R4,PC}
     73            {
     74              shutdown(sock,2);
   \   00000014   0210A0E3           MOV      R1,#+2
   \   00000018   770100EF           SWI      +375
     75              closesocket(sock);
   \   0000001C   000094E5           LDR      R0,[R4, #+0]
   \   00000020   760100EF           SWI      +374
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
     76            }
     77          }
     78          

   \                                 In segment CODE, align 4, keep-with-next
     79          void get_answer(void)
     80          {
   \                     get_answer:
   \   00000000   10402DE9           PUSH     {R4,LR}
     81            int i=pbuf;
   \   00000004   ........           LDR      R4,??DataTable15  ;; pbuf
     82            if (i==16383)
   \   00000008   FF10A0E3           MOV      R1,#+255
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   FC1D81E3           ORR      R1,R1,#0x3F00
   \   00000014   010050E1           CMP      R0,R1
   \   00000018   0C00000A           BEQ      ??get_answer_0
     83              end_socket();
     84            else
     85            {
     86              i=recv(sock,buf+i,16383-i,0);
   \   0000001C   002041E0           SUB      R2,R1,R0
   \   00000020   ........           LDR      R1,??DataTable8  ;; buf
   \   00000024   0030A0E3           MOV      R3,#+0
   \   00000028   011080E0           ADD      R1,R0,R1
   \   0000002C   ........           LDR      R0,??DataTable13  ;; sock
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   780100EF           SWI      +376
     87              if (i)
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0300000A           BEQ      ??get_answer_0
     88              {
     89                pbuf+=i;
   \   00000040   001094E5           LDR      R1,[R4, #+0]
   \   00000044   010080E0           ADD      R0,R0,R1
   \   00000048   000084E5           STR      R0,[R4, #+0]
   \   0000004C   1080BDE8           POP      {R4,PC}
     90              }
     91              else
     92              {
     93                end_socket();
   \                     ??get_answer_0:
   \   00000050   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000054   ........           B        end_socket       ;; tailcall
     94              }
     95            }
     96          }
     97          

   \                                 In segment CODE, align 4, keep-with-next
     98          void method0(MAIN_GUI *data)
     99          {
   \                     method0:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    100            DrawRoundedFrame(0,0,131,175,0,0,0,
    101          		   GetPaletteAdrByColorIndex(0),
    102          		   GetPaletteAdrByColorIndex(20));
   \   00000008   1400A0E3           MOV      R0,#+20
   \   0000000C   2E0100EF           SWI      +302
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   2E0100EF           SWI      +302
   \   0000001C   20002DE9           PUSH     {R5}
   \   00000020   01002DE9           PUSH     {R0}
   \   00000024   AF30A0E3           MOV      R3,#+175
   \   00000028   8320A0E3           MOV      R2,#+131
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   01002DE9           PUSH     {R0}
   \   00000038   01002DE9           PUSH     {R0}
   \   0000003C   01002DE9           PUSH     {R0}
   \   00000040   500100EF           SWI      +336
    103            wsprintf(data->ws1,"State: %02d",connect_state);
   \   00000044   ........           LDR      R0,??DataTable12  ;; connect_state
   \   00000048   58109FE5           LDR      R1,??method0_0   ;; `?<Constant "State: %02d">`
   \   0000004C   002090E5           LDR      R2,[R0, #+0]
   \   00000050   340094E5           LDR      R0,[R4, #+52]
   \   00000054   240100EF           SWI      +292
    104            DrawString(data->ws1,3,3,128,172,SMALL_FONT,0,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
   \   00000058   1700A0E3           MOV      R0,#+23
   \   0000005C   2E0100EF           SWI      +302
   \   00000060   0050A0E1           MOV      R5,R0
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   2E0100EF           SWI      +302
   \   0000006C   20002DE9           PUSH     {R5}
   \   00000070   01002DE9           PUSH     {R0}
   \   00000074   8030A0E3           MOV      R3,#+128
   \   00000078   0320A0E3           MOV      R2,#+3
   \   0000007C   0210A0E1           MOV      R1,R2
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   01002DE9           PUSH     {R0}
   \   00000088   0B00A0E3           MOV      R0,#+11
   \   0000008C   01002DE9           PUSH     {R0}
   \   00000090   AC00A0E3           MOV      R0,#+172
   \   00000094   01002DE9           PUSH     {R0}
   \   00000098   340094E5           LDR      R0,[R4, #+52]
   \   0000009C   4C0100EF           SWI      +332
   \   000000A0   28D08DE2           ADD      SP,SP,#+40
   \   000000A4   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??method0_0:
   \   000000A8   ........           DC32     `?<Constant "State: %02d">`
    105          }
    106          

   \                                 In segment CODE, align 4, keep-with-next
    107          void method1(MAIN_GUI *data, void *(*malloc_adr)(int))
    108          {
   \                     method1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    109            data->ws1=AllocWS(256);
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
   \   00000010   340084E5           STR      R0,[R4, #+52]
    110            data->ws2=AllocWS(256);
   \   00000014   400FA0E3           MOV      R0,#+256
   \   00000018   250100EF           SWI      +293
   \   0000001C   380084E5           STR      R0,[R4, #+56]
    111            data->gui.state=1;
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   0C00C4E5           STRB     R0,[R4, #+12]
   \   00000028   1080BDE8           POP      {R4,PC}          ;; return
    112          }
    113          

   \                                 In segment CODE, align 4, keep-with-next
    114          void method2(MAIN_GUI *data, void (*mfree_adr)(void *))
    115          {
   \                     method2:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    116            FreeWS(data->ws1);
   \   00000008   340094E5           LDR      R0,[R4, #+52]
   \   0000000C   290100EF           SWI      +297
    117            FreeWS(data->ws2);
   \   00000010   380094E5           LDR      R0,[R4, #+56]
   \   00000014   290100EF           SWI      +297
    118            data->gui.state=0;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   0C00C4E5           STRB     R0,[R4, #+12]
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return
    119          }
    120          

   \                                 In segment CODE, align 4, keep-with-next
    121          void method3(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
    122          {
    123            data->gui.state=2;
   \                     method3:
   \   00000000   0210A0E3           MOV      R1,#+2
   \   00000004   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    124          }
    125          

   \                                 In segment CODE, align 4, keep-with-next
    126          void method4(MAIN_GUI *data, void (*mfree_adr)(void *))
    127          {
    128            if (data->gui.state!=2) return;
   \                     method4:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
    129            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
   \   00000010   1EFF2FE1           BX       LR               ;; return
    130          }
    131          

   \                                 In segment CODE, align 4, keep-with-next
    132          int method5(MAIN_GUI *data, GUI_MSG *msg)
    133          {
   \                     method5:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    134            DirectRedrawGUI();
   \   00000008   3F0100EF           SWI      +319
    135            if (msg->gbsmsg->msg==KEY_DOWN)
   \   0000000C   040094E5           LDR      R0,[R4, #+4]
   \   00000010   9320A0E3           MOV      R2,#+147
   \   00000014   041090E5           LDR      R1,[R0, #+4]
   \   00000018   402F82E3           ORR      R2,R2,#0x100
   \   0000001C   020051E1           CMP      R1,R2
    136            {
    137              switch(msg->gbsmsg->submess)
   \   00000020   08009005           LDREQ    R0,[R0, #+8]
   \   00000024   04005003           CMPEQ    R0,#+4
    138              {
    139              case RIGHT_SOFT:
    140                return(1); //Происходит вызов GeneralFunc для тек. GUI -> закрытие GUI
   \   00000028   0100A003           MOVEQ    R0,#+1
   \   0000002C   1080BD08           POPEQ    {R4,PC}
    141              }
    142            }
    143            //  method0(data);
    144            return(0);
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
    145          }

   \                                 In segment CODE, align 4, keep-with-next
    146          void method7(MAIN_GUI *data, void (*mfree_adr)(void *))
    147          {
    148            mfree_adr(data);
   \                     method7:
   \   00000000   01F0A0E1           MOV      PC,R1            ;; tailcall
    149          }
    150          

   \                                 In segment CODE, align 4, keep-with-next
    151          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    152          

   \                                 In segment CODE, align 4, keep-with-next
    153          int method9(void){return(0);}
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    154          

   \                                 In segment DATA_C, align 4, align-sorted
    155          const void * const gui_methods[11]={
   \                     gui_methods:
   \   00000000   ............       DC32 method0, method1, method2, method3, method4, method5, 0H, method7
   \              ............
   \              ............
   \              ............
   \              00000000....
   \              ....        
   \   00000020   ............       DC32 method8, method9, 0H
   \              ....00000000
    156            (void *)method0,	//Redraw
    157            (void *)method1,	//Create
    158            (void *)method2,	//Close
    159            (void *)method3,	//Focus
    160            (void *)method4,	//Unfocus
    161            (void *)method5,	//OnKey
    162            0,
    163            (void *)method7,	//Destroy
    164            (void *)method8,
    165            (void *)method9,
    166            0
    167          };
    168          

   \                                 In segment DATA_C, align 4, align-sorted
    169          const RECT Canvas={0,0,131,175};
   \                     Canvas:
   \   00000000   000000008300       DC16 0, 0, 131, 175
   \              AF00        
    170          

   \                                 In segment CODE, align 4, keep-with-next
    171          void maincsm_oncreate(CSM_RAM *data)
    172          {
   \                     maincsm_oncreate:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    173            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   00000008   4000A0E3           MOV      R0,#+64
   \   0000000C   140000EF           SWI      +20
   \   00000010   0050A0E1           MOV      R5,R0
    174            MAIN_CSM*csm=(MAIN_CSM*)data;
    175            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000014   4010A0E3           MOV      R1,#+64
   \   00000018   1D0100EF           SWI      +285
    176            main_gui->gui.canvas=(void *)(&Canvas);
   \   0000001C   3C009FE5           LDR      R0,??maincsm_oncreate_0  ;; Canvas
   \   00000020   000085E5           STR      R0,[R5, #+0]
    177            main_gui->gui.flag30=2;
   \   00000024   0200A0E3           MOV      R0,#+2
   \   00000028   300085E5           STR      R0,[R5, #+48]
    178            main_gui->gui.methods=(void *)gui_methods;
   \   0000002C   30009FE5           LDR      R0,??maincsm_oncreate_0+0x4  ;; gui_methods
   \   00000030   040085E5           STR      R0,[R5, #+4]
    179            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000034   158000EF           SWI      +32789
   \   00000038   200085E5           STR      R0,[R5, #+32]
    180            csm->csm.state=0;
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   100084E5           STR      R0,[R4, #+16]
    181            csm->csm.unk1=0;
   \   00000044   140084E5           STR      R0,[R4, #+20]
    182            csm->gui_id=CreateGUI(main_gui);
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   370100EF           SWI      +311
   \   00000050   280084E5           STR      R0,[R4, #+40]
    183            SUBPROC((void *)create_connect);
   \   00000054   0C009FE5           LDR      R0,??maincsm_oncreate_0+0x8  ;; create_connect
   \   00000058   710100EF           SWI      +369
   \   0000005C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   00000060   ........           DC32     Canvas
   \   00000064   ........           DC32     gui_methods
   \   00000068   ........           DC32     create_connect
    184          }
    185          

   \                                 In segment CODE, align 4, keep-with-next
    186          void maincsm_onclose(CSM_RAM *csm)
    187          {
    188            SUBPROC((void *)end_socket);
   \                     maincsm_onclose:
   \   00000000   ........           LDR      R0,??DataTable14  ;; end_socket
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   710100EF           SWI      +369
    189            SUBPROC((void *)ElfKiller);
   \   0000000C   04009FE5           LDR      R0,??maincsm_onclose_0  ;; ElfKiller
   \   00000010   710100EF           SWI      +369
   \   00000014   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000018   ........           DC32     ElfKiller
    190          }
    191          

   \                                 In segment CODE, align 4, keep-with-next
    192          int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    193          {
   \                     maincsm_onmessage:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   68D04DE2           SUB      SP,SP,#+104
    194            char ss[100];
    195            MAIN_CSM *csm=(MAIN_CSM*)data;
    196            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \   00000008   042091E5           LDR      R2,[R1, #+4]
   \   0000000C   0E30A0E3           MOV      R3,#+14
   \   00000010   643C83E3           ORR      R3,R3,#0x6400
   \   00000014   030052E1           CMP      R2,R3
   \   00000018   0500001A           BNE      ??maincsm_onmessage_0
   \   0000001C   0C2091E5           LDR      R2,[R1, #+12]
   \   00000020   283090E5           LDR      R3,[R0, #+40]
   \   00000024   030052E1           CMP      R2,R3
   \   00000028   3800001A           BNE      ??maincsm_onmessage_1
    197            {
    198              csm->csm.state=-3;
   \   0000002C   0220E0E3           MVN      R2,#+2
   \   00000030   102080E5           STR      R2,[R0, #+16]
    199            }
    200            if (msg->msg==MSG_HELPER_TRANSLATOR)
   \                     ??maincsm_onmessage_0:
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   AE20A0E3           MOV      R2,#+174
   \   0000003C   DE2C82E3           ORR      R2,R2,#0xDE00
   \   00000040   020050E1           CMP      R0,R2
   \   00000044   3100001A           BNE      ??maincsm_onmessage_1
    201            {
    202              switch((int)msg->data0)
   \   00000048   ........           LDR      R5,??DataTable12  ;; connect_state
   \   0000004C   ........           LDR      R4,??DataTable13  ;; sock
   \   00000050   0CC091E5           LDR      R12,[R1, #+12]
   \   00000054   100091E5           LDR      R0,[R1, #+16]
   \   00000058   002095E5           LDR      R2,[R5, #+0]
   \   0000005C   003094E5           LDR      R3,[R4, #+0]
   \   00000060   8CC05CE2           SUBS     R12,R12,#+140
   \   00000064   0D00000A           BEQ      ??maincsm_onmessage_2
   \   00000068   01C05CE2           SUBS     R12,R12,#+1
   \   0000006C   0400000A           BEQ      ??maincsm_onmessage_3
   \   00000070   01C05CE2           SUBS     R12,R12,#+1
   \   00000074   1700000A           BEQ      ??maincsm_onmessage_4
   \   00000078   01C05CE2           SUBS     R12,R12,#+1
   \   0000007C   0C00000A           BEQ      ??maincsm_onmessage_5
   \   00000080   220000EA           B        ??maincsm_onmessage_1
    203              {
    204              case ENIP_SOCK_CONNECTED:
    205                if (connect_state==1)
   \                     ??maincsm_onmessage_3:
   \   00000084   010052E3           CMP      R2,#+1
    206                {
    207                  //Если посылали запрос
    208                  if ((int)msg->data1==sock)
   \   00000088   03005001           CMPEQ    R0,R3
   \   0000008C   1F00001A           BNE      ??maincsm_onmessage_1
    209                  {
    210                    //Если наш сокет
    211                    SUBPROC((void *)send_req);
   \   00000090   84009FE5           LDR      R0,??maincsm_onmessage_6  ;; send_req
   \                     ??maincsm_onmessage_7:
   \   00000094   710100EF           SWI      +369
    212                    REDRAW();
   \   00000098   720100EF           SWI      +370
   \   0000009C   0A0000EA           B        ??maincsm_onmessage_8
    213                  }
    214                }
    215                break;
    216              case ENIP_DATA_READ:
    217                if (connect_state==2)
   \                     ??maincsm_onmessage_2:
   \   000000A0   020052E3           CMP      R2,#+2
    218                {
    219                  //Если посылали send
    220                  if ((int)msg->data1==sock)
   \   000000A4   03005001           CMPEQ    R0,R3
   \   000000A8   1800001A           BNE      ??maincsm_onmessage_1
    221                  {
    222                    //Если наш сокет
    223                    SUBPROC((void *)get_answer);
   \   000000AC   6C009FE5           LDR      R0,??maincsm_onmessage_6+0x4  ;; get_answer
   \   000000B0   F7FFFFEA           B        ??maincsm_onmessage_7
    224                    REDRAW();
    225                  }
    226                }
    227                break;
    228              case ENIP_REMOTE_CLOSED:
    229                //Закрыт со стороны сервера
    230                if ((int)msg->data1==sock)
   \                     ??maincsm_onmessage_5:
   \   000000B4   030050E1           CMP      R0,R3
   \   000000B8   1400001A           BNE      ??maincsm_onmessage_1
    231                {
    232                  if (connect_state) SUBPROC((void *)end_socket);
   \   000000BC   000052E3           CMP      R2,#+0
   \   000000C0   1200000A           BEQ      ??maincsm_onmessage_1
   \   000000C4   ........           LDR      R0,??DataTable14  ;; end_socket
   \   000000C8   710100EF           SWI      +369
   \                     ??maincsm_onmessage_8:
   \   000000CC   0100A0E3           MOV      R0,#+1
   \   000000D0   68D08DE2           ADD      SP,SP,#+104
   \   000000D4   3080BDE8           POP      {R4,R5,PC}
    233                }
    234                break;
    235              case ENIP_CLOSED:
    236                //Закрыт вызовом closesocket
    237                if ((int)msg->data1==sock)
   \                     ??maincsm_onmessage_4:
   \   000000D8   030050E1           CMP      R0,R3
   \   000000DC   0B00001A           BNE      ??maincsm_onmessage_1
    238                {
    239                  sprintf(ss,"Recived %d bytes",pbuf);
   \   000000E0   ........           LDR      R0,??DataTable15  ;; pbuf
   \   000000E4   38109FE5           LDR      R1,??maincsm_onmessage_6+0x8  ;; `?<Constant "Recived %d bytes">`
   \   000000E8   002090E5           LDR      R2,[R0, #+0]
   \   000000EC   04008DE2           ADD      R0,SP,#+4
   \   000000F0   160000EF           SWI      +22
    240                  ShowMSG(1,(int)ss);
   \   000000F4   04108DE2           ADD      R1,SP,#+4
   \   000000F8   0100A0E3           MOV      R0,#+1
   \   000000FC   480100EF           SWI      +328
    241                  connect_state=0;
   \   00000100   0000A0E3           MOV      R0,#+0
   \   00000104   000085E5           STR      R0,[R5, #+0]
    242                  sock=-1;
   \   00000108   0000E0E1           MVN      R0,R0
   \   0000010C   000084E5           STR      R0,[R4, #+0]
    243                }
    244                break;
    245              }
    246            }
    247            return(1);
   \                     ??maincsm_onmessage_1:
   \   00000110   0100A0E3           MOV      R0,#+1
   \   00000114   68D08DE2           ADD      SP,SP,#+104
   \   00000118   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??maincsm_onmessage_6:
   \   0000011C   ........           DC32     send_req
   \   00000120   ........           DC32     get_answer
   \   00000124   ........           DC32     `?<Constant "Recived %d bytes">`
    248          }
    249          

   \                                 In segment DATA_C, align 4, align-sorted
    250          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
    251          

   \                                 In segment DATA_C, align 4, align-sorted
    252          const CSM_DESC maincsm=
   \                     maincsm:
   \   00000000   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   0000001C   2C0000000100       DC32 44, 1, minus11
   \              0000........
    253          {
    254            maincsm_onmessage,
    255            maincsm_oncreate,
    256            0,
    257            0,
    258            0,
    259            0,
    260            maincsm_onclose,
    261            sizeof(MAIN_CSM),
    262            1,
    263            &minus11
    264          };
    265          

   \                                 In segment CODE, align 4, keep-with-next
    266          int main()
    267          {
   \                     main:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
    268            char dummy[sizeof(MAIN_CSM)];
    269            LockSched();
   \   00000008   460100EF           SWI      +326
    270            CreateCSM(&maincsm,dummy,0);
   \   0000000C   18009FE5           LDR      R0,??main_0      ;; maincsm
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   0D10A0E1           MOV      R1,SP
   \   00000018   070100EF           SWI      +263
    271            UnlockSched();
   \   0000001C   470100EF           SWI      +327
    272            return 0;
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   2CD08DE2           ADD      SP,SP,#+44
   \   00000028   0080BDE8           POP      {PC}             ;; return
   \                     ??main_0:
   \   0000002C   ........           DC32     maincsm
    273          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     buf

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     connect_state

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     sock

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     end_socket

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     pbuf

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for txt>`:
   \   00000000   75706F7200         DC8 "upor"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for sock>`:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "POST /scripts/wap-sta...">`:
   \   00000000   504F5354202F       DC8 50H, 4FH, 53H, 54H, 20H, 2FH, 73H, 63H
   \              7363        
   \   00000008   72697074732F       DC8 72H, 69H, 70H, 74H, 73H, 2FH, 77H, 61H
   \              7761        
   \   00000010   702D73746174       DC8 70H, 2DH, 73H, 74H, 61H, 74H, 75H, 73H
   \              7573        
   \   00000018   2E7068702048       DC8 2EH, 70H, 68H, 70H, 20H, 48H, 54H, 54H
   \              5454        
   \   00000020   502F312E310D       DC8 50H, 2FH, 31H, 2EH, 31H, 0DH, 0AH, 48H
   \              0A48        
   \   00000028   6F73743A2073       DC8 6FH, 73H, 74H, 3AH, 20H, 73H, 6DH, 73H
   \              6D73        
   \   00000030   2E6E2D686F73       DC8 2EH, 6EH, 2DH, 68H, 6FH, 73H, 74H, 2EH
   \              742E        
   \   00000038   696E666F0D0A       DC8 69H, 6EH, 66H, 6FH, 0DH, 0AH, 43H, 6FH
   \              436F        
   \   00000040   6E74656E742D       DC8 6EH, 74H, 65H, 6EH, 74H, 2DH, 54H, 79H
   \              5479        
   \   00000048   70653A206170       DC8 70H, 65H, 3AH, 20H, 61H, 70H, 70H, 6CH
   \              706C        
   \   00000050   69636174696F       DC8 69H, 63H, 61H, 74H, 69H, 6FH, 6EH, 2FH
   \              6E2F        
   \   00000058   782D7777772D       DC8 78H, 2DH, 77H, 77H, 77H, 2DH, 66H, 6FH
   \              666F        
   \   00000060   726D2D75726C       DC8 72H, 6DH, 2DH, 75H, 72H, 6CH, 65H, 6EH
   \              656E        
   \   00000068   636F6465640D       DC8 63H, 6FH, 64H, 65H, 64H, 0DH, 0AH, 43H
   \              0A43        
   \   00000070   6F6E74656E74       DC8 6FH, 6EH, 74H, 65H, 6EH, 74H, 2DH, 4CH
   \              2D4C        
   \   00000078   656E6774683A       DC8 65H, 6EH, 67H, 74H, 68H, 3AH, 20H, 25H
   \              2025        
   \   00000080   640D0A0D0A73       DC8 64H, 0DH, 0AH, 0DH, 0AH, 73H, 6DH, 73H
   \              6D73        
   \   00000088   3D2573266E6F       DC8 3DH, 25H, 73H, 26H, 6EH, 6FH, 6DH, 65H
   \              6D65        
   \   00000090   723D30363631       DC8 72H, 3DH, 30H, 36H, 36H, 31H, 36H, 35H
   \              3635        
   \   00000098   3333393200         DC8 33H, 33H, 39H, 32H, 0
   \   0000009D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "State: %02d">`:
   \   00000000   53746174653A       DC8 "State: %02d"
   \              202530326400

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Recived %d bytes">`:
   \   00000000   526563697665       DC8 "Recived %d bytes"
   \              642025642062
   \              7974657300  
   \   00000011   000000             DC8 0, 0, 0

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     ElfKiller             4
     create_connect       36
     end_socket            8
     get_answer            8
     main                 48
     maincsm_onclose       4
     maincsm_oncreate     12
     maincsm_onmessage   116
     method0              52
     method1               8
     method2               8
     method3               0
     method4               0
     method5               8
     method7               4
     method8               0
     method9               0
     send_req             12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     txt                                8
     buf                            16384
     pbuf                               4
     connect_state                      4
     sock                               4
     ElfKiller                         28
     create_connect                   136
     send_req                         120
     end_socket                        40
     get_answer                        88
     method0                          172
     method1                           44
     method2                           36
     method3                           12
     method4                           20
     method5                           56
     method7                            4
     method8                            8
     method9                            8
     gui_methods                       44
     Canvas                             8
     maincsm_oncreate                 108
     maincsm_onclose                   28
     maincsm_onmessage                296
     minus11                            4
     maincsm                           40
     main                              48
     ??DataTable8                       4
     ??DataTable12                      4
     ??DataTable13                      4
     ??DataTable14                      4
     ??DataTable15                      4
     ?<Initializer for txt>             8
     ?<Initializer for sock>            4
     ?<Constant "POST /scripts/wap-sta...">
                                      160
     ?<Constant "State: %02d">         12
     ?<Constant "Recived %d bytes">    20
      Others                          108

 
  1 356 bytes in segment CODE
    288 bytes in segment DATA_C
     12 bytes in segment DATA_I
     12 bytes in segment DATA_ID
 16 392 bytes in segment DATA_Z
     24 bytes in segment INITTAB
 
  1 272 bytes of CODE  memory (+ 108 bytes shared)
    300 bytes of CONST memory
 16 404 bytes of DATA  memory

Errors: none
Warnings: none
