##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.40A/W32 EVALUATION    13/Sep/2006  13:42:05 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\ARM\MegaDial\CX75\main.c                          #
#    Command line    =  E:\ARM\MegaDial\CX75\main.c -lC                      #
#                       E:\ARM\MegaDial\CX75\Release\List\ -lA               #
#                       E:\ARM\MegaDial\CX75\Release\List\ -o                #
#                       E:\ARM\MegaDial\CX75\Release\Obj\ -s9 --no_unroll    #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None -I         #
#                       D:\IARARM\ARM\INC\                                   #
#    List file       =  E:\ARM\MegaDial\CX75\Release\List\main.lst           #
#    Object file     =  E:\ARM\MegaDial\CX75\Release\Obj\main.r79            #
#                                                                            #
#                                                                            #
##############################################################################

E:\ARM\MegaDial\CX75\main.c
      1          #include "arm_siemens.h"
      2          #define ramStr(strnum) (0xB0000000|strnum)
      3          
      4          
      5          #define MAX_ABFILE_SIZE 30000
      6          
      7          

   \                                 In segment DEBUG4, align 4, align-sorted
      8          const char fname[]  @ "DEBUG4" =  "0:\\System\\apo\\addr\\abT9";
   \                     fname:
   \   00000000   303A5C537973       DC8 "0:\\System\\apo\\addr\\abT9"
   \              74656D5C6170
   \              6F5C61646472
   \              5C6162543900

   \                                 In segment DEBUG4, align 4, align-sorted
      9          const char ABpath[]  @ "DEBUG4" =  "0:\\System\\apo\\addr\\";
   \                     ABpath:
   \   00000000   303A5C537973       DC8 "0:\\System\\apo\\addr\\"
   \              74656D5C6170
   \              6F5C61646472
   \              5C00        
     10          const char ABmain[]  @ "DEBUG4" =  "0:\\System\\apo\\addr\\main";
   \                     ABmain:
   \   00000014   303A5C537973       DC8 "0:\\System\\apo\\addr\\main"
   \              74656D5C6170
   \              6F5C61646472
   \              5C6D61696E00
     11          const char ABfout[]  @ "DEBUG4" =  "0:\\System\\apo\\addr\\abT9";
   \                     ABfout:
   \   0000002C   303A5C537973       DC8 "0:\\System\\apo\\addr\\abT9"
   \              74656D5C6170
   \              6F5C61646472
   \              5C6162543900
     12          

   \                                 In segment DEBUG3, align 4, align-sorted
     13          const unsigned short dsRects[4][4]  @ "DEBUG3" =
   \                     dsRects:
   \   00000000   040016008300       DC16 4, 22, 131, 44, 4, 26, 131, 44, 4, 27, 131, 44, 4, 20, 131, 44
   \              2C0004001A00
   \              83002C000400
   \              1B0083002C00
   \              040014008300
   \              2C00        
     14          {
     15            {4,22,131,44},
     16            {4,26,131,44},
     17            {4,27,131,44},
     18            {4,20,131,44}
     19          };
     20          

   \                                 In segment DEBUG3, align 4, align-sorted
     21          const unsigned char color[4] @ "DEBUG3" =
   \                     color:
   \   00000000   FFFF90FF           DC8 255, 255, 144, 255
     22          
     23          {255,255,0x90,255};
     24          
     25          typedef struct
     26          {
     27            char unk[3];
     28            char itemID;
     29            int unk1;
     30            int *pnt;
     31          }ABitem;
     32          
     33          
     34          typedef struct
     35          {
     36            CSM_RAM csm;
     37            char dummy[0xCC-sizeof(CSM_RAM)];
     38            WSHDR *str1;
     39            WSHDR *strings[5];
     40            int myAB;
     41            char *fileAB;
     42            char flashSMS;
     43          }IDLECSM;
     44          
     45          //Вместо onCreate

   \                                 In segment CODE, align 4, keep-with-next
     46          void main(IDLECSM *icsm)
     47          {
   \                     main:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     48          
     49          
     50          //  unsigned int err;
     51          //  int f;
     52            //void (__thumb *OldOnCreate)(void *)=(void(*)(void *))(0xA02A781C+1);
     53            icsm->str1=AllocWS(256);
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   ........           _BLF     AllocWS,??AllocWS??rA
   \   00000010   CC0084E5           STR      R0,[R4, #+204]
     54            icsm->strings[0]=AllocWS(50);
   \   00000014   3200A0E3           MOV      R0,#+50
   \   00000018   ........           _BLF     AllocWS,??AllocWS??rA
   \   0000001C   D00084E5           STR      R0,[R4, #+208]
     55            icsm->strings[1]=AllocWS(50);
   \   00000020   3200A0E3           MOV      R0,#+50
   \   00000024   ........           _BLF     AllocWS,??AllocWS??rA
   \   00000028   D40084E5           STR      R0,[R4, #+212]
     56            icsm->strings[2]=AllocWS(50);
   \   0000002C   3200A0E3           MOV      R0,#+50
   \   00000030   ........           _BLF     AllocWS,??AllocWS??rA
   \   00000034   D80084E5           STR      R0,[R4, #+216]
     57            icsm->strings[3]=AllocWS(50);
   \   00000038   3200A0E3           MOV      R0,#+50
   \   0000003C   ........           _BLF     AllocWS,??AllocWS??rA
   \   00000040   DC0084E5           STR      R0,[R4, #+220]
     58            icsm->strings[4]=AllocWS(50);
   \   00000044   3200A0E3           MOV      R0,#+50
   \   00000048   ........           _BLF     AllocWS,??AllocWS??rA
   \   0000004C   E00084E5           STR      R0,[R4, #+224]
     59            icsm->flashSMS=0;
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   EC00C4E5           STRB     R0,[R4, #+236]
     60          
     61            icsm->myAB=0;
   \   00000058   E40084E5           STR      R0,[R4, #+228]
     62          /*  icsm->fileAB=malloc(MAX_ABFILE_SIZE+1);
     63            if ((f=fopen((char *)fname,A_ReadOnly|A_BIN,P_READ|P_WRITE,&err))!=-1)
     64            {
     65              icsm->fileAB[fread(f,icsm->fileAB,MAX_ABFILE_SIZE,&err)]=0;
     66              fclose(f,&err);
     67            }
     68            wsprintf(icsm->str1,"num : ");
     69          */
     70            IDLECSM_onCreate((CSM_RAM*)icsm);
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000064   ........           _BF      IDLECSM_onCreate,??IDLECSM_onCreate??rA  ;; tailcall
     71          }
     72          
     73          

   \                                 In segment DEBUG3, align 4, align-sorted
     74          const char keytab[10][10] @ "DEBUG3" =
   \                     keytab:
   \   00000000   310000000000       DC8 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 192, 193, 194, 195, 65, 66, 67
   \              0000000032C0
   \              C1C2C3414243
   \   00000012   000033C4C5A8       DC8 0, 0, 51, 196, 197, 168, 198, 199, 68, 69, 70, 0, 52, 200, 201, 202
   \              C6C744454600
   \              34C8C9CA    
   \   00000022   CB4748490000       DC8 203, 71, 72, 73, 0, 0, 53, 204, 205, 206, 74, 75, 76, 0, 0, 0, 54
   \              35CCCDCE4A4B
   \              4C00000036  
   \   00000033   CFD0D14D4E4F       DC8 207, 208, 209, 77, 78, 79, 0, 0, 0, 55, 210, 211, 212, 213, 80, 81
   \              00000037D2D3
   \              D4D55051    
   \   00000043   52530038D6D7       DC8 82, 83, 0, 56, 214, 215, 216, 217, 218, 84, 85, 86, 0, 57, 219, 220
   \              D8D9DA545556
   \              0039DBDC    
   \   00000053   DDDEDF575859       DC8 221, 222, 223, 87, 88, 89, 90, 48, 43, 0, 0, 0, 0, 0, 0, 0, 0
   \              5A302B000000
   \              0000000000  
     75          {
     76            {'1',0,0,0,0,0,0,0,0,0},
     77            {'2','А','Б','В','Г','A','B','C',0,0 },
     78            {'3','Д','Е','Ё','Ж','З','D','E','F',0 },
     79            {'4','И','Й','К','Л','G','H','I',0,0},
     80            {'5','М','Н','О','J','K','L',0,0,0},
     81            {'6','П','Р','С','M','N','O',0,0,0},
     82            {'7','Т','У','Ф','Х','P','Q','R','S',0},
     83            {'8','Ц','Ч','Ш','Щ','Ъ','T','U','V',0},
     84            {'9','Ы','Ь','Э','Ю','Я','W','X','Y','Z'},
     85            {'0','+',0,0,0,0,0,0,0,0}
     86          };
     87          
     88          

   \                                 In segment DEBUG3, align 4, align-sorted
     89          const char wintranslation[128] @ "DEBUG3" =
     90          {
     91            0x5F,0x5F,0x27,0x5F,0x22,0x3A,0xC5,0xD8,0x5F,0x25,0x5F,0x3C,0x5F,0x5F,0x5F,0x5F,
     92            0x5F,0x27,0x27,0x22,0x22,0x07,0x2D,0x2D,0x5F,0x54,0x5F,0x3E,0x5F,0x5F,0x5F,0x5F,
     93            0xFF,0xF6,0xF7,0x5F,0xFD,0x83,0xB3,0x15,0xF0,0x63,0xF2,0x3C,0xBF,0x2D,0x52,0xF4,
     94            0xF8,0x2B,'I' ,'i' ,0xA3,0xE7,0x14,0xFA,0xF1,0xFC,0xF3,0x3E,0x5F,0x5F,0x5F,0xF5,
     95            0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,
     96            0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,
     97            0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,
     98            0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF
     99          };
    100          
    101          const unsigned short dos2unicode[128] @"DEBUG3"=
   \                     dos2unicode:
   \   00000000   100411041204       DC16 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050
   \              130414041504
   \              160417041804
   \              19041A04    
   \   00000016   1B041C041D04       DC16 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061
   \              1E041F042004
   \              210422042304
   \              24042504    
   \   0000002C   260427042804       DC16 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072
   \              29042A042B04
   \              2C042D042E04
   \              2F043004    
   \   00000042   310432043304       DC16 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083
   \              340435043604
   \              370438043904
   \              3A043B04    
   \   00000058   3C043D043E04       DC16 1084, 1085, 1086, 1087, 45, 45, 45, 166, 43, 166, 166, 172, 172
   \              3F042D002D00
   \              2D00A6002B00
   \              A600A600AC00
   \              AC00        
   \   00000072   A600A600AC00       DC16 166, 166, 172, 45, 45, 45, 172, 76, 43, 84, 43, 45, 43, 166, 166
   \              2D002D002D00
   \              AC004C002B00
   \              54002B002D00
   \              2B00A600A600
   \   00000090   4C003304A600       DC16 76, 1075, 166, 84, 166, 61, 43, 166, 166, 84, 84, 76, 76, 45, 1075
   \              5400A6003D00
   \              2B00A600A600
   \              540054004C00
   \              4C002D003304
   \   000000AE   2B002B002D00       DC16 43, 43, 45, 45, 45, 45, 166, 166, 45, 1088, 1089, 1090, 1091, 1092
   \              2D002D002D00
   \              A600A6002D00
   \              400441044204
   \              43044404    
   \   000000CA   450446044704       DC16 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103
   \              480449044A04
   \              4B044C044D04
   \              4E044F04    
   \   000000E0   010451040404       DC16 1025, 1105, 1028, 1108, 1031, 1111, 1038, 1118, 176, 8226, 183
   \              540407045704
   \              0E045E04B000
   \              2220B700    
   \   000000F6   76001621A400       DC16 118, 8470, 164, 166, 160
   \              A600A000    
   \                     wintranslation:
   \   00000100   5F5F275F223A       DC8 95, 95, 39, 95, 34, 58, 197, 216, 95, 37, 95, 60, 95, 95, 95, 95
   \              C5D85F255F3C
   \              5F5F5F5F    
   \   00000110   5F2727222207       DC8 95, 39, 39, 34, 34, 7, 45, 45, 95, 84, 95, 62, 95, 95, 95, 95, 255
   \              2D2D5F545F3E
   \              5F5F5F5FFF  
   \   00000121   F6F75FFD83B3       DC8 246, 247, 95, 253, 131, 179, 21, 240, 99, 242, 60, 191, 45, 82, 244
   \              15F063F23CBF
   \              2D52F4      
   \   00000130   F82B4969A3E7       DC8 248, 43, 73, 105, 163, 231, 20, 250, 241, 252, 243, 62, 95, 95, 95
   \              14FAF1FCF33E
   \              5F5F5F      
   \   0000013F   F58081828384       DC8 245, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139
   \              85868788898A
   \              8B          
   \   0000014C   8C8D8E8F9091       DC8 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152
   \              929394959697
   \              98          
   \   00000159   999A9B9C9D9E       DC8 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165
   \              9FA0A1A2A3A4
   \              A5          
   \   00000166   A6A7A8A9AAAB       DC8 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 224, 225, 226
   \              ACADAEAFE0E1
   \              E2          
   \   00000173   E3E4E5E6E7E8       DC8 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239
   \              E9EAEBECEDEE
   \              EF          
    102          {
    103            0x0410,0x0411,0x0412,0x0413,0x0414,0x0415,0x0416,0x0417,
    104            0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,0x041F,
    105            0x0420,0x0421,0x0422,0x0423,0x0424,0x0425,0x0426,0x0427,
    106            0x0428,0x0429,0x042A,0x042B,0x042C,0x042D,0x042E,0x042F,
    107            0x0430,0x0431,0x0432,0x0433,0x0434,0x0435,0x0436,0x0437,
    108            0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,0x043F,
    109            0x002D,0x002D,0x002D,0x00A6,0x002B,0x00A6,0x00A6,0x00AC,
    110            0x00AC,0x00A6,0x00A6,0x00AC,0x002D,0x002D,0x002D,0x00AC,
    111            0x004C,0x002B,0x0054,0x002B,0x002D,0x002B,0x00A6,0x00A6,
    112            0x004C,0x0433,0x00A6,0x0054,0x00A6,0x003D,0x002B,0x00A6,
    113            0x00A6,0x0054,0x0054,0x004C,0x004C,0x002D,0x0433,0x002B,
    114            0x002B,0x002D,0x002D,0x002D,0x002D,0x00A6,0x00A6,0x002D,
    115            0x0440,0x0441,0x0442,0x0443,0x0444,0x0445,0x0446,0x0447,
    116            0x0448,0x0449,0x044A,0x044B,0x044C,0x044D,0x044E,0x044F,
    117            0x0401,0x0451,0x0404,0x0454,0x0407,0x0457,0x040E,0x045E,
    118            0x00B0,0x2022,0x00B7,0x0076,0x2116,0x00A4,0x00A6,0x00A0
    119          };
    120          //=======================================================================

   \                                 In segment CODE, align 4, keep-with-next
    121          void menup1(void)
    122          {
    123          }
   \                     menup1:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    124          void menup2(void)
    125          {
    126          }
   \                     menup2:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    127          void menup3(void)
    128          {
    129          }
   \                     menup3:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    130          void menup4(void)
    131          {
    132          }
   \                     menup4:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    133          char uni2cp1251(unsigned short c)
    134          {
    135            if (c>0x40F)
   \                     uni2cp1251:
   \   00000000   410E50E3           CMP      R0,#+1040
   \   00000004   0500003A           BCC      ??uni2cp1251_0
    136            {
    137              if (c==0x451) return(0xB8);
   \   00000008   5110A0E3           MOV      R1,#+81
   \   0000000C   401E81E3           ORR      R1,R1,#0x400
   \   00000010   010050E1           CMP      R0,R1
   \   00000014   B800A003           MOVEQ    R0,#+184
   \   00000018   1EFF2F01           BXEQ     LR
    138              return(c-0x350);
   \   0000001C   B00080E2           ADD      R0,R0,#+176
    139            }
    140            return(c);
   \                     ??uni2cp1251_0:
   \   00000020   FF0000E2           AND      R0,R0,#0xFF
   \   00000024   1EFF2FE1           BX       LR               ;; return
    141          }
    142          

   \                                 In segment CODE, align 4, keep-with-next
    143          void ws2asciz( char * d ,WSHDR * s, int len)
    144          {
   \                     ws2asciz:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    145            int i=1;
   \   00000010   0170A0E3           MOV      R7,#+1
    146            do
    147            {
    148              *d++=uni2cp1251(s->wsbody[i++]);
   \                     ??ws2asciz_0:
   \   00000014   000095E5           LDR      R0,[R5, #+0]
   \   00000018   870080E0           ADD      R0,R0,R7, LSL #+1
   \   0000001C   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000020   017087E2           ADD      R7,R7,#+1
   \   00000024   ........           BL       uni2cp1251
   \   00000028   ........           STRB     R0,[R4], #+1
    149            }
    150            while(--len);
   \   0000002C   016056E2           SUBS     R6,R6,#+1
   \   00000030   F7FFFF1A           BNE      ??ws2asciz_0
    151            *d=0;
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   0000C4E5           STRB     R0,[R4, #+0]
   \   0000003C   F080BDE8           POP      {R4-R7,PC}       ;; return
    152          }
    153          

   \                                 In segment CODE, align 4, keep-with-next
    154          char cnv(char c)
    155          {
   \                     cnv:
   \   00000000   30002DE9           PUSH     {R4,R5}
    156            int i,j;
    157            char cc;
    158            if ((unsigned char)c>0x40)
   \   00000004   410050E3           CMP      R0,#+65
   \   00000008   0400003A           BCC      ??cnv_0
    159              cc=c&~0x20;
   \   0000000C   DF1000E2           AND      R1,R0,#0xDF
    160            else
    161              cc=c;
    162          
    163            if (c==' ') return(' ');
    164            for (i=0;i<10;i++)
   \                     ??cnv_1:
   \   00000010   64209FE5           LDR      R2,??cnv_2       ;; keytab
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   0230A0E1           MOV      R3,R2
   \   0000001C   0C0000EA           B        ??cnv_3
   \                     ??cnv_0:
   \   00000020   0010A0E1           MOV      R1,R0
   \   00000024   200050E3           CMP      R0,#+32
   \   00000028   F8FFFF1A           BNE      ??cnv_1
   \                     ??cnv_4:
   \   0000002C   3000BDE8           POP      {R4,R5}
   \   00000030   2000A0E3           MOV      R0,#+32
   \   00000034   1EFF2FE1           BX       LR
    165              for (j=0;j<10;j++)
   \                     ??cnv_5:
   \   00000038   01C08CE2           ADD      R12,R12,#+1
   \   0000003C   0A005CE3           CMP      R12,#+10
   \   00000040   050000BA           BLT      ??cnv_6
   \   00000044   010080E2           ADD      R0,R0,#+1
   \   00000048   0A3083E2           ADD      R3,R3,#+10
   \   0000004C   0A0050E3           CMP      R0,#+10
   \   00000050   F5FFFFAA           BGE      ??cnv_4
   \                     ??cnv_3:
   \   00000054   00C0A0E3           MOV      R12,#+0
   \   00000058   0340A0E1           MOV      R4,R3
    166                if  (cc==keytab[i][j]) return(keytab[i][0]);
   \                     ??cnv_6:
   \   0000005C   ........           LDRB     R5,[R4], #+1
   \   00000060   050051E1           CMP      R1,R5
   \   00000064   F3FFFF1A           BNE      ??cnv_5
   \   00000068   0A10A0E3           MOV      R1,#+10
   \   0000006C   912020E0           MLA      R0,R1,R0,R2
   \   00000070   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000074   3000BDE8           POP      {R4,R5}
   \   00000078   1EFF2FE1           BX       LR               ;; return
   \                     ??cnv_2:
   \   0000007C   ........           DC32     keytab
    167          
    168            return(' ');
    169          }
    170          

   \                                 In segment CODE, align 4, keep-with-next
    171          void UnPackAB()
    172          {
   \                     UnPackAB:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   D4D04DE2           SUB      SP,SP,#+212
    173            unsigned int err;
    174            int f;
    175            int numrec=0;
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   04108DE5           STR      R1,[SP, #+4]
    176            int rnum=-1;
   \   00000010   0110E0E1           MVN      R1,R1
   \   00000014   10108DE5           STR      R1,[SP, #+16]
    177            char ABrecname[40];
    178            char st[20];
    179            char *record=malloc(2048);
   \   00000018   800EA0E3           MOV      R0,#+2048
   \   0000001C   ........           _BLF     malloc,??malloc??rA
   \   00000020   14008DE5           STR      R0,[SP, #+20]
    180            char *main=malloc(132);
   \   00000024   8400A0E3           MOV      R0,#+132
   \   00000028   ........           _BLF     malloc,??malloc??rA
   \   0000002C   0C008DE5           STR      R0,[SP, #+12]
    181            char *result=malloc(MAX_ABFILE_SIZE);
   \   00000030   3000A0E3           MOV      R0,#+48
   \   00000034   750C80E3           ORR      R0,R0,#0x7500
   \   00000038   ........           _BLF     malloc,??malloc??rA
   \   0000003C   0040A0E1           MOV      R4,R0
    182            int rp=0;
    183            zeromem(result,sizeof(result));
   \   00000040   0410A0E3           MOV      R1,#+4
   \   00000044   ........           _BLF     zeromem,??zeromem??rA
   \   00000048   44039FE5           LDR      R0,??UnPackAB_0  ;; ABpath + 20
   \   0000004C   00B0A0E3           MOV      R11,#+0
   \   00000050   0D30A0E1           MOV      R3,SP
   \   00000054   602FA0E3           MOV      R2,#+384
   \   00000058   801CA0E3           MOV      R1,#+32768
    184          
    185            if ((f=fopen((char *)ABmain,A_ReadOnly|A_BIN,P_READ|P_WRITE,&err))!=-1)
   \   0000005C   ........           _BLF     fopen,??fopen??rA
   \   00000060   0050A0E1           MOV      R5,R0
   \   00000064   010075E3           CMN      R5,#+1
   \   00000068   B100000A           BEQ      ??UnPackAB_1
    186            {
    187              fread(f,main,132,&err);
   \   0000006C   0C109DE5           LDR      R1,[SP, #+12]
   \   00000070   0D30A0E1           MOV      R3,SP
   \   00000074   8420A0E3           MOV      R2,#+132
   \   00000078   ........           _BLF     fread,??fread??rA
    188              fclose(f,&err);
   \   0000007C   0D10A0E1           MOV      R1,SP
   \   00000080   0500A0E1           MOV      R0,R5
   \   00000084   ........           _BLF     fclose,??fclose??rA
    189          
    190              memcpy(main,&main[4],128);
   \   00000088   0C009DE5           LDR      R0,[SP, #+12]
   \   0000008C   8020A0E3           MOV      R2,#+128
   \   00000090   041080E2           ADD      R1,R0,#+4
   \   00000094   ........           _BLF     memcpy,??memcpy??rA
    191              do
    192              {
    193                if(main[numrec>>3] & (1<<(numrec &7)))
   \                     ??UnPackAB_2:
   \   00000098   04009DE5           LDR      R0,[SP, #+4]
   \   0000009C   0C109DE5           LDR      R1,[SP, #+12]
   \   000000A0   04209DE5           LDR      R2,[SP, #+4]
   \   000000A4   C001D1E7           LDRB     R0,[R1, +R0, ASR #+3]
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   072002E2           AND      R2,R2,#0x7
   \   000000B0   110210E1           TST      R0,R1, LSL R2
   \   000000B4   9900000A           BEQ      ??UnPackAB_3
    194                {
    195                  memcpy(ABrecname,ABpath,23);
   \   000000B8   D8129FE5           LDR      R1,??UnPackAB_0+0x4  ;; ABpath
   \   000000BC   1720A0E3           MOV      R2,#+23
   \   000000C0   AC008DE2           ADD      R0,SP,#+172
   \   000000C4   ........           _BLF     memcpy,??memcpy??rA
    196                  sprintf(st,"%02X\\%02X",numrec>>5,numrec&0x1F);
   \   000000C8   04009DE5           LDR      R0,[SP, #+4]
   \   000000CC   C8129FE5           LDR      R1,??UnPackAB_0+0x8  ;; `?<Constant "%02X\\\\%02X">`
   \   000000D0   1F3000E2           AND      R3,R0,#0x1F
   \   000000D4   C022A0E1           ASR      R2,R0,#+5
   \   000000D8   20008DE2           ADD      R0,SP,#+32
   \   000000DC   ........           _BLF     sprintf,??sprintf??rA
    197                  strcat(ABrecname,st);
   \   000000E0   20108DE2           ADD      R1,SP,#+32
   \   000000E4   AC008DE2           ADD      R0,SP,#+172
   \   000000E8   ........           _BLF     strcat,??strcat??rA
    198          
    199                  if ((f=fopen((char *)ABrecname,A_ReadOnly|A_BIN,P_READ|P_WRITE,&err))!=-1)
   \   000000EC   0D30A0E1           MOV      R3,SP
   \   000000F0   602FA0E3           MOV      R2,#+384
   \   000000F4   801CA0E3           MOV      R1,#+32768
   \   000000F8   AC008DE2           ADD      R0,SP,#+172
   \   000000FC   ........           _BLF     fopen,??fopen??rA
   \   00000100   0050A0E1           MOV      R5,R0
   \   00000104   010075E3           CMN      R5,#+1
   \   00000108   8400000A           BEQ      ??UnPackAB_3
    200                  {
    201                    char ttype[6];
    202                    char str [80];
    203                    char flag;
    204                    fread(f,record,1024,&err);
   \   0000010C   14109DE5           LDR      R1,[SP, #+20]
   \   00000110   0D30A0E1           MOV      R3,SP
   \   00000114   402EA0E3           MOV      R2,#+1024
   \   00000118   ........           _BLF     fread,??fread??rA
    205                    fclose(f,&err);
   \   0000011C   0D10A0E1           MOV      R1,SP
   \   00000120   0500A0E1           MOV      R0,R5
   \   00000124   ........           _BLF     fclose,??fclose??rA
    206                    int * struc1=malloc(0x1C);
   \   00000128   1C00A0E3           MOV      R0,#+28
   \   0000012C   ........           _BLF     malloc,??malloc??rA
   \   00000130   08008DE5           STR      R0,[SP, #+8]
    207                    zeromem(struc1,0x1C);
   \   00000134   1C10A0E3           MOV      R1,#+28
   \   00000138   ........           _BLF     zeromem,??zeromem??rA
    208                    UnPackABrecord(struc1,record+4,100,0x28);
   \   0000013C   14009DE5           LDR      R0,[SP, #+20]
   \   00000140   2830A0E3           MOV      R3,#+40
   \   00000144   6420A0E3           MOV      R2,#+100
   \   00000148   041080E2           ADD      R1,R0,#+4
   \   0000014C   08009DE5           LDR      R0,[SP, #+8]
   \   00000150   0050A0E3           MOV      R5,#+0
   \   00000154   ........           _BLF     UnPackABrecord,??UnPackABrecord??rA
    209                    {
    210                      rnum++;
   \   00000158   10109DE5           LDR      R1,[SP, #+16]
    211                      flag=0;
   \   0000015C   0060A0E3           MOV      R6,#+0
   \   00000160   011081E2           ADD      R1,R1,#+1
   \   00000164   10108DE5           STR      R1,[SP, #+16]
    212                      char itemcount = ((short*)struc1)[1];
   \   00000168   08009DE5           LDR      R0,[SP, #+8]
    213                      ABitem * items = (ABitem*)struc1[3];
    214                      char num[40];
    215                      str[0]=0;
    216                      zeromem(ttype,sizeof(ttype));
   \   0000016C   0610A0E3           MOV      R1,#+6
   \   00000170   F270D0E1           LDRSH    R7,[R0, #+2]
   \   00000174   0C8090E5           LDR      R8,[R0, #+12]
   \   00000178   3450CDE5           STRB     R5,[SP, #+52]
   \   0000017C   18008DE2           ADD      R0,SP,#+24
   \   00000180   ........           _BLF     zeromem,??zeromem??rA
   \   00000184   FF7007E2           AND      R7,R7,#0xFF
    217                      do
    218                      {
    219                        switch(items->itemID)
   \                     ??UnPackAB_4:
   \   00000188   0300D8E5           LDRB     R0,[R8, #+3]
   \   0000018C   230040E2           SUB      R0,R0,#+35
   \   00000190   010050E3           CMP      R0,#+1
   \   00000194   0300009A           BLS      ??UnPackAB_5
   \   00000198   070040E2           SUB      R0,R0,#+7
   \   0000019C   030050E3           CMP      R0,#+3
   \   000001A0   0E00009A           BLS      ??UnPackAB_6
   \   000001A4   440000EA           B        ??UnPackAB_7
    220                        {
    221                        case 0x23:
    222                        case 0x24:
    223          
    224                          strcat(str," ");
   \                     ??UnPackAB_5:
   \   000001A8   ........           ADR      R1,??DataTable0  ;; " "
   \   000001AC   34008DE2           ADD      R0,SP,#+52
   \   000001B0   ........           _BLF     strcat,??strcat??rA
    225                          ws2asciz(str+strlen(str),(WSHDR*)items->pnt,wstrlen((WSHDR*)items->pnt));
   \   000001B4   080098E5           LDR      R0,[R8, #+8]
   \   000001B8   ........           _BLF     wstrlen,??wstrlen??rA
   \   000001BC   0090A0E1           MOV      R9,R0
   \   000001C0   34008DE2           ADD      R0,SP,#+52
   \   000001C4   ........           _BLF     strlen,??strlen??rA
   \   000001C8   081098E5           LDR      R1,[R8, #+8]
   \   000001CC   0920A0E1           MOV      R2,R9
   \   000001D0   34308DE2           ADD      R3,SP,#+52
   \   000001D4   030080E0           ADD      R0,R0,R3
   \   000001D8   ........           BL       ws2asciz
   \   000001DC   360000EA           B        ??UnPackAB_7
    226                          break;
    227                        case 0x2D:
    228          
    229                        case 0x2A:
    230                        case 0x2C:
    231                        case 0x2B:
    232                          if (!flag)
   \                     ??UnPackAB_6:
   \   000001E0   0600B0E1           MOVS     R0,R6
   \   000001E4   1C00001A           BNE      ??UnPackAB_8
    233                          {
    234          
    235                            {char j=0;do{result[rp++]=str[j++];}while(j<strlen(str));result[rp++]=0;}
   \   000001E8   00A0A0E3           MOV      R10,#+0
   \   000001EC   04908BE0           ADD      R9,R11,R4
   \                     ??UnPackAB_9:
   \   000001F0   34108DE2           ADD      R1,SP,#+52
   \   000001F4   0100DAE7           LDRB     R0,[R10, +R1]
   \   000001F8   01A08AE2           ADD      R10,R10,#+1
   \   000001FC   FFA00AE2           AND      R10,R10,#0xFF
   \   00000200   ........           STRB     R0,[R9], #+1
   \   00000204   0A00A0E1           MOV      R0,R10
   \   00000208   01002DE9           PUSH     {R0}
   \   0000020C   01B08BE2           ADD      R11,R11,#+1
   \   00000210   38008DE2           ADD      R0,SP,#+56
   \   00000214   ........           _BLF     strlen,??strlen??rA
   \   00000218   0200BDE8           POP      {R1}
   \   0000021C   000051E1           CMP      R1,R0
   \   00000220   F2FFFFBA           BLT      ??UnPackAB_9
   \   00000224   0450CBE7           STRB     R5,[R11, +R4]
   \   00000228   01B08BE2           ADD      R11,R11,#+1
    236                            char i=0;
   \   0000022C   0090A0E3           MOV      R9,#+0
    237                            do
    238                            {
    239                              result[rp++]=cnv(str[i++]);
   \                     ??UnPackAB_10:
   \   00000230   34108DE2           ADD      R1,SP,#+52
   \   00000234   0100D9E7           LDRB     R0,[R9, +R1]
   \   00000238   019089E2           ADD      R9,R9,#+1
   \   0000023C   FF9009E2           AND      R9,R9,#0xFF
   \   00000240   ........           BL       cnv
   \   00000244   0400CBE7           STRB     R0,[R11, +R4]
   \   00000248   01B08BE2           ADD      R11,R11,#+1
    240                            }
    241                            while(i<strlen(str));
   \   0000024C   34008DE2           ADD      R0,SP,#+52
   \   00000250   ........           _BLF     strlen,??strlen??rA
   \   00000254   000059E1           CMP      R9,R0
   \   00000258   F4FFFFBA           BLT      ??UnPackAB_10
    242                          }
    243                          ttype[flag++]=items->itemID;
   \                     ??UnPackAB_8:
   \   0000025C   0320D8E5           LDRB     R2,[R8, #+3]
   \   00000260   18108DE2           ADD      R1,SP,#+24
    244                          ABnumber2str(items->pnt,num,0x2A,0);
   \   00000264   0030A0E3           MOV      R3,#+0
   \   00000268   0120C6E7           STRB     R2,[R6, +R1]
   \   0000026C   080098E5           LDR      R0,[R8, #+8]
   \   00000270   016086E2           ADD      R6,R6,#+1
   \   00000274   FF6006E2           AND      R6,R6,#0xFF
   \   00000278   2A20A0E3           MOV      R2,#+42
   \   0000027C   84108DE2           ADD      R1,SP,#+132
   \   00000280   ........           _BLF     ABnumber2str,??ABnumber2str??rA
    245                          result[rp++]=' ';
   \   00000284   2000A0E3           MOV      R0,#+32
   \   00000288   0400CBE7           STRB     R0,[R11, +R4]
   \   0000028C   01B08BE2           ADD      R11,R11,#+1
    246                          {char j=0;do{result[rp++]=num[j++];}while(j<strlen(num));}
   \   00000290   0590A0E1           MOV      R9,R5
   \                     ??UnPackAB_11:
   \   00000294   84108DE2           ADD      R1,SP,#+132
   \   00000298   0100D9E7           LDRB     R0,[R9, +R1]
   \   0000029C   019089E2           ADD      R9,R9,#+1
   \   000002A0   FF9009E2           AND      R9,R9,#0xFF
   \   000002A4   0400CBE7           STRB     R0,[R11, +R4]
   \   000002A8   01B08BE2           ADD      R11,R11,#+1
   \   000002AC   84008DE2           ADD      R0,SP,#+132
   \   000002B0   ........           _BLF     strlen,??strlen??rA
   \   000002B4   000059E1           CMP      R9,R0
   \   000002B8   F5FFFFBA           BLT      ??UnPackAB_11
    247                          break;
    248                        }
    249                        items++;
   \                     ??UnPackAB_7:
   \   000002BC   0C8088E2           ADD      R8,R8,#+12
    250                      }
    251                      while(--itemcount);
   \   000002C0   017047E2           SUB      R7,R7,#+1
   \   000002C4   FF7017E2           ANDS     R7,R7,#0xFF
   \   000002C8   AEFFFF1A           BNE      ??UnPackAB_4
    252                      result[rp++]=0;
   \   000002CC   0450CBE7           STRB     R5,[R11, +R4]
    253                      result[rp++]=(char)rnum;
   \   000002D0   10109DE5           LDR      R1,[SP, #+16]
   \   000002D4   01008BE2           ADD      R0,R11,#+1
   \   000002D8   0410C0E7           STRB     R1,[R0, +R4]
    254                      result[rp++]=(char)(rnum >>8)|((flag-1)<<2);
   \   000002DC   10109DE5           LDR      R1,[SP, #+16]
   \   000002E0   010080E2           ADD      R0,R0,#+1
   \   000002E4   4114A0E1           ASR      R1,R1,#+8
   \   000002E8   012046E2           SUB      R2,R6,#+1
   \   000002EC   021181E1           ORR      R1,R1,R2, LSL #+2
   \   000002F0   0410C0E7           STRB     R1,[R0, +R4]
   \   000002F4   015080E2           ADD      R5,R0,#+1
    255                      memcpy(&result[rp],ttype,sizeof(ttype));
   \   000002F8   0620A0E3           MOV      R2,#+6
   \   000002FC   18108DE2           ADD      R1,SP,#+24
   \   00000300   040085E0           ADD      R0,R5,R4
   \   00000304   ........           _BLF     memcpy,??memcpy??rA
    256                      rp+=sizeof(ttype);
    257                    }
    258                    FreeUnPackABrecord(struc1,mfree);
   \   00000308   ........           LDR      R1,??DataTable28  ;; mfree
   \   0000030C   08009DE5           LDR      R0,[SP, #+8]
   \   00000310   06B085E2           ADD      R11,R5,#+6
   \   00000314   ........           _BLF     FreeUnPackABrecord,??FreeUnPackABrecord??rA
    259                    mfree(struc1);
   \   00000318   08009DE5           LDR      R0,[SP, #+8]
   \   0000031C   ........           _BLF     mfree,??mfree??rA
    260                  }
    261                }
    262              }while(++numrec<1024);
   \                     ??UnPackAB_3:
   \   00000320   04109DE5           LDR      R1,[SP, #+4]
   \   00000324   011081E2           ADD      R1,R1,#+1
   \   00000328   04108DE5           STR      R1,[SP, #+4]
   \   0000032C   400E51E3           CMP      R1,#+1024
   \   00000330   58FFFFBA           BLT      ??UnPackAB_2
    263          
    264            }
    265          
    266            if ((f=fopen((char *)ABfout,A_ReadWrite+A_BIN+A_Create+A_Truncate,P_READ+P_WRITE,&err))!=-1)
   \                     ??UnPackAB_1:
   \   00000334   64009FE5           LDR      R0,??UnPackAB_0+0xC  ;; ABpath + 44
   \   00000338   0D30A0E1           MOV      R3,SP
   \   0000033C   602FA0E3           MOV      R2,#+384
   \   00000340   0210A0E3           MOV      R1,#+2
   \   00000344   831C81E3           ORR      R1,R1,#0x8300
   \   00000348   ........           _BLF     fopen,??fopen??rA
   \   0000034C   0050A0E1           MOV      R5,R0
   \   00000350   010075E3           CMN      R5,#+1
   \   00000354   0600000A           BEQ      ??UnPackAB_12
    267            {
    268              fwrite(f,result,rp-1,&err);
   \   00000358   0D30A0E1           MOV      R3,SP
   \   0000035C   01204BE2           SUB      R2,R11,#+1
   \   00000360   0410A0E1           MOV      R1,R4
   \   00000364   ........           _BLF     fwrite,??fwrite??rA
    269              fclose(f,&err);
   \   00000368   0D10A0E1           MOV      R1,SP
   \   0000036C   0500A0E1           MOV      R0,R5
   \   00000370   ........           _BLF     fclose,??fclose??rA
    270            }
    271          
    272          
    273            mfree(record);
   \                     ??UnPackAB_12:
   \   00000374   14009DE5           LDR      R0,[SP, #+20]
   \   00000378   ........           _BLF     mfree,??mfree??rA
    274            mfree(main);
   \   0000037C   0C009DE5           LDR      R0,[SP, #+12]
   \   00000380   ........           _BLF     mfree,??mfree??rA
    275            mfree(result);
   \   00000384   0400A0E1           MOV      R0,R4
   \   00000388   ........           _BLF     mfree,??mfree??rA
    276          }
   \   0000038C   D4D08DE2           ADD      SP,SP,#+212
   \   00000390   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??UnPackAB_0:
   \   00000394   ........           DC32     ABpath + 20
   \   00000398   ........           DC32     ABpath
   \   0000039C   ........           DC32     `?<Constant "%02X\\\\%02X">`
   \   000003A0   ........           DC32     ABpath + 44
    277          
    278          

   \                                 In segment CODE, align 4, keep-with-next
    279          int onKeyGUI(void * GUI, GUI_MSG * msg)
    280          {
   \                     onKeyGUI:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   40D04DE2           SUB      SP,SP,#+64
   \   00000008   0940A0E3           MOV      R4,#+9
   \   0000000C   0170A0E1           MOV      R7,R1
    281            int item=GetCurrMenuItem(GUI);
   \   00000010   ........           _BLF     GetCurrMenuItem,??GetCurrMenuItem??rA
   \   00000014   0050A0E1           MOV      R5,R0
    282            IDLECSM *icsm=FindCSMbyID(CSM_root.idle_id);
   \   00000018   ........           LDR      R0,??DataTable7  ;; CSM_root + 4
   \   0000001C   424C84E3           ORR      R4,R4,#0x4200
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   ........           _BLF     FindCSMbyID,??FindCSMbyID??rA
   \   00000028   0060A0E1           MOV      R6,R0
    283          
    284            if (msg->unk2==0x018)
   \   0000002C   F200D7E1           LDRSH    R0,[R7, #+2]
   \   00000030   180050E3           CMP      R0,#+24
   \   00000034   1500001A           BNE      ??onKeyGUI_0
    285            {
    286              char num[20];
    287              WSHDR * dummystr=AllocWS(1);
   \   00000038   0100A0E3           MOV      R0,#+1
   \   0000003C   ........           _BLF     AllocWS,??AllocWS??rA
   \   00000040   0070A0E1           MOV      R7,R0
    288              icsm->flashSMS=0;
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   EC00C6E5           STRB     R0,[R6, #+236]
    289              ws2ascii(num,icsm->strings[item+1],wstrlen(icsm->strings[item+1]));
   \   0000004C   055186E0           ADD      R5,R6,R5, LSL #+2
   \                     ??onKeyGUI_1:
   \   00000050   D40095E5           LDR      R0,[R5, #+212]
   \   00000054   ........           _BLF     wstrlen,??wstrlen??rA
   \   00000058   D41095E5           LDR      R1,[R5, #+212]
   \   0000005C   0020A0E1           MOV      R2,R0
   \   00000060   0D00A0E1           MOV      R0,SP
   \   00000064   ........           _BLF     ws2ascii,??ws2ascii??rA
    290              Open_NewSMS_Dialog(dummystr,(char*)num,0x4209,0x00C1,0x0001);
   \   00000068   0100A0E3           MOV      R0,#+1
   \   0000006C   01002DE9           PUSH     {R0}
   \   00000070   C130A0E3           MOV      R3,#+193
   \   00000074   0420A0E1           MOV      R2,R4
   \   00000078   04108DE2           ADD      R1,SP,#+4
   \   0000007C   0700A0E1           MOV      R0,R7
   \   00000080   ........           _BLF     Open_NewSMS_Dialog,??Open_NewSMS_Dialog??rA
    291              return(1);
   \   00000084   0100A0E3           MOV      R0,#+1
   \   00000088   04D08DE2           ADD      SP,SP,#+4
   \   0000008C   180000EA           B        ??onKeyGUI_2
    292            }
    293          
    294            if (msg->unk2==0x031)
   \                     ??onKeyGUI_0:
   \   00000090   055186E0           ADD      R5,R6,R5, LSL #+2
   \   00000094   310050E3           CMP      R0,#+49
   \   00000098   0500001A           BNE      ??onKeyGUI_3
    295            {
    296          
    297              char num[20];
    298              WSHDR * dummystr=AllocWS(1);
   \   0000009C   0100A0E3           MOV      R0,#+1
   \   000000A0   ........           _BLF     AllocWS,??AllocWS??rA
   \   000000A4   0070A0E1           MOV      R7,R0
    299              icsm->flashSMS=1;
   \   000000A8   0100A0E3           MOV      R0,#+1
   \   000000AC   EC00C6E5           STRB     R0,[R6, #+236]
   \   000000B0   E6FFFFEA           B        ??onKeyGUI_1
    300              ws2ascii(num,icsm->strings[item+1],wstrlen(icsm->strings[item+1]));
    301              Open_NewSMS_Dialog(dummystr,(char*)num,0x4209,0x00C1,0x0001);
    302              return(1);
    303            }
    304          
    305            if (msg->msg->submess==GREEN_BUTTON)
   \                     ??onKeyGUI_3:
   \   000000B4   040097E5           LDR      R0,[R7, #+4]
   \   000000B8   040090E5           LDR      R0,[R0, #+4]
   \   000000BC   0B0050E3           CMP      R0,#+11
   \   000000C0   0D00001A           BNE      ??onKeyGUI_4
    306            {
    307              char pnum[41];
    308              ws2ascii(pnum,icsm->strings[item+1],wstrlen(icsm->strings[item+1]) );
   \   000000C4   D40095E5           LDR      R0,[R5, #+212]
   \   000000C8   ........           _BLF     wstrlen,??wstrlen??rA
   \   000000CC   D41095E5           LDR      R1,[R5, #+212]
   \   000000D0   0020A0E1           MOV      R2,R0
   \   000000D4   14008DE2           ADD      R0,SP,#+20
   \   000000D8   ........           _BLF     ws2ascii,??ws2ascii??rA
    309              MakeVoiceCallTo(pnum,0x10,0x20C1);
   \   000000DC   C120A0E3           MOV      R2,#+193
   \   000000E0   802D82E3           ORR      R2,R2,#0x2000
   \   000000E4   1010A0E3           MOV      R1,#+16
   \   000000E8   14008DE2           ADD      R0,SP,#+20
   \   000000EC   ........           _BLF     MakeVoiceCallTo,??MakeVoiceCallTo??rA
    310              return(1);
   \   000000F0   0100A0E3           MOV      R0,#+1
   \                     ??onKeyGUI_2:
   \   000000F4   40D08DE2           ADD      SP,SP,#+64
   \   000000F8   F080BDE8           POP      {R4-R7,PC}
    311            }
    312            return(0);
   \                     ??onKeyGUI_4:
   \   000000FC   0000A0E3           MOV      R0,#+0
   \   00000100   40D08DE2           ADD      SP,SP,#+64
   \   00000104   F080BDE8           POP      {R4-R7,PC}       ;; return
    313          }
    314          

   \                                 In segment CODE, align 4, keep-with-next
    315          int gmproc(void * GUI, int cmd)
    316          {
   \                     gmproc:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    317            //  SetNMenuItems(GUI,2);
    318            if (cmd==2)
    319            {
    320              //    SetMenuItemIcon(GUI,0,3);
    321              //    SetNMenuItems(GUI,1);
    322            }
    323            if (cmd==3)
   \   00000004   030051E3           CMP      R1,#+3
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0400001A           BNE      ??gmproc_0
    324            {
    325              MENU_DESC *menu=((MENU_DESC**)GUI)[2];
   \   00000010   085094E5           LDR      R5,[R4, #+8]
    326              mfree(menu->items);
   \   00000014   200095E5           LDR      R0,[R5, #+32]
   \   00000018   ........           _BLF     mfree,??mfree??rA
    327              mfree(menu);
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     mfree,??mfree??rA
    328            }
    329            return((int)GUI);
   \                     ??gmproc_0:
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   3080BDE8           POP      {R4,R5,PC}       ;; return
    330          }
    331          
    332          

   \                                 In segment DEBUG3, align 4, align-sorted
    333          const int icons[] @"DEBUG3"={0x43A,0x39B,0x397,0x39A,0x399,0};
   \                     icons:
   \   00000000   3A0400009B03       DC32 1082, 923, 919, 922, 921, 0
   \              000097030000
   \              9A0300009903
   \              000000000000
    334          
    335          const HEADER_DESC menuheader @"DEBUG3" ={3,24,126,41,(int *)icons,ramStr(0),0x7FFF};
   \                     menuheader:
   \   00000018   030018007E00       DC16 3, 24, 126, 41
   \              2900        
   \   00000020   ........0000       DC32 icons, -1342177280, 32767
   \              00B0FF7F0000
    336          
    337          const SOFTKEY_DESC skeys[] @"DEBUG3" =
    338          {
    339            {0x018,0x018,(int)"SMS"},
    340            {0x031,0x031,(int)"Flash"},
    341            {0x030,0x030,(int)""}
    342          };
    343          
    344          const int menuskey[4][3] @"DEBUG3" =
    345          {
    346            {0,1,2},
    347            {1,2,0},
    348            {2,0,1},
    349            {0,1,9}
    350          }
    351          ;
    352          
    353          const SOFTKEYSTAB skey @"DEBUG3"={ (SOFTKEY_DESC*)skeys,3 };
    354          
    355          const MENUITEM_DESC MenuItems[] @"DEBUG3" =
   \                     MenuItems:
   \   0000002C   ........0100       DC32 icons + 4H, -1342177279, 0, 0, menuskey, 3, 1400, icons + 8H
   \              00B000000000
   \              00000000....
   \              ....03000000
   \              78050000....
   \              ....        
   \   0000004C   020000B00000       DC32 -1342177278, 0, 0, menuskey + 4H, 3, 1400, icons + 0CH
   \              000000000000
   \              ........0300
   \              000078050000
   \              ........    
   \   00000068   030000B00000       DC32 -1342177277, 0, 0, menuskey + 8H, 3, 1400, icons + 0CH
   \              000000000000
   \              ........0300
   \              000078050000
   \              ........    
   \   00000084   040000B00000       DC32 -1342177276, 0, 0, menuskey + 0CH, 3, 1400
   \              000000000000
   \              ........0300
   \              000078050000
    356          {
    357            {(int*)icons+1,ramStr(1),0x0,0x000,(int*)menuskey,0x003,0x578},
    358            {(int*)icons+2,ramStr(2),0x0,0x000,(int*)menuskey+1,0x003,0x578},
    359            {(int*)icons+3,ramStr(3),0x0,0x000,(int*)menuskey+2,0x003,0x578},
    360            {(int*)icons+3,ramStr(4),0x0,0x000,(int*)menuskey+3,0x003,0x578}
    361          
    362          };
    363          
    364          const void * const menuprocs[4] @"DEBUG3" ={(void *)menup1,(void *)menup2,(void *)menup3,(void *)menup4};
    365          
    366          const MENU_DESC menu4 @"DEBUG3" =
   \                     menu4:
   \   0000009C   00000000....       DC32 0, onKeyGUI, gmproc, 0H, menuskey, skey, 1, 0H, MenuItems
   \              ............
   \              00000000....
   \              ............
   \              010000000000
   \              0000........
   \   000000C0   ........0400       DC32 menuprocs, 4
   \              0000        

   \                                 In segment DEBUG3, align 4, align-sorted
   \                     skeys:
   \   00000000   18001800           DC16 24, 24
   \   00000004   ........           DC32 `?<Constant "SMS">`
   \   00000008   31003100           DC16 49, 49
   \   0000000C   ........           DC32 `?<Constant "Flash">`
   \   00000010   30003000           DC16 48, 48
   \   00000014   ........           DC32 `?<Constant "">`

   \                                 In segment DEBUG3, align 4, align-sorted
   \                     menuskey:
   \   00000000   000000000100       DC32 0, 1, 2, 1, 2, 0, 2, 0, 1, 0, 1, 9
   \              000002000000
   \              010000000200
   \              000000000000
   \              020000000000
   \              000001000000
   \              000000000100
   \              000009000000

   \                                 In segment DEBUG3, align 4, align-sorted
   \                     skey:
   \   00000000   ........0300       DC32 skeys, 3
   \              0000        

   \                                 In segment DEBUG3, align 4, align-sorted
   \                     menuprocs:
   \   00000000   ............       DC32 menup1, menup2, menup3, menup4
   \              ............
   \              ........    
    367          {
    368            0,				//0x00
    369            (void*)onKeyGUI,		//0x04
    370            (void*)gmproc,		//0x08
    371            NULL,				//0x0C
    372            (int *)menuskey,		//0x10
    373            (SOFTKEYSTAB *)(&skey),	//0x14
    374            1,				//0x18
    375            NULL,				//0x1C
    376            (MENUITEM_DESC *)MenuItems,	//0x20
    377            (void **)menuprocs,		//0x24
    378            4				//0x28
    379          };
    380          
    381          //=======================================================================
    382          

   \                                 In segment DEBUG1, align 4, keep-with-next
    383          unsigned short char8to16(char c) @"DEBUG1"
    384          {
    385            if (c<32) return('_');
   \                     char8to16:
   \   00000000   200050E3           CMP      R0,#+32
   \   00000004   5F00A033           MOVCC    R0,#+95
   \   00000008   1EFF2F31           BXCC     LR
    386            if (c>=128)
   \   0000000C   800050E3           CMP      R0,#+128
   \   00000010   1EFF2F31           BXCC     LR
    387            {
    388              c=wintranslation[c-128];
    389              return(dos2unicode[c-128]);
   \   00000014   14109FE5           LDR      R1,??char8to16_0  ;; dos2unicode
   \   00000018   FF20E0E3           MVN      R2,#+255
   \   0000001C   010080E0           ADD      R0,R0,R1
   \   00000020   8000D0E5           LDRB     R0,[R0, #+128]
   \   00000024   800081E0           ADD      R0,R1,R0, LSL #+1
   \   00000028   B00092E1           LDRH     R0,[R2, +R0]
   \   0000002C   1EFF2FE1           BX       LR               ;; return
   \                     ??char8to16_0:
   \   00000030   ........           DC32     dos2unicode
    390            }
    391            return(c);
    392          }
    393          

   \                                 In segment CODE, align 4, keep-with-next
    394          void OpenABRecord(char * s,char sname[],IDLECSM *icsm, char *p)
    395          {
   \                     OpenABRecord:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0170A0E1           MOV      R7,R1
   \   00000008   0090A0E1           MOV      R9,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0340A0E1           MOV      R4,R3
    396            char i=0;
   \   00000014   0060A0E3           MOV      R6,#+0
   \   00000018   00A0A0E3           MOV      R10,#+0
    397            char *s1=sname;
   \   0000001C   0700A0E1           MOV      R0,R7
   \   00000020   4D8F8FE2           ADR      R8,??OpenABRecord_0  ;; "%t"
    398            do
    399            {
    400              if (*s!=32)
   \                     ??OpenABRecord_1:
   \   00000024   0010D9E5           LDRB     R1,[R9, #+0]
   \   00000028   200051E3           CMP      R1,#+32
    401              {
    402                *s1++=*s;
   \   0000002C   ........           STRBNE   R1,[R0], #+1
   \   00000030   0800001A           BNE      ??OpenABRecord_2
    403              }
    404              else
    405              {
    406                *s1=0;
   \   00000034   0060C0E5           STRB     R6,[R0, #+0]
    407                i++;
   \   00000038   01A08AE2           ADD      R10,R10,#+1
   \   0000003C   FFA00AE2           AND      R10,R10,#0xFF
    408                wsprintf(icsm->strings[i],"%t",(int*)sname);
   \   00000040   0720A0E1           MOV      R2,R7
   \   00000044   0810A0E1           MOV      R1,R8
   \   00000048   0A0185E0           ADD      R0,R5,R10, LSL #+2
   \   0000004C   D00090E5           LDR      R0,[R0, #+208]
   \   00000050   ........           _BLF     wsprintf,??wsprintf??rA
    409                s1=sname;
   \   00000054   0700A0E1           MOV      R0,R7
    410              }
    411            }
    412            while(*s++);
   \                     ??OpenABRecord_2:
   \   00000058   ........           LDRB     R1,[R9], #+1
   \   0000005C   000051E3           CMP      R1,#+0
   \   00000060   EFFFFF1A           BNE      ??OpenABRecord_1
    413            i++;
   \   00000064   01908AE2           ADD      R9,R10,#+1
   \   00000068   FF9009E2           AND      R9,R9,#0xFF
    414            wsprintf(icsm->strings[i],"%t",(int*)sname);
   \   0000006C   0720A0E1           MOV      R2,R7
   \   00000070   0810A0E1           MOV      R1,R8
   \   00000074   090185E0           ADD      R0,R5,R9, LSL #+2
   \   00000078   D00090E5           LDR      R0,[R0, #+208]
   \   0000007C   ........           _BLF     wsprintf,??wsprintf??rA
    415            sname[0]=0;
   \   00000080   0060C7E5           STRB     R6,[R7, #+0]
   \   00000084   D4609FE5           LDR      R6,??OpenABRecord_0+0x4  ;; icons
    416          
    417          
    418            MENUITEM_DESC * items_desc = malloc(sizeof(MenuItems));
   \   00000088   7000A0E3           MOV      R0,#+112
   \   0000008C   ........           _BLF     malloc,??malloc??rA
   \   00000090   0070A0E1           MOV      R7,R0
    419            MENU_DESC * menu_desc = malloc(sizeof(menu4));
   \   00000094   2C00A0E3           MOV      R0,#+44
   \   00000098   ........           _BLF     malloc,??malloc??rA
   \   0000009C   0050A0E1           MOV      R5,R0
    420          
    421          
    422            memcpy(items_desc,MenuItems,sizeof(MenuItems));
   \   000000A0   7020A0E3           MOV      R2,#+112
   \   000000A4   2C1086E2           ADD      R1,R6,#+44
   \   000000A8   0700A0E1           MOV      R0,R7
   \   000000AC   ........           _BLF     memcpy,??memcpy??rA
    423            memcpy(menu_desc,&menu4,sizeof(menu4));
   \   000000B0   2C20A0E3           MOV      R2,#+44
   \   000000B4   9C1086E2           ADD      R1,R6,#+156
   \   000000B8   0500A0E1           MOV      R0,R5
   \   000000BC   ........           _BLF     memcpy,??memcpy??rA
    424            menu_desc->n_items=i;
   \   000000C0   289085E5           STR      R9,[R5, #+40]
    425            menu_desc->items=items_desc;
   \   000000C4   207085E5           STR      R7,[R5, #+32]
    426          
    427            menu_desc->items[0].icon=(int *)(icons+((*p++)-0x29));
   \   000000C8   ........           LDRB     R2,[R4], #+1
   \   000000CC   A310E0E3           MVN      R1,#+163
    428            menu_desc->items[1].icon=(int *)(icons+((*p++)-0x29));
    429            menu_desc->items[2].icon=(int *)(icons+((*p++)-0x29));
    430            menu_desc->items[3].icon=(int *)(icons+((*p)-0x29));
    431            CreateMenu(1,0,menu_desc,&menuheader,0,1,0,0);
   \   000000D0   183086E2           ADD      R3,R6,#+24
   \   000000D4   022186E0           ADD      R2,R6,R2, LSL #+2
   \   000000D8   021081E0           ADD      R1,R1,R2
   \   000000DC   001087E5           STR      R1,[R7, #+0]
   \   000000E0   ........           LDRB     R2,[R4], #+1
   \   000000E4   200095E5           LDR      R0,[R5, #+32]
   \   000000E8   A310E0E3           MVN      R1,#+163
   \   000000EC   022186E0           ADD      R2,R6,R2, LSL #+2
   \   000000F0   021081E0           ADD      R1,R1,R2
   \   000000F4   1C1080E5           STR      R1,[R0, #+28]
   \   000000F8   0020D4E5           LDRB     R2,[R4, #+0]
   \   000000FC   200095E5           LDR      R0,[R5, #+32]
   \   00000100   A310E0E3           MVN      R1,#+163
   \   00000104   022186E0           ADD      R2,R6,R2, LSL #+2
   \   00000108   021081E0           ADD      R1,R1,R2
   \   0000010C   381080E5           STR      R1,[R0, #+56]
   \   00000110   0120D4E5           LDRB     R2,[R4, #+1]
   \   00000114   200095E5           LDR      R0,[R5, #+32]
   \   00000118   A310E0E3           MVN      R1,#+163
   \   0000011C   022186E0           ADD      R2,R6,R2, LSL #+2
   \   00000120   021081E0           ADD      R1,R1,R2
   \   00000124   541080E5           STR      R1,[R0, #+84]
   \   00000128   0000A0E3           MOV      R0,#+0
   \   0000012C   01002DE9           PUSH     {R0}
   \   00000130   01002DE9           PUSH     {R0}
   \   00000134   0520A0E1           MOV      R2,R5
   \   00000138   0010A0E3           MOV      R1,#+0
   \   0000013C   0100A0E3           MOV      R0,#+1
   \   00000140   01002DE9           PUSH     {R0}
   \   00000144   0000A0E3           MOV      R0,#+0
   \   00000148   01002DE9           PUSH     {R0}
   \   0000014C   0100A0E3           MOV      R0,#+1
   \   00000150   ........           _BLF     CreateMenu,??CreateMenu??rA
    432          }
   \   00000154   10D08DE2           ADD      SP,SP,#+16
   \   00000158   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??OpenABRecord_0:
   \   0000015C   25740000           DC8      "%t",+0
   \   00000160   ........           DC32     icons
    433          
    434          
    435          
    436          

   \                                 In segment DEBUG1, align 4, keep-with-next
    437          int doit(void *gui, GUI_MSG *msg) @ "DEBUG1"
    438          {
   \                     doit:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   58DF4DE2           SUB      SP,SP,#+352
   \   00000008   0140A0E1           MOV      R4,R1
    439            int (*OldMethod)(void *, GUI_MSG *)=(int (*)(void *, GUI_MSG *))(0xA02CB28E+1);
    440            int i,j,key;
    441            char dstr[41];
    442            unsigned short index[6][2];
    443            unsigned short tmp;
    444            WSHDR *str;
    445            void *adr=((void ****)gui)[0x50/4][0x4C/4][0x28/4];
   \   0000000C   501090E5           LDR      R1,[R0, #+80]
   \   00000010   4C1091E5           LDR      R1,[R1, #+76]
   \   00000014   281091E5           LDR      R1,[R1, #+40]
   \   00000018   00108DE5           STR      R1,[SP, #+0]
    446            dstr[0]=' ';
    447            ws2ascii(&dstr[1],getDialString(adr),wstrlen(getDialString(adr)));
   \   0000001C   00009DE5           LDR      R0,[SP, #+0]
   \   00000020   2010A0E3           MOV      R1,#+32
   \   00000024   3411CDE5           STRB     R1,[SP, #+308]
   \   00000028   ........           _BLF     getDialString,??getDialString??rA?DEBUG1
   \   0000002C   ........           _BLF     wstrlen,??wstrlen??rA?DEBUG1
   \   00000030   0050A0E1           MOV      R5,R0
   \   00000034   00009DE5           LDR      R0,[SP, #+0]
   \   00000038   ........           _BLF     getDialString,??getDialString??rA?DEBUG1
   \   0000003C   0010A0E1           MOV      R1,R0
   \   00000040   0520A0E1           MOV      R2,R5
   \   00000044   35008DE2           ADD      R0,SP,#+53
   \   00000048   400F80E2           ADD      R0,R0,#+256
   \   0000004C   ........           _BLF     ws2ascii,??ws2ascii??rA?DEBUG1
    448          
    449            IDLECSM *icsm=FindCSMbyID(CSM_root.idle_id);
   \   00000050   7C039FE5           LDR      R0,??doit_0+0x4  ;; CSM_root + 4
   \   00000054   000090E5           LDR      R0,[R0, #+0]
   \   00000058   ........           _BLF     FindCSMbyID,??FindCSMbyID??rA?DEBUG1
   \   0000005C   0050A0E1           MOV      R5,R0
    450            char sname[80];
    451            char ss[200];
    452            char *s=icsm->fileAB;
    453          
    454            key=msg->msg->submess;
   \   00000060   040094E5           LDR      R0,[R4, #+4]
   \   00000064   E88095E5           LDR      R8,[R5, #+232]
   \   00000068   04A090E5           LDR      R10,[R0, #+4]
   \   0000006C   3B005AE3           CMP      R10,#+59
   \   00000070   3C005A13           CMPNE    R10,#+60
   \   00000074   0300001A           BNE      ??doit_1
    455            if ((key==UP_BUTTON)||(key==DOWN_BUTTON))
    456            {
    457              i=0;
   \   00000078   00B0A0E3           MOV      R11,#+0
    458              msg->unk2=0;
   \   0000007C   0000A0E3           MOV      R0,#+0
   \   00000080   B200C4E1           STRH     R0,[R4, #+2]
   \   00000084   060000EA           B        ??doit_2
    459            }
    460            else
    461            {
    462              if (key!=GREEN_BUTTON)  i=(*OldMethod)(gui, msg);
   \                     ??doit_1:
   \   00000088   0B005AE3           CMP      R10,#+11
   \   0000008C   0400000A           BEQ      ??doit_2
   \   00000090   60019DE5           LDR      R0,[SP, #+352]
   \   00000094   3C239FE5           LDR      R2,??doit_0+0x8  ;; 0xa02cb28f
   \   00000098   0410A0E1           MOV      R1,R4
   \   0000009C   32FF2FE1           BLX      R2
   \   000000A0   00B0A0E1           MOV      R11,R0
    463            }
    464          #define cp (icsm->myAB)
    465            str=AllocWS(20);
   \                     ??doit_2:
   \   000000A4   1400A0E3           MOV      R0,#+20
   \   000000A8   ........           _BLF     AllocWS,??AllocWS??rA?DEBUG1
   \   000000AC   0060A0E1           MOV      R6,R0
    466            cutwstr(icsm->str1,0);
   \   000000B0   CC0095E5           LDR      R0,[R5, #+204]
   \   000000B4   0010A0E3           MOV      R1,#+0
   \   000000B8   ........           _BLF     cutwstr,??cutwstr??rA?DEBUG1
    467          
    468          
    469            j=0;
   \   000000BC   0090A0E3           MOV      R9,#+0
    470            do
    471            {
    472              strcpy(sname,s);
   \                     ??doit_3:
   \   000000C0   0810A0E1           MOV      R1,R8
   \   000000C4   04008DE2           ADD      R0,SP,#+4
   \   000000C8   ........           _BLF     strcpy,??strcpy??rA?DEBUG1
    473              s+=strlen(sname)+1;
   \   000000CC   04008DE2           ADD      R0,SP,#+4
   \   000000D0   ........           _BLF     strlen,??strlen??rA?DEBUG1
   \   000000D4   080080E0           ADD      R0,R0,R8
   \   000000D8   017080E2           ADD      R7,R0,#+1
    474              strcpy(ss,s);
   \   000000DC   0710A0E1           MOV      R1,R7
   \   000000E0   6C008DE2           ADD      R0,SP,#+108
   \   000000E4   ........           _BLF     strcpy,??strcpy??rA?DEBUG1
    475              s+=strlen(ss)+1;
   \   000000E8   6C008DE2           ADD      R0,SP,#+108
   \   000000EC   ........           _BLF     strlen,??strlen??rA?DEBUG1
   \   000000F0   070080E0           ADD      R0,R0,R7
   \   000000F4   018080E2           ADD      R8,R0,#+1
    476              tmp=(*s++);
   \   000000F8   ........           LDRB     R0,[R8], #+1
    477              tmp|=((unsigned short)(*s++))<<8;
   \   000000FC   ........           LDRB     R1,[R8], #+7
   \   00000100   017480E1           ORR      R7,R0,R1, LSL #+8
    478              s+=6;
    479              if (strstr(ss,dstr))
   \   00000104   4D1F8DE2           ADD      R1,SP,#+308
   \   00000108   6C008DE2           ADD      R0,SP,#+108
   \   0000010C   ........           _BLF     strstr,??strstr??rA?DEBUG1
   \   00000110   000050E3           CMP      R0,#+0
   \   00000114   0800000A           BEQ      ??doit_4
    480              {
    481                // номер записи в файле.
    482                index[j][0]=tmp&0x03FF;
   \   00000118   54008DE2           ADD      R0,SP,#+84
   \   0000011C   090180E0           ADD      R0,R0,R9, LSL #+2
   \   00000120   0710A0E1           MOV      R1,R7
   \   00000124   011BA0E1           LSL      R1,R1,#+22
   \   00000128   211BA0E1           LSR      R1,R1,#+22
   \   0000012C   B010C0E1           STRH     R1,[R0, #+0]
    483                // количество номеров в записи.
    484                index[j][1]=tmp>>10;
   \   00000130   2715A0E1           LSR      R1,R7,#+10
   \   00000134   B210C0E1           STRH     R1,[R0, #+2]
    485                j++;
   \   00000138   019089E2           ADD      R9,R9,#+1
    486              }
    487            }
    488            while(((*s)&&(j<6)));
   \                     ??doit_4:
   \   0000013C   0000D8E5           LDRB     R0,[R8, #+0]
   \   00000140   000050E3           CMP      R0,#+0
   \   00000144   0100000A           BEQ      ??doit_5
   \   00000148   060059E3           CMP      R9,#+6
   \   0000014C   DBFFFFBA           BLT      ??doit_3
    489            FreeWS(str);
   \                     ??doit_5:
   \   00000150   0600A0E1           MOV      R0,R6
   \   00000154   ........           _BLF     FreeWS,??FreeWS??rA?DEBUG1
    490          
    491            //--------------------------------------------------
    492          
    493            if (msg->msg->msg== KEY_DOWN)
   \   00000158   040094E5           LDR      R0,[R4, #+4]
   \   0000015C   9310A0E3           MOV      R1,#+147
   \   00000160   F200D0E1           LDRSH    R0,[R0, #+2]
   \   00000164   401F81E3           ORR      R1,R1,#0x100
   \   00000168   010050E1           CMP      R0,R1
   \   0000016C   1C00001A           BNE      ??doit_6
    494            {
    495              switch (key)
   \   00000170   E40095E5           LDR      R0,[R5, #+228]
   \   00000174   011049E2           SUB      R1,R9,#+1
   \   00000178   0020E0E3           MVN      R2,#+0
   \   0000017C   01305AE2           SUBS     R3,R10,#+1
   \   00000180   1100000A           BEQ      ??doit_7
   \   00000184   3A3053E2           SUBS     R3,R3,#+58
   \   00000188   0200000A           BEQ      ??doit_8
   \   0000018C   013053E2           SUBS     R3,R3,#+1
   \   00000190   0800000A           BEQ      ??doit_9
   \   00000194   0D0000EA           B        ??doit_10
    496              {
    497              case UP_BUTTON:
    498                if ((cp)&&(cp!=-1)) cp--; else cp=j-1;
   \                     ??doit_8:
   \   00000198   000050E3           CMP      R0,#+0
   \   0000019C   02005011           CMPNE    R0,R2
   \   000001A0   0200000A           BEQ      ??doit_11
   \   000001A4   010040E2           SUB      R0,R0,#+1
   \                     ??doit_12:
   \   000001A8   E40085E5           STR      R0,[R5, #+228]
   \   000001AC   070000EA           B        ??doit_10
   \                     ??doit_11:
   \   000001B0   E41085E5           STR      R1,[R5, #+228]
   \   000001B4   050000EA           B        ??doit_10
    499                break;
    500              case DOWN_BUTTON:
    501                if (cp<(j-1)) cp++; else cp=0;
   \                     ??doit_9:
   \   000001B8   010050E1           CMP      R0,R1
   \   000001BC   010080B2           ADDLT    R0,R0,#+1
   \   000001C0   F8FFFFBA           BLT      ??doit_12
   \   000001C4   0000A0E3           MOV      R0,#+0
   \   000001C8   F6FFFFEA           B        ??doit_12
    502              		break;
    503              case LEFT_SOFT: cp=-1;
   \                     ??doit_7:
   \   000001CC   E42085E5           STR      R2,[R5, #+228]
    504              break;
    505              }
    506              if ((key >= 0x30)&&(key <= 0x39))
   \                     ??doit_10:
   \   000001D0   30005AE3           CMP      R10,#+48
   \   000001D4   010000BA           BLT      ??doit_13
   \   000001D8   3A005AE3           CMP      R10,#+58
    507              {
    508                //      wsaddwchar(icsm->str1,key);
    509                cp=-1;
   \   000001DC   E42085B5           STRLT    R2,[R5, #+228]
    510              }
    511              PendedRedrawGUI();
   \                     ??doit_13:
   \   000001E0   ........           _BLF     PendedRedrawGUI,??PendedRedrawGUI??rA?DEBUG1
    512            }
    513          
    514          
    515            if ((key == ENTER_BUTTON))
   \                     ??doit_6:
   \   000001E4   E40095E5           LDR      R0,[R5, #+228]
   \   000001E8   FF60A0E3           MOV      R6,#+255
   \   000001EC   FF6C86E3           ORR      R6,R6,#0xFF00
   \   000001F0   1A005AE3           CMP      R10,#+26
   \   000001F4   2F00001A           BNE      ??doit_14
    516            {
    517              if ((unsigned int)cp<6)
   \   000001F8   060050E3           CMP      R0,#+6
   \   000001FC   7000002A           BCS      ??doit_15
    518              {
    519                //      WSHDR *str=getDialString(adr);
    520                char *p;
    521                s=icsm->fileAB;
   \   00000200   E88095E5           LDR      R8,[R5, #+232]
    522                tmp=index[cp][0]+1;
   \   00000204   54108DE2           ADD      R1,SP,#+84
   \   00000208   000181E0           ADD      R0,R1,R0, LSL #+2
   \   0000020C   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000210   017080E2           ADD      R7,R0,#+1
   \   00000214   0778A0E1           MOV      R7,R7, LSL #+16
   \   00000218   2778A0E1           MOV      R7,R7, LSR #+16
    523                do
    524                {
    525                  strcpy(sname,s);
   \                     ??doit_16:
   \   0000021C   0810A0E1           MOV      R1,R8
   \   00000220   04008DE2           ADD      R0,SP,#+4
   \   00000224   ........           _BLF     strcpy,??strcpy??rA?DEBUG1
    526                  s+=strlen(sname)+1;
   \   00000228   04008DE2           ADD      R0,SP,#+4
   \   0000022C   ........           _BLF     strlen,??strlen??rA?DEBUG1
   \   00000230   080080E0           ADD      R0,R0,R8
   \   00000234   018080E2           ADD      R8,R0,#+1
    527                  strcpy(ss,s);
   \   00000238   0810A0E1           MOV      R1,R8
   \   0000023C   6C008DE2           ADD      R0,SP,#+108
   \   00000240   ........           _BLF     strcpy,??strcpy??rA?DEBUG1
    528                  s+=strlen(ss)+3+6;
   \   00000244   6C008DE2           ADD      R0,SP,#+108
   \   00000248   ........           _BLF     strlen,??strlen??rA?DEBUG1
   \   0000024C   080080E0           ADD      R0,R0,R8
   \   00000250   098080E2           ADD      R8,R0,#+9
    529                }
    530                while(--tmp);
   \   00000254   077086E0           ADD      R7,R6,R7
   \   00000258   0778A0E1           MOV      R7,R7, LSL #+16
   \   0000025C   2778B0E1           MOVS     R7,R7, LSR #+16
   \   00000260   EDFFFF1A           BNE      ??doit_16
    531                p=s-6;
   \   00000264   066048E2           SUB      R6,R8,#+6
    532                s=ss+strlen(sname)+1;
   \   00000268   04008DE2           ADD      R0,SP,#+4
   \   0000026C   ........           _BLF     strlen,??strlen??rA?DEBUG1
   \   00000270   6C108DE2           ADD      R1,SP,#+108
   \   00000274   010080E0           ADD      R0,R0,R1
   \   00000278   018080E2           ADD      R8,R0,#+1
    533                j=1;
    534          
    535                wsprintf(icsm->strings[0],"%t",(int*)sname);
   \   0000027C   D00095E5           LDR      R0,[R5, #+208]
   \   00000280   04208DE2           ADD      R2,SP,#+4
   \   00000284   511F8FE2           ADR      R1,??doit_0      ;; "%t"
   \   00000288   ........           _BLF     wsprintf,??wsprintf??rA?DEBUG1
    536                OpenABRecord(s,sname,icsm,p);
   \   0000028C   0630A0E1           MOV      R3,R6
   \                     ??doit_17:
   \   00000290   0520A0E1           MOV      R2,R5
   \   00000294   04108DE2           ADD      R1,SP,#+4
   \   00000298   0800A0E1           MOV      R0,R8
   \   0000029C   ........           _BLF     OpenABRecord,??OpenABRecord??rA?DEBUG1
    537                i=0;
   \   000002A0   00B0A0E3           MOV      R11,#+0
    538                msg->unk2=0;
   \   000002A4   0000A0E3           MOV      R0,#+0
   \   000002A8   B200C4E1           STRH     R0,[R4, #+2]
   \   000002AC   0B00A0E1           MOV      R0,R11
   \   000002B0   59DF8DE2           ADD      SP,SP,#+356
   \   000002B4   F08FBDE8           POP      {R4-R11,PC}
    539              }
    540            }
    541          
    542            if ((key == GREEN_BUTTON))
   \                     ??doit_14:
   \   000002B8   0B005AE3           CMP      R10,#+11
   \   000002BC   4000001A           BNE      ??doit_15
    543            {
    544              if ((unsigned int)cp<6)
   \   000002C0   060050E3           CMP      R0,#+6
   \   000002C4   3900002A           BCS      ??doit_18
    545              {
    546                WSHDR *str=getDialString(adr);
   \   000002C8   00009DE5           LDR      R0,[SP, #+0]
   \   000002CC   ........           _BLF     getDialString,??getDialString??rA?DEBUG1
    547                char *p;
    548                s=icsm->fileAB;
   \   000002D0   E88095E5           LDR      R8,[R5, #+232]
   \   000002D4   00A0A0E1           MOV      R10,R0
    549                tmp=index[cp][0]+1;
   \   000002D8   E40095E5           LDR      R0,[R5, #+228]
   \   000002DC   54108DE2           ADD      R1,SP,#+84
   \   000002E0   000181E0           ADD      R0,R1,R0, LSL #+2
   \   000002E4   B000D0E1           LDRH     R0,[R0, #+0]
   \   000002E8   017080E2           ADD      R7,R0,#+1
   \   000002EC   0778A0E1           MOV      R7,R7, LSL #+16
   \   000002F0   2778A0E1           MOV      R7,R7, LSR #+16
    550                do
    551                {
    552                  strcpy(sname,s);
   \                     ??doit_19:
   \   000002F4   0810A0E1           MOV      R1,R8
   \   000002F8   04008DE2           ADD      R0,SP,#+4
   \   000002FC   ........           _BLF     strcpy,??strcpy??rA?DEBUG1
    553                  s+=strlen(sname)+1;
   \   00000300   04008DE2           ADD      R0,SP,#+4
   \   00000304   ........           _BLF     strlen,??strlen??rA?DEBUG1
   \   00000308   080080E0           ADD      R0,R0,R8
   \   0000030C   018080E2           ADD      R8,R0,#+1
    554                  strcpy(ss,s);
   \   00000310   0810A0E1           MOV      R1,R8
   \   00000314   6C008DE2           ADD      R0,SP,#+108
   \   00000318   ........           _BLF     strcpy,??strcpy??rA?DEBUG1
    555                  s+=strlen(ss)+3+6;
   \   0000031C   6C008DE2           ADD      R0,SP,#+108
   \   00000320   ........           _BLF     strlen,??strlen??rA?DEBUG1
   \   00000324   080080E0           ADD      R0,R0,R8
   \   00000328   098080E2           ADD      R8,R0,#+9
    556                }
    557                while(--tmp);
   \   0000032C   077086E0           ADD      R7,R6,R7
   \   00000330   0778A0E1           MOV      R7,R7, LSL #+16
   \   00000334   2778B0E1           MOVS     R7,R7, LSR #+16
   \   00000338   EDFFFF1A           BNE      ??doit_19
    558                p=s-6;
   \   0000033C   067048E2           SUB      R7,R8,#+6
    559                s=ss+strlen(sname)+1;
   \   00000340   04008DE2           ADD      R0,SP,#+4
   \   00000344   ........           _BLF     strlen,??strlen??rA?DEBUG1
   \   00000348   6C108DE2           ADD      R1,SP,#+108
   \   0000034C   010080E0           ADD      R0,R0,R1
   \   00000350   018080E2           ADD      R8,R0,#+1
    560                j=1;
    561          
    562                wsprintf(icsm->strings[0],"%t",(int*)sname);
   \   00000354   D00095E5           LDR      R0,[R5, #+208]
   \   00000358   04208DE2           ADD      R2,SP,#+4
   \   0000035C   1B1F8FE2           ADR      R1,??doit_0      ;; "%t"
   \   00000360   ........           _BLF     wsprintf,??wsprintf??rA?DEBUG1
    563          
    564                if (index[cp][1])
   \   00000364   E40095E5           LDR      R0,[R5, #+228]
   \   00000368   54108DE2           ADD      R1,SP,#+84
   \   0000036C   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000370   B200D0E1           LDRH     R0,[R0, #+2]
   \   00000374   0190A0E3           MOV      R9,#+1
   \   00000378   000050E3           CMP      R0,#+0
   \   0000037C   0500000A           BEQ      ??doit_20
    565                {
    566                  OpenABRecord(s,sname,icsm,p);
   \   00000380   0730A0E1           MOV      R3,R7
   \   00000384   C1FFFFEA           B        ??doit_17
    567                  i=0;
    568                  msg->unk2=0;
    569                }
    570                else
    571                {
    572                  while(*s)
    573                  {
    574                    str->wsbody[j]=*s++;
   \                     ??doit_21:
   \   00000388   ........           LDRB     R1,[R8], #+1
   \   0000038C   890080E0           ADD      R0,R0,R9, LSL #+1
    575                    j++;
   \   00000390   019089E2           ADD      R9,R9,#+1
   \   00000394   B010C0E1           STRH     R1,[R0, #+0]
    576                  }
   \                     ??doit_20:
   \   00000398   0000D8E5           LDRB     R0,[R8, #+0]
   \   0000039C   000050E3           CMP      R0,#+0
   \   000003A0   00009AE5           LDR      R0,[R10, #+0]
   \   000003A4   F7FFFF1A           BNE      ??doit_21
    577                  str->wsbody[0]=j-1;
   \   000003A8   091086E0           ADD      R1,R6,R9
   \   000003AC   B010C0E1           STRH     R1,[R0, #+0]
    578                  i=(*OldMethod)(gui, msg);
    579                }
    580              }
    581              else
    582                i=(*OldMethod)(gui, msg);
   \                     ??doit_18:
   \   000003B0   60019DE5           LDR      R0,[SP, #+352]
   \   000003B4   1C209FE5           LDR      R2,??doit_0+0x8  ;; 0xa02cb28f
   \   000003B8   0410A0E1           MOV      R1,R4
   \   000003BC   32FF2FE1           BLX      R2
   \   000003C0   00B0A0E1           MOV      R11,R0
    583            }
    584          
    585            //  FreeWS(str);
    586            //--------  --------------------------------------------------------
    587          
    588          
    589            return(i);
   \                     ??doit_15:
   \   000003C4   0B00A0E1           MOV      R0,R11
   \   000003C8   59DF8DE2           ADD      SP,SP,#+356
   \   000003CC   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??doit_0:
   \   000003D0   25740000           DC8      "%t",+0
   \   000003D4   ........           DC32     CSM_root + 4
   \   000003D8   8FB22CA0           DC32     0xa02cb28f
    590          #undef cp
    591          }
    592          

   \                                 In segment CODE, align 4, keep-with-next
    593          void ed_inp_redraw(void *data)
    594          {
    595            ((void(*)(void *))(0xA07FE476+1))(data);
   \                     ed_inp_redraw:
   \   00000000   9C109FE5           LDR      R1,??ed_inp_redraw_0  ;; 0xa07fe477
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   98509FE5           LDR      R5,??ed_inp_redraw_0+0x4  ;; color
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   31FF2FE1           BLX      R1
    596            //Вставлять свое
    597            IDLECSM *icsm=FindCSMbyID(CSM_root.idle_id);
   \   00000014   ........           LDR      R0,??DataTable7  ;; CSM_root + 4
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   ........           _BLF     FindCSMbyID,??FindCSMbyID??rA
   \   00000020   0040A0E1           MOV      R4,R0
    598            DrawFrameInNativeMenu(8,47,130,154,0,0,0,
    599                                  GetPaletteAdrByColorIndex(1),
    600                                  (int)&color[0]/*GetPaletteAdrByColorIndex(7)*/);
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   ........           _BLF     GetPaletteAdrByColorIndex,??GetPaletteAdrByColorIndex??rA
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   02002DE9           PUSH     {R1}
   \   00000034   01002DE9           PUSH     {R0}
   \   00000038   9A30A0E3           MOV      R3,#+154
   \   0000003C   8220A0E3           MOV      R2,#+130
   \   00000040   2F10A0E3           MOV      R1,#+47
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   01002DE9           PUSH     {R0}
   \   0000004C   01002DE9           PUSH     {R0}
   \   00000050   01002DE9           PUSH     {R0}
   \   00000054   0800A0E3           MOV      R0,#+8
   \   00000058   ........           _BLF     DrawFrameInNativeMenu,??DrawFrameInNativeMenu??rA
    601            DrawString(icsm->str1,   12,49,128,152,   3,0x0,    GetPaletteAdrByColorIndex(1),
    602                       (int)&color[0]/*GetPaletteAdrByColorIndex(7)*/);
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   ........           _BLF     GetPaletteAdrByColorIndex,??GetPaletteAdrByColorIndex??rA
   \   00000064   20002DE9           PUSH     {R5}
   \   00000068   01002DE9           PUSH     {R0}
   \   0000006C   8030A0E3           MOV      R3,#+128
   \   00000070   3120A0E3           MOV      R2,#+49
   \   00000074   0C10A0E3           MOV      R1,#+12
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   01002DE9           PUSH     {R0}
   \   00000080   0300A0E3           MOV      R0,#+3
   \   00000084   01002DE9           PUSH     {R0}
   \   00000088   9800A0E3           MOV      R0,#+152
   \   0000008C   01002DE9           PUSH     {R0}
   \   00000090   CC0094E5           LDR      R0,[R4, #+204]
   \   00000094   ........           _BLF     DrawString,??DrawString??rA
   \   00000098   28D08DE2           ADD      SP,SP,#+40
    603          }
   \   0000009C   04D08DE2           ADD      SP,SP,#+4
   \   000000A0   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??ed_inp_redraw_0:
   \   000000A4   77E47FA0           DC32     0xa07fe477
   \   000000A8   ........           DC32     color
    604          

   \                                 In segment CODE, align 4, keep-with-next, root
    605          __thumb __root int redraw (void * data, int cmd)
    606          {
   \                     redraw:
   \   00000000   F3B5               PUSH     {R0,R1,R4-R7,LR}
   \   00000002   D5B0               SUB      SP,SP,#+340
    607            int i;
    608            int (*OldMethod)(void *,int)=(int (*)(void *,int))(0xA02CB7E4+1);
    609            void * * methods;
    610            WSHDR *str;
    611            void *adr=((void ****)data)[0x50/4][0x4C/4][0x28/4];
    612            str=getDialString(adr);
   \   00000004   006D               LDR      R0,[R0, #+80]
   \   00000006   C06C               LDR      R0,[R0, #+76]
   \   00000008   806A               LDR      R0,[R0, #+40]
   \   0000000A   ........           _BLF     getDialString,??getDialString??rT
   \   0000000E   0500               MOVS     R5,R0
    613            IDLECSM *icsm=FindCSMbyID(CSM_root.idle_id);
   \   00000010   ....               LDR      R0,??DataTable7  ;; CSM_root + 4
   \   00000012   0068               LDR      R0,[R0, #+0]
   \   00000014   ........           _BLF     FindCSMbyID,??FindCSMbyID??rT
   \   00000018   0600               MOVS     R6,R0
   \   0000001A   5698               LDR      R0,[SP, #+344]
   \   0000001C   0228               CMP      R0,#+2
   \   0000001E   38D1               BNE      ??redraw_0
    614          
    615            if (cmd==2)
    616            {
    617              //Called after onCreate
    618              unsigned int err;
    619              int f;
    620              methods=malloc(64+4);
   \   00000020   4420               MOVS     R0,#+68
   \   00000022   ........           _BLF     malloc,??malloc??rT
   \   00000026   0400               MOVS     R4,R0
    621              void **m=GetDataOfItemByID(data,4);
   \   00000028   5598               LDR      R0,[SP, #+340]
   \   0000002A   0421               MOVS     R1,#+4
   \   0000002C   ........           _BLF     GetDataOfItemByID,??GetDataOfItemByID??rT
   \   00000030   0500               MOVS     R5,R0
    622              memcpy(methods,m[1],64);
   \   00000032   6968               LDR      R1,[R5, #+4]
   \   00000034   4022               MOVS     R2,#+64
   \   00000036   2000               MOVS     R0,R4
   \   00000038   ........           _BLF     memcpy,??memcpy??rT
    623              *methods=(void *)ed_inp_redraw;
   \   0000003C   8848               LDR      R0,??redraw_1    ;; ed_inp_redraw
    624              methods[16]=m[1];
    625              m[1]=methods;
    626              icsm->fileAB=malloc(MAX_ABFILE_SIZE+1);
   \   0000003E   CC36               ADDS     R6,R6,#+204
   \   00000040   2060               STR      R0,[R4, #+0]
   \   00000042   6868               LDR      R0,[R5, #+4]
   \   00000044   2064               STR      R0,[R4, #+64]
   \   00000046   8748               LDR      R0,??redraw_1+0x4  ;; 0x7531
   \   00000048   6C60               STR      R4,[R5, #+4]
   \   0000004A   3400               MOVS     R4,R6
    627              zeromem(icsm->fileAB,MAX_ABFILE_SIZE);
   \   0000004C   864E               LDR      R6,??redraw_1+0x8  ;; 0x7530
   \   0000004E   ........           _BLF     malloc,??malloc??rT
   \   00000052   E061               STR      R0,[R4, #+28]
   \   00000054   3100               MOVS     R1,R6
   \   00000056   ........           _BLF     zeromem,??zeromem??rT
    628          //    UnPackAB(icsm->fileAB);
    629          
    630              if ((f=fopen((char *)fname,A_ReadOnly|A_BIN,P_READ|P_WRITE,&err))!=-1)
   \   0000005A   8448               LDR      R0,??redraw_1+0xC  ;; fname
   \   0000005C   6B46               MOV      R3,SP
   \   0000005E   C022               MOVS     R2,#+192
   \   00000060   5200               LSLS     R2,R2,#+1
   \   00000062   8021               MOVS     R1,#+128
   \   00000064   0902               LSLS     R1,R1,#+8
   \   00000066   ........           _BLF     fopen,??fopen??rT
   \   0000006A   0500               MOVS     R5,R0
   \   0000006C   0020               MOVS     R0,#+0
   \   0000006E   C043               MVNS     R0,R0
   \   00000070   8542               CMP      R5,R0
   \   00000072   ....               BNE      .+5
   \   00000074   EEE0               B        ??redraw_2
    631              {
    632                icsm->fileAB[fread(f,icsm->fileAB,MAX_ABFILE_SIZE,&err)]=0;
   \   00000076   E169               LDR      R1,[R4, #+28]
   \   00000078   6B46               MOV      R3,SP
   \   0000007A   3200               MOVS     R2,R6
   \   0000007C   2800               MOVS     R0,R5
   \   0000007E   ........           _BLF     fread,??fread??rT
   \   00000082   E169               LDR      R1,[R4, #+28]
   \   00000084   0022               MOVS     R2,#+0
   \   00000086   0A54               STRB     R2,[R1, R0]
    633                fclose(f,&err);
   \   00000088   6946               MOV      R1,SP
   \   0000008A   2800               MOVS     R0,R5
   \   0000008C   ........           _BLF     fclose,??fclose??rT
   \   00000090   E0E0               B        ??redraw_2
    634              }
    635          
    636          
    637          
    638            }
    639            if (cmd==3)
   \                     ??redraw_0:
   \   00000092   3400               MOVS     R4,R6
   \   00000094   CC34               ADDS     R4,R4,#+204
   \   00000096   0328               CMP      R0,#+3
   \   00000098   14D1               BNE      ??redraw_3
    640            {
    641              void **m=GetDataOfItemByID(data,4);
   \   0000009A   5598               LDR      R0,[SP, #+340]
   \   0000009C   0421               MOVS     R1,#+4
   \   0000009E   ........           _BLF     GetDataOfItemByID,??GetDataOfItemByID??rT
   \   000000A2   0100               MOVS     R1,R0
    642              void **mm=m[1];
   \   000000A4   4868               LDR      R0,[R1, #+4]
    643              m[1]=mm[16];
    644              mfree(mm);
    645              cutwstr(icsm->str1,0);
    646              icsm->flashSMS=0;
   \   000000A6   EC36               ADDS     R6,R6,#+236
   \   000000A8   026C               LDR      R2,[R0, #+64]
   \   000000AA   4A60               STR      R2,[R1, #+4]
   \   000000AC   ........           _BLF     mfree,??mfree??rT
   \   000000B0   2068               LDR      R0,[R4, #+0]
   \   000000B2   0021               MOVS     R1,#+0
   \   000000B4   ........           _BLF     cutwstr,??cutwstr??rT
   \   000000B8   0020               MOVS     R0,#+0
   \   000000BA   3070               STRB     R0,[R6, #+0]
    647              mfree(icsm->fileAB);
   \   000000BC   E069               LDR      R0,[R4, #+28]
   \   000000BE   ........           _BLF     mfree,??mfree??rT
   \   000000C2   C7E0               B        ??redraw_2
    648            }
    649            if ((cmd==7)&&(wstrlen(str)))
   \                     ??redraw_3:
   \   000000C4   0728               CMP      R0,#+7
   \   000000C6   ....               BEQ      .+5
   \   000000C8   C4E0               B        ??redraw_2
   \   000000CA   2800               MOVS     R0,R5
   \   000000CC   ........           _BLF     wstrlen,??wstrlen??rT
   \   000000D0   0028               CMP      R0,#+0
   \   000000D2   ....               BNE      .+5
   \   000000D4   BEE0               B        ??redraw_2
    650            {
    651              char dstr[41];
    652              char j,k;
    653              dstr[0]=' ';
   \   000000D6   04AE               ADD      R6,SP,#+16
   \   000000D8   2020               MOVS     R0,#+32
   \   000000DA   3070               STRB     R0,[R6, #+0]
    654              ws2ascii(&dstr[1],str,wstrlen(str));
   \   000000DC   2800               MOVS     R0,R5
   \   000000DE   ........           _BLF     wstrlen,??wstrlen??rT
   \   000000E2   0200               MOVS     R2,R0
   \   000000E4   2900               MOVS     R1,R5
   \   000000E6   701C               ADDS     R0,R6,#+1
   \   000000E8   ........           _BLF     ws2ascii,??ws2ascii??rT
    655              char sname[80];
    656              char ss[200];
    657              char *s=icsm->fileAB;
   \   000000EC   E069               LDR      R0,[R4, #+28]
   \   000000EE   0190               STR      R0,[SP, #+4]
    658          #define cp (icsm->myAB)
    659          
    660              str=AllocWS(20);
   \   000000F0   1420               MOVS     R0,#+20
   \   000000F2   ........           _BLF     AllocWS,??AllocWS??rT
   \   000000F6   0500               MOVS     R5,R0
    661              cutwstr(icsm->str1,0);
   \   000000F8   2068               LDR      R0,[R4, #+0]
   \   000000FA   0021               MOVS     R1,#+0
   \   000000FC   ........           _BLF     cutwstr,??cutwstr??rT
    662              j=0;
   \   00000100   0020               MOVS     R0,#+0
   \   00000102   0290               STR      R0,[SP, #+8]
    663              do
    664              {
    665                strcpy(sname,s);
   \                     ??redraw_4:
   \   00000104   0199               LDR      R1,[SP, #+4]
   \   00000106   41A8               ADD      R0,SP,#+260
   \   00000108   ........           _BLF     strcpy,??strcpy??rT
    666                s+=strlen(sname)+1;
   \   0000010C   41A8               ADD      R0,SP,#+260
   \   0000010E   ........           _BLF     strlen,??strlen??rT
   \   00000112   0199               LDR      R1,[SP, #+4]
   \   00000114   0E18               ADDS     R6,R1,R0
   \   00000116   761C               ADDS     R6,R6,#+1
    667                strcpy(ss,s);
   \   00000118   3100               MOVS     R1,R6
   \   0000011A   0FA8               ADD      R0,SP,#+60
   \   0000011C   ........           _BLF     strcpy,??strcpy??rT
    668                s+=strlen(ss)+1;
   \   00000120   0FA8               ADD      R0,SP,#+60
   \   00000122   ........           _BLF     strlen,??strlen??rT
   \   00000126   3018               ADDS     R0,R6,R0
   \   00000128   401C               ADDS     R0,R0,#+1
    669                s+=2+6;
   \   0000012A   0830               ADDS     R0,R0,#+8
   \   0000012C   0190               STR      R0,[SP, #+4]
    670                if (strstr(ss,dstr))
   \   0000012E   04A9               ADD      R1,SP,#+16
   \   00000130   0FA8               ADD      R0,SP,#+60
   \   00000132   ........           _BLF     strstr,??strstr??rT
   \   00000136   0028               CMP      R0,#+0
   \   00000138   ....               BNE      .+5
   \   0000013A   7EE0               B        ??redraw_5
    671                {
    672                  char *ss1;
    673                  k=(strstr(ss,dstr)-ss);
   \   0000013C   04A9               ADD      R1,SP,#+16
   \   0000013E   0FA8               ADD      R0,SP,#+60
   \   00000140   ........           _BLF     strstr,??strstr??rT
   \   00000144   0FA9               ADD      R1,SP,#+60
   \   00000146   401A               SUBS     R0,R0,R1
   \   00000148   0006               LSLS     R0,R0,#+24
   \   0000014A   000E               LSRS     R0,R0,#+24
   \   0000014C   0090               STR      R0,[SP, #+0]
    674                  cutwstr(str,0);
   \   0000014E   0021               MOVS     R1,#+0
   \   00000150   2800               MOVS     R0,R5
   \   00000152   ........           _BLF     cutwstr,??cutwstr??rT
    675                  if (j==cp) wsaddwchar(str,0xE003);
   \   00000156   0298               LDR      R0,[SP, #+8]
   \   00000158   0006               LSLS     R0,R0,#+24
   \   0000015A   000E               LSRS     R0,R0,#+24
   \   0000015C   0390               STR      R0,[SP, #+12]
   \   0000015E   A169               LDR      R1,[R4, #+24]
   \   00000160   8842               CMP      R0,R1
   \   00000162   03D1               BNE      ??redraw_6
   \   00000164   4249               LDR      R1,??redraw_1+0x10  ;; 0xe003
   \   00000166   2800               MOVS     R0,R5
   \   00000168   ........           _BLF     wsaddwchar,??wsaddwchar??rT
    676                  ss1=sname+1;
   \                     ??redraw_6:
   \   0000016C   41AE               ADD      R6,SP,#+260
   \   0000016E   761C               ADDS     R6,R6,#+1
    677                  if (strlen(sname)>16) {sname[14]='.';sname[15]='.';sname[16]=0;}
   \   00000170   41A8               ADD      R0,SP,#+260
   \   00000172   ........           _BLF     strlen,??strlen??rT
   \   00000176   1128               CMP      R0,#+17
   \   00000178   05DB               BLT      ??redraw_7
   \   0000017A   2E20               MOVS     R0,#+46
   \   0000017C   41A9               ADD      R1,SP,#+260
   \   0000017E   8873               STRB     R0,[R1, #+14]
   \   00000180   C873               STRB     R0,[R1, #+15]
   \   00000182   0020               MOVS     R0,#+0
   \   00000184   0874               STRB     R0,[R1, #+16]
    678                  strcat(sname," ");
   \                     ??redraw_7:
   \   00000186   ....               ADR      R1,??DataTable5  ;; " "
   \   00000188   41A8               ADD      R0,SP,#+260
   \   0000018A   ........           _BLF     strcat,??strcat??rT
    679                  do
    680                  {
    681                    if ((j!=cp)&&(k<(strlen(sname)))&&(cp==-1))
   \                     ??redraw_8:
   \   0000018E   009F               LDR      R7,[SP, #+0]
   \   00000190   0398               LDR      R0,[SP, #+12]
   \   00000192   A169               LDR      R1,[R4, #+24]
   \   00000194   3F06               LSLS     R7,R7,#+24
   \   00000196   3F0E               LSRS     R7,R7,#+24
   \   00000198   8842               CMP      R0,R1
   \   0000019A   21D0               BEQ      ??redraw_9
   \   0000019C   41A8               ADD      R0,SP,#+260
   \   0000019E   ........           _BLF     strlen,??strlen??rT
   \   000001A2   8742               CMP      R7,R0
   \   000001A4   1CDA               BGE      ??redraw_9
   \   000001A6   A069               LDR      R0,[R4, #+24]
   \   000001A8   0021               MOVS     R1,#+0
   \   000001AA   C943               MVNS     R1,R1
   \   000001AC   8842               CMP      R0,R1
   \   000001AE   17D1               BNE      ??redraw_9
    682                    {
    683                      if (k==wstrlen(str)) wsaddwchar(str,0xE003);
   \   000001B0   2800               MOVS     R0,R5
   \   000001B2   ........           _BLF     wstrlen,??wstrlen??rT
   \   000001B6   8742               CMP      R7,R0
   \   000001B8   03D1               BNE      ??redraw_10
   \   000001BA   2D49               LDR      R1,??redraw_1+0x10  ;; 0xe003
   \   000001BC   2800               MOVS     R0,R5
   \   000001BE   ........           _BLF     wsaddwchar,??wsaddwchar??rT
    684                      if ((wstrlen(str)==(k+(strlen(dstr))))) {wsaddwchar(str,0xE004);}
   \                     ??redraw_10:
   \   000001C2   2800               MOVS     R0,R5
   \   000001C4   ........           _BLF     wstrlen,??wstrlen??rT
   \   000001C8   01B4               PUSH     {R0}
   \   000001CA   05A8               ADD      R0,SP,#+20
   \   000001CC   ........           _BLF     strlen,??strlen??rT
   \   000001D0   3918               ADDS     R1,R7,R0
   \   000001D2   01BC               POP      {R0}
   \   000001D4   8842               CMP      R0,R1
   \   000001D6   03D1               BNE      ??redraw_9
   \   000001D8   2649               LDR      R1,??redraw_1+0x14  ;; 0xe004
   \   000001DA   2800               MOVS     R0,R5
   \   000001DC   ........           _BLF     wsaddwchar,??wsaddwchar??rT
    685                    }
    686                    wsaddwchar(str,char8to16(*ss1));
   \                     ??redraw_9:
   \   000001E0   3078               LDRB     R0,[R6, #+0]
    687                    ss1++;
   \   000001E2   761C               ADDS     R6,R6,#+1
   \   000001E4   ........           _BLF     char8to16,??char8to16??rT
   \   000001E8   0100               MOVS     R1,R0
   \   000001EA   2800               MOVS     R0,R5
   \   000001EC   ........           _BLF     wsaddwchar,??wsaddwchar??rT
    688                  }
    689                  while(*ss1);
   \   000001F0   3078               LDRB     R0,[R6, #+0]
   \   000001F2   0028               CMP      R0,#+0
   \   000001F4   CBD1               BNE      ??redraw_8
    690                  if ((wstrlen(str)<=(k+(strlen(dstr))))) {wsaddwchar(str,0xE004);}
   \   000001F6   04A8               ADD      R0,SP,#+16
   \   000001F8   ........           _BLF     strlen,??strlen??rT
   \   000001FC   3E18               ADDS     R6,R7,R0
   \   000001FE   2800               MOVS     R0,R5
   \   00000200   ........           _BLF     wstrlen,??wstrlen??rT
   \   00000204   8642               CMP      R6,R0
   \   00000206   03DB               BLT      ??redraw_11
   \   00000208   1A49               LDR      R1,??redraw_1+0x14  ;; 0xe004
   \   0000020A   2800               MOVS     R0,R5
   \   0000020C   ........           _BLF     wsaddwchar,??wsaddwchar??rT
    691                  if (j==cp) wsaddwchar(str,0xE004);
   \                     ??redraw_11:
   \   00000210   0398               LDR      R0,[SP, #+12]
   \   00000212   A169               LDR      R1,[R4, #+24]
   \   00000214   8842               CMP      R0,R1
   \   00000216   03D1               BNE      ??redraw_12
   \   00000218   1649               LDR      R1,??redraw_1+0x14  ;; 0xe004
   \   0000021A   2800               MOVS     R0,R5
   \   0000021C   ........           _BLF     wsaddwchar,??wsaddwchar??rT
    692                  wsaddwchar(str,'\n');
   \                     ??redraw_12:
   \   00000220   0A21               MOVS     R1,#+10
   \   00000222   2800               MOVS     R0,R5
   \   00000224   ........           _BLF     wsaddwchar,??wsaddwchar??rT
    693                  wstrcat(icsm->str1,str);
   \   00000228   2068               LDR      R0,[R4, #+0]
   \   0000022A   2900               MOVS     R1,R5
   \   0000022C   ........           _BLF     wstrcat,??wstrcat??rT
    694                  j++;
   \   00000230   0298               LDR      R0,[SP, #+8]
   \   00000232   401C               ADDS     R0,R0,#+1
   \   00000234   0006               LSLS     R0,R0,#+24
   \   00000236   000E               LSRS     R0,R0,#+24
   \   00000238   0290               STR      R0,[SP, #+8]
    695                }
    696              }
    697              while(((*s)&&(j<6)));
   \                     ??redraw_5:
   \   0000023A   0198               LDR      R0,[SP, #+4]
   \   0000023C   0078               LDRB     R0,[R0, #+0]
   \   0000023E   0028               CMP      R0,#+0
   \   00000240   05D0               BEQ      ??redraw_13
   \   00000242   0298               LDR      R0,[SP, #+8]
   \   00000244   0006               LSLS     R0,R0,#+24
   \   00000246   000E               LSRS     R0,R0,#+24
   \   00000248   0628               CMP      R0,#+6
   \   0000024A   ....               BCS      .+5
   \   0000024C   5AE7               B        ??redraw_4
    698              FreeWS(str);
   \                     ??redraw_13:
   \   0000024E   2800               MOVS     R0,R5
   \   00000250   ........           _BLF     FreeWS,??FreeWS??rT
    699          
    700          #undef cp
    701            }
    702          
    703          
    704            i=OldMethod(data,cmd);
    705          
    706            /*  if (cmd==7)
    707            {
    708          }*/
    709          
    710            return(i);
   \                     ??redraw_2:
   \   00000254   5699               LDR      R1,[SP, #+344]
   \   00000256   5598               LDR      R0,[SP, #+340]
   \   00000258   ........           _BLF     -1607682075,??rT0xA02CB7E5
   \   0000025C   57B0               ADD      SP,SP,#+348
   \   0000025E   F0BD               POP      {R4-R7,PC}       ;; return
   \                     ??redraw_1:
   \   00000260   ........           DC32     ed_inp_redraw
   \   00000264   31750000           DC32     0x7531
   \   00000268   30750000           DC32     0x7530
   \   0000026C   ........           DC32     fname
   \   00000270   03E00000           DC32     0xe003
   \   00000274   04E00000           DC32     0xe004
    711          }
    712          

   \                                 In segment DEBUG2, align 4, keep-with-next
    713          int resize(void *GUI) @ "DEBUG2"
    714          {
   \                     resize:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    715            unsigned int *curSize=((unsigned int ****)GUI)[0x50/4][0x4C/4][0x28/4]+(0x14/4);
   \   00000004   501090E5           LDR      R1,[R0, #+80]
   \   00000008   4C1091E5           LDR      R1,[R1, #+76]
   \   0000000C   281091E5           LDR      R1,[R1, #+40]
   \   00000010   144081E2           ADD      R4,R1,#+20
    716            unsigned short *fontSize=((unsigned short ******)GUI)[0x50/4][0x4C/4][0x28/4][0x68/4][0x08/4]+(0x0E/2);
   \   00000014   501090E5           LDR      R1,[R0, #+80]
   \   00000018   4C1091E5           LDR      R1,[R1, #+76]
   \   0000001C   281091E5           LDR      R1,[R1, #+40]
   \   00000020   681091E5           LDR      R1,[R1, #+104]
   \   00000024   081091E5           LDR      R1,[R1, #+8]
   \   00000028   0E5081E2           ADD      R5,R1,#+14
    717            unsigned int dsLen=getDialStringLen(GUI);
   \   0000002C   ........           _BLF     getDialStringLen,??getDialStringLen??rA?DEBUG2
    718          
    719          
    720            int i;
    721            if (dsLen>13)
   \   00000030   0E0050E3           CMP      R0,#+14
   \   00000034   0B00003A           BCC      ??resize_0
    722            {
    723              if (dsLen>17)
   \   00000038   120050E3           CMP      R0,#+18
   \   0000003C   0500003A           BCC      ??resize_1
    724              {
    725                *curSize=7;
   \   00000040   0710A0E3           MOV      R1,#+7
    726                *fontSize=2;
   \   00000044   0220A0E3           MOV      R2,#+2
    727                if (dsLen>20) i=24; else i=16;
   \   00000048   150050E3           CMP      R0,#+21
   \   0000004C   1000A033           MOVCC    R0,#+16
   \   00000050   1800A023           MOVCS    R0,#+24
   \   00000054   060000EA           B        ??resize_2
    728              }
    729              else
    730              {
    731                *curSize=2;
   \                     ??resize_1:
   \   00000058   0210A0E3           MOV      R1,#+2
    732                *fontSize=4;
   \   0000005C   0420A0E3           MOV      R2,#+4
    733                i=8;
   \   00000060   0800A0E3           MOV      R0,#+8
   \   00000064   020000EA           B        ??resize_2
    734              }
    735            }
    736            else
    737            {
    738              *curSize=1;
   \                     ??resize_0:
   \   00000068   0110A0E3           MOV      R1,#+1
    739              *fontSize=5;
   \   0000006C   0520A0E3           MOV      R2,#+5
    740              i=0;
   \   00000070   0000A0E3           MOV      R0,#+0
   \                     ??resize_2:
   \   00000074   B020C5E1           STRH     R2,[R5, #+0]
   \   00000078   001084E5           STR      R1,[R4, #+0]
    741            }
    742            return((int)(&dsRects)+i);
   \   0000007C   04109FE5           LDR      R1,??resize_3    ;; dsRects
   \   00000080   010080E0           ADD      R0,R0,R1
   \   00000084   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??resize_3:
   \   00000088   ........           DC32     dsRects
    743          }
    744          

   \                                 In segment CODE, align 4, keep-with-next
    745          void ESI(char *s, WSHDR *ws)
    746          {
   \                     ESI:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    747            int c;
    748            if ((((unsigned int)s)>>28)==0x0B)
   \   00000008   240EA0E1           LSR      R0,R4,#+28
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0B0050E3           CMP      R0,#+11
   \   00000014   0800001A           BNE      ??ESI_0
    749            {
    750              IDLECSM *icsm=FindCSMbyID(CSM_root.idle_id);
   \   00000018   ........           LDR      R0,??DataTable7  ;; CSM_root + 4
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   ........           _BLF     FindCSMbyID,??FindCSMbyID??rA
    751              wstrcpy(ws,icsm->strings[((unsigned int)s)&0x0F]);
   \   00000024   0F1004E2           AND      R1,R4,#0xF
   \   00000028   010180E0           ADD      R0,R0,R1, LSL #+2
   \   0000002C   D01090E5           LDR      R1,[R0, #+208]
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   3040BDE8           POP      {R4,R5,LR}       ;; Pop
   \   00000038   ........           _BF      wstrcpy,??wstrcpy??rA  ;; tailcall
    752              return;
    753            }
    754            if ((((unsigned int)s)>>28)!=0x0A) return;
   \                     ??ESI_0:
   \   0000003C   0A0050E3           CMP      R0,#+10
   \   00000040   3080BD18           POPNE    {R4,R5,PC}
   \   00000044   030000EA           B        ??ESI_1
    755            while((c=*s++))
    756            {
    757              wsaddwchar(ws,char8to16(c));
   \                     ??ESI_2:
   \   00000048   ........           _BLF     char8to16,??char8to16??rA
   \   0000004C   0010A0E1           MOV      R1,R0
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   ........           _BLF     wsaddwchar,??wsaddwchar??rA
    758            }
   \                     ??ESI_1:
   \   00000058   ........           LDRB     R0,[R4], #+1
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   F8FFFF1A           BNE      ??ESI_2
   \   00000064   3080BDE8           POP      {R4,R5,PC}       ;; return
    759          }
    760          

   \                                 In segment CODE, align 4, keep-with-next
    761          __thumb void FlashSMS(char * dest, char * source)
    762          {
   \                     FlashSMS:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
    763            IDLECSM *icsm=FindCSMbyID(CSM_root.idle_id);
   \   00000004   ....               LDR      R0,??DataTable7  ;; CSM_root + 4
   \   00000006   0E00               MOVS     R6,R1
   \   00000008   0068               LDR      R0,[R0, #+0]
   \   0000000A   ........           _BLF     FindCSMbyID,??FindCSMbyID??rT
   \   0000000E   0500               MOVS     R5,R0
    764          
    765            memcpy(dest+0x0A,source,0x0D);
   \   00000010   0D22               MOVS     R2,#+13
   \   00000012   3100               MOVS     R1,R6
   \   00000014   2000               MOVS     R0,R4
   \   00000016   0A30               ADDS     R0,R0,#+10
   \   00000018   ........           _BLF     memcpy,??memcpy??rT
    766          
    767            if (icsm->flashSMS)
   \   0000001C   EC35               ADDS     R5,R5,#+236
   \   0000001E   2878               LDRB     R0,[R5, #+0]
   \   00000020   0028               CMP      R0,#+0
   \   00000022   0CD0               BEQ      ??FlashSMS_0
    768            {
    769              icsm->flashSMS=0;
   \   00000024   0020               MOVS     R0,#+0
   \   00000026   2870               STRB     R0,[R5, #+0]
    770              dest-=0xB8;
   \   00000028   B83C               SUBS     R4,R4,#+184
    771              switch (*dest)
   \   0000002A   2078               LDRB     R0,[R4, #+0]
   \   0000002C   0028               CMP      R0,#+0
   \   0000002E   04D0               BEQ      ??FlashSMS_1
   \   00000030   0828               CMP      R0,#+8
   \   00000032   04D1               BNE      ??FlashSMS_0
    772              {
    773              case 0x08:*dest=0x18;    break;
   \   00000034   1820               MOVS     R0,#+24
   \   00000036   2070               STRB     R0,[R4, #+0]
   \   00000038   70BD               POP      {R4-R6,PC}
    774              case 0x00:*dest=0xF0;    break;
   \                     ??FlashSMS_1:
   \   0000003A   F020               MOVS     R0,#+240
   \   0000003C   2070               STRB     R0,[R4, #+0]
    775              }
    776            }
    777          }
   \                     ??FlashSMS_0:
   \   0000003E   70BD               POP      {R4-R6,PC}       ;; return
    778          

   \                                 In segment CODE, align 4, keep-with-next, root
    779          __root __arm void unpack(void * data, int cmd)
    780          {
    781          }
   \                     unpack:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    782          
    783          
    784          //Патчи
    785          #pragma diag_suppress=Pe177

   \                                 In segment PATCH_MAKEFLASH, align 4, align-sorted, root
   \   00000000   ........           DC32 FlashSMS
    786          __root static const int NEW_MAKEFLASH @ "PATCH_MAKEFLASH" =(int)FlashSMS;

   \                                 In segment PATCH_ONDRAW, align 4, align-sorted, root
   \   00000000   ........           DC32 redraw
    787          __root static const int NEW_ONDRAW @ "PATCH_ONDRAW" =(int)redraw;

   \                                 In segment PATCH_ONKEY, align 4, align-sorted, root
   \   00000000   ........           DC32 doit
    788          __root static const int NEW_ONKEY @ "PATCH_ONKEY" =(int)doit;

   \                                 In segment PATCH_ONCREATE, align 4, align-sorted, root
   \   00000000   ........           DC32 main
    789          __root static const int NEW_ONCREATE @ "PATCH_ONCREATE" = (int)main;

   \                                 In segment PATCH_CSMSIZE, align 4, align-sorted, root
   \   00000000   F0000000           DC32 240

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   20000000           DC8      " ",+0,+0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   20000000           DC8      " ",+0,+0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     CSM_root + 4

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     FindCSMbyID

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   ........           DC32     malloc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   ........           DC32     memcpy

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   ........           DC32     zeromem

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   ........           DC32     fopen

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   ........           DC32     fread

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   ........           DC32     fclose

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable28:
   \   00000000   ........           DC32     mfree

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   ........           DC32     wstrlen

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   ........           DC32     ws2ascii

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   ........           DC32     AllocWS

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   ........           DC32     strlen

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable34:
   \   00000000   ........           DC32     strcat

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable36:
   \   00000000   ........           DC32     char8to16

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable37:
   \   00000000   ........           DC32     wsaddwchar

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "SMS">`:
   \   00000000   534D5300           DC8 "SMS"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Flash">`:
   \   00000000   466C61736800       DC8 "Flash"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%02X\\\\%02X">`:
   \   00000000   253032585C25       DC8 "%02X\\%02X"
   \              30325800    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2000               DC8 " "

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257400             DC8 "%t"
    790          __root static const int NEW_CSMSIZE @ "PATCH_CSMSIZE" =sizeof(IDLECSM);
    791          

   Maximum stack usage in bytes:

     Function      CSTACK
     --------      ------
     ESI              12
     FlashSMS         16
     OpenABRecord     48
     UnPackAB        252
     char8to16         0
     cnv               8
     doit            392
     ed_inp_redraw    56
     gmproc           12
     main              8
     menup1            0
     menup2            0
     menup3            0
     menup4            0
     onKeyGUI         88
     redraw          372
     resize           12
     uni2cp1251        0
     unpack            0
     ws2asciz         20


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     fname                      24
     ABpath                     68
     dsRects                    32
     color                       4
     main                      104
     keytab                    100
     dos2unicode               384
     menup1                      4
     menup2                      4
     menup3                      4
     menup4                      4
     uni2cp1251                 40
     ws2asciz                   64
     cnv                       128
     UnPackAB                  932
     onKeyGUI                  264
     gmproc                     44
     icons                     200
     skeys                      24
     menuskey                   48
     skey                        8
     menuprocs                  16
     char8to16                  52
     OpenABRecord              356
     doit                      988
     ed_inp_redraw             172
     redraw                    632
     resize                    140
     ESI                       104
     FlashSMS                   64
     unpack                      4
     NEW_MAKEFLASH               4
     NEW_ONDRAW                  4
     NEW_ONKEY                   4
     NEW_ONCREATE                4
     NEW_CSMSIZE                 4
     ??DataTable0                4
     ??DataTable5                4
     ??DataTable7                4
     ??DataTable21               4
     ??DataTable22               4
     ??DataTable23               4
     ??DataTable24               4
     ??DataTable25               4
     ??DataTable26               4
     ??DataTable27               4
     ??DataTable28               4
     ??DataTable29               4
     ??DataTable30               4
     ??DataTable31               4
     ??DataTable32               4
     ??DataTable34               4
     ??DataTable36               4
     ??DataTable37               4
     ?<Constant "SMS">           4
     ?<Constant "Flash">         8
     ?<Constant "">              1
     ?<Constant "%02X\\%02X">   12
     ?<Constant " ">             2
     ?<Constant "%t">            3
      Others                   680

 
 3 508 bytes in segment CODE
    30 bytes in segment DATA_C
 1 196 bytes in segment DEBUG1
   152 bytes in segment DEBUG2
   816 bytes in segment DEBUG3
    92 bytes in segment DEBUG4
     4 bytes in segment PATCH_CSMSIZE
     4 bytes in segment PATCH_MAKEFLASH
     4 bytes in segment PATCH_ONCREATE
     4 bytes in segment PATCH_ONDRAW
     4 bytes in segment PATCH_ONKEY
 
 4 176 bytes of CODE  memory (+ 680 bytes shared)
   958 bytes of CONST memory

Errors: none
Warnings: none
