##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.40A/W32 EVALUATION    27/Aug/2006  12:41:47 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\ARM\TED\main.c                                    #
#    Command line    =  E:\ARM\TED\main.c -lC E:\ARM\TED\Release\List\ -o    #
#                       E:\ARM\TED\Release\Obj\ -s9 --no_unroll              #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None -I D:\IARARM\ARM\INC\                     #
#    List file       =  E:\ARM\TED\Release\List\main.lst                     #
#    Object file     =  E:\ARM\TED\Release\Obj\main.r79                      #
#                                                                            #
#                                                                            #
##############################################################################

E:\ARM\TED\main.c
      1          #include "E:\ARM\swilib.h"
      2          

   \                                 In segment DATA_I, align 4, align-sorted
      3          int menusoftkeys[]={0,1,2};
   \                     menusoftkeys:
   \   00000000                      DS8 12
   \   0000000C                      REQUIRE `?<Initializer for menusoftkeys>`
      4          

   \                                 In segment DATA_I, align 4, align-sorted
      5          SOFTKEY_DESC menu_sk[]=
   \                     menu_sk:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for menu_sk>`
      6          {
      7            {0x0018,0x0000,(int)"Select"},
      8            {0x0001,0x0000,(int)"Back"},
      9            {0x003D,0x0000,(int)"+"}
     10          };
     11          

   \                                 In segment DATA_I, align 4, align-sorted
     12          SOFTKEYSTAB menu_skt=
   \                     menu_skt:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for menu_skt>`
     13          {
     14            menu_sk,0
     15          };
     16          
     17          #define icon 0
     18          

   \                                 In segment DATA_I, align 4, align-sorted
     19          char t_bm1[]="BM1 000000000";
   \                     t_bm1:
   \   00000000                      DS8 16
   \   00000010                      REQUIRE `?<Initializer for t_bm1>`

   \                                 In segment DATA_I, align 4, align-sorted
     20          char t_bm2[]="BM2 000000000";
   \                     t_bm2:
   \   00000000                      DS8 16
   \   00000010                      REQUIRE `?<Initializer for t_bm2>`

   \                                 In segment DATA_I, align 4, align-sorted
     21          char t_bm3[]="BM3 000000000";
   \                     t_bm3:
   \   00000000                      DS8 16
   \   00000010                      REQUIRE `?<Initializer for t_bm3>`

   \                                 In segment DATA_I, align 4, align-sorted
     22          char t_bm4[]="BM4 000000000";
   \                     t_bm4:
   \   00000000                      DS8 16
   \   00000010                      REQUIRE `?<Initializer for t_bm4>`
     23          

   \                                 In segment DATA_Z, align 4, align-sorted
     24          WSHDR *info_ws;
   \                     info_ws:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     25          WSHDR *upinfo_ws;
   \                     upinfo_ws:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     26          WSHDR *e_ws;
   \                     e_ws:
   \   00000000                      DS8 4
     27          
     28          extern const unsigned int INK;
     29          extern const unsigned int PAPER;
     30          extern const unsigned int DISPLAY_LIGHT;
     31          

   \                                 In segment DATA_Z, align 4, align-sorted
     32          volatile int terminated=0;
   \                     terminated:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     33          volatile int loadmenu_id;
   \                     loadmenu_id:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     34          volatile int edit_id;
   \                     edit_id:
   \   00000000                      DS8 4
     35          

   \                                 In segment CODE, align 4, keep-with-next
     36          void DrwImg(IMGHDR *img, int x, int y, int *pen, int *brush)
     37          {
   \                     DrwImg:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   3C609DE5           LDR      R6,[SP, #+60]
   \   0000000C   0040A0E1           MOV      R4,R0
     38            RECT rc;
     39            DRWOBJ drwobj;
     40            StoreXYWHtoRECT(&rc,x,y,img->w,img->h);
   \   00000010   0100D4E5           LDRB     R0,[R4, #+1]
   \   00000014   0350A0E1           MOV      R5,R3
   \   00000018   01002DE9           PUSH     {R0}
   \   0000001C   0030D4E5           LDRB     R3,[R4, #+0]
   \   00000020   04008DE2           ADD      R0,SP,#+4
   \   00000024   330100EF           SWI      +307
     41            SetPropTo_Obj5(&drwobj,&rc,0,img);
   \   00000028   0430A0E1           MOV      R3,R4
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   04108DE2           ADD      R1,SP,#+4
   \   00000034   0C008DE2           ADD      R0,SP,#+12
   \   00000038   510100EF           SWI      +337
     42            SetColor(&drwobj,pen,brush);
   \   0000003C   0620A0E1           MOV      R2,R6
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   0C008DE2           ADD      R0,SP,#+12
   \   00000048   4B0100EF           SWI      +331
     43            DrawObject(&drwobj);
   \   0000004C   0C008DE2           ADD      R0,SP,#+12
   \   00000050   2A0100EF           SWI      +298
     44          }
   \   00000054   30D08DE2           ADD      SP,SP,#+48
   \   00000058   7080BDE8           POP      {R4-R6,PC}       ;; return
     45          

   \                                 In segment DATA_Z, align 4, align-sorted
     46          volatile unsigned int editmode=0;
   \                     editmode:
   \   00000000                      DS8 4

   \                                 In segment DATA_I, align 4, align-sorted
     47          volatile int stk_fhandle=-1;
   \                     stk_fhandle:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for stk_fhandle>`
     48          
     49          //‘лаг необходимости перерисовать экран

   \                                 In segment DATA_I, align 4, align-sorted
     50          volatile unsigned int draw_mode=255;
   \                     draw_mode:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for draw_mode>`

   \                                 In segment DATA_I, align 4, align-sorted
     51          volatile unsigned int font_size=6;
   \                     font_size:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for font_size>`
     52          

   \                                 In segment DATA_Z, align 4, align-sorted
     53          volatile unsigned int clip_pasted;
   \                     clip_pasted:
   \   00000000                      DS8 4
     54          
     55          typedef struct
     56          {
     57            GUI gui;
     58          //  WSHDR *ws1;
     59          //  WSHDR *ws2;
     60          //  int i1;
     61          }MAIN_GUI;
     62          
     63          typedef struct
     64          {
     65            CSM_RAM csm;
     66            int gui_id;
     67          }MAIN_CSM;
     68          

   \                                 In segment DATA_C, align 4, align-sorted
     69          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
     70          

   \                                 In segment DATA_C, align 4, align-sorted
     71          const char bmpDiskAccess[12]={0xFC,0x86,0xB3,0xA9,0xB1,0xA9,0x81,0xFF,0,0,0,0};
   \                     bmpDiskAccess:
   \   00000000   FC86B3A9B1A9       DC8 252, 134, 179, 169, 177, 169, 129, 255, 0, 0, 0, 0
   \              81FF00000000

   \                                 In segment DATA_C, align 4, align-sorted
     72          const IMGHDR imgDiskAccess = {8,12,0x1,0,(char *)bmpDiskAccess};
   \                     imgDiskAccess:
   \   00000000   080C0100           DC8 8, 12, 1, 0
   \   00000004   ........           DC32 bmpDiskAccess
     73          
     74          //”казатель блока в верхнем стеке

   \                                 In segment DATA_Z, align 4, align-sorted
     75          int u_disk; //ƒисковый указатель верхнего стека (в блоках по STKSZ50)
   \                     u_disk:
   \   00000000                      DS8 4
     76          //”казатель блока в нижнем стеке

   \                                 In segment DATA_Z, align 4, align-sorted
     77          int d_disk; //ƒисковый указатель нижнего стека (в блоках по STKSZ50)
   \                     d_disk:
   \   00000000                      DS8 4
     78          

   \                                 In segment DATA_Z, align 4, align-sorted
     79          unsigned int usp; //”казатель на верхний стек
   \                     usp:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     80          unsigned int dsp; //”казатель на нижний стек
   \                     dsp:
   \   00000000                      DS8 4
     81          
     82          //‘лаг работы с диском
     83          #define FIRSTLOAD 1
     84          #define LOAD_UP 2
     85          #define LOAD_DOWN 4
     86          #define SAVE_UP 8
     87          #define SAVE_DOWN 16
     88          #define SAVE_FILE 32
     89          

   \                                 In segment DATA_I, align 4, align-sorted
     90          volatile int disk_access=FIRSTLOAD;
   \                     disk_access:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for disk_access>`
     91          

   \                                 In segment DATA_Z, align 4, align-sorted
     92          int cursor_cnt;
   \                     cursor_cnt:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     93          int disable_exit;
   \                     disable_exit:
   \   00000000                      DS8 4
     94          

   \                                 In segment DATA_Z, align 4, align-sorted
     95          int win_dos_koi;
   \                     win_dos_koi:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     96          unsigned int cursor_off;
   \                     cursor_off:
   \   00000000                      DS8 4
     97          
     98          extern const char ted_path[];
     99          

   \                                 In segment DATA_Z, align 4, align-sorted
    100          char stkfile[128];
   \                     stkfile:
   \   00000000                      DS8 128
    101          
    102          //—трока, на которую надо установить позицию в самом начале

   \                                 In segment DATA_Z, align 4, align-sorted
    103          unsigned long seek_to_line;
   \                     seek_to_line:
   \   00000000                      DS8 4
    104          //ќбщее количество строк

   \                                 In segment DATA_Z, align 4, align-sorted
    105          unsigned long total_line;
   \                     total_line:
   \   00000000                      DS8 4
    106          //Ќомер текущей строки (курсор)

   \                                 In segment DATA_Z, align 4, align-sorted
    107          unsigned long curline;
   \                     curline:
   \   00000000                      DS8 4
    108          //“екущий символ дл€ редактировани€ (курсор)

   \                                 In segment DATA_Z, align 4, align-sorted
    109          unsigned int curpos;
   \                     curpos:
   \   00000000                      DS8 4
    110          //Ќомер верхней отображаемой строки

   \                                 In segment DATA_Z, align 4, align-sorted
    111          unsigned long viewline;
   \                     viewline:
   \   00000000                      DS8 4
    112          //Ќомер самого левого отображаемого символа

   \                                 In segment DATA_Z, align 4, align-sorted
    113          unsigned int viewpos;
   \                     viewpos:
   \   00000000                      DS8 4
    114          

   \                                 In segment DATA_Z, align 4, align-sorted
    115          unsigned int max_y;
   \                     max_y:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    116          unsigned int max_y_emode;
   \                     max_y_emode:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    117          unsigned int max_x;
   \                     max_x:
   \   00000000                      DS8 4
    118          
    119          //---------------------------------
    120          // —осто€ние конвертора
    121          //---------------------------------
    122          //unsigned int CSM;
    123          //—имвол конца строки в конверторе
    124          //unsigned int eolsymb;
    125          
    126          //ѕрототипы конверторов
    127          unsigned int ConvertFormat(int fin,int fs,int fmt);
    128          unsigned int ConvertSimple(int fin,int fs);
    129          
    130          
    131          #define SSIZE 131072
    132          //–азмер стеков

   \                                 In segment DATA_I, align 4, align-sorted
    133          unsigned int STKSZ=(SSIZE);
   \                     STKSZ:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for STKSZ>`
    134          //–азмер, при котором происходит запись во временный файл

   \                                 In segment DATA_I, align 4, align-sorted
    135          unsigned int STKMAX=(SSIZE-6000);
   \                     STKMAX:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for STKMAX>`
    136          //–азмер, при котором происходит чтение из временного файла

   \                                 In segment DATA_I, align 4, align-sorted
    137          unsigned int STKMIN=(6000);
   \                     STKMIN:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for STKMIN>`
    138          //–азмер блока во временном файле

   \                                 In segment DATA_I, align 4, align-sorted
    139          unsigned int STKSZ50=(SSIZE/2);
   \                     STKSZ50:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for STKSZ50>`
    140          

   \                                 In segment DATA_Z, align 4, align-sorted
    141          char *ustk; //верхний стек строк
   \                     ustk:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    142          char *dstk; //нижний стек строк, строки хран€тс€ в обратном пор€дке
   \                     dstk:
   \   00000000                      DS8 4
    143          
    144          #define MAXBLOCK 1024

   \                                 In segment DATA_Z, align 4, align-sorted
    145          unsigned int dbat[MAXBLOCK]; //“аблица распределени€ блоков нижнего стека во временном файле
   \                     dbat:
   \   00000000                      DS8 4096

   \                                 In segment DATA_Z, align 4, align-sorted
    146          unsigned int ubat[MAXBLOCK]; //“аблица распределени€ блоков верхнего стека во временном файлe
   \                     ubat:
   \   00000000                      DS8 4096

   \                                 In segment DATA_Z, align 4, align-sorted
    147          char bfree[MAXBLOCK]; //“аблица зан€тости блоков (0 - свободен)
   \                     bfree:
   \   00000000                      DS8 1024
    148          

   \                                 In segment DATA_Z, align 4, align-sorted
    149          char font[4096]; //Ѕуфер дл€ шрифта
   \                     font:
   \   00000000                      DS8 4096

   \                                 In segment DATA_Z, align 4, align-sorted
    150          char editline[256]; //Ѕуфер дл€ редактировани€ строки
   \                     editline:
   \   00000000                      DS8 256

   \                                 In segment DATA_Z, align 4, align-sorted
    151          char filename[128];
   \                     filename:
   \   00000000                      DS8 128
    152          struct
    153          {
    154            char name[128]; //»м€ файла
    155            char font; //–азмер шрифта
    156            char fmt; //“ип форматера
    157            char codepage; // одировка
    158            char cursor_off; //≈сли 1 - выключен курсор при просмотре
    159            unsigned long line; //Ќомер строки дл€ перехода
    160            unsigned long total; //ќбщее количество. ≈сли не совпадает, переход по отношению
    161            unsigned long bookm1;
    162            unsigned long bookm2;
    163            unsigned long bookm3;
    164            unsigned long bookm4;

   \                                 In segment DATA_Z, align 4, align-sorted
    165          } HISTORY;
   \                     HISTORY:
   \   00000000                      DS8 156
    166          

   \                                 In segment DATA_Z, align 4, align-sorted
    167          char myscr[17*176];
   \                     myscr:
   \   00000000                      DS8 2992
    168          

   \                                 In segment DATA_I, align 4, align-sorted
    169          IMGHDR MyScrHdr = {132,176,0x1,0,myscr};
   \                     MyScrHdr:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for MyScrHdr>`
    170          
    171          
    172          /*GBSTMR tmr2sec;
    173          
    174          void tmr2sec_proc(void)
    175          {
    176            if ((disk_access)||(draw_mode>1))
    177            {
    178              REDRAW;
    179              GBS_StartTimerProc(&tmr2sec,262/2,tmr2sec_proc);
    180            }
    181          }
    182          
    183          void Start_tmr2sec(void)
    184          {
    185            GBS_StartTimerProc(&tmr2sec,262/2,tmr2sec_proc);
    186          }*/
    187          

   \                                 In segment DATA_Z, align 1, align-sorted
    188          volatile char Q_DiskError;
   \                     Q_DiskError:
   \   00000000                      DS8 1
    189          

   \                                 In segment CODE, align 4, keep-with-next
    190          void DiskErrorMsg(int mode)
    191          {
   \                     DiskErrorMsg:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    192            if (Q_DiskError&(1<<mode)) return; //“акое сообщение уже отобразили
   \   00000004   74609FE5           LDR      R6,??DiskErrorMsg_1  ;; Q_DiskError
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   1054A0E1           LSL      R5,R0,R4
   \   00000014   0000D6E5           LDRB     R0,[R6, #+0]
   \   00000018   000015E1           TST      R5,R0
   \   0000001C   7080BD18           POPNE    {R4-R6,PC}
    193            LockSched();
   \   00000020   460100EF           SWI      +326
    194            Q_DiskError|=(1<<mode);
   \   00000024   0000D6E5           LDRB     R0,[R6, #+0]
    195            switch(mode)
   \   00000028   040054E3           CMP      R4,#+4
   \   0000002C   000085E1           ORR      R0,R5,R0
   \   00000030   0000C6E5           STRB     R0,[R6, #+0]
   \   00000034   0F00008A           BHI      ??DiskErrorMsg_2
   \   00000038   010F8FE2           ADR      R0,??DiskErrorMsg_0
   \   0000003C   0400D0E7           LDRB     R0,[R0, R4]
   \   00000040   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??DiskErrorMsg_0:
   \   00000044   09070503           DC8      +9,+7,+5,+3
   \   00000048   01000000           DC8      +1,+0,+0,+0
    196            {
    197            case 4:
    198              ShowMSG(1,(int)"Can't create or write outfile!");
   \                     ??DiskErrorMsg_3:
   \   0000004C   30109FE5           LDR      R1,??DiskErrorMsg_1+0x4  ;; `?<Constant "Can\\'t create or write...">`
   \   00000050   060000EA           B        ??DiskErrorMsg_4
    199              break;
    200            case 3:
    201              ShowMSG(1,(int)"Can't open tempfile!");
   \                     ??DiskErrorMsg_5:
   \   00000054   2C109FE5           LDR      R1,??DiskErrorMsg_1+0x8  ;; `?<Constant "Can\\'t open tempfile!">`
   \   00000058   040000EA           B        ??DiskErrorMsg_4
    202              break;
    203            case 2:
    204              ShowMSG(1,(int)"Can't seek in tempfile!");
   \                     ??DiskErrorMsg_6:
   \   0000005C   28109FE5           LDR      R1,??DiskErrorMsg_1+0xC  ;; `?<Constant "Can\\'t seek in tempfile!">`
   \   00000060   020000EA           B        ??DiskErrorMsg_4
    205              break;
    206            case 1:
    207              ShowMSG(1,(int)"Can't write tempfile!");
   \                     ??DiskErrorMsg_7:
   \   00000064   24109FE5           LDR      R1,??DiskErrorMsg_1+0x10  ;; `?<Constant "Can\\'t write tempfile!">`
   \   00000068   000000EA           B        ??DiskErrorMsg_4
    208              break;
    209            case 0:
    210              ShowMSG(1,(int)"Can't read tempfile!");
   \                     ??DiskErrorMsg_8:
   \   0000006C   20109FE5           LDR      R1,??DiskErrorMsg_1+0x14  ;; `?<Constant "Can\\'t read tempfile!">`
   \                     ??DiskErrorMsg_4:
   \   00000070   0100A0E3           MOV      R0,#+1
   \   00000074   480100EF           SWI      +328
    211              break;
    212            }
    213            UnlockSched();
   \                     ??DiskErrorMsg_2:
   \   00000078   470100EF           SWI      +327
    214          }
   \   0000007C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??DiskErrorMsg_1:
   \   00000080   ........           DC32     Q_DiskError
   \   00000084   ........           DC32     `?<Constant "Can\\'t create or write...">`
   \   00000088   ........           DC32     `?<Constant "Can\\'t open tempfile!">`
   \   0000008C   ........           DC32     `?<Constant "Can\\'t seek in tempfile!">`
   \   00000090   ........           DC32     `?<Constant "Can\\'t write tempfile!">`
   \   00000094   ........           DC32     `?<Constant "Can\\'t read tempfile!">`
    215          

   \                                 In segment DATA_C, align 4, align-sorted
    216          const char wintranslation[128]=
   \                     wintranslation:
   \   00000000   5F5F275F223A       DC8 95, 95, 39, 95, 34, 58, 197, 216, 95, 37, 95, 60, 95, 95, 95, 95
   \              C5D85F255F3C
   \              5F5F5F5F    
   \   00000010   5F2727222207       DC8 95, 39, 39, 34, 34, 7, 45, 45, 95, 84, 95, 62, 95, 95, 95, 95, 255
   \              2D2D5F545F3E
   \              5F5F5F5FFF  
   \   00000021   F6F75FFD83B3       DC8 246, 247, 95, 253, 131, 179, 21, 240, 99, 242, 60, 191, 45, 82, 244
   \              15F063F23CBF
   \              2D52F4      
   \   00000030   F82B4969A3E7       DC8 248, 43, 73, 105, 163, 231, 20, 250, 241, 252, 243, 62, 95, 95, 95
   \              14FAF1FCF33E
   \              5F5F5F      
   \   0000003F   F58081828384       DC8 245, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139
   \              85868788898A
   \              8B          
   \   0000004C   8C8D8E8F9091       DC8 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152
   \              929394959697
   \              98          
   \   00000059   999A9B9C9D9E       DC8 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165
   \              9FA0A1A2A3A4
   \              A5          
   \   00000066   A6A7A8A9AAAB       DC8 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 224, 225, 226
   \              ACADAEAFE0E1
   \              E2          
   \   00000073   E3E4E5E6E7E8       DC8 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239
   \              E9EAEBECEDEE
   \              EF          
    217          {
    218            0x5F,0x5F,0x27,0x5F,0x22,0x3A,0xC5,0xD8,0x5F,0x25,0x5F,0x3C,0x5F,0x5F,0x5F,0x5F,
    219            0x5F,0x27,0x27,0x22,0x22,0x07,0x2D,0x2D,0x5F,0x54,0x5F,0x3E,0x5F,0x5F,0x5F,0x5F,
    220            0xFF,0xF6,0xF7,0x5F,0xFD,0x83,0xB3,0x15,0xF0,0x63,0xF2,0x3C,0xBF,0x2D,0x52,0xF4,
    221            0xF8,0x2B,'I' ,'i' ,0xA3,0xE7,0x14,0xFA,0xF1,0xFC,0xF3,0x3E,0x5F,0x5F,0x5F,0xF5,
    222            0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,
    223            0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,
    224            0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,
    225            0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF
    226          };
    227          

   \                                 In segment DATA_C, align 4, align-sorted
    228          const char koi8translation[128]=
   \                     koi8translation:
   \   00000000   5F5F275F223A       DC8 95, 95, 39, 95, 34, 58, 197, 216, 95, 37, 95, 60, 95, 95, 95, 95
   \              C5D85F255F3C
   \              5F5F5F5F    
   \   00000010   5F2727222207       DC8 95, 39, 39, 34, 34, 7, 45, 45, 95, 84, 95, 62, 95, 95, 95, 95, 255
   \              2D2D5F545F3E
   \              5F5F5F5FFF  
   \   00000021   F6F7F1F35F69       DC8 246, 247, 241, 243, 95, 105, 245, 240, 99, 242, 60, 191, 163, 82
   \              F5F063F23CBF
   \              A352        
   \   0000002F   F4F82B5FF0F2       DC8 244, 248, 43, 95, 240, 242, 231, 73, 244, 241, 252, 243, 62, 95
   \              E749F4F1FCF3
   \              3E5F        
   \   0000003D   835FF5EEA0A1       DC8 131, 95, 245, 238, 160, 161, 230, 164, 165, 228, 163, 229, 168, 169
   \              E6A4A5E4A3E5
   \              A8A9        
   \   0000004B   AAABACADAEAF       DC8 170, 171, 172, 173, 174, 175, 239, 224, 225, 226, 227, 166, 162
   \              EFE0E1E2E3A6
   \              A2          
   \   00000058   ECEBA7E8EDE9       DC8 236, 235, 167, 232, 237, 233, 231, 234, 158, 128, 129, 150, 132
   \              E7EA9E808196
   \              84          
   \   00000065   859483958889       DC8 133, 148, 131, 149, 136, 137, 138, 139, 140, 141, 142, 143, 159
   \              8A8B8C8D8E8F
   \              9F          
   \   00000072   909192938682       DC8 144, 145, 146, 147, 134, 130, 156, 155, 135, 152, 157, 153, 151
   \              9C9B87989D99
   \              97          
   \   0000007F   9A                 DC8 154
    229          {
    230            0x5F,0x5F,0x27,0x5F,0x22,0x3A,0xC5,0xD8,0x5F,0x25,0x5F,0x3C,0x5F,0x5F,0x5F,0x5F,
    231            0x5F,0x27,0x27,0x22,0x22,0x07,0x2D,0x2D,0x5F,0x54,0x5F,0x3E,0x5F,0x5F,0x5F,0x5F,
    232            0xFF,0xF6,0xF7,0xF1,0xF3,0x5F,'i' ,0xF5,0xF0,0x63,0xF2,0x3C,0xBF,0xA3,0x52,0xF4,
    233            0xF8,0x2B,0x5F,0xF0,0xF2,0xE7,'I' ,0xF4,0xF1,0xFC,0xF3,0x3E,0x5F,0x83,0x5F,0xF5,
    234          
    235            0xEE,0xA0,0xA1,0xE6,0xA4,0xA5,0xE4,0xA3,0xE5,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,
    236            0xAF,0xEF,0xE0,0xE1,0xE2,0xE3,0xA6,0xA2,0xEC,0xEB,0xA7,0xE8,0xED,0xE9,0xE7,0xEA,
    237            0x9E,0x80,0x81,0x96,0x84,0x85,0x94,0x83,0x95,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,
    238            0x8F,0x9F,0x90,0x91,0x92,0x93,0x86,0x82,0x9C,0x9B,0x87,0x98,0x9D,0x99,0x97,0x9A
    239          };
    240          

   \                                 In segment DATA_C, align 4, align-sorted
    241          const unsigned short dos2unicode[128]=
   \                     dos2unicode:
   \   00000000   100411041204       DC16 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050
   \              130414041504
   \              160417041804
   \              19041A04    
   \   00000016   1B041C041D04       DC16 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061
   \              1E041F042004
   \              210422042304
   \              24042504    
   \   0000002C   260427042804       DC16 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072
   \              29042A042B04
   \              2C042D042E04
   \              2F043004    
   \   00000042   310432043304       DC16 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083
   \              340435043604
   \              370438043904
   \              3A043B04    
   \   00000058   3C043D043E04       DC16 1084, 1085, 1086, 1087, 45, 45, 45, 166, 43, 166, 166, 172, 172
   \              3F042D002D00
   \              2D00A6002B00
   \              A600A600AC00
   \              AC00        
   \   00000072   A600A600AC00       DC16 166, 166, 172, 45, 45, 45, 172, 76, 43, 84, 43, 45, 43, 166, 166
   \              2D002D002D00
   \              AC004C002B00
   \              54002B002D00
   \              2B00A600A600
   \   00000090   4C003304A600       DC16 76, 1075, 166, 84, 166, 61, 43, 166, 166, 84, 84, 76, 76, 45, 1075
   \              5400A6003D00
   \              2B00A600A600
   \              540054004C00
   \              4C002D003304
   \   000000AE   2B002B002D00       DC16 43, 43, 45, 45, 45, 45, 166, 166, 45, 1088, 1089, 1090, 1091, 1092
   \              2D002D002D00
   \              A600A6002D00
   \              400441044204
   \              43044404    
   \   000000CA   450446044704       DC16 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103
   \              480449044A04
   \              4B044C044D04
   \              4E044F04    
   \   000000E0   010451040404       DC16 1025, 1105, 1028, 1108, 1031, 1111, 1038, 1118, 176, 8226, 183
   \              540407045704
   \              0E045E04B000
   \              2220B700    
   \   000000F6   76001621A400       DC16 118, 8470, 164, 166, 160
   \              A600A000    
    242          {
    243            0x0410,0x0411,0x0412,0x0413,0x0414,0x0415,0x0416,0x0417,
    244            0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,0x041F,
    245            0x0420,0x0421,0x0422,0x0423,0x0424,0x0425,0x0426,0x0427,
    246            0x0428,0x0429,0x042A,0x042B,0x042C,0x042D,0x042E,0x042F,
    247            0x0430,0x0431,0x0432,0x0433,0x0434,0x0435,0x0436,0x0437,
    248            0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,0x043F,
    249            0x002D,0x002D,0x002D,0x00A6,0x002B,0x00A6,0x00A6,0x00AC,
    250            0x00AC,0x00A6,0x00A6,0x00AC,0x002D,0x002D,0x002D,0x00AC,
    251            0x004C,0x002B,0x0054,0x002B,0x002D,0x002B,0x00A6,0x00A6,
    252            0x004C,0x0433,0x00A6,0x0054,0x00A6,0x003D,0x002B,0x00A6,
    253            0x00A6,0x0054,0x0054,0x004C,0x004C,0x002D,0x0433,0x002B,
    254            0x002B,0x002D,0x002D,0x002D,0x002D,0x00A6,0x00A6,0x002D,
    255            0x0440,0x0441,0x0442,0x0443,0x0444,0x0445,0x0446,0x0447,
    256            0x0448,0x0449,0x044A,0x044B,0x044C,0x044D,0x044E,0x044F,
    257            0x0401,0x0451,0x0404,0x0454,0x0407,0x0457,0x040E,0x045E,
    258            0x00B0,0x2022,0x00B7,0x0076,0x2116,0x00A4,0x00A6,0x00A0
    259          };
    260          

   \                                 In segment CODE, align 4, keep-with-next
    261          unsigned int char8to16(int c)
    262          {
    263            if (c<32) return('_');
   \                     char8to16:
   \   00000000   200050E3           CMP      R0,#+32
   \   00000004   5F00A0B3           MOVLT    R0,#+95
   \   00000008   1EFF2FB1           BXLT     LR
    264            if (c>=128)
   \   0000000C   800050E3           CMP      R0,#+128
   \   00000010   1EFF2FB1           BXLT     LR
    265            {
    266              switch(win_dos_koi)
   \   00000014   ........           LDR      R1,??DataTable59  ;; win_dos_koi
   \   00000018   001091E5           LDR      R1,[R1, #+0]
   \   0000001C   011051E2           SUBS     R1,R1,#+1
   \   00000020   0200000A           BEQ      ??char8to16_0
   \   00000024   011051E2           SUBS     R1,R1,#+1
   \   00000028   0200000A           BEQ      ??char8to16_1
   \   0000002C   040000EA           B        ??char8to16_2
    267              {
    268              case 1:
    269                //Win->Dos
    270                c=wintranslation[c-128];
   \                     ??char8to16_0:
   \   00000030   ........           LDR      R1,??DataTable5  ;; wintranslation
   \   00000034   000000EA           B        ??char8to16_3
    271                break;
    272              case 2:
    273                //Koi8->Dos
    274                c=koi8translation[c-128];
   \                     ??char8to16_1:
   \   00000038   ........           LDR      R1,??DataTable6  ;; koi8translation
   \                     ??char8to16_3:
   \   0000003C   010080E0           ADD      R0,R0,R1
   \   00000040   800050E5           LDRB     R0,[R0, #-128]
    275                break;
    276              }
    277              return(dos2unicode[c-128]);
   \                     ??char8to16_2:
   \   00000044   0C209FE5           LDR      R2,??char8to16_4  ;; dos2unicode
   \   00000048   FF10E0E3           MVN      R1,#+255
   \   0000004C   800082E0           ADD      R0,R2,R0, LSL #+1
   \   00000050   B00091E1           LDRH     R0,[R1, +R0]
   \   00000054   1EFF2FE1           BX       LR               ;; return
   \                     ??char8to16_4:
   \   00000058   ........           DC32     dos2unicode
    278            }
    279            return(c);
    280          }
    281          
    282          // RECODING TABLE
    283          //utf16,cp866,cp1251,koi8
    284          //const far unsigned int unicode2char[]=
    285          typedef struct
    286          {
    287            unsigned short u;
    288            char dos;
    289            char win;
    290            char koi8;
    291          } TUNICODE2CHAR;
    292          

   \                                 In segment DATA_C, align 4, align-sorted
    293          const TUNICODE2CHAR unicode2char[]=
   \                     unicode2char:
   \   00000000   1004               DC16 1040
   \   00000002   80C0E100           DC8 128, 192, 225, 0
   \   00000006   1104               DC16 1041
   \   00000008   81C1E200           DC8 129, 193, 226, 0
   \   0000000C   1204               DC16 1042
   \   0000000E   82C2F700           DC8 130, 194, 247, 0
   \   00000012   1304               DC16 1043
   \   00000014   83C3E700           DC8 131, 195, 231, 0
   \   00000018   1404               DC16 1044
   \   0000001A   84C4E400           DC8 132, 196, 228, 0
   \   0000001E   1504               DC16 1045
   \   00000020   85C5E500           DC8 133, 197, 229, 0
   \   00000024   1604               DC16 1046
   \   00000026   86C6F600           DC8 134, 198, 246, 0
   \   0000002A   1704               DC16 1047
   \   0000002C   87C7FA00           DC8 135, 199, 250, 0
   \   00000030   1804               DC16 1048
   \   00000032   88C8E900           DC8 136, 200, 233, 0
   \   00000036   1904               DC16 1049
   \   00000038   89C9EA00           DC8 137, 201, 234, 0
   \   0000003C   1A04               DC16 1050
   \   0000003E   8ACAEB00           DC8 138, 202, 235, 0
   \   00000042   1B04               DC16 1051
   \   00000044   8BCBEC00           DC8 139, 203, 236, 0
   \   00000048   1C04               DC16 1052
   \   0000004A   8CCCED00           DC8 140, 204, 237, 0
   \   0000004E   1D04               DC16 1053
   \   00000050   8DCDEE00           DC8 141, 205, 238, 0
   \   00000054   1E04               DC16 1054
   \   00000056   8ECEEF00           DC8 142, 206, 239, 0
   \   0000005A   1F04               DC16 1055
   \   0000005C   8FCFF000           DC8 143, 207, 240, 0
   \   00000060   2004               DC16 1056
   \   00000062   90D0F200           DC8 144, 208, 242, 0
   \   00000066   2104               DC16 1057
   \   00000068   91D1F300           DC8 145, 209, 243, 0
   \   0000006C   2204               DC16 1058
   \   0000006E   92D2F400           DC8 146, 210, 244, 0
   \   00000072   2304               DC16 1059
   \   00000074   93D3F500           DC8 147, 211, 245, 0
   \   00000078   2404               DC16 1060
   \   0000007A   94D4E600           DC8 148, 212, 230, 0
   \   0000007E   2504               DC16 1061
   \   00000080   95D5E800           DC8 149, 213, 232, 0
   \   00000084   2604               DC16 1062
   \   00000086   96D6E300           DC8 150, 214, 227, 0
   \   0000008A   2704               DC16 1063
   \   0000008C   97D7FE00           DC8 151, 215, 254, 0
   \   00000090   2804               DC16 1064
   \   00000092   98D8FB00           DC8 152, 216, 251, 0
   \   00000096   2904               DC16 1065
   \   00000098   99D9FD00           DC8 153, 217, 253, 0
   \   0000009C   2A04               DC16 1066
   \   0000009E   9ADAFF00           DC8 154, 218, 255, 0
   \   000000A2   2B04               DC16 1067
   \   000000A4   9BDBF900           DC8 155, 219, 249, 0
   \   000000A8   2C04               DC16 1068
   \   000000AA   9CDCF800           DC8 156, 220, 248, 0
   \   000000AE   2D04               DC16 1069
   \   000000B0   9DDDFC00           DC8 157, 221, 252, 0
   \   000000B4   2E04               DC16 1070
   \   000000B6   9EDEE000           DC8 158, 222, 224, 0
   \   000000BA   2F04               DC16 1071
   \   000000BC   9FDFF100           DC8 159, 223, 241, 0
   \   000000C0   0204               DC16 1026
   \   000000C2   5F805F00           DC8 95, 128, 95, 0
   \   000000C6   0304               DC16 1027
   \   000000C8   5F815F00           DC8 95, 129, 95, 0
   \   000000CC   0904               DC16 1033
   \   000000CE   5F8A5F00           DC8 95, 138, 95, 0
   \   000000D2   0A04               DC16 1034
   \   000000D4   5F8C5F00           DC8 95, 140, 95, 0
   \   000000D8   0C04               DC16 1036
   \   000000DA   5F8D5F00           DC8 95, 141, 95, 0
   \   000000DE   0B04               DC16 1035
   \   000000E0   5F8E5F00           DC8 95, 142, 95, 0
   \   000000E4   0F04               DC16 1039
   \   000000E6   5F8F5F00           DC8 95, 143, 95, 0
   \   000000EA   0E04               DC16 1038
   \   000000EC   F6A15F00           DC8 246, 161, 95, 0
   \   000000F0   0804               DC16 1032
   \   000000F2   4AA34A00           DC8 74, 163, 74, 0
   \   000000F6   0904               DC16 1033
   \   000000F8   83A5BD00           DC8 131, 165, 189, 0
   \   000000FC   0104               DC16 1025
   \   000000FE   F0A8B300           DC8 240, 168, 179, 0
   \   00000102   0404               DC16 1028
   \   00000104   F2AAB400           DC8 242, 170, 180, 0
   \   00000108   0704               DC16 1031
   \   0000010A   F4AFB700           DC8 244, 175, 183, 0
   \   0000010E   0604               DC16 1030
   \   00000110   49B2B600           DC8 73, 178, 182, 0
   \   00000114   0504               DC16 1029
   \   00000116   53BD5300           DC8 83, 189, 83, 0
   \   0000011A   3004               DC16 1072
   \   0000011C   A0E0C100           DC8 160, 224, 193, 0
   \   00000120   3104               DC16 1073
   \   00000122   A1E1C200           DC8 161, 225, 194, 0
   \   00000126   3204               DC16 1074
   \   00000128   A2E2D700           DC8 162, 226, 215, 0
   \   0000012C   3304               DC16 1075
   \   0000012E   A3E3C700           DC8 163, 227, 199, 0
   \   00000132   3404               DC16 1076
   \   00000134   A4E4C400           DC8 164, 228, 196, 0
   \   00000138   3504               DC16 1077
   \   0000013A   A5E5C500           DC8 165, 229, 197, 0
   \   0000013E   3604               DC16 1078
   \   00000140   A6E6D600           DC8 166, 230, 214, 0
   \   00000144   3704               DC16 1079
   \   00000146   A7E7DA00           DC8 167, 231, 218, 0
   \   0000014A   3804               DC16 1080
   \   0000014C   A8E8C900           DC8 168, 232, 201, 0
   \   00000150   3904               DC16 1081
   \   00000152   A9E9CA00           DC8 169, 233, 202, 0
   \   00000156   3A04               DC16 1082
   \   00000158   AAEACB00           DC8 170, 234, 203, 0
   \   0000015C   3B04               DC16 1083
   \   0000015E   ABEBCC00           DC8 171, 235, 204, 0
   \   00000162   3C04               DC16 1084
   \   00000164   ACECCD00           DC8 172, 236, 205, 0
   \   00000168   3D04               DC16 1085
   \   0000016A   ADEDCE00           DC8 173, 237, 206, 0
   \   0000016E   3E04               DC16 1086
   \   00000170   AEEECF00           DC8 174, 238, 207, 0
   \   00000174   3F04               DC16 1087
   \   00000176   AFEFD000           DC8 175, 239, 208, 0
   \   0000017A   4004               DC16 1088
   \   0000017C   E0F0D200           DC8 224, 240, 210, 0
   \   00000180   4104               DC16 1089
   \   00000182   E1F1D300           DC8 225, 241, 211, 0
   \   00000186   4204               DC16 1090
   \   00000188   E2F2D400           DC8 226, 242, 212, 0
   \   0000018C   4304               DC16 1091
   \   0000018E   E3F3D500           DC8 227, 243, 213, 0
   \   00000192   4404               DC16 1092
   \   00000194   E4F4C600           DC8 228, 244, 198, 0
   \   00000198   4504               DC16 1093
   \   0000019A   E5F5C800           DC8 229, 245, 200, 0
   \   0000019E   4604               DC16 1094
   \   000001A0   E6F6C300           DC8 230, 246, 195, 0
   \   000001A4   4704               DC16 1095
   \   000001A6   E7F7DE00           DC8 231, 247, 222, 0
   \   000001AA   4804               DC16 1096
   \   000001AC   E8F8DB00           DC8 232, 248, 219, 0
   \   000001B0   4904               DC16 1097
   \   000001B2   E9F9DD00           DC8 233, 249, 221, 0
   \   000001B6   4A04               DC16 1098
   \   000001B8   EAFADF00           DC8 234, 250, 223, 0
   \   000001BC   4B04               DC16 1099
   \   000001BE   EBFBD900           DC8 235, 251, 217, 0
   \   000001C2   4C04               DC16 1100
   \   000001C4   ECFCD800           DC8 236, 252, 216, 0
   \   000001C8   4D04               DC16 1101
   \   000001CA   EDFDDC00           DC8 237, 253, 220, 0
   \   000001CE   4E04               DC16 1102
   \   000001D0   EEFEC000           DC8 238, 254, 192, 0
   \   000001D4   4F04               DC16 1103
   \   000001D6   EFFFD100           DC8 239, 255, 209, 0
   \   000001DA   5204               DC16 1106
   \   000001DC   5F905F00           DC8 95, 144, 95, 0
   \   000001E0   5304               DC16 1107
   \   000001E2   5F835F00           DC8 95, 131, 95, 0
   \   000001E6   5904               DC16 1113
   \   000001E8   5F9A5F00           DC8 95, 154, 95, 0
   \   000001EC   5A04               DC16 1114
   \   000001EE   5F9C5F00           DC8 95, 156, 95, 0
   \   000001F2   5C04               DC16 1116
   \   000001F4   5F9D5F00           DC8 95, 157, 95, 0
   \   000001F8   5B04               DC16 1115
   \   000001FA   5F9E5F00           DC8 95, 158, 95, 0
   \   000001FE   5F04               DC16 1119
   \   00000200   5F9F5F00           DC8 95, 159, 95, 0
   \   00000204   5E04               DC16 1118
   \   00000206   F7A25F00           DC8 247, 162, 95, 0
   \   0000020A   5804               DC16 1112
   \   0000020C   6ABC6A00           DC8 106, 188, 106, 0
   \   00000210   9104               DC16 1169
   \   00000212   A3B4AD00           DC8 163, 180, 173, 0
   \   00000216   5104               DC16 1105
   \   00000218   F1B8A300           DC8 241, 184, 163, 0
   \   0000021C   5404               DC16 1108
   \   0000021E   F3BAA400           DC8 243, 186, 164, 0
   \   00000222   5704               DC16 1111
   \   00000224   F5BFA700           DC8 245, 191, 167, 0
   \   00000228   5604               DC16 1110
   \   0000022A   69B3A600           DC8 105, 179, 166, 0
   \   0000022E   5504               DC16 1109
   \   00000230   73BE7300           DC8 115, 190, 115, 0
   \   00000234   A000               DC16 160
   \   00000236   5FA02000           DC8 95, 160, 32, 0
   \   0000023A   A400               DC16 164
   \   0000023C   5FA4FD00           DC8 95, 164, 253, 0
   \   00000240   A600               DC16 166
   \   00000242   5FA65F00           DC8 95, 166, 95, 0
   \   00000246   B000               DC16 176
   \   00000248   F8B09C00           DC8 248, 176, 156, 0
   \   0000024C   B700               DC16 183
   \   0000024E   FAB79E00           DC8 250, 183, 158, 0
   \   00000252   0000               DC16 0
   \   00000254   00000000           DC8 0, 0, 0, 0
    294          {
    295            // CAPITAL Cyrillic letters (base)
    296            0x410,0x80,0xC0,0xE1, // ј
    297            0x411,0x81,0xC1,0xE2, // Ѕ
    298            0x412,0x82,0xC2,0xF7, // ¬
    299            0x413,0x83,0xC3,0xE7, // √
    300            0x414,0x84,0xC4,0xE4, // ƒ
    301            0x415,0x85,0xC5,0xE5, // ≈
    302            0x416,0x86,0xC6,0xF6, // ∆
    303            0x417,0x87,0xC7,0xFA, // «
    304            0x418,0x88,0xC8,0xE9, // »
    305            0x419,0x89,0xC9,0xEA, // …
    306            0x41A,0x8A,0xCA,0xEB, //  
    307            0x41B,0x8B,0xCB,0xEC, // Ћ
    308            0x41C,0x8C,0xCC,0xED, // ћ
    309            0x41D,0x8D,0xCD,0xEE, // Ќ
    310            0x41E,0x8E,0xCE,0xEF, // ќ
    311            0x41F,0x8F,0xCF,0xF0, // ѕ
    312            0x420,0x90,0xD0,0xF2, // –
    313            0x421,0x91,0xD1,0xF3, // —
    314            0x422,0x92,0xD2,0xF4, // “
    315            0x423,0x93,0xD3,0xF5, // ”
    316            0x424,0x94,0xD4,0xE6, // ‘
    317            0x425,0x95,0xD5,0xE8, // ’
    318            0x426,0x96,0xD6,0xE3, // ÷
    319            0x427,0x97,0xD7,0xFE, // „
    320            0x428,0x98,0xD8,0xFB, // Ў
    321            0x429,0x99,0xD9,0xFD, // ў
    322            0x42A,0x9A,0xDA,0xFF, // Џ
    323            0x42B,0x9B,0xDB,0xF9, // џ
    324            0x42C,0x9C,0xDC,0xF8, // №
    325            0x42D,0x9D,0xDD,0xFC, // Ё
    326            0x42E,0x9E,0xDE,0xE0, // ё
    327            0x42F,0x9F,0xDF,0xF1, // я
    328            // CAPITAL Cyrillic letters (additional)
    329            0x402,'_',0x80,'_', // _ .*.*
    330            0x403,'_',0x81,'_', // _ .*.*
    331            0x409,'_',0x8A,'_', // _ .*.*
    332            0x40A,'_',0x8C,'_', // _ .*.*
    333            0x40C,'_',0x8D,'_', // _ .*.*
    334            0x40B,'_',0x8E,'_', // _ .*.*
    335            0x40F,'_',0x8F,'_', // _ .*.*
    336            0x40E,0xF6,0xA1,'_', // ° ...*
    337            0x408,0x4A,0xA3,0x4A, // _ .*.*
    338            0x409,0x83,0xA5,0xBD, // _ .*..
    339            0x401,0xF0,0xA8,0xB3, // ®
    340            0x404,0xF2,0xAA,0xB4, // ™
    341            0x407,0xF4,0xAF,0xB7, // ѓ
    342            0x406,0x49,0xB2,0xB6, // _ .*..
    343            0x405,0x53,0xBD,0x53, // _ .*.*
    344            // SMALL Cyrillic letters (base)
    345            0x430,0xA0,0xE0,0xC1, // а
    346            0x431,0xA1,0xE1,0xC2, // б
    347            0x432,0xA2,0xE2,0xD7, // в
    348            0x433,0xA3,0xE3,0xC7, // г
    349            0x434,0xA4,0xE4,0xC4, // д
    350            0x435,0xA5,0xE5,0xC5, // е
    351            0x436,0xA6,0xE6,0xD6, // ж
    352            0x437,0xA7,0xE7,0xDA, // з
    353            0x438,0xA8,0xE8,0xC9, // и
    354            0x439,0xA9,0xE9,0xCA, // й
    355            0x43A,0xAA,0xEA,0xCB, // к
    356            0x43B,0xAB,0xEB,0xCC, // л
    357            0x43C,0xAC,0xEC,0xCD, // м
    358            0x43D,0xAD,0xED,0xCE, // н
    359            0x43E,0xAE,0xEE,0xCF, // о
    360            0x43F,0xAF,0xEF,0xD0, // п
    361            0x440,0xE0,0xF0,0xD2, // р
    362            0x441,0xE1,0xF1,0xD3, // с
    363            0x442,0xE2,0xF2,0xD4, // т
    364            0x443,0xE3,0xF3,0xD5, // у
    365            0x444,0xE4,0xF4,0xC6, // ф
    366            0x445,0xE5,0xF5,0xC8, // х
    367            0x446,0xE6,0xF6,0xC3, // ц
    368            0x447,0xE7,0xF7,0xDE, // ч
    369            0x448,0xE8,0xF8,0xDB, // ш
    370            0x449,0xE9,0xF9,0xDD, // щ
    371            0x44A,0xEA,0xFA,0xDF, // ъ
    372            0x44B,0xEB,0xFB,0xD9, // ы
    373            0x44C,0xEC,0xFC,0xD8, // ь
    374            0x44D,0xED,0xFD,0xDC, // э
    375            0x44E,0xEE,0xFE,0xC0, // ю
    376            0x44F,0xEF,0xFF,0xD1, // €
    377            // SMALL Cyrillic letters (additional)
    378            0x452,'_',0x90,'_', // _ .*.*
    379            0x453,'_',0x83,'_', // _ .*.*
    380            0x459,'_',0x9A,'_', // _ .*.*
    381            0x45A,'_',0x9C,'_', // _ .*.*
    382            0x45C,'_',0x9D,'_', // _ .*.*
    383            0x45B,'_',0x9E,'_', // _ .*.*
    384            0x45F,'_',0x9F,'_', // _ .*.*
    385            0x45E,0xF7,0xA2,'_', // Ґ ...*
    386            0x458,0x6A,0xBC,0x6A, // _ .*.*
    387            0x491,0xA3,0xB4,0xAD, // _ .*..
    388            0x451,0xF1,0xB8,0xA3, // Є
    389            0x454,0xF3,0xBA,0xA4, // Ї
    390            0x457,0xF5,0xBF,0xA7, // њ
    391            0x456,0x69,0xB3,0xA6, // _ .*..
    392            0x455,0x73,0xBE,0x73, // _ .*.*
    393            0x0A0,'_',0xA0,0x20, // space .*..
    394            0x0A4,'_',0xA4,0xFD, // §   .*..
    395            0x0A6,'_',0xA6,'_', // ¶   .*.*
    396            0x0B0,0xF8,0xB0,0x9C, // ∞
    397            0x0B7,0xFA,0xB7,0x9E, // Ј
    398            // 0x2022,,0x95,0x95, //    .*..
    399            // 0x2116,0xFC,0xB9,0x23, // є   ...*
    400            // 0x2219,,0xF9,0x9E, //    .*..
    401            // 0x221A,0xFB,,0x96, // v   ..*.
    402            // 0x25A0,0xFE,,0x94, // ¶
    403            0x0000,0,0,0
    404          };
    405          

   \                                 In segment CODE, align 4, keep-with-next
    406          unsigned int char16to8(unsigned int c)
    407          {
    408            const TUNICODE2CHAR *p=unicode2char;
   \                     char16to8:
   \   00000000   70109FE5           LDR      R1,??char16to8_0  ;; unicode2char
    409            unsigned int i;
    410            if (c<32) return(' ');
   \   00000004   200050E3           CMP      R0,#+32
   \   00000008   2000A033           MOVCC    R0,#+32
   \   0000000C   1EFF2F31           BXCC     LR
    411            if (c<128) return(c);
   \   00000010   800050E3           CMP      R0,#+128
   \   00000014   0100002A           BCS      ??char16to8_1
   \   00000018   1EFF2FE1           BX       LR
    412            while((i=p->u))
    413            {
    414              if (c==i)
    415              {
    416                switch(win_dos_koi)
    417                {
    418                case 1:
    419          	//Win
    420          	return(p->win);
    421                case 2:
    422          	//Koi8
    423          	return(p->koi8);
    424                }
    425                return(p->dos);
    426              }
    427              p++;
   \                     ??char16to8_2:
   \   0000001C   061081E2           ADD      R1,R1,#+6
   \                     ??char16to8_1:
   \   00000020   B020D1E1           LDRH     R2,[R1, #+0]
   \   00000024   000052E3           CMP      R2,#+0
   \   00000028   0E00000A           BEQ      ??char16to8_3
   \   0000002C   020050E1           CMP      R0,R2
   \   00000030   F9FFFF1A           BNE      ??char16to8_2
   \   00000034   ........           LDR      R0,??DataTable59  ;; win_dos_koi
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   010050E2           SUBS     R0,R0,#+1
   \   00000040   0200000A           BEQ      ??char16to8_4
   \   00000044   010050E2           SUBS     R0,R0,#+1
   \   00000048   0200000A           BEQ      ??char16to8_5
   \   0000004C   030000EA           B        ??char16to8_6
   \                     ??char16to8_4:
   \   00000050   0300D1E5           LDRB     R0,[R1, #+3]
   \   00000054   1EFF2FE1           BX       LR
   \                     ??char16to8_5:
   \   00000058   0400D1E5           LDRB     R0,[R1, #+4]
   \   0000005C   1EFF2FE1           BX       LR
   \                     ??char16to8_6:
   \   00000060   0200D1E5           LDRB     R0,[R1, #+2]
   \   00000064   1EFF2FE1           BX       LR
    428            }
    429            c&=0xFF;
   \                     ??char16to8_3:
   \   00000068   FF0000E2           AND      R0,R0,#0xFF
    430            if (c<32) return(' ');
   \   0000006C   200050E3           CMP      R0,#+32
   \   00000070   2000A033           MOVCC    R0,#+32
   \   00000074   1EFF2FE1           BX       LR               ;; return
   \                     ??char16to8_0:
   \   00000078   ........           DC32     unicode2char
    431            return(c);
    432          }
    433          
    434          //--------------------------------------------------------------------------
    435          //ѕечать символа

   \                                 In segment CODE, align 4, keep-with-next
    436          void DrawChar(int c,int x,int y)
    437          {
   \                     DrawChar:
   \   00000000   F0012DE9           PUSH     {R4-R8}
    438            char *d; // уда рисуем
    439            char *s; //ќткуда рисуем
    440            int i;
    441            int ms;
    442            int md;
    443            if (c>=128)
   \   00000004   800050E3           CMP      R0,#+128
   \   00000008   0B0000BA           BLT      ??DrawChar_0
    444              switch(win_dos_koi)
   \   0000000C   ........           LDR      R3,??DataTable59  ;; win_dos_koi
   \   00000010   003093E5           LDR      R3,[R3, #+0]
   \   00000014   013053E2           SUBS     R3,R3,#+1
   \   00000018   0200000A           BEQ      ??DrawChar_1
   \   0000001C   013053E2           SUBS     R3,R3,#+1
   \   00000020   0200000A           BEQ      ??DrawChar_2
   \   00000024   040000EA           B        ??DrawChar_0
    445              {
    446              case 1:
    447                //Win->Dos
    448                c=wintranslation[c-128];
   \                     ??DrawChar_1:
   \   00000028   ........           LDR      R3,??DataTable5  ;; wintranslation
   \   0000002C   000000EA           B        ??DrawChar_3
    449                break;
    450              case 2:
    451                //Koi8->Dos
    452                c=koi8translation[c-128];
   \                     ??DrawChar_2:
   \   00000030   ........           LDR      R3,??DataTable6  ;; koi8translation
   \                     ??DrawChar_3:
   \   00000034   030080E0           ADD      R0,R0,R3
   \   00000038   800050E5           LDRB     R0,[R0, #-128]
    453                break;
    454              }
    455            i=8;
    456            switch(font_size)
   \                     ??DrawChar_0:
   \   0000003C   ........           LDR      R8,??DataTable56  ;; font_size
   \   00000040   ........           LDR      R6,??DataTable8  ;; font
   \   00000044   008098E5           LDR      R8,[R8, #+0]
   \   00000048   ........           LDR      R5,??DataTable9  ;; myscr
   \   0000004C   08C0A0E3           MOV      R12,#+8
   \   00000050   803186E0           ADD      R3,R6,R0, LSL #+3
   \   00000054   8840A0E3           MOV      R4,#+136
   \   00000058   940207E0           MUL      R7,R4,R2
   \   0000005C   0840A0E3           MOV      R4,#+8
   \   00000060   048058E2           SUBS     R8,R8,#+4
   \   00000064   0800000A           BEQ      ??DrawChar_4
   \   00000068   028058E2           SUBS     R8,R8,#+2
   \   0000006C   1600000A           BEQ      ??DrawChar_5
   \   00000070   028058E2           SUBS     R8,R8,#+2
   \   00000074   4D00000A           BEQ      ??DrawChar_6
   \   00000078   068058E2           SUBS     R8,R8,#+6
   \   0000007C   5200000A           BEQ      ??DrawChar_7
   \   00000080   028058E2           SUBS     R8,R8,#+2
   \   00000084   5B00000A           BEQ      ??DrawChar_8
   \   00000088   630000EA           B        ??DrawChar_9
    457            {
    458            case 4:
    459              s=font+(c<<3);
    460              //ќбрабатываем фонт размером 4
    461              d=myscr+(y*(8*17)+(x>>1)); //ќсновной экран
   \                     ??DrawChar_4:
   \   0000008C   C10087E0           ADD      R0,R7,R1, ASR #+1
   \   00000090   050080E0           ADD      R0,R0,R5
    462              ms=0xF0;
   \   00000094   F020A0E3           MOV      R2,#+240
    463              md=0x0F;
   \   00000098   0F40A0E3           MOV      R4,#+15
    464              if (x&1) {ms=0x0F;md=0xF0;}
   \   0000009C   010011E3           TST      R1,#0x1
   \   000000A0   0F20A013           MOVNE    R2,#+15
   \   000000A4   F040A013           MOVNE    R4,#+240
    465              //ѕечать в тетраде
    466              do
    467              {
    468                *d=(*d&md)|(*s++&ms);
   \                     ??DrawChar_10:
   \   000000A8   0010D0E5           LDRB     R1,[R0, #+0]
   \   000000AC   ........           LDRB     R5,[R3], #+1
    469                d+=17;
    470              }
    471              while(--i);
   \   000000B0   01C05CE2           SUBS     R12,R12,#+1
   \   000000B4   011004E0           AND      R1,R4,R1
   \   000000B8   055002E0           AND      R5,R2,R5
   \   000000BC   011085E1           ORR      R1,R5,R1
   \   000000C0   ........           STRB     R1,[R0], #+17
   \   000000C4   F7FFFF1A           BNE      ??DrawChar_10
   \   000000C8   530000EA           B        ??DrawChar_9
    472              break;
    473            case 6:
    474              s=font+(c<<3);
    475              //ќбрабатываем фонт размером 6
    476              d=myscr+(y*(8*17)+((x>>2)*3)); //0E:160C - ќсновной экран
   \                     ??DrawChar_5:
   \   000000CC   4101A0E1           ASR      R0,R1,#+2
   \   000000D0   800080E0           ADD      R0,R0,R0, LSL #+1
   \   000000D4   070080E0           ADD      R0,R0,R7
   \   000000D8   050080E0           ADD      R0,R0,R5
    477              switch(x&3)
   \   000000DC   031011E2           ANDS     R1,R1,#0x3
   \   000000E0   0600000A           BEQ      ??DrawChar_11
   \   000000E4   011051E2           SUBS     R1,R1,#+1
   \   000000E8   0C00000A           BEQ      ??DrawChar_12
   \   000000EC   011051E2           SUBS     R1,R1,#+1
   \   000000F0   1700000A           BEQ      ??DrawChar_13
   \   000000F4   011051E2           SUBS     R1,R1,#+1
   \   000000F8   2300000A           BEQ      ??DrawChar_14
   \   000000FC   460000EA           B        ??DrawChar_9
    478              {
    479              case 0:
    480                do
    481                {
    482          	*d=(*d&0x03)|(*s++);
   \                     ??DrawChar_11:
   \   00000100   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000104   ........           LDRB     R2,[R3], #+1
    483          	d+=17;
    484                }
    485                while(--i);
   \   00000108   014054E2           SUBS     R4,R4,#+1
   \   0000010C   031001E2           AND      R1,R1,#0x3
   \   00000110   011082E1           ORR      R1,R2,R1
   \   00000114   ........           STRB     R1,[R0], #+17
   \   00000118   F8FFFF1A           BNE      ??DrawChar_11
   \   0000011C   3E0000EA           B        ??DrawChar_9
    486                break;
    487              case 1:
    488                do
    489                {
    490          	*d=(*d&0xFC)|(*s>>6);
   \                     ??DrawChar_12:
   \   00000120   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000124   0020D3E5           LDRB     R2,[R3, #+0]
    491          	d++;
    492          	*d=(*d&0x0F)|(*s++<<2);
    493          	d+=16;
    494                }
    495                while(--i);
   \   00000128   014054E2           SUBS     R4,R4,#+1
   \   0000012C   FC1001E2           AND      R1,R1,#0xFC
   \   00000130   221381E1           ORR      R1,R1,R2, LSR #+6
   \   00000134   ........           STRB     R1,[R0], #+1
   \   00000138   0010D0E5           LDRB     R1,[R0, #+0]
   \   0000013C   ........           LDRB     R2,[R3], #+1
   \   00000140   0F1001E2           AND      R1,R1,#0xF
   \   00000144   021181E1           ORR      R1,R1,R2, LSL #+2
   \   00000148   ........           STRB     R1,[R0], #+16
   \   0000014C   F3FFFF1A           BNE      ??DrawChar_12
   \   00000150   310000EA           B        ??DrawChar_9
    496                break;
    497              case 2:
    498                d++;
   \                     ??DrawChar_13:
   \   00000154   010080E2           ADD      R0,R0,#+1
    499                do
    500                {
    501          	*d=(*d&0xF0)|(*s>>4);
   \                     ??DrawChar_15:
   \   00000158   0010D0E5           LDRB     R1,[R0, #+0]
   \   0000015C   0020D3E5           LDRB     R2,[R3, #+0]
    502          	d++;
    503          	*d=(*d&0x3F)|(*s++<<4);
    504          	d+=16;
    505                }
    506                while(--i);
   \   00000160   014054E2           SUBS     R4,R4,#+1
   \   00000164   F01001E2           AND      R1,R1,#0xF0
   \   00000168   221281E1           ORR      R1,R1,R2, LSR #+4
   \   0000016C   ........           STRB     R1,[R0], #+1
   \   00000170   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000174   ........           LDRB     R2,[R3], #+1
   \   00000178   3F1001E2           AND      R1,R1,#0x3F
   \   0000017C   021281E1           ORR      R1,R1,R2, LSL #+4
   \   00000180   ........           STRB     R1,[R0], #+16
   \   00000184   F3FFFF1A           BNE      ??DrawChar_15
   \   00000188   230000EA           B        ??DrawChar_9
    507                break;
    508              case 3:
    509                d+=2;
   \                     ??DrawChar_14:
   \   0000018C   020080E2           ADD      R0,R0,#+2
    510                do
    511                {
    512          	*d=(*d&0xC0)|(*s++>>2);
   \                     ??DrawChar_16:
   \   00000190   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000194   ........           LDRB     R2,[R3], #+1
    513          	d+=17;
    514                }
    515                while(--i);
   \   00000198   014054E2           SUBS     R4,R4,#+1
   \   0000019C   C01001E2           AND      R1,R1,#0xC0
   \   000001A0   221181E1           ORR      R1,R1,R2, LSR #+2
   \   000001A4   ........           STRB     R1,[R0], #+17
   \   000001A8   F8FFFF1A           BNE      ??DrawChar_16
   \   000001AC   1A0000EA           B        ??DrawChar_9
    516                break;
    517              }
    518              break;
    519            case 8:
    520              s=font+(c<<3);
    521              //ќбрабатываем фонт размером 8
    522              d=myscr+(y*(8*17)+x); //0E:160C - ќсновной экран
   \                     ??DrawChar_6:
   \   000001B0   070081E0           ADD      R0,R1,R7
   \   000001B4   050080E0           ADD      R0,R0,R5
    523              do
    524              {
    525                *d=*s++;
   \                     ??DrawChar_17:
   \   000001B8   ........           LDRB     R1,[R3], #+1
    526                d+=17;
    527              }
    528              while(--i);
   \   000001BC   014054E2           SUBS     R4,R4,#+1
   \   000001C0   ........           STRB     R1,[R0], #+17
   \   000001C4   FBFFFF1A           BNE      ??DrawChar_17
   \   000001C8   130000EA           B        ??DrawChar_9
    529              break;
    530            case 14:
    531              i=14;
    532              s=font+(c*14);
   \                     ??DrawChar_7:
   \   000001CC   0E40A0E3           MOV      R4,#+14
   \   000001D0   946023E0           MLA      R3,R4,R0,R6
    533              //ќбрабатываем фонт размером 8
    534              d=myscr+(y*(14*17)+x); //0E:160C - ќсновной экран
   \   000001D4   EE00A0E3           MOV      R0,#+238
   \   000001D8   901221E0           MLA      R1,R0,R2,R1
   \   000001DC   050081E0           ADD      R0,R1,R5
   \   000001E0   0E10A0E3           MOV      R1,#+14
    535              do
    536              {
    537                *d=*s++;
   \                     ??DrawChar_18:
   \   000001E4   ........           LDRB     R2,[R3], #+1
    538                d+=17;
    539              }
    540              while(--i);
   \   000001E8   011051E2           SUBS     R1,R1,#+1
   \   000001EC   ........           STRB     R2,[R0], #+17
   \   000001F0   FBFFFF1A           BNE      ??DrawChar_18
   \   000001F4   080000EA           B        ??DrawChar_9
    541              break;
    542            case 16:
    543              i=16;
    544              s=font+(c*16);
   \                     ??DrawChar_8:
   \   000001F8   003286E0           ADD      R3,R6,R0, LSL #+4
    545              //ќбрабатываем фонт размером 16
    546              d=myscr+(y*(16*17)+x); //0E:160C - ќсновной экран
   \   000001FC   440FA0E3           MOV      R0,#+272
   \   00000200   901221E0           MLA      R1,R0,R2,R1
   \   00000204   050081E0           ADD      R0,R1,R5
   \   00000208   1010A0E3           MOV      R1,#+16
    547              do
    548              {
    549                *d=*s++;
   \                     ??DrawChar_19:
   \   0000020C   ........           LDRB     R2,[R3], #+1
    550                d+=17;
    551              }
    552              while(--i);
   \   00000210   011051E2           SUBS     R1,R1,#+1
   \   00000214   ........           STRB     R2,[R0], #+17
   \   00000218   FBFFFF1A           BNE      ??DrawChar_19
    553              break;
    554            default:
    555              break;
    556            }
    557          }
   \                     ??DrawChar_9:
   \   0000021C   F001BDE8           POP      {R4-R8}
   \   00000220   1EFF2FE1           BX       LR               ;; return
    558          
    559          //ѕечать строки из буфера текста

   \                                 In segment CODE, align 4, keep-with-next
    560          void drawStkStr(char *p, unsigned int y, unsigned int vp, int ep)
    561          {
   \                     drawStkStr:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    562            unsigned int i=0;
   \   00000004   ........           LDR      R5,??DataTable96  ;; max_x
   \   00000008   ........           LDR      R6,??DataTable94  ;; editline
   \   0000000C   0080A0E1           MOV      R8,R0
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   0290A0E1           MOV      R9,R2
   \   00000018   0370A0E1           MOV      R7,R3
   \   0000001C   0010A0E3           MOV      R1,#+0
    563            unsigned int c;
    564            do
    565            {
    566              c=*p;
   \                     ??drawStkStr_0:
   \   00000020   0000D8E5           LDRB     R0,[R8, #+0]
    567              if (c)
   \   00000024   01A081E2           ADD      R10,R1,#+1
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0800000A           BEQ      ??drawStkStr_1
    568              {
    569                if (ep>=0) editline[ep++]=c;
   \   00000030   000057E3           CMP      R7,#+0
   \   00000034   0600C757           STRBPL   R0,[R7, +R6]
   \   00000038   01708752           ADDPL    R7,R7,#+1
    570                p++;
   \   0000003C   018088E2           ADD      R8,R8,#+1
    571                if (vp!=0) vp--; else DrawChar(c,i++,y);
   \   00000040   000059E3           CMP      R9,#+0
   \   00000044   01904912           SUBNE    R9,R9,#+1
   \   00000048   0500001A           BNE      ??drawStkStr_2
   \   0000004C   0420A0E1           MOV      R2,R4
   \   00000050   010000EA           B        ??drawStkStr_3
    572              }
    573              else
    574              {
    575                DrawChar(' ',i++,y);
   \                     ??drawStkStr_1:
   \   00000054   0420A0E1           MOV      R2,R4
   \   00000058   2000A0E3           MOV      R0,#+32
   \                     ??drawStkStr_3:
   \   0000005C   ........           BL       DrawChar
   \   00000060   0A10A0E1           MOV      R1,R10
    576              }
    577            }
    578            while(i<max_x);
   \                     ??drawStkStr_2:
   \   00000064   000095E5           LDR      R0,[R5, #+0]
   \   00000068   000051E1           CMP      R1,R0
   \   0000006C   EBFFFF3A           BCC      ??drawStkStr_0
    579            if (ep>=0) while((c=*p++)) editline[ep++]=c; //ƒобиваем остаток строки
   \   00000070   000057E3           CMP      R7,#+0
   \   00000074   F087BD48           POPMI    {R4-R10,PC}
   \   00000078   010000EA           B        ??drawStkStr_4
   \                     ??drawStkStr_5:
   \   0000007C   0600C7E7           STRB     R0,[R7, +R6]
   \   00000080   017087E2           ADD      R7,R7,#+1
   \                     ??drawStkStr_4:
   \   00000084   ........           LDRB     R0,[R8], #+1
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   FAFFFF1A           BNE      ??drawStkStr_5
    580          }
   \   00000090   F087BDE8           POP      {R4-R10,PC}      ;; return
    581          

   \                                 In segment CODE, align 4, keep-with-next
    582          void drawFrmStkStr(char *p, unsigned int y, unsigned int vp, int ep)
    583          {
   \                     drawFrmStkStr:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   0050A0E1           MOV      R5,R0
    584            unsigned int i=0;
    585            unsigned int c;
    586            unsigned long spcsum;
    587            unsigned long spcadd;
    588            unsigned int spcs=0;
    589          
    590            //Ќадо посчитать пробелы
    591            i=0;
   \   00000008   0010D5E5           LDRB     R1,[R5, #+0]
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   0040A0E3           MOV      R4,#+0
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   0200A0E1           MOV      R0,R2
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700000A           BEQ      ??drawFrmStkStr_0
    592            if (*p)
    593            {
    594              i=1; //—читаем со второго символа
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   020000EA           B        ??drawFrmStkStr_1
    595              while((c=p[i])) //ѕока не конец строки
    596              {
    597                if (c==' ') spcs++; //—читаем пробелы
   \                     ??drawFrmStkStr_2:
   \   00000030   200051E3           CMP      R1,#+32
   \   00000034   01208202           ADDEQ    R2,R2,#+1
    598                i++;
   \   00000038   010080E2           ADD      R0,R0,#+1
    599              }
   \                     ??drawFrmStkStr_1:
   \   0000003C   0510D0E7           LDRB     R1,[R0, +R5]
   \   00000040   000051E3           CMP      R1,#+0
   \   00000044   F9FFFF1A           BNE      ??drawFrmStkStr_2
   \                     ??drawFrmStkStr_0:
   \   00000048   ........           LDR      R1,??DataTable96  ;; max_x
    600            }
    601            if (i>max_x)
    602              i=0; //Ќе добавл€ем пробелы, строка длиннее, чем экран
    603            else
    604              i=max_x-i; //“еперь в i - общее количество добавл€емых пробелов
    605            spcadd=0;
   \   0000004C   0080A0E3           MOV      R8,#+0
   \   00000050   001091E5           LDR      R1,[R1, #+0]
   \   00000054   000051E1           CMP      R1,R0
   \   00000058   0010A033           MOVCC    R1,#+0
   \   0000005C   00104120           SUBCS    R1,R1,R0
    606            spcsum=0;
   \   00000060   0400A0E1           MOV      R0,R4
    607            if (spcs)
   \   00000064   000052E3           CMP      R2,#+0
   \   00000068   0700000A           BEQ      ??drawFrmStkStr_3
    608            {
    609              spcadd=((unsigned long)i<<16)/spcs;
   \   0000006C   0138A0E1           LSL      R3,R1,#+16
   \   00000070   0300A0E1           MOV      R0,R3
   \   00000074   0210A0E1           MOV      R1,R2
   \   00000078   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   0000007C   0180A0E1           MOV      R8,R1
    610              spcsum=((unsigned long)i<<16)%spcs;
   \   00000080   0300A0E1           MOV      R0,R3
   \   00000084   0210A0E1           MOV      R1,R2
   \   00000088   ........           _BLF     ??divu32_a,??rA??divu32_a
    611            }
    612            spcsum+=spcadd; //Ќачальное значение
    613          
    614            i=0;
    615            c=*p;
   \                     ??drawFrmStkStr_3:
   \   0000008C   00B0D5E5           LDRB     R11,[R5, #+0]
    616            if (c)
   \   00000090   ........           LDR      R10,??DataTable94  ;; editline
   \   00000094   009088E0           ADD      R9,R8,R0
   \   00000098   00005BE3           CMP      R11,#+0
   \   0000009C   2400000A           BEQ      ??drawFrmStkStr_4
    617            {
    618              if (ep>=0) editline[ep++]=c;
   \   000000A0   000057E3           CMP      R7,#+0
   \   000000A4   0AB0C757           STRBPL   R11,[R7, +R10]
   \   000000A8   01708752           ADDPL    R7,R7,#+1
    619              if (vp!=0) vp--; else DrawChar(c,i++,y);
   \   000000AC   000056E3           CMP      R6,#+0
   \   000000B0   01604612           SUBNE    R6,R6,#+1
   \   000000B4   0400001A           BNE      ??drawFrmStkStr_5
   \   000000B8   00209DE5           LDR      R2,[SP, #+0]
   \   000000BC   0010A0E3           MOV      R1,#+0
   \   000000C0   0B00A0E1           MOV      R0,R11
   \   000000C4   ........           BL       DrawChar
   \   000000C8   0140A0E3           MOV      R4,#+1
    620              p++;
   \                     ??drawFrmStkStr_5:
   \   000000CC   015085E2           ADD      R5,R5,#+1
    621            }
    622            else goto L2;
    623            do
    624            {
    625              c=*p;
   \                     ??drawFrmStkStr_6:
   \   000000D0   00B0D5E5           LDRB     R11,[R5, #+0]
    626              if (c)
   \   000000D4   00005BE3           CMP      R11,#+0
   \   000000D8   1500000A           BEQ      ??drawFrmStkStr_4
    627              {
    628                if (ep>=0) editline[ep++]=c;
   \   000000DC   000057E3           CMP      R7,#+0
   \   000000E0   0AB0C757           STRBPL   R11,[R7, +R10]
   \   000000E4   01708752           ADDPL    R7,R7,#+1
    629                if (vp!=0) vp--; else DrawChar(c,i++,y);
   \   000000E8   000056E3           CMP      R6,#+0
   \   000000EC   01604612           SUBNE    R6,R6,#+1
   \   000000F0   0400001A           BNE      ??drawFrmStkStr_7
   \   000000F4   00209DE5           LDR      R2,[SP, #+0]
   \   000000F8   0410A0E1           MOV      R1,R4
   \   000000FC   0B00A0E1           MOV      R0,R11
   \   00000100   ........           BL       DrawChar
   \   00000104   014084E2           ADD      R4,R4,#+1
    630                if (c==' ')
   \                     ??drawFrmStkStr_7:
   \   00000108   20005BE3           CMP      R11,#+32
   \   0000010C   0600001A           BNE      ??drawFrmStkStr_8
    631                {
    632          	//ƒобавл€ем пробелы
    633          	if (spcsum>=65536)
   \   00000110   400B59E3           CMP      R9,#+65536
   \   00000114   0300003A           BCC      ??drawFrmStkStr_9
    634          	{
    635          	  spcsum-=65536;
   \   00000118   FF04A0E3           MOV      R0,#-16777216
   \   0000011C   FF0880E3           ORR      R0,R0,#0xFF0000
   \   00000120   099080E0           ADD      R9,R0,R9
   \   00000124   070000EA           B        ??drawFrmStkStr_10
    636          	  continue;
    637          	}
    638          	spcsum+=spcadd;
   \                     ??drawFrmStkStr_9:
   \   00000128   099088E0           ADD      R9,R8,R9
    639                }
    640                p++;
   \                     ??drawFrmStkStr_8:
   \   0000012C   015085E2           ADD      R5,R5,#+1
   \   00000130   040000EA           B        ??drawFrmStkStr_10
    641              }
    642              else
    643              {
    644              L2:
    645                DrawChar(' ',i++,y);
   \                     ??drawFrmStkStr_4:
   \   00000134   00209DE5           LDR      R2,[SP, #+0]
   \   00000138   0410A0E1           MOV      R1,R4
   \   0000013C   2000A0E3           MOV      R0,#+32
   \   00000140   ........           BL       DrawChar
   \   00000144   014084E2           ADD      R4,R4,#+1
    646              }
    647            }
    648            while(i<max_x);
   \                     ??drawFrmStkStr_10:
   \   00000148   ........           LDR      R0,??DataTable96  ;; max_x
   \   0000014C   000090E5           LDR      R0,[R0, #+0]
   \   00000150   000054E1           CMP      R4,R0
   \   00000154   DDFFFF3A           BCC      ??drawFrmStkStr_6
    649            if (ep>=0) while((c=*p++)) editline[ep++]=c; //ƒобиваем остаток строки
   \   00000158   000057E3           CMP      R7,#+0
   \   0000015C   0500004A           BMI      ??drawFrmStkStr_11
   \   00000160   010000EA           B        ??drawFrmStkStr_12
   \                     ??drawFrmStkStr_13:
   \   00000164   0AB0C7E7           STRB     R11,[R7, +R10]
   \   00000168   017087E2           ADD      R7,R7,#+1
   \                     ??drawFrmStkStr_12:
   \   0000016C   ........           LDRB     R11,[R5], #+1
   \   00000170   00005BE3           CMP      R11,#+0
   \   00000174   FAFFFF1A           BNE      ??drawFrmStkStr_13
    650          }
   \                     ??drawFrmStkStr_11:
   \   00000178   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000017C   F08FBDE8           POP      {R4-R11,PC}      ;; return
    651          
    652          //ѕоиск начала строки в верхнем стеке
    653          extern unsigned int bl_us(unsigned int pos);
    654          extern unsigned int bl_ds(unsigned int pos);
    655          
    656          //ѕеренос из верхнего стека в нижний (на строку вверх)
    657          extern void move_up(void);
    658          //ѕеренос из нижнего стека в верхний (на строку вниз)
    659          extern void move_dw(void);
    660          //---------------------------------------
    661          // –абота с таблицей блоков
    662          //---------------------------------------
    663          //ѕоиск первого свободного блока

   \                                 In segment CODE, align 4, keep-with-next
    664          int FindFreeBlock(void)
    665          {
    666            unsigned int i=0;
   \                     FindFreeBlock:
   \   00000000   0000A0E3           MOV      R0,#+0
    667            do
    668            {
    669              if (!bfree[i])
   \                     ??FindFreeBlock_0:
   \   00000004   ........           LDR      R1,??DataTable34  ;; bfree
   \   00000008   011080E0           ADD      R1,R0,R1
   \   0000000C   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000010   000052E3           CMP      R2,#+0
    670              {
    671                bfree[i]=1;
   \   00000014   0120A003           MOVEQ    R2,#+1
   \   00000018   0020C105           STRBEQ   R2,[R1, #+0]
   \   0000001C   1EFF2F01           BXEQ     LR
    672                break;
    673              }
    674            }
    675            while((++i)!=MAXBLOCK);
   \   00000020   010080E2           ADD      R0,R0,#+1
   \   00000024   400E50E3           CMP      R0,#+1024
   \   00000028   F5FFFF1A           BNE      ??FindFreeBlock_0
    676            return(i);
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    677          }
    678          
    679          //---------------------------------------
    680          // «агрузка с диска нового фрагмента
    681          //---------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    682          void DoDiskAccess(unsigned int flag)
    683          {
   \                     DoDiskAccess:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   ........           LDR      R0,??DataTable68  ;; stk_fhandle
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   004090E5           LDR      R4,[R0, #+0]
   \   00000010   010074E3           CMN      R4,#+1
   \   00000014   0E00001A           BNE      ??DoDiskAccess_0
    684            int f;
    685            char b;
    686            unsigned int ul;
    687            unsigned int seekpos;
    688          
    689            if ((f=stk_fhandle)==-1)
    690            {
    691              stk_fhandle=f=fopen(stkfile,A_ReadWrite+A_BIN,P_READ+P_WRITE,&ul); //‘айл верхнего стека
   \   00000018   ........           LDR      R0,??DataTable17  ;; stkfile
   \   0000001C   0D30A0E1           MOV      R3,SP
   \   00000020   602FA0E3           MOV      R2,#+384
   \   00000024   0210A0E3           MOV      R1,#+2
   \   00000028   801C81E3           ORR      R1,R1,#0x8000
   \   0000002C   0A0000EF           SWI      +10
   \   00000030   ........           LDR      R1,??DataTable68  ;; stk_fhandle
   \   00000034   0040A0E1           MOV      R4,R0
   \   00000038   000081E5           STR      R0,[R1, #+0]
    692              if (stk_fhandle==-1) DiskErrorMsg(3);
   \   0000003C   ........           LDR      R0,??DataTable68  ;; stk_fhandle
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   010070E3           CMN      R0,#+1
   \   00000048   0100001A           BNE      ??DoDiskAccess_0
   \   0000004C   0300A0E3           MOV      R0,#+3
   \   00000050   ........           BL       DiskErrorMsg
   \                     ??DoDiskAccess_0:
   \   00000054   ........           LDR      R7,??DataTable62  ;; disk_access
   \   00000058   ........           LDR      R5,??DataTable21  ;; STKSZ50
   \   0000005C   000097E5           LDR      R0,[R7, #+0]
   \   00000060   ........           LDR      R6,??DataTable43  ;; usp
   \   00000064   020010E3           TST      R0,#0x2
   \   00000068   2E00000A           BEQ      ??DoDiskAccess_1
    693            }
    694            if (disk_access&LOAD_UP)
    695            {
    696              memcpy(ustk+STKSZ50,ustk,usp);
   \   0000006C   ........           LDR      R0,??DataTable39  ;; ustk
   \   00000070   003095E5           LDR      R3,[R5, #+0]
   \   00000074   000090E5           LDR      R0,[R0, #+0]
   \   00000078   002096E5           LDR      R2,[R6, #+0]
   \   0000007C   0010A0E1           MOV      R1,R0
   \   00000080   000083E0           ADD      R0,R3,R0
   \   00000084   1E0100EF           SWI      +286
    697              b=ubat[u_disk--];
   \   00000088   ........           LDR      R0,??DataTable45  ;; u_disk
   \   0000008C   ........           LDR      R2,??DataTable45  ;; u_disk
   \   00000090   001090E5           LDR      R1,[R0, #+0]
   \   00000094   ........           LDR      R0,??DataTable37  ;; ubat
    698              bfree[b]=0;
   \   00000098   0030A0E3           MOV      R3,#+0
   \   0000009C   010190E7           LDR      R0,[R0, +R1, LSL #+2]
   \   000000A0   011041E2           SUB      R1,R1,#+1
   \   000000A4   001082E5           STR      R1,[R2, #+0]
   \   000000A8   ........           LDR      R2,??DataTable34  ;; bfree
   \   000000AC   FF0000E2           AND      R0,R0,#0xFF
   \   000000B0   0230C0E7           STRB     R3,[R0, +R2]
    699              seekpos=STKSZ50*b;
   \   000000B4   001095E5           LDR      R1,[R5, #+0]
    700              if (lseek(f,seekpos,0,&ul,&ul)!=seekpos) DiskErrorMsg(2);
   \   000000B8   0020A0E3           MOV      R2,#+0
   \   000000BC   90010BE0           MUL      R11,R0,R1
   \   000000C0   0D00A0E1           MOV      R0,SP
   \   000000C4   01002DE9           PUSH     {R0}
   \   000000C8   04308DE2           ADD      R3,SP,#+4
   \   000000CC   0B10A0E1           MOV      R1,R11
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   0F0000EF           SWI      +15
   \   000000D8   0B0050E1           CMP      R0,R11
   \   000000DC   04D08DE2           ADD      SP,SP,#+4
   \   000000E0   0100000A           BEQ      ??DoDiskAccess_2
   \   000000E4   0200A0E3           MOV      R0,#+2
   \   000000E8   ........           BL       DiskErrorMsg
    701              if (fread(f,ustk,STKSZ50,&ul)!=STKSZ50) DiskErrorMsg(0);
   \                     ??DoDiskAccess_2:
   \   000000EC   ........           LDR      R0,??DataTable39  ;; ustk
   \   000000F0   002095E5           LDR      R2,[R5, #+0]
   \   000000F4   001090E5           LDR      R1,[R0, #+0]
   \   000000F8   0D30A0E1           MOV      R3,SP
   \   000000FC   0400A0E1           MOV      R0,R4
   \   00000100   0B0000EF           SWI      +11
   \   00000104   001095E5           LDR      R1,[R5, #+0]
   \   00000108   010050E1           CMP      R0,R1
   \   0000010C   0100000A           BEQ      ??DoDiskAccess_3
   \   00000110   0000A0E3           MOV      R0,#+0
   \   00000114   ........           BL       DiskErrorMsg
    702              usp+=STKSZ50;
   \                     ??DoDiskAccess_3:
   \   00000118   000096E5           LDR      R0,[R6, #+0]
   \   0000011C   001095E5           LDR      R1,[R5, #+0]
   \   00000120   000081E0           ADD      R0,R1,R0
   \   00000124   000086E5           STR      R0,[R6, #+0]
    703            }
    704            if (disk_access&LOAD_DOWN)
   \                     ??DoDiskAccess_1:
   \   00000128   000097E5           LDR      R0,[R7, #+0]
   \   0000012C   ........           LDR      R8,??DataTable47  ;; d_disk
   \   00000130   ........           LDR      R9,??DataTable30  ;; dstk
   \   00000134   ........           LDR      R10,??DataTable81  ;; dsp
   \   00000138   040010E3           TST      R0,#0x4
   \   0000013C   3000000A           BEQ      ??DoDiskAccess_4
    705            {
    706              memcpy(dstk+(dsp-STKSZ50),dstk+dsp,STKSZ-dsp);
   \   00000140   ........           LDR      R1,??DataTable80  ;; STKSZ
   \   00000144   000099E5           LDR      R0,[R9, #+0]
   \   00000148   00309AE5           LDR      R3,[R10, #+0]
   \   0000014C   001091E5           LDR      R1,[R1, #+0]
   \   00000150   00B095E5           LDR      R11,[R5, #+0]
   \   00000154   032041E0           SUB      R2,R1,R3
   \   00000158   001083E0           ADD      R1,R3,R0
   \   0000015C   0B3043E0           SUB      R3,R3,R11
   \   00000160   000083E0           ADD      R0,R3,R0
   \   00000164   1E0100EF           SWI      +286
    707              b=dbat[d_disk--];
   \   00000168   001098E5           LDR      R1,[R8, #+0]
   \   0000016C   ........           LDR      R0,??DataTable40  ;; dbat
    708              bfree[b]=0;
   \   00000170   ........           LDR      R2,??DataTable34  ;; bfree
   \   00000174   010190E7           LDR      R0,[R0, +R1, LSL #+2]
   \   00000178   011041E2           SUB      R1,R1,#+1
   \   0000017C   FF0000E2           AND      R0,R0,#0xFF
   \   00000180   001088E5           STR      R1,[R8, #+0]
   \   00000184   0030A0E3           MOV      R3,#+0
   \   00000188   0230C0E7           STRB     R3,[R0, +R2]
    709              seekpos=STKSZ50*b;
   \   0000018C   001095E5           LDR      R1,[R5, #+0]
    710              if (lseek(f,seekpos,0,&ul,&ul)!=seekpos) DiskErrorMsg(2);
   \   00000190   0020A0E3           MOV      R2,#+0
   \   00000194   90010BE0           MUL      R11,R0,R1
   \   00000198   0D00A0E1           MOV      R0,SP
   \   0000019C   01002DE9           PUSH     {R0}
   \   000001A0   04308DE2           ADD      R3,SP,#+4
   \   000001A4   0B10A0E1           MOV      R1,R11
   \   000001A8   0400A0E1           MOV      R0,R4
   \   000001AC   0F0000EF           SWI      +15
   \   000001B0   0B0050E1           CMP      R0,R11
   \   000001B4   04D08DE2           ADD      SP,SP,#+4
   \   000001B8   0100000A           BEQ      ??DoDiskAccess_5
   \   000001BC   0200A0E3           MOV      R0,#+2
   \   000001C0   ........           BL       DiskErrorMsg
    711              if (fread(f,dstk+STKSZ50,STKSZ50,&ul)!=STKSZ50) DiskErrorMsg(0);
   \                     ??DoDiskAccess_5:
   \   000001C4   000095E5           LDR      R0,[R5, #+0]
   \   000001C8   001099E5           LDR      R1,[R9, #+0]
   \   000001CC   0D30A0E1           MOV      R3,SP
   \   000001D0   0020A0E1           MOV      R2,R0
   \   000001D4   011080E0           ADD      R1,R0,R1
   \   000001D8   0400A0E1           MOV      R0,R4
   \   000001DC   0B0000EF           SWI      +11
   \   000001E0   001095E5           LDR      R1,[R5, #+0]
   \   000001E4   010050E1           CMP      R0,R1
   \   000001E8   0100000A           BEQ      ??DoDiskAccess_6
   \   000001EC   0000A0E3           MOV      R0,#+0
   \   000001F0   ........           BL       DiskErrorMsg
    712              dsp-=STKSZ50;
   \                     ??DoDiskAccess_6:
   \   000001F4   00009AE5           LDR      R0,[R10, #+0]
   \   000001F8   001095E5           LDR      R1,[R5, #+0]
   \   000001FC   010040E0           SUB      R0,R0,R1
   \   00000200   00008AE5           STR      R0,[R10, #+0]
    713            }
    714            if (disk_access&SAVE_UP)
   \                     ??DoDiskAccess_4:
   \   00000204   000097E5           LDR      R0,[R7, #+0]
   \   00000208   080010E3           TST      R0,#0x8
   \   0000020C   2900000A           BEQ      ??DoDiskAccess_7
    715            {
    716              b=FindFreeBlock();
   \   00000210   ........           BL       FindFreeBlock
    717              ubat[++u_disk]=b;
   \   00000214   ........           LDR      R1,??DataTable45  ;; u_disk
   \   00000218   ........           LDR      R2,??DataTable45  ;; u_disk
   \   0000021C   001091E5           LDR      R1,[R1, #+0]
   \   00000220   FF0000E2           AND      R0,R0,#0xFF
   \   00000224   011081E2           ADD      R1,R1,#+1
   \   00000228   001082E5           STR      R1,[R2, #+0]
   \   0000022C   ........           LDR      R2,??DataTable37  ;; ubat
   \   00000230   010182E7           STR      R0,[R2, +R1, LSL #+2]
    718              seekpos=STKSZ50*b;
   \   00000234   001095E5           LDR      R1,[R5, #+0]
    719              if (lseek(f,seekpos,0,&ul,&ul)!=seekpos) DiskErrorMsg(2);
   \   00000238   0020A0E3           MOV      R2,#+0
   \   0000023C   90010BE0           MUL      R11,R0,R1
   \   00000240   0D00A0E1           MOV      R0,SP
   \   00000244   01002DE9           PUSH     {R0}
   \   00000248   04308DE2           ADD      R3,SP,#+4
   \   0000024C   0B10A0E1           MOV      R1,R11
   \   00000250   0400A0E1           MOV      R0,R4
   \   00000254   0F0000EF           SWI      +15
   \   00000258   0B0050E1           CMP      R0,R11
   \   0000025C   04D08DE2           ADD      SP,SP,#+4
   \   00000260   0100000A           BEQ      ??DoDiskAccess_8
   \   00000264   0200A0E3           MOV      R0,#+2
   \   00000268   ........           BL       DiskErrorMsg
    720              if (fwrite(f,ustk,STKSZ50,&ul)!=STKSZ50) DiskErrorMsg(1);
   \                     ??DoDiskAccess_8:
   \   0000026C   ........           LDR      R0,??DataTable39  ;; ustk
   \   00000270   002095E5           LDR      R2,[R5, #+0]
   \   00000274   001090E5           LDR      R1,[R0, #+0]
   \   00000278   0D30A0E1           MOV      R3,SP
   \   0000027C   0400A0E1           MOV      R0,R4
   \   00000280   0C0000EF           SWI      +12
   \   00000284   001095E5           LDR      R1,[R5, #+0]
   \   00000288   010050E1           CMP      R0,R1
   \   0000028C   0100000A           BEQ      ??DoDiskAccess_9
   \   00000290   0100A0E3           MOV      R0,#+1
   \   00000294   ........           BL       DiskErrorMsg
    721              memcpy(ustk,ustk+STKSZ50,usp-=STKSZ50);
   \                     ??DoDiskAccess_9:
   \   00000298   001095E5           LDR      R1,[R5, #+0]
   \   0000029C   000096E5           LDR      R0,[R6, #+0]
   \   000002A0   012040E0           SUB      R2,R0,R1
   \   000002A4   ........           LDR      R0,??DataTable39  ;; ustk
   \   000002A8   002086E5           STR      R2,[R6, #+0]
   \   000002AC   000090E5           LDR      R0,[R0, #+0]
   \   000002B0   001081E0           ADD      R1,R1,R0
   \   000002B4   1E0100EF           SWI      +286
    722            }
    723            if (disk_access&SAVE_DOWN)
   \                     ??DoDiskAccess_7:
   \   000002B8   000097E5           LDR      R0,[R7, #+0]
   \   000002BC   100010E3           TST      R0,#0x10
   \   000002C0   2C00000A           BEQ      ??DoDiskAccess_10
    724            {
    725              b=FindFreeBlock();
   \   000002C4   ........           BL       FindFreeBlock
    726              dbat[++d_disk]=b;
   \   000002C8   001098E5           LDR      R1,[R8, #+0]
   \   000002CC   ........           LDR      R2,??DataTable40  ;; dbat
   \   000002D0   FF0000E2           AND      R0,R0,#0xFF
   \   000002D4   011081E2           ADD      R1,R1,#+1
   \   000002D8   001088E5           STR      R1,[R8, #+0]
   \   000002DC   010182E7           STR      R0,[R2, +R1, LSL #+2]
    727              seekpos=STKSZ50*b;
   \   000002E0   001095E5           LDR      R1,[R5, #+0]
    728              if (lseek(f,seekpos,0,&ul,&ul)!=seekpos) DiskErrorMsg(2);
   \   000002E4   0020A0E3           MOV      R2,#+0
   \   000002E8   90010BE0           MUL      R11,R0,R1
   \   000002EC   0D00A0E1           MOV      R0,SP
   \   000002F0   01002DE9           PUSH     {R0}
   \   000002F4   04308DE2           ADD      R3,SP,#+4
   \   000002F8   0B10A0E1           MOV      R1,R11
   \   000002FC   0400A0E1           MOV      R0,R4
   \   00000300   0F0000EF           SWI      +15
   \   00000304   0B0050E1           CMP      R0,R11
   \   00000308   04D08DE2           ADD      SP,SP,#+4
   \   0000030C   0100000A           BEQ      ??DoDiskAccess_11
   \   00000310   0200A0E3           MOV      R0,#+2
   \   00000314   ........           BL       DiskErrorMsg
    729              if (fwrite(f,dstk+STKSZ50,STKSZ50,&ul)!=STKSZ50) DiskErrorMsg(1);
   \                     ??DoDiskAccess_11:
   \   00000318   000095E5           LDR      R0,[R5, #+0]
   \   0000031C   001099E5           LDR      R1,[R9, #+0]
   \   00000320   0D30A0E1           MOV      R3,SP
   \   00000324   0020A0E1           MOV      R2,R0
   \   00000328   011080E0           ADD      R1,R0,R1
   \   0000032C   0400A0E1           MOV      R0,R4
   \   00000330   0C0000EF           SWI      +12
   \   00000334   001095E5           LDR      R1,[R5, #+0]
   \   00000338   010050E1           CMP      R0,R1
   \   0000033C   0100000A           BEQ      ??DoDiskAccess_12
   \   00000340   0100A0E3           MOV      R0,#+1
   \   00000344   ........           BL       DiskErrorMsg
    730              memcpy(dstk+(dsp+STKSZ50),dstk+dsp,STKSZ50-dsp);
   \                     ??DoDiskAccess_12:
   \   00000348   000099E5           LDR      R0,[R9, #+0]
   \   0000034C   00309AE5           LDR      R3,[R10, #+0]
   \   00000350   006095E5           LDR      R6,[R5, #+0]
   \   00000354   001083E0           ADD      R1,R3,R0
   \   00000358   032046E0           SUB      R2,R6,R3
   \   0000035C   033086E0           ADD      R3,R6,R3
   \   00000360   000083E0           ADD      R0,R3,R0
   \   00000364   1E0100EF           SWI      +286
    731              dsp+=STKSZ50;
   \   00000368   00009AE5           LDR      R0,[R10, #+0]
   \   0000036C   001095E5           LDR      R1,[R5, #+0]
   \   00000370   000081E0           ADD      R0,R1,R0
   \   00000374   00008AE5           STR      R0,[R10, #+0]
    732            }
    733            disk_access=0;
   \                     ??DoDiskAccess_10:
   \   00000378   0000A0E3           MOV      R0,#+0
   \   0000037C   000087E5           STR      R0,[R7, #+0]
    734            if (flag)
   \   00000380   04009DE5           LDR      R0,[SP, #+4]
   \   00000384   000050E3           CMP      R0,#+0
   \   00000388   0500000A           BEQ      ??DoDiskAccess_13
    735            {
    736              fclose(f,&ul);
   \   0000038C   0D10A0E1           MOV      R1,SP
   \   00000390   0400A0E1           MOV      R0,R4
   \   00000394   0D0000EF           SWI      +13
    737              stk_fhandle=-1;
   \   00000398   ........           LDR      R0,??DataTable68  ;; stk_fhandle
   \   0000039C   0010E0E3           MVN      R1,#+0
   \   000003A0   001080E5           STR      R1,[R0, #+0]
    738            }
    739            if ((!terminated)/*&&flag*/)
   \                     ??DoDiskAccess_13:
   \   000003A4   ........           LDR      R0,??DataTable70  ;; terminated
   \   000003A8   000090E5           LDR      R0,[R0, #+0]
   \   000003AC   000050E3           CMP      R0,#+0
   \   000003B0   0000001A           BNE      ??DoDiskAccess_14
    740            {
    741              REDRAW();
   \   000003B4   720100EF           SWI      +370
    742            }
    743            return;
   \                     ??DoDiskAccess_14:
   \   000003B8   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000003BC   F08FBDE8           POP      {R4-R11,PC}      ;; return
    744          }
    745          
    746          //------------------------------------------
    747          // ѕроверка необходимости чтени€/записи с диска/на диск
    748          //------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    749          void CheckDiskAccess(void)
    750          {
    751            if ((usp<STKMIN)&&(u_disk>=0)) disk_access|=LOAD_UP;
   \                     CheckDiskAccess:
   \   00000000   88009FE5           LDR      R0,??CheckDiskAccess_0  ;; STKMIN
   \   00000004   ........           LDR      R1,??DataTable43  ;; usp
   \   00000008   ........           LDR      R2,??DataTable62  ;; disk_access
   \   0000000C   10002DE9           PUSH     {R4}
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   001091E5           LDR      R1,[R1, #+0]
   \   00000018   000051E1           CMP      R1,R0
   \   0000001C   0500002A           BCS      ??CheckDiskAccess_1
   \   00000020   ........           LDR      R3,??DataTable45  ;; u_disk
   \   00000024   003093E5           LDR      R3,[R3, #+0]
   \   00000028   000053E3           CMP      R3,#+0
   \   0000002C   00309255           LDRPL    R3,[R2, #+0]
   \   00000030   02308353           ORRPL    R3,R3,#0x2
   \   00000034   00308255           STRPL    R3,[R2, #+0]
    752            if ((dsp>STKMAX)&&(d_disk>=0)) disk_access|=LOAD_DOWN;
   \                     ??CheckDiskAccess_1:
   \   00000038   ........           LDR      R3,??DataTable81  ;; dsp
   \   0000003C   50C09FE5           LDR      R12,??CheckDiskAccess_0+0x4  ;; STKMAX
   \   00000040   003093E5           LDR      R3,[R3, #+0]
   \   00000044   00C09CE5           LDR      R12,[R12, #+0]
   \   00000048   03005CE1           CMP      R12,R3
   \   0000004C   0500002A           BCS      ??CheckDiskAccess_2
   \   00000050   ........           LDR      R4,??DataTable47  ;; d_disk
   \   00000054   004094E5           LDR      R4,[R4, #+0]
   \   00000058   000054E3           CMP      R4,#+0
   \   0000005C   00409255           LDRPL    R4,[R2, #+0]
   \   00000060   04408453           ORRPL    R4,R4,#0x4
   \   00000064   00408255           STRPL    R4,[R2, #+0]
    753            if (usp>STKMAX) disk_access|=SAVE_UP;
   \                     ??CheckDiskAccess_2:
   \   00000068   01005CE1           CMP      R12,R1
   \   0000006C   00109235           LDRCC    R1,[R2, #+0]
   \   00000070   08108133           ORRCC    R1,R1,#0x8
   \   00000074   00108235           STRCC    R1,[R2, #+0]
    754            if (dsp<STKMIN) disk_access|=SAVE_DOWN;
   \   00000078   000053E1           CMP      R3,R0
   \   0000007C   00009235           LDRCC    R0,[R2, #+0]
   \   00000080   10008033           ORRCC    R0,R0,#0x10
   \   00000084   00008235           STRCC    R0,[R2, #+0]
    755          }
   \   00000088   1000BDE8           POP      {R4}
   \   0000008C   1EFF2FE1           BX       LR               ;; return
   \                     ??CheckDiskAccess_0:
   \   00000090   ........           DC32     STKMIN
   \   00000094   ........           DC32     STKMAX
    756          
    757          //-------------------------------------------------------
    758          // –абота с историей
    759          //-------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    760          unsigned int SearchHistory(void)
    761          {
    762            unsigned int history_pos=0;
    763            int fin;
    764            int i;
    765            unsigned int ul;
    766            char historyfile[128];
    767            snprintf(historyfile,sizeof(historyfile),"%sTED.history",ted_path);
   \                     SearchHistory:
   \   00000000   ........           LDR      R3,??DataTable52  ;; ted_path
   \   00000004   ........           LDR      R2,??DataTable53  ;; `?<Constant "%sTED.history">`
   \   00000008   70402DE9           PUSH     {R4-R6,LR}
   \   0000000C   84D04DE2           SUB      SP,SP,#+132
   \   00000010   0040A0E3           MOV      R4,#+0
   \   00000014   ........           LDR      R6,??DataTable54  ;; HISTORY
   \   00000018   8010A0E3           MOV      R1,#+128
   \   0000001C   04008DE2           ADD      R0,SP,#+4
   \   00000020   1B0100EF           SWI      +283
    768          
    769            if ((fin=fopen(historyfile,A_ReadOnly+A_BIN,0,&ul))!=-1)
   \   00000024   0D30A0E1           MOV      R3,SP
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   801CA0E3           MOV      R1,#+32768
   \   00000030   04008DE2           ADD      R0,SP,#+4
   \   00000034   0A0000EF           SWI      +10
   \   00000038   0050A0E1           MOV      R5,R0
   \   0000003C   010075E3           CMN      R5,#+1
   \   00000040   0100001A           BNE      ??SearchHistory_0
   \   00000044   100000EA           B        ??SearchHistory_1
    770            {
    771              for(;;)
    772              {
    773                i=fread(fin,&HISTORY,sizeof(HISTORY),&ul);
    774                if (i<sizeof(HISTORY)) goto L_NO_HISTORY;
    775                if (!strcmp(HISTORY.name,filename))
    776                {
    777             	history_pos|=0x8000;
    778          	break; //Ќашли
    779                }
    780                history_pos++;
   \                     ??SearchHistory_2:
   \   00000048   014084E2           ADD      R4,R4,#+1
   \                     ??SearchHistory_0:
   \   0000004C   0D30A0E1           MOV      R3,SP
   \   00000050   9C20A0E3           MOV      R2,#+156
   \   00000054   0610A0E1           MOV      R1,R6
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   0B0000EF           SWI      +11
   \   00000060   9C0050E3           CMP      R0,#+156
   \   00000064   0500003A           BCC      ??SearchHistory_3
   \   00000068   ........           LDR      R1,??DataTable99  ;; filename
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   190000EF           SWI      +25
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   F2FFFF1A           BNE      ??SearchHistory_2
   \   0000007C   804C84E3           ORR      R4,R4,#0x8000
    781              }
    782            L_NO_HISTORY:
    783              fclose(fin,&ul);
   \                     ??SearchHistory_3:
   \   00000080   0D10A0E1           MOV      R1,SP
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   0D0000EF           SWI      +13
    784            }
    785            return(history_pos);
   \                     ??SearchHistory_1:
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   84D08DE2           ADD      SP,SP,#+132
   \   00000094   7080BDE8           POP      {R4-R6,PC}       ;; return
    786          }
    787          
    788          //«аписать историю, вызываетс€ в контексте MMC_Filesystem

   \                                 In segment CODE, align 4, keep-with-next
    789          void SaveHistory(void)
    790          {
    791            int f;
    792            unsigned int ul;
    793            char ss[sizeof(HISTORY)];
    794            unsigned int history_pos;
    795          
    796            char historyfile[128];
    797            snprintf(historyfile,sizeof(historyfile),"%sTED.history",ted_path);
   \                     SaveHistory:
   \   00000000   ........           LDR      R3,??DataTable52  ;; ted_path
   \   00000004   ........           LDR      R2,??DataTable53  ;; `?<Constant "%sTED.history">`
   \   00000008   F0402DE9           PUSH     {R4-R7,LR}
   \   0000000C   ........           LDR      R4,??DataTable54  ;; HISTORY
   \   00000010   48DF4DE2           SUB      SP,SP,#+288
   \   00000014   8010A0E3           MOV      R1,#+128
   \   00000018   A0008DE2           ADD      R0,SP,#+160
   \   0000001C   1B0100EF           SWI      +283
    798          
    799            memcpy(ss,&HISTORY,sizeof(HISTORY));
   \   00000020   9C20A0E3           MOV      R2,#+156
   \   00000024   0410A0E1           MOV      R1,R4
   \   00000028   04008DE2           ADD      R0,SP,#+4
   \   0000002C   1E0100EF           SWI      +286
    800            history_pos=SearchHistory()&0x7FFF;
   \   00000030   ........           BL       SearchHistory
   \   00000034   8008A0E1           LSL      R0,R0,#+17
   \   00000038   A058A0E1           LSR      R5,R0,#+17
    801            memcpy(&HISTORY,ss,sizeof(HISTORY));
   \   0000003C   9C20A0E3           MOV      R2,#+156
   \   00000040   04108DE2           ADD      R1,SP,#+4
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   1E0100EF           SWI      +286
    802            memcpy(HISTORY.name,filename,128);
   \   0000004C   ........           LDR      R1,??DataTable99  ;; filename
   \   00000050   8020A0E3           MOV      R2,#+128
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   1E0100EF           SWI      +286
    803            HISTORY.font=font_size;
   \   0000005C   ........           LDR      R0,??DataTable56  ;; font_size
    804            HISTORY.line=curline;
    805            HISTORY.total=total_line;
    806            HISTORY.codepage=win_dos_koi;
    807            HISTORY.cursor_off=cursor_off;
    808            if ((f=fopen(historyfile,A_ReadWrite+A_BIN,P_READ+P_WRITE,&ul))==-1)
   \   00000060   0D30A0E1           MOV      R3,SP
   \   00000064   000090E5           LDR      R0,[R0, #+0]
   \   00000068   602FA0E3           MOV      R2,#+384
   \   0000006C   8000C4E5           STRB     R0,[R4, #+128]
   \   00000070   ........           LDR      R0,??DataTable106  ;; curline
   \   00000074   0210A0E3           MOV      R1,#+2
   \   00000078   000090E5           LDR      R0,[R0, #+0]
   \   0000007C   801C81E3           ORR      R1,R1,#0x8000
   \   00000080   840084E5           STR      R0,[R4, #+132]
   \   00000084   ........           LDR      R0,??DataTable100  ;; total_line
   \   00000088   0070E0E3           MVN      R7,#+0
   \   0000008C   000090E5           LDR      R0,[R0, #+0]
   \   00000090   880084E5           STR      R0,[R4, #+136]
   \   00000094   ........           LDR      R0,??DataTable59  ;; win_dos_koi
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   8200C4E5           STRB     R0,[R4, #+130]
   \   000000A0   ........           LDR      R0,??DataTable125  ;; cursor_off
   \   000000A4   000090E5           LDR      R0,[R0, #+0]
   \   000000A8   8300C4E5           STRB     R0,[R4, #+131]
   \   000000AC   A0008DE2           ADD      R0,SP,#+160
   \   000000B0   0A0000EF           SWI      +10
   \   000000B4   0060A0E1           MOV      R6,R0
   \   000000B8   070056E1           CMP      R6,R7
   \   000000BC   0600001A           BNE      ??SaveHistory_0
    809              f=fopen(historyfile,A_ReadWrite+A_BIN+A_Create,P_READ+P_WRITE,&ul);
   \   000000C0   0D30A0E1           MOV      R3,SP
   \   000000C4   602FA0E3           MOV      R2,#+384
   \   000000C8   0210A0E3           MOV      R1,#+2
   \   000000CC   811C81E3           ORR      R1,R1,#0x8100
   \   000000D0   A0008DE2           ADD      R0,SP,#+160
   \   000000D4   0A0000EF           SWI      +10
   \   000000D8   0060A0E1           MOV      R6,R0
    810            if (f!=-1)
   \                     ??SaveHistory_0:
   \   000000DC   070056E1           CMP      R6,R7
   \   000000E0   1000000A           BEQ      ??SaveHistory_1
    811            {
    812              lseek(f,sizeof(HISTORY)*history_pos,0,&ul,&ul);
   \   000000E4   0D00A0E1           MOV      R0,SP
   \   000000E8   01002DE9           PUSH     {R0}
   \   000000EC   04308DE2           ADD      R3,SP,#+4
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   9C00A0E3           MOV      R0,#+156
   \   000000F8   900501E0           MUL      R1,R0,R5
   \   000000FC   0600A0E1           MOV      R0,R6
   \   00000100   0F0000EF           SWI      +15
    813              fwrite(f,&HISTORY,sizeof(HISTORY),&ul);
   \   00000104   04308DE2           ADD      R3,SP,#+4
   \   00000108   9C20A0E3           MOV      R2,#+156
   \   0000010C   0410A0E1           MOV      R1,R4
   \   00000110   0600A0E1           MOV      R0,R6
   \   00000114   0C0000EF           SWI      +12
    814              fclose(f,&ul);
   \   00000118   04108DE2           ADD      R1,SP,#+4
   \   0000011C   0600A0E1           MOV      R0,R6
   \   00000120   0D0000EF           SWI      +13
   \   00000124   04D08DE2           ADD      SP,SP,#+4
    815            }
    816          /*  if (terminated)
    817            {
    818              //«аписываем snap-shoot
    819              if ((f=FileOpen((STR)snapshootfile,_O_BINARY+_O_CREAT+_O_RDWR,_S_IEXEC))!=-1)
    820              {
    821                FileWrite(f,(void far *)0x80000,16384);
    822                FileWrite(f,(void far *)0x84000,16384);
    823                FileWrite(f,(void far *)0x88000,16384);
    824                FileWrite(f,(void far *)0x8C000,16384);
    825                FileWrite(f,(void far *)0x90000,16384);
    826                FileClose(f);
    827              }
    828            }*/
    829          }
   \                     ??SaveHistory_1:
   \   00000128   48DF8DE2           ADD      SP,SP,#+288      ;; stack cleaning
   \   0000012C   F080BDE8           POP      {R4-R7,PC}       ;; return
    830          //------------------------------------------
    831          // —обственно редактор
    832          //------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    833          void GotoLine(void) //ѕереход на строку seek_to_line, вызываетс€ в контексте MMC_Filesystem
    834          {
   \                     GotoLine:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   ........           LDR      R4,??DataTable106  ;; curline
   \   00000008   ........           LDR      R5,??DataTable62  ;; disk_access
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   0060A0E3           MOV      R6,#+0
   \   00000014   070000EA           B        ??GotoLine_0
    835            // unsigned int l;
    836            // unsigned int p;
    837            unsigned int ul;
    838          
    839            for(;;)
    840            {
    841              disk_access=0; //«акончили дисковые операции
    842              CheckDiskAccess();
    843              if (disk_access) DoDiskAccess(0);
    844              if (seek_to_line==curline) break; //ѕришли
    845              if (seek_to_line<curline)
    846              {
    847                //ѕытаемс€ идти вверх
    848                if (!curline) break; //начало!
   \                     ??GotoLine_1:
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   2400000A           BEQ      ??GotoLine_2
    849                if (curline==viewline) viewline--; //≈сли перва€ строка экрана
   \   00000020   010052E1           CMP      R2,R1
   \   00000024   01104102           SUBEQ    R1,R1,#+1
   \   00000028   00108005           STREQ    R1,[R0, #+0]
    850                curline--;
   \   0000002C   010042E2           SUB      R0,R2,#+1
   \   00000030   000084E5           STR      R0,[R4, #+0]
    851                move_up();
   \   00000034   ........           _BLF     move_up,??move_up??rA
    852              }
   \                     ??GotoLine_0:
   \   00000038   006085E5           STR      R6,[R5, #+0]
   \   0000003C   ........           BL       CheckDiskAccess
   \   00000040   000095E5           LDR      R0,[R5, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0100000A           BEQ      ??GotoLine_3
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   ........           BL       DoDiskAccess
   \                     ??GotoLine_3:
   \   00000054   ........           LDR      R0,??DataTable63  ;; seek_to_line
   \   00000058   002094E5           LDR      R2,[R4, #+0]
   \   0000005C   003090E5           LDR      R3,[R0, #+0]
   \   00000060   020053E1           CMP      R3,R2
   \   00000064   1200000A           BEQ      ??GotoLine_2
   \   00000068   ........           LDR      R0,??DataTable138  ;; viewline
   \   0000006C   001090E5           LDR      R1,[R0, #+0]
   \   00000070   E8FFFF3A           BCC      ??GotoLine_1
    853              else
    854              {
    855                //ѕытаемс€ идти вниз
    856                if (dsp==STKSZ) break; // онец текста
   \   00000074   ........           LDR      R3,??DataTable81  ;; dsp
   \   00000078   ........           LDR      R12,??DataTable80  ;; STKSZ
   \   0000007C   003093E5           LDR      R3,[R3, #+0]
   \   00000080   00C09CE5           LDR      R12,[R12, #+0]
   \   00000084   0C0053E1           CMP      R3,R12
   \   00000088   0900000A           BEQ      ??GotoLine_2
    857                curline++;
    858                if ((curline-viewline)==max_y)
   \   0000008C   ........           LDR      R3,??DataTable145  ;; max_y
   \   00000090   012082E2           ADD      R2,R2,#+1
   \   00000094   003093E5           LDR      R3,[R3, #+0]
   \   00000098   002084E5           STR      R2,[R4, #+0]
   \   0000009C   012042E0           SUB      R2,R2,R1
   \   000000A0   030052E1           CMP      R2,R3
    859                {
    860          	viewline++;
   \   000000A4   01108102           ADDEQ    R1,R1,#+1
   \   000000A8   00108005           STREQ    R1,[R0, #+0]
    861                }
    862                move_dw();
   \   000000AC   ........           _BLF     move_dw,??move_dw??rA
   \   000000B0   E0FFFFEA           B        ??GotoLine_0
    863              }
    864            }
    865            if (stk_fhandle!=-1)
   \                     ??GotoLine_2:
   \   000000B4   ........           LDR      R5,??DataTable68  ;; stk_fhandle
   \   000000B8   0640E0E1           MVN      R4,R6
   \   000000BC   000095E5           LDR      R0,[R5, #+0]
   \   000000C0   040050E1           CMP      R0,R4
   \   000000C4   0300000A           BEQ      ??GotoLine_4
    866            {
    867              fclose(stk_fhandle,&ul);
   \   000000C8   000095E5           LDR      R0,[R5, #+0]
   \   000000CC   0D10A0E1           MOV      R1,SP
   \   000000D0   0D0000EF           SWI      +13
    868              stk_fhandle=-1;
   \   000000D4   004085E5           STR      R4,[R5, #+0]
    869            }
    870            draw_mode=1; //ѕерерисовываем
   \                     ??GotoLine_4:
   \   000000D8   ........           LDR      R0,??DataTable156  ;; draw_mode
   \   000000DC   0110A0E3           MOV      R1,#+1
   \   000000E0   001080E5           STR      R1,[R0, #+0]
    871            if (!terminated) REDRAW();
   \   000000E4   ........           LDR      R0,??DataTable70  ;; terminated
   \   000000E8   000090E5           LDR      R0,[R0, #+0]
   \   000000EC   000050E3           CMP      R0,#+0
   \   000000F0   0000001A           BNE      ??GotoLine_5
   \   000000F4   720100EF           SWI      +370
    872          }
   \                     ??GotoLine_5:
   \   000000F8   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000FC   7080BDE8           POP      {R4-R6,PC}       ;; return
    873          

   \                                 In segment CODE, align 4, keep-with-next
    874          void LineUp(void)
    875          {
    876            // unsigned int l;
    877            // unsigned int p;
    878            if (curline) //Ќе начало!
   \                     LineUp:
   \   00000000   ........           LDR      R0,??DataTable106  ;; curline
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   1EFF2F01           BXEQ     LR
    879            {
    880              if (curline==viewline) viewline--; //≈сли перва€ строка экрана
   \   00000010   ........           LDR      R2,??DataTable138  ;; viewline
   \   00000014   003092E5           LDR      R3,[R2, #+0]
   \   00000018   030051E1           CMP      R1,R3
   \   0000001C   01304302           SUBEQ    R3,R3,#+1
   \   00000020   00308205           STREQ    R3,[R2, #+0]
    881              curline--;
   \   00000024   011041E2           SUB      R1,R1,#+1
   \   00000028   001080E5           STR      R1,[R0, #+0]
    882              move_up();
   \   0000002C   ........           _BF      move_up,??move_up??rA  ;; tailcall
    883            }
    884          }
    885          

   \                                 In segment CODE, align 4, keep-with-next
    886          void LineDw(void)
    887          {
    888            // unsigned int l;
    889            // unsigned int p;
    890            if (dsp==STKSZ) return; // онец текста
   \                     LineDw:
   \   00000000   ........           LDR      R0,??DataTable81  ;; dsp
   \   00000004   ........           LDR      R1,??DataTable80  ;; STKSZ
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   010050E1           CMP      R0,R1
   \   00000014   1EFF2F01           BXEQ     LR
    891            curline++;
   \   00000018   ........           LDR      R0,??DataTable106  ;; curline
    892            if ((curline-viewline)==max_y)
   \   0000001C   ........           LDR      R3,??DataTable145  ;; max_y
   \   00000020   001090E5           LDR      R1,[R0, #+0]
   \   00000024   003093E5           LDR      R3,[R3, #+0]
   \   00000028   011081E2           ADD      R1,R1,#+1
   \   0000002C   001080E5           STR      R1,[R0, #+0]
   \   00000030   ........           LDR      R0,??DataTable138  ;; viewline
   \   00000034   002090E5           LDR      R2,[R0, #+0]
   \   00000038   021041E0           SUB      R1,R1,R2
   \   0000003C   030051E1           CMP      R1,R3
    893            {
    894              viewline++;
   \   00000040   01108202           ADDEQ    R1,R2,#+1
   \   00000044   00108005           STREQ    R1,[R0, #+0]
    895            }
    896            move_dw();
   \   00000048   ........           _BF      move_dw,??move_dw??rA  ;; tailcall
    897          }
    898          

   \                                 In segment CODE, align 4, keep-with-next
    899          void PageUp(unsigned int lines)
    900          {
    901            unsigned int i;
    902            // unsigned int l;
    903            // unsigned int p;
    904            if (curline<lines)
   \                     PageUp:
   \   00000000   ........           LDR      R3,??DataTable138  ;; viewline
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   ........           LDR      R0,??DataTable106  ;; curline
   \   00000014   001090E5           LDR      R1,[R0, #+0]
   \   00000018   040051E1           CMP      R1,R4
   \   0000001C   0300002A           BCS      ??PageUp_0
    905            {
    906              i=curline;
   \   00000020   0140A0E1           MOV      R4,R1
    907              viewline=0;
   \   00000024   002083E5           STR      R2,[R3, #+0]
    908              curline=0;
   \   00000028   002080E5           STR      R2,[R0, #+0]
   \   0000002C   090000EA           B        ??PageUp_1
    909            }
    910            else
    911            {
    912              i=lines;
    913              curline-=i;
   \                     ??PageUp_0:
   \   00000030   041041E0           SUB      R1,R1,R4
   \   00000034   001080E5           STR      R1,[R0, #+0]
    914              if (viewline>i) viewline-=i; else viewline=0;
   \   00000038   000093E5           LDR      R0,[R3, #+0]
   \   0000003C   000054E1           CMP      R4,R0
   \   00000040   00208325           STRCS    R2,[R3, #+0]
   \   00000044   04004030           SUBCC    R0,R0,R4
   \   00000048   00008335           STRCC    R0,[R3, #+0]
   \   0000004C   010000EA           B        ??PageUp_1
    915            }
    916            while(i)
    917            {
    918              move_up();
   \                     ??PageUp_2:
   \   00000050   ........           _BLF     move_up,??move_up??rA
    919              i--;
   \   00000054   014044E2           SUB      R4,R4,#+1
    920            }
   \                     ??PageUp_1:
   \   00000058   000054E3           CMP      R4,#+0
   \   0000005C   FBFFFF1A           BNE      ??PageUp_2
    921          }
   \   00000060   1080BDE8           POP      {R4,PC}          ;; return
    922          

   \                                 In segment CODE, align 4, keep-with-next
    923          void PageDw(unsigned int lines)
    924          {
   \                     PageDw:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    925            unsigned int i;
    926            // unsigned int l;
    927            // unsigned int p;
    928            i=lines;
   \   00000004   ........           LDR      R4,??DataTable80  ;; STKSZ
   \   00000008   ........           LDR      R5,??DataTable81  ;; dsp
   \   0000000C   0060A0E1           MOV      R6,R0
    929            do
    930            {
    931              if (dsp==STKSZ) break; // онец текста
   \                     ??PageDw_0:
   \   00000010   001094E5           LDR      R1,[R4, #+0]
   \   00000014   000095E5           LDR      R0,[R5, #+0]
   \   00000018   010050E1           CMP      R0,R1
   \   0000001C   7080BD08           POPEQ    {R4-R6,PC}
    932              viewline++;
   \   00000020   ........           LDR      R0,??DataTable138  ;; viewline
   \   00000024   001090E5           LDR      R1,[R0, #+0]
   \   00000028   011081E2           ADD      R1,R1,#+1
   \   0000002C   001080E5           STR      R1,[R0, #+0]
    933              curline++;
   \   00000030   ........           LDR      R0,??DataTable106  ;; curline
   \   00000034   001090E5           LDR      R1,[R0, #+0]
   \   00000038   011081E2           ADD      R1,R1,#+1
   \   0000003C   001080E5           STR      R1,[R0, #+0]
    934              move_dw();
   \   00000040   ........           _BLF     move_dw,??move_dw??rA
    935            }
    936            while(--i);
   \   00000044   016056E2           SUBS     R6,R6,#+1
   \   00000048   F0FFFF1A           BNE      ??PageDw_0
    937          }
   \   0000004C   7080BDE8           POP      {R4-R6,PC}       ;; return
    938          

   \                                 In segment CODE, align 4, keep-with-next
    939          void ToEOL(void)
    940          {
    941            unsigned int i=strlen(editline);
   \                     ToEOL:
   \   00000000   ........           LDR      R0,??DataTable94  ;; editline
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   1B0000EF           SWI      +27
    942            if (i>255) curpos=0; else curpos=i;
   \   0000000C   ........           LDR      R1,??DataTable166  ;; curpos
    943            if (curpos>=max_x) viewpos=curpos-max_x+1; else viewpos=0;
   \   00000010   ........           LDR      R2,??DataTable96  ;; max_x
   \   00000014   400F50E3           CMP      R0,#+256
   \   00000018   002092E5           LDR      R2,[R2, #+0]
   \   0000001C   0000A023           MOVCS    R0,#+0
   \   00000020   000081E5           STR      R0,[R1, #+0]
   \   00000024   ........           LDR      R1,??DataTable170  ;; viewpos
   \   00000028   020050E1           CMP      R0,R2
   \   0000002C   02004020           SUBCS    R0,R0,R2
   \   00000030   01008022           ADDCS    R0,R0,#+1
   \   00000034   0000A033           MOVCC    R0,#+0
   \   00000038   000081E5           STR      R0,[R1, #+0]
   \   0000003C   0080BDE8           POP      {PC}             ;; return
    944          }
    945          

   \                                 In segment CODE, align 4, keep-with-next
    946          void ToBOL(void)
    947          {
    948            curpos=0;
   \                     ToBOL:
   \   00000000   ........           LDR      R1,??DataTable166  ;; curpos
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   000081E5           STR      R0,[R1, #+0]
    949            viewpos=0;
   \   0000000C   ........           LDR      R1,??DataTable170  ;; viewpos
   \   00000010   000081E5           STR      R0,[R1, #+0]
   \   00000014   1EFF2FE1           BX       LR               ;; return
    950          }
    951          

   \                                 In segment CODE, align 4, keep-with-next
    952          void WordLeft(void)
    953          {
    954            if (curpos==0) return;
   \                     WordLeft:
   \   00000000   ........           LDR      R0,??DataTable166  ;; curpos
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   1EFF2F01           BXEQ     LR
    955            for(;;)
    956            {
    957              if ((--curpos)==0) break;
   \                     ??WordLeft_0:
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   011051E2           SUBS     R1,R1,#+1
   \   00000018   001080E5           STR      R1,[R0, #+0]
   \   0000001C   0700000A           BEQ      ??WordLeft_1
    958              if ((editline[curpos-1]==' ')&&(editline[curpos]!=' ')) break;
   \   00000020   ........           LDR      R2,??DataTable94  ;; editline
   \   00000024   022081E0           ADD      R2,R1,R2
   \   00000028   013052E5           LDRB     R3,[R2, #-1]
   \   0000002C   200053E3           CMP      R3,#+32
   \   00000030   F6FFFF1A           BNE      ??WordLeft_0
   \   00000034   0020D2E5           LDRB     R2,[R2, #+0]
   \   00000038   200052E3           CMP      R2,#+32
   \   0000003C   F3FFFF0A           BEQ      ??WordLeft_0
    959            }
    960            while(curpos<viewpos)
   \                     ??WordLeft_1:
   \   00000040   ........           LDR      R0,??DataTable170  ;; viewpos
   \   00000044   002090E5           LDR      R2,[R0, #+0]
   \   00000048   020051E1           CMP      R1,R2
   \   0000004C   1EFF2F21           BXCS     LR
    961            {
    962              if (viewpos>8) viewpos-=8; else viewpos=0;
   \   00000050   090052E3           CMP      R2,#+9
   \   00000054   0020A033           MOVCC    R2,#+0
   \   00000058   08204222           SUBCS    R2,R2,#+8
   \   0000005C   002080E5           STR      R2,[R0, #+0]
   \   00000060   F6FFFFEA           B        ??WordLeft_1
    963            }
    964          }
    965          

   \                                 In segment CODE, align 4, keep-with-next
    966          void WordRight(void)
    967          {
    968            if (!editline[curpos]) return;
   \                     WordRight:
   \   00000000   ........           LDR      R0,??DataTable166  ;; curpos
   \   00000004   ........           LDR      R1,??DataTable94  ;; editline
   \   00000008   002090E5           LDR      R2,[R0, #+0]
   \   0000000C   0120D2E7           LDRB     R2,[R2, +R1]
   \   00000010   000052E3           CMP      R2,#+0
   \   00000014   1EFF2F01           BXEQ     LR
    969            for(;;)
    970            {
    971              curpos++;
   \                     ??WordRight_0:
   \   00000018   002090E5           LDR      R2,[R0, #+0]
   \   0000001C   012082E2           ADD      R2,R2,#+1
   \   00000020   002080E5           STR      R2,[R0, #+0]
    972              if (!editline[curpos]) break;
   \   00000024   013082E0           ADD      R3,R2,R1
   \   00000028   00C0D3E5           LDRB     R12,[R3, #+0]
   \   0000002C   00005CE3           CMP      R12,#+0
   \   00000030   0500000A           BEQ      ??WordRight_1
    973              if ((editline[curpos-1]==' ')&&(editline[curpos]!=' ')) break;
   \   00000034   01C053E5           LDRB     R12,[R3, #-1]
   \   00000038   20005CE3           CMP      R12,#+32
   \   0000003C   F5FFFF1A           BNE      ??WordRight_0
   \   00000040   0030D3E5           LDRB     R3,[R3, #+0]
   \   00000044   200053E3           CMP      R3,#+32
   \   00000048   F2FFFF0A           BEQ      ??WordRight_0
    974            }
    975            while((curpos-viewpos)>=max_x)
   \                     ??WordRight_1:
   \   0000004C   ........           LDR      R0,??DataTable170  ;; viewpos
   \   00000050   ........           LDR      R12,??DataTable96  ;; max_x
   \   00000054   001090E5           LDR      R1,[R0, #+0]
   \   00000058   00C09CE5           LDR      R12,[R12, #+0]
   \   0000005C   013042E0           SUB      R3,R2,R1
   \   00000060   0C0053E1           CMP      R3,R12
    976            {
    977              viewpos+=8;
   \   00000064   08108122           ADDCS    R1,R1,#+8
   \   00000068   00108025           STRCS    R1,[R0, #+0]
   \   0000006C   F6FFFF2A           BCS      ??WordRight_1
   \   00000070   1EFF2FE1           BX       LR               ;; return
    978            }
    979          }
    980          

   \                                 In segment CODE, align 4, keep-with-next
    981          void DrawInfo(void)
    982          {
   \                     DrawInfo:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R5,??DataTable109  ;; e_ws
   \   00000008   10D04DE2           SUB      SP,SP,#+16
    983            TTime t;
    984            TDate d;
    985            GetDateTime(&d,&t);
   \   0000000C   0D10A0E1           MOV      R1,SP
   \   00000010   08008DE2           ADD      R0,SP,#+8
   \   00000014   B40000EF           SWI      +180
    986          
    987            DrawRoundedFrame(0,0,131,175,0,0,0,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(20));
   \   00000018   1400A0E3           MOV      R0,#+20
   \   0000001C   2E0100EF           SWI      +302
   \   00000020   0040A0E1           MOV      R4,R0
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   2E0100EF           SWI      +302
   \   0000002C   10002DE9           PUSH     {R4}
   \   00000030   ........           LDR      R4,??DataTable110  ;; info_ws
   \   00000034   01002DE9           PUSH     {R0}
   \   00000038   AF30A0E3           MOV      R3,#+175
   \   0000003C   8320A0E3           MOV      R2,#+131
   \   00000040   0010A0E3           MOV      R1,#+0
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   01002DE9           PUSH     {R0}
   \   0000004C   01002DE9           PUSH     {R0}
   \   00000050   01002DE9           PUSH     {R0}
   \   00000054   500100EF           SWI      +336
    988            str_2ws(e_ws,filename,126);
   \   00000058   ........           LDR      R1,??DataTable99  ;; filename
   \   0000005C   000095E5           LDR      R0,[R5, #+0]
   \   00000060   7E20A0E3           MOV      R2,#+126
   \   00000064   6C0100EF           SWI      +364
    989            wsprintf(info_ws,"Time:\n%02d:%02d\n"
    990          	   "Current line %lu\nTotal lines %lu\n\nCurrent file:\n%w",
    991          	   t.hour,t.min,curline,total_line,e_ws);
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   7C109FE5           LDR      R1,??DrawInfo_0  ;; `?<Constant "Time:\\n%02d:%02d\\nCurre...">`
   \   00000070   01002DE9           PUSH     {R0}
   \   00000074   ........           LDR      R0,??DataTable100  ;; total_line
   \   00000078   000090E5           LDR      R0,[R0, #+0]
   \   0000007C   01002DE9           PUSH     {R0}
   \   00000080   ........           LDR      R0,??DataTable106  ;; curline
   \   00000084   000090E5           LDR      R0,[R0, #+0]
   \   00000088   01002DE9           PUSH     {R0}
   \   0000008C   2130DDE5           LDRB     R3,[SP, #+33]
   \   00000090   2020DDE5           LDRB     R2,[SP, #+32]
   \   00000094   000094E5           LDR      R0,[R4, #+0]
   \   00000098   240100EF           SWI      +292
    992            DrawString(info_ws,3,3,128,172,11,2,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
   \   0000009C   1700A0E3           MOV      R0,#+23
   \   000000A0   2E0100EF           SWI      +302
   \   000000A4   0050A0E1           MOV      R5,R0
   \   000000A8   0000A0E3           MOV      R0,#+0
   \   000000AC   2E0100EF           SWI      +302
   \   000000B0   20002DE9           PUSH     {R5}
   \   000000B4   01002DE9           PUSH     {R0}
   \   000000B8   8030A0E3           MOV      R3,#+128
   \   000000BC   0320A0E3           MOV      R2,#+3
   \   000000C0   0210A0E1           MOV      R1,R2
   \   000000C4   0200A0E3           MOV      R0,#+2
   \   000000C8   01002DE9           PUSH     {R0}
   \   000000CC   0B00A0E3           MOV      R0,#+11
   \   000000D0   01002DE9           PUSH     {R0}
   \   000000D4   AC00A0E3           MOV      R0,#+172
   \   000000D8   01002DE9           PUSH     {R0}
   \   000000DC   000094E5           LDR      R0,[R4, #+0]
   \   000000E0   4C0100EF           SWI      +332
   \   000000E4   34D08DE2           ADD      SP,SP,#+52
    993          }
   \   000000E8   10D08DE2           ADD      SP,SP,#+16
   \   000000EC   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??DrawInfo_0:
   \   000000F0   ........           DC32     `?<Constant "Time:\\n%02d:%02d\\nCurre...">`
    994          
    995          //=============================================================================
    996          //¬ывод на экран
    997          //=============================================================================

   \                                 In segment CODE, align 4, keep-with-next
    998          void DrawScreen(void)
    999          {
   1000            unsigned int y;
   1001            unsigned int p;
   1002            unsigned int c;
   1003            int f;
   1004            unsigned int my;
   1005          
   1006            int *ink=GetPaletteAdrByColorIndex(INK);
   \                     DrawScreen:
   \   00000000   10099FE5           LDR      R0,??DrawScreen_1+0x4  ;; INK
   \   00000004   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000008   0C799FE5           LDR      R7,??DrawScreen_1+0x8  ;; `?<Constant "Goto line %u...">`
   \   0000000C   ........           LDR      R8,??DataTable102  ;; upinfo_ws
   \   00000010   ........           LDR      R6,??DataTable103  ;; disk_access
   \   00000014   04D04DE2           SUB      SP,SP,#+4
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   2E0100EF           SWI      +302
   \   00000020   0040A0E1           MOV      R4,R0
   1007            int *paper=GetPaletteAdrByColorIndex(PAPER);
   \   00000024   F4089FE5           LDR      R0,??DrawScreen_1+0xC  ;; PAPER
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   2E0100EF           SWI      +302
   \   00000030   0050A0E1           MOV      R5,R0
   1008          
   1009            if (disk_access)
   \   00000034   000096E5           LDR      R0,[R6, #+0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   7100000A           BEQ      ??DrawScreen_2
   1010            {
   1011              DrwImg((IMGHDR *)&imgDiskAccess,0,0,ink,paper);
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   0430A0E1           MOV      R3,R4
   \   0000004C   0020A0E3           MOV      R2,#+0
   \   00000050   CC089FE5           LDR      R0,??DrawScreen_1+0x10  ;; imgDiskAccess
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   ........           BL       DrwImg
   1012              if (draw_mode==2)
   \   0000005C   ........           LDR      R0,??DataTable156  ;; draw_mode
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   04D08DE2           ADD      SP,SP,#+4
   \   00000068   020050E3           CMP      R0,#+2
   \   0000006C   0400001A           BNE      ??DrawScreen_3
   1013              {
   1014                wsprintf(upinfo_ws,"Goto line %u...",curline);
   \   00000070   ........           LDR      R0,??DataTable106  ;; curline
   \   00000074   0710A0E1           MOV      R1,R7
   \   00000078   002090E5           LDR      R2,[R0, #+0]
   \   0000007C   000098E5           LDR      R0,[R8, #+0]
   \   00000080   0C0000EA           B        ??DrawScreen_4
   1015                goto L_W1;
   1016              }
   1017              if (disk_access==SAVE_FILE)
   \                     ??DrawScreen_3:
   \   00000084   000098E5           LDR      R0,[R8, #+0]
   \   00000088   001096E5           LDR      R1,[R6, #+0]
   \   0000008C   200051E3           CMP      R1,#+32
   \   00000090   0200001A           BNE      ??DrawScreen_5
   1018              {
   1019                wsprintf(upinfo_ws,"Saving...");
   \   00000094   8C189FE5           LDR      R1,??DrawScreen_1+0x14  ;; `?<Constant "Saving...">`
   \   00000098   240100EF           SWI      +292
   \   0000009C   060000EA           B        ??DrawScreen_6
   1020                goto L_W1;
   1021              }
   1022              if (disk_access==FIRSTLOAD)
   \                     ??DrawScreen_5:
   \   000000A0   001096E5           LDR      R1,[R6, #+0]
   \   000000A4   010051E3           CMP      R1,#+1
   \   000000A8   1F00001A           BNE      ??DrawScreen_7
   1023              {
   1024                wsprintf(upinfo_ws,"Line %u...",curline);
   \   000000AC   ........           LDR      R1,??DataTable106  ;; curline
   \   000000B0   002091E5           LDR      R2,[R1, #+0]
   \   000000B4   70189FE5           LDR      R1,??DrawScreen_1+0x18  ;; `?<Constant "Line %u...">`
   \                     ??DrawScreen_4:
   \   000000B8   240100EF           SWI      +292
   1025              L_W1:
   1026                DrawRoundedFrame(8,0,131,11,0,0,0,paper,paper);
   \                     ??DrawScreen_6:
   \   000000BC   0500A0E1           MOV      R0,R5
   \   000000C0   01002DE9           PUSH     {R0}
   \   000000C4   01002DE9           PUSH     {R0}
   \   000000C8   0B30A0E3           MOV      R3,#+11
   \   000000CC   8320A0E3           MOV      R2,#+131
   \   000000D0   0010A0E3           MOV      R1,#+0
   \   000000D4   0000A0E3           MOV      R0,#+0
   \   000000D8   01002DE9           PUSH     {R0}
   \   000000DC   01002DE9           PUSH     {R0}
   \   000000E0   01002DE9           PUSH     {R0}
   \   000000E4   0800A0E3           MOV      R0,#+8
   \   000000E8   500100EF           SWI      +336
   1027                DrawString(upinfo_ws,8,0,131,11,11,2,ink,paper);
   \   000000EC   0500A0E1           MOV      R0,R5
   \   000000F0   01002DE9           PUSH     {R0}
   \   000000F4   8330A0E3           MOV      R3,#+131
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   0810A0E3           MOV      R1,#+8
   \                     ??DrawScreen_8:
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   01002DE9           PUSH     {R0}
   \   00000108   0200A0E3           MOV      R0,#+2
   \   0000010C   01002DE9           PUSH     {R0}
   \   00000110   0B00A0E3           MOV      R0,#+11
   \   00000114   01002DE9           PUSH     {R0}
   \   00000118   01002DE9           PUSH     {R0}
   \   0000011C   000098E5           LDR      R0,[R8, #+0]
   \   00000120   4C0100EF           SWI      +332
   \   00000124   28D08DE2           ADD      SP,SP,#+40
   \   00000128   120000EA           B        ??DrawScreen_9
   1028                goto L_WELLCOME2;
   1029              }
   1030              if (draw_mode==255) goto L_WELLCOME;
   \                     ??DrawScreen_7:
   \   0000012C   ........           LDR      R0,??DataTable156  ;; draw_mode
   \   00000130   000090E5           LDR      R0,[R0, #+0]
   \   00000134   FF0050E3           CMP      R0,#+255
   \   00000138   F301001A           BNE      ??DrawScreen_10
   1031            }
   1032            else
   1033            {
   1034              switch(draw_mode)
   1035              {
   1036              case 1:
   1037                my=editmode?max_y_emode:max_y;
   1038                zeromem(editline,256);
   1039                //ѕерерисовываем весь экран
   1040                y=curline-viewline;
   1041                p=usp;
   1042                if (dsp!=STKSZ) c=dstk[dsp]; else c=0; //ѕервый символ текущей строки - если буква - форматируем
   1043                while(y)
   1044                {
   1045          	//≈сть строки выше текущей
   1046          	p=bl_us(p);
   1047          	if ((c>' ')&&(!(HISTORY.fmt&0x80))&&(cursor_off))
   1048          	  drawFrmStkStr(ustk+p,--y,viewpos,-1);
   1049          	else
   1050          	  drawStkStr(ustk+p,--y,viewpos,-1);
   1051          	c=ustk[p];
   1052                }
   1053                y=curline-viewline;
   1054                //“еперь печатаем от текущей вниз
   1055                p=dsp;
   1056                f=0;
   1057                while(y!=(my))
   1058                {
   1059          	if (p==STKSZ)
   1060          	{
   1061          	  drawStkStr("<<EOF>>",y++,0,-1);
   1062          	  while(y!=my) drawStkStr("",y++,viewpos,-1);
   1063          	  break;
   1064          	}
   1065          	else
   1066          	{
   1067          	  unsigned int p1;
   1068          	  p1=bl_ds(p);
   1069          	  if (p1!=STKSZ) c=dstk[p1]; else c=0; //ѕосл. строка не расшир€етс€
   1070          	  if ((c>' ')&&(!(HISTORY.fmt&0x80))&&(cursor_off))
   1071          	    drawFrmStkStr(dstk+p,y++,viewpos,f);
   1072          	  else
   1073          	    drawStkStr(dstk+p,y++,viewpos,f);
   1074          	  p=p1;
   1075          	  f=-1;
   1076          	}
   1077                }
   1078                //DrawCursor(curpos-viewpos,curline-viewline);
   1079                {
   1080          	//–исуем скролл-бар
   1081          	char *d=myscr+16; //ѕоследний байт
   1082          	if (total_line)
   1083          	{
   1084          	  y=((editmode?128-8:176-8)*curline)/total_line;
   1085          	}
   1086          	else
   1087          	{
   1088          	  y=0;
   1089          	}
   1090          	p=0;
   1091          	do
   1092          	{
   1093          	  if ((p<y)||(p>(y+7)))
   1094          	  {
   1095          	    *d=p&1?0x50:0x28;
   1096          	  }
   1097          	  else
   1098          	  {
   1099          	    *d=0x78;
   1100          	  }
   1101          	  d+=17;
   1102          	  p++;
   1103          	}
   1104          	while(p<176);
   1105                }
   1106                if (editmode)
   1107                {
   1108          	MyScrHdr.h=128;
   1109          	DrawRoundedFrame(0,22,131,23,0,0,0,paper,paper);
   1110          	DrawRoundedFrame(0,24+128,131,25+128,0,0,0,paper,paper);
   1111          	DrwImg(&MyScrHdr,0,24,ink,paper);
   1112                }
   1113                else
   1114                {
   1115          	MyScrHdr.h=176;
   1116          	DrwImg(&MyScrHdr,0,0,ink,paper);
   1117                }
   1118                cursor_cnt=3;
   1119                goto L_CURSOR;
   1120              case 2:
   1121                //ѕроцесс перехода на строку
   1122                {
   1123          	wsprintf(upinfo_ws,"Goto line %u...",curline);
   1124          	DrawRoundedFrame(0,0,131,11,0,0,0,paper,paper);
   1125          	DrawString(upinfo_ws,0,0,131,11,11,2,ink,paper);
   1126          	goto L_WELLCOME2;
   1127                }
   1128                //return;
   1129              case 4:
   1130                //Ёкран информации
   1131                DrawInfo();
   1132                return;
   1133              case 255:
   1134                //Ёкран приветстви€
   1135              L_WELLCOME:
   1136                DrawRoundedFrame(0,0,131,11,0,0,0,paper,paper);
   \                     ??DrawScreen_11:
   \   0000013C   0500A0E1           MOV      R0,R5
   \   00000140   01002DE9           PUSH     {R0}
   \   00000144   01002DE9           PUSH     {R0}
   \   00000148   0B30A0E3           MOV      R3,#+11
   \   0000014C   8320A0E3           MOV      R2,#+131
   \   00000150   0010A0E3           MOV      R1,#+0
   \   00000154   0000A0E3           MOV      R0,#+0
   \   00000158   01002DE9           PUSH     {R0}
   \   0000015C   01002DE9           PUSH     {R0}
   \   00000160   01002DE9           PUSH     {R0}
   \   00000164   500100EF           SWI      +336
   1137                draw_mode=1;
   \   00000168   ........           LDR      R0,??DataTable156  ;; draw_mode
   \   0000016C   0110A0E3           MOV      R1,#+1
   \   00000170   001080E5           STR      R1,[R0, #+0]
   \   00000174   14D08DE2           ADD      SP,SP,#+20
   \                     ??DrawScreen_9:
   \   00000178   ........           LDR      R6,??DataTable109  ;; e_ws
   \   0000017C   ........           LDR      R7,??DataTable110  ;; info_ws
   1138              L_WELLCOME2:
   1139                DrawRoundedFrame(0,12,131,175,0,0,0,paper,paper);
   \   00000180   0500A0E1           MOV      R0,R5
   \   00000184   01002DE9           PUSH     {R0}
   \   00000188   01002DE9           PUSH     {R0}
   \   0000018C   AF30A0E3           MOV      R3,#+175
   \   00000190   8320A0E3           MOV      R2,#+131
   \   00000194   0C10A0E3           MOV      R1,#+12
   \   00000198   0000A0E3           MOV      R0,#+0
   \   0000019C   01002DE9           PUSH     {R0}
   \   000001A0   01002DE9           PUSH     {R0}
   \   000001A4   01002DE9           PUSH     {R0}
   \   000001A8   500100EF           SWI      +336
   1140                str_2ws(e_ws,filename,126);
   \   000001AC   ........           LDR      R1,??DataTable111  ;; filename
   \   000001B0   000096E5           LDR      R0,[R6, #+0]
   \   000001B4   7E20A0E3           MOV      R2,#+126
   \   000001B8   6C0100EF           SWI      +364
   1141                wsprintf(info_ws,"Text viewer/editor\nversion 1.2\n" __DATE__ "\n" __TIME__ "\nCopyright(C)2006\nby Rst7/CBSIE\n\n%w",e_ws);
   \   000001BC   002096E5           LDR      R2,[R6, #+0]
   \   000001C0   68179FE5           LDR      R1,??DrawScreen_1+0x1C  ;; `?<Constant "Text viewer/editor\\nve...">`
   \   000001C4   000097E5           LDR      R0,[R7, #+0]
   \   000001C8   240100EF           SWI      +292
   1142                DrawString(info_ws,0,20,131,175,11,2,ink,paper);
   \   000001CC   20002DE9           PUSH     {R5}
   \   000001D0   10002DE9           PUSH     {R4}
   \   000001D4   0200A0E3           MOV      R0,#+2
   \   000001D8   01002DE9           PUSH     {R0}
   \   000001DC   8330A0E3           MOV      R3,#+131
   \   000001E0   1420A0E3           MOV      R2,#+20
   \   000001E4   0010A0E3           MOV      R1,#+0
   \   000001E8   0B00A0E3           MOV      R0,#+11
   \   000001EC   01002DE9           PUSH     {R0}
   \   000001F0   AF00A0E3           MOV      R0,#+175
   \   000001F4   01002DE9           PUSH     {R0}
   \   000001F8   000097E5           LDR      R0,[R7, #+0]
   \   000001FC   4C0100EF           SWI      +332
   \   00000200   28D08DE2           ADD      SP,SP,#+40
   1143                return;
   \   00000204   7C0100EA           B        ??DrawScreen_12
   \                     ??DrawScreen_2:
   \   00000208   ........           LDR      R0,??DataTable156  ;; draw_mode
   \   0000020C   ........           LDR      R6,??DataTable170  ;; viewpos
   \   00000210   000090E5           LDR      R0,[R0, #+0]
   \   00000214   FF0050E3           CMP      R0,#+255
   \   00000218   B801008A           BHI      ??DrawScreen_13
   \   0000021C   021F8FE2           ADR      R1,??DrawScreen_0
   \   00000220   8000A0E1           MOV      R0,R0, LSL #+1
   \   00000224   F01091E1           LDRSH    R1,[R1, R0]
   \   00000228   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??DrawScreen_0:
   \   0000022C   75017F005C01       DC16     +373,+127,+348,+436
   \              B401        
   \   00000234   7201B401B401       DC16     +370,+436,+436,+436
   \              B401        
   \   0000023C   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   00000244   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   0000024C   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   00000254   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   0000025C   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   00000264   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   0000026C   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   00000274   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   0000027C   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   00000284   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   0000028C   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   00000294   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   0000029C   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000002A4   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000002AC   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000002B4   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000002BC   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000002C4   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000002CC   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000002D4   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000002DC   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000002E4   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000002EC   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000002F4   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000002FC   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   00000304   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   0000030C   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   00000314   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   0000031C   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   00000324   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   0000032C   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   00000334   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   0000033C   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   00000344   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   0000034C   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   00000354   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   0000035C   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   00000364   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   0000036C   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   00000374   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   0000037C   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   00000384   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   0000038C   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   00000394   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   0000039C   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000003A4   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000003AC   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000003B4   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000003BC   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000003C4   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000003CC   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000003D4   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000003DC   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000003E4   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000003EC   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000003F4   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   000003FC   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   00000404   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   0000040C   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   00000414   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   0000041C   B401B401B401       DC16     +436,+436,+436,+436
   \              B401        
   \   00000424   B401B401B401       DC16     +436,+436,+436,+65475
   \              C3FF        
   \                     ??DrawScreen_14:
   \   0000042C   ........           LDR      R0,??DataTable199  ;; editmode
   \   00000430   ........           LDR      R8,??DataTable205  ;; dsp
   \   00000434   000090E5           LDR      R0,[R0, #+0]
   \   00000438   000050E3           CMP      R0,#+0
   \   0000043C   ........           LDRNE    R1,??DataTable202  ;; max_y_emode
   \   00000440   ........           LDR      R0,??DataTable190  ;; editline
   \   00000444   ........           LDREQ    R1,??DataTable145  ;; max_y
   \   00000448   001091E5           LDR      R1,[R1, #+0]
   \   0000044C   00108DE5           STR      R1,[SP, #+0]
   \   00000450   401FA0E3           MOV      R1,#+256
   \   00000454   1D0100EF           SWI      +285
   \   00000458   ........           LDR      R0,??DataTable106  ;; curline
   \   0000045C   ........           LDR      R1,??DataTable138  ;; viewline
   \   00000460   000090E5           LDR      R0,[R0, #+0]
   \   00000464   001091E5           LDR      R1,[R1, #+0]
   \   00000468   01B040E0           SUB      R11,R0,R1
   \   0000046C   ........           LDR      R0,??DataTable181  ;; usp
   \   00000470   ........           LDR      R1,??DataTable206  ;; STKSZ
   \   00000474   007090E5           LDR      R7,[R0, #+0]
   \   00000478   000098E5           LDR      R0,[R8, #+0]
   \   0000047C   001091E5           LDR      R1,[R1, #+0]
   \   00000480   010050E1           CMP      R0,R1
   \   00000484   0300000A           BEQ      ??DrawScreen_15
   \   00000488   ........           LDR      R1,??DataTable207  ;; dstk
   \   0000048C   001091E5           LDR      R1,[R1, #+0]
   \   00000490   01A0D0E7           LDRB     R10,[R0, +R1]
   \   00000494   090000EA           B        ??DrawScreen_16
   \                     ??DrawScreen_15:
   \   00000498   00A0A0E3           MOV      R10,#+0
   \   0000049C   070000EA           B        ??DrawScreen_16
   \                     ??DrawScreen_17:
   \   000004A0   000099E5           LDR      R0,[R9, #+0]
   \   000004A4   002096E5           LDR      R2,[R6, #+0]
   \   000004A8   0030E0E3           MVN      R3,#+0
   \   000004AC   0B10A0E1           MOV      R1,R11
   \   000004B0   000087E0           ADD      R0,R7,R0
   \   000004B4   ........           BL       drawStkStr
   \                     ??DrawScreen_18:
   \   000004B8   000099E5           LDR      R0,[R9, #+0]
   \   000004BC   00A0D7E7           LDRB     R10,[R7, +R0]
   \                     ??DrawScreen_16:
   \   000004C0   00005BE3           CMP      R11,#+0
   \   000004C4   1500000A           BEQ      ??DrawScreen_19
   \   000004C8   ........           LDR      R9,??DataTable182  ;; ustk
   \   000004CC   0700A0E1           MOV      R0,R7
   \   000004D0   ........           _BLF     bl_us,??bl_us??rA
   \   000004D4   0070A0E1           MOV      R7,R0
   \   000004D8   01B04BE2           SUB      R11,R11,#+1
   \   000004DC   21005AE3           CMP      R10,#+33
   \   000004E0   EEFFFF3A           BCC      ??DrawScreen_17
   \   000004E4   48049FE5           LDR      R0,??DrawScreen_1+0x20  ;; HISTORY + 129
   \   000004E8   0000D0E5           LDRB     R0,[R0, #+0]
   \   000004EC   800010E3           TST      R0,#0x80
   \   000004F0   EAFFFF1A           BNE      ??DrawScreen_17
   \   000004F4   ........           LDR      R0,??DataTable125  ;; cursor_off
   \   000004F8   000090E5           LDR      R0,[R0, #+0]
   \   000004FC   000050E3           CMP      R0,#+0
   \   00000500   E6FFFF0A           BEQ      ??DrawScreen_17
   \   00000504   000099E5           LDR      R0,[R9, #+0]
   \   00000508   002096E5           LDR      R2,[R6, #+0]
   \   0000050C   0030E0E3           MVN      R3,#+0
   \   00000510   0B10A0E1           MOV      R1,R11
   \   00000514   000087E0           ADD      R0,R7,R0
   \   00000518   ........           BL       drawFrmStkStr
   \   0000051C   E5FFFFEA           B        ??DrawScreen_18
   \                     ??DrawScreen_19:
   \   00000520   ........           LDR      R0,??DataTable106  ;; curline
   \   00000524   ........           LDR      R1,??DataTable138  ;; viewline
   \   00000528   000090E5           LDR      R0,[R0, #+0]
   \   0000052C   001091E5           LDR      R1,[R1, #+0]
   \   00000530   008098E5           LDR      R8,[R8, #+0]
   \   00000534   017040E0           SUB      R7,R0,R1
   \   00000538   0090A0E3           MOV      R9,#+0
   \   0000053C   090000EA           B        ??DrawScreen_20
   \                     ??DrawScreen_21:
   \   00000540   ........           LDR      R0,??DataTable207  ;; dstk
   \   00000544   002096E5           LDR      R2,[R6, #+0]
   \   00000548   000090E5           LDR      R0,[R0, #+0]
   \   0000054C   0930A0E1           MOV      R3,R9
   \   00000550   0710A0E1           MOV      R1,R7
   \   00000554   000088E0           ADD      R0,R8,R0
   \   00000558   ........           BL       drawStkStr
   \                     ??DrawScreen_22:
   \   0000055C   0A70A0E1           MOV      R7,R10
   \   00000560   0B80A0E1           MOV      R8,R11
   \   00000564   0090E0E3           MVN      R9,#+0
   \                     ??DrawScreen_20:
   \   00000568   00009DE5           LDR      R0,[SP, #+0]
   \   0000056C   000057E1           CMP      R7,R0
   \   00000570   1600000A           BEQ      ??DrawScreen_23
   \   00000574   ........           LDR      R0,??DataTable206  ;; STKSZ
   \   00000578   01A087E2           ADD      R10,R7,#+1
   \   0000057C   000090E5           LDR      R0,[R0, #+0]
   \   00000580   000058E1           CMP      R8,R0
   \   00000584   1C00001A           BNE      ??DrawScreen_24
   \   00000588   A8039FE5           LDR      R0,??DrawScreen_1+0x24  ;; `?<Constant "<<EOF>>">`
   \   0000058C   0030E0E3           MVN      R3,#+0
   \   00000590   0020A0E3           MOV      R2,#+0
   \   00000594   0710A0E1           MOV      R1,R7
   \   00000598   ........           BL       drawStkStr
   \   0000059C   00009DE5           LDR      R0,[SP, #+0]
   \   000005A0   0A70A0E1           MOV      R7,R10
   \   000005A4   000057E1           CMP      R7,R0
   \   000005A8   0800000A           BEQ      ??DrawScreen_23
   \                     ??DrawScreen_25:
   \   000005AC   002096E5           LDR      R2,[R6, #+0]
   \   000005B0   0030E0E3           MVN      R3,#+0
   \   000005B4   0710A0E1           MOV      R1,R7
   \   000005B8   D50F8FE2           ADR      R0,??DrawScreen_1  ;; ""
   \   000005BC   ........           BL       drawStkStr
   \   000005C0   00009DE5           LDR      R0,[SP, #+0]
   \   000005C4   017087E2           ADD      R7,R7,#+1
   \   000005C8   000057E1           CMP      R7,R0
   \   000005CC   F6FFFF1A           BNE      ??DrawScreen_25
   \                     ??DrawScreen_23:
   \   000005D0   ........           LDR      R0,??DataTable193  ;; total_line
   \   000005D4   60239FE5           LDR      R2,??DrawScreen_1+0x28  ;; myscr + 16
   \   000005D8   001090E5           LDR      R1,[R0, #+0]
   \   000005DC   000051E3           CMP      R1,#+0
   \   000005E0   2300000A           BEQ      ??DrawScreen_26
   \   000005E4   ........           LDR      R0,??DataTable199  ;; editmode
   \   000005E8   000090E5           LDR      R0,[R0, #+0]
   \   000005EC   000050E3           CMP      R0,#+0
   \   000005F0   A800A003           MOVEQ    R0,#+168
   \   000005F4   7800A013           MOVNE    R0,#+120
   \   000005F8   190000EA           B        ??DrawScreen_27
   \                     ??DrawScreen_24:
   \   000005FC   0800A0E1           MOV      R0,R8
   \   00000600   ........           _BLF     bl_ds,??bl_ds??rA
   \   00000604   00B0A0E1           MOV      R11,R0
   \   00000608   ........           LDR      R0,??DataTable206  ;; STKSZ
   \   0000060C   000090E5           LDR      R0,[R0, #+0]
   \   00000610   00005BE1           CMP      R11,R0
   \   00000614   C9FFFF0A           BEQ      ??DrawScreen_21
   \   00000618   ........           LDR      R0,??DataTable207  ;; dstk
   \   0000061C   000090E5           LDR      R0,[R0, #+0]
   \   00000620   0010DBE7           LDRB     R1,[R11, +R0]
   \   00000624   210051E3           CMP      R1,#+33
   \   00000628   C4FFFF3A           BCC      ??DrawScreen_21
   \   0000062C   00139FE5           LDR      R1,??DrawScreen_1+0x20  ;; HISTORY + 129
   \   00000630   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000634   800011E3           TST      R1,#0x80
   \   00000638   C0FFFF1A           BNE      ??DrawScreen_21
   \   0000063C   ........           LDR      R1,??DataTable125  ;; cursor_off
   \   00000640   001091E5           LDR      R1,[R1, #+0]
   \   00000644   000051E3           CMP      R1,#+0
   \   00000648   BCFFFF0A           BEQ      ??DrawScreen_21
   \   0000064C   002096E5           LDR      R2,[R6, #+0]
   \   00000650   0930A0E1           MOV      R3,R9
   \   00000654   0710A0E1           MOV      R1,R7
   \   00000658   000088E0           ADD      R0,R8,R0
   \   0000065C   ........           BL       drawFrmStkStr
   \   00000660   BDFFFFEA           B        ??DrawScreen_22
   \                     ??DrawScreen_27:
   \   00000664   ........           LDR      R3,??DataTable106  ;; curline
   \   00000668   003093E5           LDR      R3,[R3, #+0]
   \   0000066C   930000E0           MUL      R0,R3,R0
   \   00000670   ........           _BLF     ??divu32_a,??rA??divu32_a
   \                     ??DrawScreen_26:
   \   00000674   0000A0E3           MOV      R0,#+0
   \                     ??DrawScreen_28:
   \   00000678   010050E1           CMP      R0,R1
   \   0000067C   07308122           ADDCS    R3,R1,#+7
   \   00000680   00005321           CMPCS    R3,R0
   \   00000684   0300002A           BCS      ??DrawScreen_29
   \   00000688   010010E3           TST      R0,#0x1
   \   0000068C   2830A003           MOVEQ    R3,#+40
   \   00000690   5030A013           MOVNE    R3,#+80
   \   00000694   000000EA           B        ??DrawScreen_30
   \                     ??DrawScreen_29:
   \   00000698   7830A0E3           MOV      R3,#+120
   \                     ??DrawScreen_30:
   \   0000069C   ........           STRB     R3,[R2], #+17
   \   000006A0   010080E2           ADD      R0,R0,#+1
   \   000006A4   B00050E3           CMP      R0,#+176
   \   000006A8   F2FFFF3A           BCC      ??DrawScreen_28
   \   000006AC   ........           LDR      R0,??DataTable199  ;; editmode
   \   000006B0   88729FE5           LDR      R7,??DrawScreen_1+0x2C  ;; MyScrHdr
   \   000006B4   000090E5           LDR      R0,[R0, #+0]
   \   000006B8   000050E3           CMP      R0,#+0
   \   000006BC   1C00000A           BEQ      ??DrawScreen_31
   \   000006C0   8000A0E3           MOV      R0,#+128
   \   000006C4   0100C7E5           STRB     R0,[R7, #+1]
   \   000006C8   0500A0E1           MOV      R0,R5
   \   000006CC   01002DE9           PUSH     {R0}
   \   000006D0   01002DE9           PUSH     {R0}
   \   000006D4   1730A0E3           MOV      R3,#+23
   \   000006D8   8320A0E3           MOV      R2,#+131
   \   000006DC   1610A0E3           MOV      R1,#+22
   \   000006E0   0000A0E3           MOV      R0,#+0
   \   000006E4   01002DE9           PUSH     {R0}
   \   000006E8   01002DE9           PUSH     {R0}
   \   000006EC   01002DE9           PUSH     {R0}
   \   000006F0   500100EF           SWI      +336
   \   000006F4   0500A0E1           MOV      R0,R5
   \   000006F8   01002DE9           PUSH     {R0}
   \   000006FC   01002DE9           PUSH     {R0}
   \   00000700   9930A0E3           MOV      R3,#+153
   \   00000704   8320A0E3           MOV      R2,#+131
   \   00000708   9810A0E3           MOV      R1,#+152
   \   0000070C   0000A0E3           MOV      R0,#+0
   \   00000710   01002DE9           PUSH     {R0}
   \   00000714   01002DE9           PUSH     {R0}
   \   00000718   01002DE9           PUSH     {R0}
   \   0000071C   500100EF           SWI      +336
   \   00000720   28D08DE2           ADD      SP,SP,#+40
   \   00000724   20002DE9           PUSH     {R5}
   \   00000728   0430A0E1           MOV      R3,R4
   \   0000072C   1820A0E3           MOV      R2,#+24
   \   00000730   040000EA           B        ??DrawScreen_32
   \                     ??DrawScreen_31:
   \   00000734   B000A0E3           MOV      R0,#+176
   \   00000738   0100C7E5           STRB     R0,[R7, #+1]
   \   0000073C   20002DE9           PUSH     {R5}
   \   00000740   0430A0E1           MOV      R3,R4
   \   00000744   0020A0E3           MOV      R2,#+0
   \                     ??DrawScreen_32:
   \   00000748   0010A0E3           MOV      R1,#+0
   \   0000074C   0700A0E1           MOV      R0,R7
   \   00000750   ........           BL       DrwImg
   \   00000754   E8019FE5           LDR      R0,??DrawScreen_1+0x30  ;; cursor_cnt
   \   00000758   04D08DE2           ADD      SP,SP,#+4
   \   0000075C   0310A0E3           MOV      R1,#+3
   \   00000760   001080E5           STR      R1,[R0, #+0]
   1144              case 0:
   1145                // урсор
   1146                if (cursor_cnt)
   1147                {
   1148          	cursor_cnt--;
   1149          	break;
   1150                }
   1151              L_CURSOR:
   1152                {
   1153          	unsigned int x=curpos-viewpos;
   \                     ??DrawScreen_33:
   \   00000764   ........           LDR      R0,??DataTable166  ;; curpos
   \   00000768   001096E5           LDR      R1,[R6, #+0]
   \   0000076C   000090E5           LDR      R0,[R0, #+0]
   1154          	unsigned int y=curline-viewline;
   \   00000770   ........           LDR      R2,??DataTable138  ;; viewline
   \   00000774   010040E0           SUB      R0,R0,R1
   \   00000778   ........           LDR      R1,??DataTable106  ;; curline
   \   0000077C   002092E5           LDR      R2,[R2, #+0]
   \   00000780   001091E5           LDR      R1,[R1, #+0]
   \   00000784   021041E0           SUB      R1,R1,R2
   1155          	unsigned int dy=editmode?24:0;
   \   00000788   ........           LDR      R2,??DataTable199  ;; editmode
   \   0000078C   002092E5           LDR      R2,[R2, #+0]
   \   00000790   000052E3           CMP      R2,#+0
   \   00000794   2200000A           BEQ      ??DrawScreen_34
   \   00000798   1820A0E3           MOV      R2,#+24
   \   0000079C   200000EA           B        ??DrawScreen_34
   \                     ??DrawScreen_35:
   \   000007A0   ........           LDR      R0,??DataTable106  ;; curline
   \   000007A4   0710A0E1           MOV      R1,R7
   \   000007A8   002090E5           LDR      R2,[R0, #+0]
   \   000007AC   000098E5           LDR      R0,[R8, #+0]
   \   000007B0   240100EF           SWI      +292
   \   000007B4   0500A0E1           MOV      R0,R5
   \   000007B8   01002DE9           PUSH     {R0}
   \   000007BC   01002DE9           PUSH     {R0}
   \   000007C0   0B30A0E3           MOV      R3,#+11
   \   000007C4   8320A0E3           MOV      R2,#+131
   \   000007C8   0010A0E3           MOV      R1,#+0
   \   000007CC   0000A0E3           MOV      R0,#+0
   \   000007D0   01002DE9           PUSH     {R0}
   \   000007D4   01002DE9           PUSH     {R0}
   \   000007D8   01002DE9           PUSH     {R0}
   \   000007DC   500100EF           SWI      +336
   \   000007E0   0500A0E1           MOV      R0,R5
   \   000007E4   01002DE9           PUSH     {R0}
   \   000007E8   8330A0E3           MOV      R3,#+131
   \   000007EC   0020A0E3           MOV      R2,#+0
   \   000007F0   0210A0E1           MOV      R1,R2
   \   000007F4   41FEFFEA           B        ??DrawScreen_8
   \                     ??DrawScreen_36:
   \   000007F8   ........           BL       DrawInfo
   \                     ??DrawScreen_12:
   \   000007FC   04D08DE2           ADD      SP,SP,#+4
   \   00000800   F08FBDE8           POP      {R4-R11,PC}
   \                     ??DrawScreen_37:
   \   00000804   38019FE5           LDR      R0,??DrawScreen_1+0x30  ;; cursor_cnt
   \   00000808   000090E5           LDR      R0,[R0, #+0]
   \   0000080C   000050E3           CMP      R0,#+0
   \   00000810   D3FFFF0A           BEQ      ??DrawScreen_33
   \   00000814   28119FE5           LDR      R1,??DrawScreen_1+0x30  ;; cursor_cnt
   \   00000818   010040E2           SUB      R0,R0,#+1
   \   0000081C   000081E5           STR      R0,[R1, #+0]
   \   00000820   360000EA           B        ??DrawScreen_13
   1156          	my=editmode?max_y_emode:max_y;
   \                     ??DrawScreen_34:
   \   00000824   ........           LDR      R3,??DataTable199  ;; editmode
   1157          	if ((x<max_x)&&(y<my)&&(!cursor_off))
   \   00000828   ........           LDR      R5,??DataTable153  ;; max_x
   \   0000082C   003093E5           LDR      R3,[R3, #+0]
   \   00000830   005095E5           LDR      R5,[R5, #+0]
   \   00000834   000053E3           CMP      R3,#+0
   \   00000838   ........           LDRNE    R3,??DataTable202  ;; max_y_emode
   \   0000083C   ........           LDREQ    R3,??DataTable145  ;; max_y
   \   00000840   050050E1           CMP      R0,R5
   \   00000844   003093E5           LDR      R3,[R3, #+0]
   \   00000848   03005131           CMPCC    R1,R3
   \   0000084C   2B00002A           BCS      ??DrawScreen_13
   \   00000850   ........           LDR      R3,??DataTable125  ;; cursor_off
   \   00000854   003093E5           LDR      R3,[R3, #+0]
   \   00000858   000053E3           CMP      R3,#+0
   \   0000085C   2700001A           BNE      ??DrawScreen_13
   1158          	{
   1159          	  int xx=x*(font_size>8?8:font_size);
   \   00000860   ........           LDR      R5,??DataTable147  ;; font_size
   \   00000864   0830A0E3           MOV      R3,#+8
   \   00000868   006095E5           LDR      R6,[R5, #+0]
   \   0000086C   090056E3           CMP      R6,#+9
   \   00000870   0870A023           MOVCS    R7,#+8
   \   00000874   00709535           LDRCC    R7,[R5, #+0]
   \   00000878   970006E0           MUL      R6,R7,R0
   1160          	  int yy=y*(font_size>8?font_size:8)+dy;
   \   0000087C   000095E5           LDR      R0,[R5, #+0]
   \   00000880   090050E3           CMP      R0,#+9
   \   00000884   00309525           LDRCS    R3,[R5, #+0]
   1161          	  //static const int cur_color=0x40FFFFFF;
   1162          	  if (font_size>8)
   \   00000888   000095E5           LDR      R0,[R5, #+0]
   \   0000088C   932127E0           MLA      R7,R3,R1,R2
   \   00000890   090050E3           CMP      R0,#+9
   \   00000894   1700A0E3           MOV      R0,#+23
   \   00000898   0A00003A           BCC      ??DrawScreen_38
   1163          	  {
   1164          	    //DrawRoundedFrame(xx,yy,xx+8,yy+font_size,0,0,0,(int *)&cur_color,GetPaletteAdrByColorIndex(23));
   1165          	    DrawRoundedFrame(xx,yy,xx+8,yy+font_size,0,0,0,ink,GetPaletteAdrByColorIndex(23));
   \   0000089C   2E0100EF           SWI      +302
   \   000008A0   01002DE9           PUSH     {R0}
   \   000008A4   10002DE9           PUSH     {R4}
   \   000008A8   082086E2           ADD      R2,R6,#+8
   \   000008AC   0000A0E3           MOV      R0,#+0
   \   000008B0   01002DE9           PUSH     {R0}
   \   000008B4   01002DE9           PUSH     {R0}
   \   000008B8   01002DE9           PUSH     {R0}
   \   000008BC   000095E5           LDR      R0,[R5, #+0]
   \   000008C0   073080E0           ADD      R3,R0,R7
   \   000008C4   090000EA           B        ??DrawScreen_39
   1166          	  }
   1167          	  else
   1168          	  {
   1169          	    //DrawRoundedFrame(xx,yy,xx+font_size,yy+8,0,0,0,(int *)&cur_color,GetPaletteAdrByColorIndex(23));
   1170          	    DrawRoundedFrame(xx,yy,xx+font_size,yy+8,0,0,0,ink,GetPaletteAdrByColorIndex(23));
   \                     ??DrawScreen_38:
   \   000008C8   2E0100EF           SWI      +302
   \   000008CC   01002DE9           PUSH     {R0}
   \   000008D0   10002DE9           PUSH     {R4}
   \   000008D4   083087E2           ADD      R3,R7,#+8
   \   000008D8   0000A0E3           MOV      R0,#+0
   \   000008DC   01002DE9           PUSH     {R0}
   \   000008E0   01002DE9           PUSH     {R0}
   \   000008E4   01002DE9           PUSH     {R0}
   \   000008E8   000095E5           LDR      R0,[R5, #+0]
   \   000008EC   062080E0           ADD      R2,R0,R6
   \                     ??DrawScreen_39:
   \   000008F0   0710A0E1           MOV      R1,R7
   \   000008F4   0600A0E1           MOV      R0,R6
   \   000008F8   500100EF           SWI      +336
   \   000008FC   14D08DE2           ADD      SP,SP,#+20
   1171          	  }
   1172          	}
   1173                }
   1174                break;
   1175              }
   1176              draw_mode=1;
   \                     ??DrawScreen_13:
   \   00000900   ........           LDR      R0,??DataTable156  ;; draw_mode
   \   00000904   0110A0E3           MOV      R1,#+1
   \   00000908   001080E5           STR      R1,[R0, #+0]
   \                     ??DrawScreen_10:
   \   0000090C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000910   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??DrawScreen_1:
   \   00000914   00000000           DC8      "",+0,+0,+0
   \   00000918   ........           DC32     INK
   \   0000091C   ........           DC32     `?<Constant "Goto line %u...">`
   \   00000920   ........           DC32     PAPER
   \   00000924   ........           DC32     imgDiskAccess
   \   00000928   ........           DC32     `?<Constant "Saving...">`
   \   0000092C   ........           DC32     `?<Constant "Line %u...">`
   \   00000930   ........           DC32     `?<Constant "Text viewer/editor\\nve...">`
   \   00000934   ........           DC32     HISTORY + 129
   \   00000938   ........           DC32     `?<Constant "<<EOF>>">`
   \   0000093C   ........           DC32     myscr + 16
   \   00000940   ........           DC32     MyScrHdr
   \   00000944   ........           DC32     cursor_cnt
   1177            }
   1178            return;
   1179          }
   1180          
   1181          int DrawLoadMenu(void);
   1182          void DrawSoftMenu(void);
   1183          

   \                                 In segment CODE, align 4, keep-with-next
   1184          void doCurRight(void)
   1185          {
   1186            if (cursor_off)
   \                     doCurRight:
   \   00000000   ........           LDR      R0,??DataTable170  ;; viewpos
   \   00000004   ........           LDR      R3,??DataTable166  ;; curpos
   \   00000008   70002DE9           PUSH     {R4-R6}
   \   0000000C   001090E5           LDR      R1,[R0, #+0]
   \   00000010   00C093E5           LDR      R12,[R3, #+0]
   \   00000014   ........           LDR      R4,??DataTable156  ;; draw_mode
   \   00000018   ........           LDR      R6,??DataTable215  ;; cursor_off
   \   0000001C   082081E2           ADD      R2,R1,#+8
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0150A0E3           MOV      R5,#+1
   \   00000028   000056E3           CMP      R6,#+0
   \   0000002C   0500000A           BEQ      ??doCurRight_0
   1187            {
   1188              if (curpos>=(256-8)) return;
   \   00000030   F8005CE3           CMP      R12,#+248
   \   00000034   0D00002A           BCS      ??doCurRight_1
   1189              curpos+=8;
   \   00000038   08108CE2           ADD      R1,R12,#+8
   \   0000003C   001083E5           STR      R1,[R3, #+0]
   1190              viewpos+=8;
   \   00000040   002080E5           STR      R2,[R0, #+0]
   \   00000044   080000EA           B        ??doCurRight_2
   1191              draw_mode=1;
   1192              return;
   1193            }
   1194            if (curpos>=256) return;
   \                     ??doCurRight_0:
   \   00000048   400F5CE3           CMP      R12,#+256
   \   0000004C   0700002A           BCS      ??doCurRight_1
   1195            curpos++;
   \   00000050   01C08CE2           ADD      R12,R12,#+1
   \   00000054   00C083E5           STR      R12,[R3, #+0]
   1196            if ((curpos-viewpos)>=max_x)
   \   00000058   ........           LDR      R3,??DataTable153  ;; max_x
   \   0000005C   01104CE0           SUB      R1,R12,R1
   \   00000060   003093E5           LDR      R3,[R3, #+0]
   \   00000064   030051E1           CMP      R1,R3
   1197            {
   1198              viewpos+=8;
   \   00000068   00208025           STRCS    R2,[R0, #+0]
   1199            }
   1200            draw_mode=1;
   \                     ??doCurRight_2:
   \   0000006C   005084E5           STR      R5,[R4, #+0]
   1201          }
   \                     ??doCurRight_1:
   \   00000070   7000BDE8           POP      {R4-R6}
   \   00000074   1EFF2FE1           BX       LR               ;; return
   1202          

   \                                 In segment CODE, align 4, keep-with-next
   1203          void doCurLeft(void)
   1204          {
   1205            if (cursor_off)
   \                     doCurLeft:
   \   00000000   ........           LDR      R0,??DataTable170  ;; viewpos
   \   00000004   ........           LDR      R3,??DataTable166  ;; curpos
   \   00000008   70002DE9           PUSH     {R4-R6}
   \   0000000C   001090E5           LDR      R1,[R0, #+0]
   \   00000010   00C093E5           LDR      R12,[R3, #+0]
   \   00000014   ........           LDR      R4,??DataTable156  ;; draw_mode
   \   00000018   ........           LDR      R6,??DataTable215  ;; cursor_off
   \   0000001C   082041E2           SUB      R2,R1,#+8
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0150A0E3           MOV      R5,#+1
   \   00000028   000056E3           CMP      R6,#+0
   \   0000002C   0800000A           BEQ      ??doCurLeft_0
   1206            {
   1207              if (curpos<8)
   \   00000030   08005CE3           CMP      R12,#+8
   1208                curpos=0;
   \   00000034   00C0A033           MOVCC    R12,#+0
   1209              else
   1210                curpos-=8;
   \   00000038   08C04C22           SUBCS    R12,R12,#+8
   \   0000003C   00C083E5           STR      R12,[R3, #+0]
   1211              if (viewpos<8)
   \   00000040   080051E3           CMP      R1,#+8
   1212                viewpos=0;
   \   00000044   0020A033           MOVCC    R2,#+0
   1213              else
   1214                viewpos-=8;
   \   00000048   002080E5           STR      R2,[R0, #+0]
   1215              draw_mode=1;
   \   0000004C   005084E5           STR      R5,[R4, #+0]
   1216              return;
   \   00000050   0A0000EA           B        ??doCurLeft_1
   1217            }
   1218            if (curpos==0) return;
   \                     ??doCurLeft_0:
   \   00000054   00005CE3           CMP      R12,#+0
   \   00000058   0800000A           BEQ      ??doCurLeft_1
   1219            draw_mode=1;
   \   0000005C   005084E5           STR      R5,[R4, #+0]
   1220            curpos--;
   \   00000060   01404CE2           SUB      R4,R12,#+1
   \   00000064   004083E5           STR      R4,[R3, #+0]
   1221            if (curpos>=viewpos) return;
   \   00000068   010054E1           CMP      R4,R1
   \   0000006C   0300002A           BCS      ??doCurLeft_1
   1222            if (viewpos>8) viewpos-=8; else viewpos=0;
   \   00000070   090051E3           CMP      R1,#+9
   \   00000074   00208025           STRCS    R2,[R0, #+0]
   \   00000078   0010A033           MOVCC    R1,#+0
   \   0000007C   00108035           STRCC    R1,[R0, #+0]
   \                     ??doCurLeft_1:
   \   00000080   7000BDE8           POP      {R4-R6}
   \   00000084   1EFF2FE1           BX       LR               ;; return
   1223          }
   1224          

   \                                 In segment CODE, align 4, keep-with-next
   1225          void insline(void)
   1226          {
   1227            dstk[--dsp]=0;
   \                     insline:
   \   00000000   ........           LDR      R0,??DataTable205  ;; dsp
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   001090E5           LDR      R1,[R0, #+0]
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   011041E2           SUB      R1,R1,#+1
   \   00000014   001080E5           STR      R1,[R0, #+0]
   \   00000018   ........           LDR      R0,??DataTable207  ;; dstk
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   0020C1E7           STRB     R2,[R1, +R0]
   1228            total_line++;
   \   00000024   ........           LDR      R0,??DataTable193  ;; total_line
   \   00000028   001090E5           LDR      R1,[R0, #+0]
   \   0000002C   011081E2           ADD      R1,R1,#+1
   \   00000030   001080E5           STR      R1,[R0, #+0]
   1229            GeneralFuncF1(1);
   \   00000034   0100A0E3           MOV      R0,#+1
   \   00000038   3B0100EF           SWI      +315
   \   0000003C   0080BDE8           POP      {PC}             ;; return
   1230          }
   1231          

   \                                 In segment CODE, align 4, keep-with-next
   1232          void delline(void)
   1233          {
   1234            if (dsp!=STKSZ)
   \                     delline:
   \   00000000   ........           LDR      R1,??DataTable206  ;; STKSZ
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   001091E5           LDR      R1,[R1, #+0]
   \   0000000C   ........           LDR      R4,??DataTable205  ;; dsp
   \   00000010   000094E5           LDR      R0,[R4, #+0]
   \   00000014   010050E1           CMP      R0,R1
   \   00000018   0500000A           BEQ      ??delline_0
   1235            {
   1236              dsp=bl_ds(dsp);
   \   0000001C   ........           _BLF     bl_ds,??bl_ds??rA
   \   00000020   000084E5           STR      R0,[R4, #+0]
   1237              total_line--;
   \   00000024   ........           LDR      R0,??DataTable193  ;; total_line
   \   00000028   001090E5           LDR      R1,[R0, #+0]
   \   0000002C   011041E2           SUB      R1,R1,#+1
   \   00000030   001080E5           STR      R1,[R0, #+0]
   1238            }
   1239            GeneralFuncF1(1);
   \                     ??delline_0:
   \   00000034   0100A0E3           MOV      R0,#+1
   \   00000038   3B0100EF           SWI      +315
   \   0000003C   1080BDE8           POP      {R4,PC}          ;; return
   1240          }
   1241          

   \                                 In segment CODE, align 4, keep-with-next
   1242          void splitline(void)
   1243          {
   \                     splitline:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1244            if ((curpos<=strlen(dstk+dsp))&&(dsp!=STKSZ))
   \   00000004   ........           LDR      R4,??DataTable205  ;; dsp
   \   00000008   ........           LDR      R5,??DataTable207  ;; dstk
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   001095E5           LDR      R1,[R5, #+0]
   \   00000014   010080E0           ADD      R0,R0,R1
   \   00000018   1B0000EF           SWI      +27
   \   0000001C   ........           LDR      R1,??DataTable166  ;; curpos
   \   00000020   002091E5           LDR      R2,[R1, #+0]
   \   00000024   020050E1           CMP      R0,R2
   \   00000028   2900003A           BCC      ??splitline_0
   \   0000002C   ........           LDR      R2,??DataTable206  ;; STKSZ
   \   00000030   000094E5           LDR      R0,[R4, #+0]
   \   00000034   002092E5           LDR      R2,[R2, #+0]
   \   00000038   020050E1           CMP      R0,R2
   \   0000003C   2400000A           BEQ      ??splitline_0
   \   00000040   0C0000EA           B        ??splitline_1
   1245            {
   1246              while(curpos)
   1247              {
   1248                ustk[usp++]=dstk[dsp++];
   \                     ??splitline_2:
   \   00000044   003094E5           LDR      R3,[R4, #+0]
   \   00000048   00C095E5           LDR      R12,[R5, #+0]
   \   0000004C   0C30D3E7           LDRB     R3,[R3, +R12]
   \   00000050   0030C2E5           STRB     R3,[R2, #+0]
   \   00000054   002094E5           LDR      R2,[R4, #+0]
   \   00000058   012082E2           ADD      R2,R2,#+1
   \   0000005C   002084E5           STR      R2,[R4, #+0]
   \   00000060   002090E5           LDR      R2,[R0, #+0]
   \   00000064   012082E2           ADD      R2,R2,#+1
   \   00000068   002080E5           STR      R2,[R0, #+0]
   1249                curpos--;
   \   0000006C   000091E5           LDR      R0,[R1, #+0]
   \   00000070   010040E2           SUB      R0,R0,#+1
   \   00000074   000081E5           STR      R0,[R1, #+0]
   1250              }
   \                     ??splitline_1:
   \   00000078   ........           LDR      R0,??DataTable181  ;; usp
   \   0000007C   ........           LDR      R3,??DataTable182  ;; ustk
   \   00000080   002090E5           LDR      R2,[R0, #+0]
   \   00000084   003093E5           LDR      R3,[R3, #+0]
   \   00000088   032082E0           ADD      R2,R2,R3
   \   0000008C   003091E5           LDR      R3,[R1, #+0]
   \   00000090   000053E3           CMP      R3,#+0
   \   00000094   EAFFFF1A           BNE      ??splitline_2
   1251              viewpos=0;
   \   00000098   ........           LDR      R3,??DataTable170  ;; viewpos
   \   0000009C   0010A0E3           MOV      R1,#+0
   \   000000A0   001083E5           STR      R1,[R3, #+0]
   1252              ustk[usp++]=0;
   \   000000A4   0010C2E5           STRB     R1,[R2, #+0]
   \   000000A8   001090E5           LDR      R1,[R0, #+0]
   \   000000AC   011081E2           ADD      R1,R1,#+1
   \   000000B0   001080E5           STR      R1,[R0, #+0]
   1253              total_line++;
   \   000000B4   ........           LDR      R0,??DataTable193  ;; total_line
   \   000000B8   001090E5           LDR      R1,[R0, #+0]
   \   000000BC   011081E2           ADD      R1,R1,#+1
   \   000000C0   001080E5           STR      R1,[R0, #+0]
   1254              curline++;
   \   000000C4   ........           LDR      R0,??DataTable203  ;; curline
   \   000000C8   001090E5           LDR      R1,[R0, #+0]
   \   000000CC   011081E2           ADD      R1,R1,#+1
   \   000000D0   001080E5           STR      R1,[R0, #+0]
   1255            }
   1256            GeneralFuncF1(1);
   \                     ??splitline_0:
   \   000000D4   0100A0E3           MOV      R0,#+1
   \   000000D8   3B0100EF           SWI      +315
   \   000000DC   3080BDE8           POP      {R4,R5,PC}       ;; return
   1257          }
   1258          

   \                                 In segment CODE, align 4, keep-with-next
   1259          void joinlines(void)
   1260          {
   \                     joinlines:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1261            unsigned int p=bl_ds(dsp);
   \   00000004   ........           LDR      R4,??DataTable205  ;; dsp
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   ........           _BLF     bl_ds,??bl_ds??rA
   1262            if (p!=STKSZ)
   \   00000010   ........           LDR      R1,??DataTable206  ;; STKSZ
   \   00000014   001091E5           LDR      R1,[R1, #+0]
   \   00000018   010050E1           CMP      R0,R1
   \   0000001C   0F00000A           BEQ      ??joinlines_0
   1263            {
   1264              p--;
   \   00000020   040000EA           B        ??joinlines_1
   1265              while(p!=dsp)
   1266              {
   1267                dstk[p]=dstk[p-1];
   \                     ??joinlines_2:
   \   00000024   ........           LDR      R1,??DataTable207  ;; dstk
   \   00000028   001091E5           LDR      R1,[R1, #+0]
   \   0000002C   011080E0           ADD      R1,R0,R1
   \   00000030   012051E5           LDRB     R2,[R1, #-1]
   \   00000034   0020C1E5           STRB     R2,[R1, #+0]
   1268                p--;
   1269              }
   \                     ??joinlines_1:
   \   00000038   001094E5           LDR      R1,[R4, #+0]
   \   0000003C   010040E2           SUB      R0,R0,#+1
   \   00000040   010050E1           CMP      R0,R1
   \   00000044   F6FFFF1A           BNE      ??joinlines_2
   1270              dsp++;
   \   00000048   010081E2           ADD      R0,R1,#+1
   \   0000004C   000084E5           STR      R0,[R4, #+0]
   1271              total_line--;
   \   00000050   ........           LDR      R0,??DataTable193  ;; total_line
   \   00000054   001090E5           LDR      R1,[R0, #+0]
   \   00000058   011041E2           SUB      R1,R1,#+1
   \   0000005C   001080E5           STR      R1,[R0, #+0]
   1272            }
   1273            GeneralFuncF1(1);
   \                     ??joinlines_0:
   \   00000060   0100A0E3           MOV      R0,#+1
   \   00000064   3B0100EF           SWI      +315
   \   00000068   1080BDE8           POP      {R4,PC}          ;; return
   1274          }
   1275          

   \                                 In segment CODE, align 4, keep-with-next
   1276          void instime(void)
   1277          {
   \                     instime:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   ........           LDR      R4,??DataTable181  ;; usp
   \   00000008   10D04DE2           SUB      SP,SP,#+16
   1278            TTime t;
   1279            TDate d;
   1280            GetDateTime(&d,&t);
   \   0000000C   0D10A0E1           MOV      R1,SP
   \   00000010   08008DE2           ADD      R0,SP,#+8
   \   00000014   B40000EF           SWI      +180
   1281            usp+=sprintf(ustk+usp,"%02d:%02d",t.hour,t.min)+1;
   \   00000018   ........           LDR      R12,??DataTable182  ;; ustk
   \   0000001C   000094E5           LDR      R0,[R4, #+0]
   \   00000020   00C09CE5           LDR      R12,[R12, #+0]
   \   00000024   0130DDE5           LDRB     R3,[SP, #+1]
   \   00000028   0020DDE5           LDRB     R2,[SP, #+0]
   \   0000002C   44109FE5           LDR      R1,??instime_0   ;; `?<Constant "%02d:%02d">`
   \   00000030   0C0080E0           ADD      R0,R0,R12
   \   00000034   160000EF           SWI      +22
   \   00000038   001094E5           LDR      R1,[R4, #+0]
   \   0000003C   010080E2           ADD      R0,R0,#+1
   \   00000040   010080E0           ADD      R0,R0,R1
   \   00000044   000084E5           STR      R0,[R4, #+0]
   1282            curline++;
   \   00000048   ........           LDR      R0,??DataTable203  ;; curline
   \   0000004C   001090E5           LDR      R1,[R0, #+0]
   \   00000050   011081E2           ADD      R1,R1,#+1
   \   00000054   001080E5           STR      R1,[R0, #+0]
   1283            total_line++;
   \   00000058   ........           LDR      R0,??DataTable193  ;; total_line
   \   0000005C   001090E5           LDR      R1,[R0, #+0]
   \   00000060   011081E2           ADD      R1,R1,#+1
   \   00000064   001080E5           STR      R1,[R0, #+0]
   1284            GeneralFuncF1(1);
   \   00000068   0100A0E3           MOV      R0,#+1
   \   0000006C   3B0100EF           SWI      +315
   1285          }
   \   00000070   10D08DE2           ADD      SP,SP,#+16
   \   00000074   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??instime_0:
   \   00000078   ........           DC32     `?<Constant "%02d:%02d">`
   1286          

   \                                 In segment CODE, align 4, keep-with-next
   1287          void insdate(void)
   1288          {
   \                     insdate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   ........           LDR      R4,??DataTable181  ;; usp
   \   00000008   10D04DE2           SUB      SP,SP,#+16
   1289            TTime t;
   1290            TDate d;
   1291            GetDateTime(&d,&t);
   \   0000000C   08108DE2           ADD      R1,SP,#+8
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   B40000EF           SWI      +180
   1292            usp+=sprintf(ustk+usp,"%02d-%02d-%04d",d.day,d.month,d.year)+1;
   \   00000018   00009DE5           LDR      R0,[SP, #+0]
   \   0000001C   5C109FE5           LDR      R1,??insdate_0   ;; `?<Constant "%02d-%02d-%04d">`
   \   00000020   ........           LDR      R12,??DataTable182  ;; ustk
   \   00000024   01002DE9           PUSH     {R0}
   \   00000028   00C09CE5           LDR      R12,[R12, #+0]
   \   0000002C   0830DDE5           LDRB     R3,[SP, #+8]
   \   00000030   0920DDE5           LDRB     R2,[SP, #+9]
   \   00000034   000094E5           LDR      R0,[R4, #+0]
   \   00000038   0C0080E0           ADD      R0,R0,R12
   \   0000003C   160000EF           SWI      +22
   \   00000040   001094E5           LDR      R1,[R4, #+0]
   \   00000044   010080E2           ADD      R0,R0,#+1
   \   00000048   010080E0           ADD      R0,R0,R1
   \   0000004C   000084E5           STR      R0,[R4, #+0]
   1293            curline++;
   \   00000050   ........           LDR      R0,??DataTable203  ;; curline
   \   00000054   001090E5           LDR      R1,[R0, #+0]
   \   00000058   011081E2           ADD      R1,R1,#+1
   \   0000005C   001080E5           STR      R1,[R0, #+0]
   1294            total_line++;
   \   00000060   ........           LDR      R0,??DataTable193  ;; total_line
   \   00000064   001090E5           LDR      R1,[R0, #+0]
   \   00000068   011081E2           ADD      R1,R1,#+1
   \   0000006C   001080E5           STR      R1,[R0, #+0]
   1295            GeneralFuncF1(1);
   \   00000070   0100A0E3           MOV      R0,#+1
   \   00000074   3B0100EF           SWI      +315
   1296          }
   \   00000078   14D08DE2           ADD      SP,SP,#+20
   \   0000007C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??insdate_0:
   \   00000080   ........           DC32     `?<Constant "%02d-%02d-%04d">`
   1297          

   \                                 In segment CODE, align 4, keep-with-next
   1298          void paste(void)
   1299          {
   1300            clip_pasted=1;
   \                     paste:
   \   00000000   ........           LDR      R0,??DataTable186  ;; clip_pasted
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   001080E5           STR      R1,[R0, #+0]
   1301            GeneralFuncF1(1);
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   3B0100EF           SWI      +315
   \   00000018   0080BDE8           POP      {PC}             ;; return
   1302          }
   1303          
   1304          //void cliperase(void)
   1305          //{
   1306          // FileErase((STR)clipfile);
   1307          //}
   1308          

   \                                 In segment CODE, align 4, keep-with-next
   1309          void clearclipb(void)
   1310          {
   1311            // FilesysICall(cliperase);
   1312            clip_pasted=1;
   \                     clearclipb:
   \   00000000   ........           LDR      R0,??DataTable186  ;; clip_pasted
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   001080E5           STR      R1,[R0, #+0]
   1313            GeneralFuncF1(1);
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   3B0100EF           SWI      +315
   \   00000018   0080BDE8           POP      {PC}             ;; return
   1314          }
   1315          
   1316          

   \                                 In segment DATA_I, align 4, align-sorted
   1317          void *edmenu_HNDLS[8]=
   \                     edmenu_HNDLS:
   \   00000000                      DS8 32
   \   00000020                      REQUIRE `?<Initializer for edmenu_HNDLS>`
   1318          {
   1319            (void *)insline,
   1320            (void *)delline,
   1321            (void *)splitline,
   1322            (void *)joinlines,
   1323            (void *)instime,
   1324            (void *)insdate,
   1325            (void *)paste,
   1326            (void *)clearclipb
   1327          };
   1328          

   \                                 In segment DATA_I, align 4, align-sorted
   1329          MENUITEM_DESC edmenu_ITEMS[8]=
   \                     edmenu_ITEMS:
   \   00000000                      DS8 224
   \   000000E0                      REQUIRE `?<Initializer for edmenu_ITEMS>`
   1330          {
   1331            {NULL,(int)"Insert line",0x7FFFFFFF,0,NULL,0,0x59D},
   1332            {NULL,(int)"Delete line",0x7FFFFFFF,0,NULL,0,0x59D},
   1333            {NULL,(int)"Split line",0x7FFFFFFF,0,NULL,0,0x59D},
   1334            {NULL,(int)"Join lines",0x7FFFFFFF,0,NULL,0,0x59D},
   1335            {NULL,(int)"Insert time",0x7FFFFFFF,0,NULL,0,0x59D},
   1336            {NULL,(int)"Insert date",0x7FFFFFFF,0,NULL,0,0x59D},
   1337            {NULL,(int)"Paste",0x7FFFFFFF,0,NULL,0,0x59D},
   1338            {NULL,(int)"Clear clipboard",0x7FFFFFFF,0,NULL,0,0x59D}
   1339          };
   1340          

   \                                 In segment DATA_I, align 4, align-sorted
   1341          HEADER_DESC edmenu_HDR={0,0,131,21,icon,(int)"Special...",0x7FFFFFFF};
   \                     edmenu_HDR:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for edmenu_HDR>`
   1342          

   \                                 In segment DATA_I, align 4, align-sorted
   1343          MENU_DESC edmenu_STRUCT=
   \                     edmenu_STRUCT:
   \   00000000                      DS8 44
   \   0000002C                      REQUIRE `?<Initializer for edmenu_STRUCT>`
   1344          {
   1345            8,NULL,NULL,NULL,
   1346            menusoftkeys,
   1347            &menu_skt,
   1348            0,
   1349            NULL,
   1350            edmenu_ITEMS,
   1351            edmenu_HNDLS,
   1352            8
   1353          };
   1354          

   \                                 In segment CODE, align 4, keep-with-next
   1355          int ed_inp_onkey(GUI *data, GUI_MSG *msg)
   1356          {
   1357            int k=msg->gbsmsg->submess;
   1358          
   1359            if (msg->keys==0xFFF)
   \                     ed_inp_onkey:
   \   00000000   ........           LDR      R12,??DataTable199  ;; editmode
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   040091E5           LDR      R0,[R1, #+4]
   \   0000000C   F210D1E1           LDRSH    R1,[R1, #+2]
   \   00000010   082090E5           LDR      R2,[R0, #+8]
   \   00000014   FF30A0E3           MOV      R3,#+255
   \   00000018   F03E83E3           ORR      R3,R3,#0xF00
   \   0000001C   030051E1           CMP      R1,R3
   \   00000020   1000001A           BNE      ??ed_inp_onkey_0
   1360            {
   1361              editmode=0xFFF; //ѕризнак меню
   \   00000024   00308CE5           STR      R3,[R12, #+0]
   1362              edit_id=CreateMenu(0,0,&edmenu_STRUCT,&edmenu_HDR,0,8,0,0);
   \   00000028   8C309FE5           LDR      R3,??ed_inp_onkey_1  ;; edmenu_HDR
   \   0000002C   8C209FE5           LDR      R2,??ed_inp_onkey_1+0x4  ;; edmenu_STRUCT
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   01002DE9           PUSH     {R0}
   \   00000038   01002DE9           PUSH     {R0}
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   0800A0E3           MOV      R0,#+8
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   01002DE9           PUSH     {R0}
   \   00000050   520100EF           SWI      +338
   \   00000054   ........           LDR      R1,??DataTable208  ;; edit_id
   \   00000058   000081E5           STR      R0,[R1, #+0]
   1363              return(1); //«акрываем лавочку
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   10D08DE2           ADD      SP,SP,#+16
   \   00000064   0080BDE8           POP      {PC}
   1364            }
   1365            if ((msg->gbsmsg->msg==KEY_DOWN)||(msg->gbsmsg->msg==LONG_PRESS))
   \                     ??ed_inp_onkey_0:
   \   00000068   041090E5           LDR      R1,[R0, #+4]
   \   0000006C   9330A0E3           MOV      R3,#+147
   \   00000070   403F83E3           ORR      R3,R3,#0x100
   \   00000074   030051E1           CMP      R1,R3
   \   00000078   0300000A           BEQ      ??ed_inp_onkey_2
   \   0000007C   0100A0E1           MOV      R0,R1
   \   00000080   021083E2           ADD      R1,R3,#+2
   \   00000084   010050E1           CMP      R0,R1
   \   00000088   0900001A           BNE      ??ed_inp_onkey_3
   1366            {
   1367              switch(k)
   \                     ??ed_inp_onkey_2:
   \   0000008C   0B0052E2           SUBS     R0,R2,#+11
   \   00000090   0400000A           BEQ      ??ed_inp_onkey_4
   \   00000094   020040E2           SUB      R0,R0,#+2
   \   00000098   010050E3           CMP      R0,#+1
   \   0000009C   2E004082           SUBHI    R0,R0,#+46
   \   000000A0   01005083           CMPHI    R0,#+1
   \   000000A4   0200008A           BHI      ??ed_inp_onkey_3
   1368              {
   1369              case GREEN_BUTTON:
   1370              case UP_BUTTON:
   1371              case DOWN_BUTTON:
   1372              case VOL_UP_BUTTON:
   1373              case VOL_DOWN_BUTTON:
   1374                editmode=k;
   \                     ??ed_inp_onkey_4:
   \   000000A8   00208CE5           STR      R2,[R12, #+0]
   1375                return(1);
   \   000000AC   0100A0E3           MOV      R0,#+1
   \   000000B0   0080BDE8           POP      {PC}
   1376              }
   1377            }
   1378            return(0); //Do standart keys
   \                     ??ed_inp_onkey_3:
   \   000000B4   0000A0E3           MOV      R0,#+0
   \   000000B8   0080BDE8           POP      {PC}
   \                     ??ed_inp_onkey_1:
   \   000000BC   ........           DC32     edmenu_HDR
   \   000000C0   ........           DC32     edmenu_STRUCT
   1379            //1: close
   1380          }
   1381          

   \                                 In segment CODE, align 4, keep-with-next
   1382          void ed_inp_redraw(void *data)
   1383          {
   1384            unsigned int sz;
   1385            unsigned int p;
   1386          
   1387            sz=e_ws->wsbody[0];
   \                     ed_inp_redraw:
   \   00000000   ........           LDR      R0,??DataTable267  ;; e_ws
   \   00000004   F0402DE9           PUSH     {R4-R7,LR}
   \   00000008   006090E5           LDR      R6,[R0, #+0]
   1388            p=0;
   \   0000000C   ........           LDR      R4,??DataTable190  ;; editline
   \   00000010   000096E5           LDR      R0,[R6, #+0]
   \   00000014   0050A0E3           MOV      R5,#+0
   \   00000018   B070D0E1           LDRH     R7,[R0, #+0]
   \                     ??ed_inp_redraw_0:
   \   0000001C   070055E1           CMP      R5,R7
   \   00000020   0700002A           BCS      ??ed_inp_redraw_1
   1389            while((p<255)&&(p<sz))
   1390            {
   1391              unsigned int wc=e_ws->wsbody[p+1];
   1392              editline[p]=char16to8(wc);
   \   00000024   000096E5           LDR      R0,[R6, #+0]
   \   00000028   850080E0           ADD      R0,R0,R5, LSL #+1
   \   0000002C   B200D0E1           LDRH     R0,[R0, #+2]
   \   00000030   ........           BL       char16to8
   \   00000034   0400C5E7           STRB     R0,[R5, +R4]
   1393              p++;
   \   00000038   015085E2           ADD      R5,R5,#+1
   1394            }
   \   0000003C   FF0055E3           CMP      R5,#+255
   \   00000040   F5FFFF3A           BCC      ??ed_inp_redraw_0
   1395            editline[p]=0;
   1396            if ((sz=dsp)==STKSZ) total_line++;
   \                     ??ed_inp_redraw_1:
   \   00000044   ........           LDR      R6,??DataTable205  ;; dsp
   \   00000048   ........           LDR      R1,??DataTable206  ;; STKSZ
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   0400C5E7           STRB     R0,[R5, +R4]
   \   00000054   000096E5           LDR      R0,[R6, #+0]
   \   00000058   001091E5           LDR      R1,[R1, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0300001A           BNE      ??ed_inp_redraw_2
   \   00000064   ........           LDR      R1,??DataTable193  ;; total_line
   \   00000068   002091E5           LDR      R2,[R1, #+0]
   \   0000006C   012082E2           ADD      R2,R2,#+1
   \   00000070   002081E5           STR      R2,[R1, #+0]
   1397            sz=bl_ds(sz); //»щем начало сл. строки
   1398            sz-=p+1; //¬новь добавл€ема€ строка
   1399            strcpy(dstk+(dsp=sz),editline); //ƒобавл€ем
   \                     ??ed_inp_redraw_2:
   \   00000074   ........           _BLF     bl_ds,??bl_ds??rA
   \   00000078   ........           LDR      R2,??DataTable207  ;; dstk
   \   0000007C   050040E0           SUB      R0,R0,R5
   \   00000080   002092E5           LDR      R2,[R2, #+0]
   \   00000084   010040E2           SUB      R0,R0,#+1
   \   00000088   000086E5           STR      R0,[R6, #+0]
   \   0000008C   0410A0E1           MOV      R1,R4
   \   00000090   020080E0           ADD      R0,R0,R2
   \   00000094   1A0000EF           SWI      +26
   1400            draw_mode=1;
   \   00000098   ........           LDR      R0,??DataTable264  ;; draw_mode
   \   0000009C   0110A0E3           MOV      R1,#+1
   \   000000A0   001080E5           STR      R1,[R0, #+0]
   1401            DrawScreen();
   \   000000A4   F040BDE8           POP      {R4-R7,LR}       ;; Pop
   \   000000A8   ........           B        DrawScreen       ;; tailcall
   1402          }
   1403          

   \                                 In segment CODE, align 4, keep-with-next
   1404          void ed_inp_locret(void){}
   \                     ed_inp_locret:
   \   00000000   1EFF2FE1           BX       LR               ;; return
   1405          

   \                                 In segment CODE, align 4, keep-with-next
   1406          void ed_inp_ghook(GUI *data, int cmd)
   1407          {
   \                     ed_inp_ghook:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0040A0E1           MOV      R4,R0
   1408            static SOFTKEY_DESC sk={0x0FFF,0x0000,(int)"Menu"};
   1409            static void *methods[16];
   1410            EDITCONTROL ec;
   1411            int ecp;
   1412            if (cmd==2)
   \   0000000C   020051E3           CMP      R1,#+2
   \   00000010   0C00001A           BNE      ??ed_inp_ghook_0
   \   00000014   E4509FE5           LDR      R5,??ed_inp_ghook_1  ;; ??methods
   1413            {
   1414              //Called after onCreate
   1415              void **m=GetDataOfItemByID(data,4);
   \   00000018   0410A0E3           MOV      R1,#+4
   \   0000001C   4F0100EF           SWI      +335
   \   00000020   0040A0E1           MOV      R4,R0
   1416              memcpy(methods,m[1],sizeof(methods));
   \   00000024   041094E5           LDR      R1,[R4, #+4]
   \   00000028   4020A0E3           MOV      R2,#+64
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   1E0100EF           SWI      +286
   1417          //    old_inp_redraw=methods[0];
   1418              methods[0]=(void *)ed_inp_redraw;
   \   00000034   C8009FE5           LDR      R0,??ed_inp_ghook_1+0x4  ;; ed_inp_redraw
   \   00000038   000085E5           STR      R0,[R5, #+0]
   1419              m[1]=methods;
   \   0000003C   045084E5           STR      R5,[R4, #+4]
   \   00000040   2CD08DE2           ADD      SP,SP,#+44
   \   00000044   7080BDE8           POP      {R4-R6,PC}
   1420            }
   1421            if (cmd==7)
   \                     ??ed_inp_ghook_0:
   \   00000048   070051E3           CMP      R1,#+7
   \   0000004C   2900001A           BNE      ??ed_inp_ghook_2
   1422            {
   1423              if (!editmode)
   \   00000050   ........           LDR      R0,??DataTable199  ;; editmode
   \   00000054   ........           LDR      R5,??DataTable217  ;; curpos
   \   00000058   001090E5           LDR      R1,[R0, #+0]
   \   0000005C   000051E3           CMP      R1,#+0
   \   00000060   0700001A           BNE      ??ed_inp_ghook_3
   1424              {
   1425                EDIT_CURSOR_POS(data)=curpos+1;
   \   00000064   881094E5           LDR      R1,[R4, #+136]
   \   00000068   002095E5           LDR      R2,[R5, #+0]
   \   0000006C   841091E5           LDR      R1,[R1, #+132]
   \   00000070   012082E2           ADD      R2,R2,#+1
   \   00000074   281091E5           LDR      R1,[R1, #+40]
   \   00000078   B423C1E1           STRH     R2,[R1, #+52]
   1426                editmode=0xFFFFFFFF;
   \   0000007C   0010E0E3           MVN      R1,#+0
   \   00000080   001080E5           STR      R1,[R0, #+0]
   1427              }
   1428              ecp=EDIT_CURSOR_POS(data);
   1429              ecp--;
   \                     ??ed_inp_ghook_3:
   \   00000084   880094E5           LDR      R0,[R4, #+136]
   \   00000088   840090E5           LDR      R0,[R0, #+132]
   \   0000008C   280090E5           LDR      R0,[R0, #+40]
   \   00000090   F403D0E1           LDRSH    R0,[R0, #+52]
   \   00000094   016040E2           SUB      R6,R0,#+1
   \   00000098   000095E5           LDR      R0,[R5, #+0]
   \   0000009C   060050E1           CMP      R0,R6
   \   000000A0   0300002A           BCS      ??ed_inp_ghook_4
   1430              while(ecp>curpos) doCurRight();
   \                     ??ed_inp_ghook_5:
   \   000000A4   ........           BL       doCurRight
   \   000000A8   000095E5           LDR      R0,[R5, #+0]
   \   000000AC   060050E1           CMP      R0,R6
   \   000000B0   FBFFFF3A           BCC      ??ed_inp_ghook_5
   1431              while(ecp<curpos) doCurLeft();
   \                     ??ed_inp_ghook_4:
   \   000000B4   000095E5           LDR      R0,[R5, #+0]
   \   000000B8   000056E1           CMP      R6,R0
   \   000000BC   0100002A           BCS      ??ed_inp_ghook_6
   \   000000C0   ........           BL       doCurLeft
   \   000000C4   FAFFFFEA           B        ??ed_inp_ghook_4
   1432              SetSoftKey(data,&sk,1);
   \                     ??ed_inp_ghook_6:
   \   000000C8   38109FE5           LDR      R1,??ed_inp_ghook_1+0x8  ;; ??sk
   \   000000CC   0120A0E3           MOV      R2,#+1
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   680100EF           SWI      +360
   1433              ExtractEditControl(data,1,&ec);
   \   000000D8   0D20A0E1           MOV      R2,SP
   \   000000DC   0110A0E3           MOV      R1,#+1
   \   000000E0   0400A0E1           MOV      R0,R4
   \   000000E4   690100EF           SWI      +361
   1434              wstrcpy(e_ws,ec.pWS);
   \   000000E8   ........           LDR      R0,??DataTable267  ;; e_ws
   \   000000EC   28109DE5           LDR      R1,[SP, #+40]
   \   000000F0   000090E5           LDR      R0,[R0, #+0]
   \   000000F4   1F0100EF           SWI      +287
   1435            }
   1436          }
   \                     ??ed_inp_ghook_2:
   \   000000F8   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   000000FC   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??ed_inp_ghook_1:
   \   00000100   ........           DC32     ??methods
   \   00000104   ........           DC32     ed_inp_redraw
   \   00000108   ........           DC32     ??sk

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ??sk:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for sk>`

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??methods:
   \   00000000                      DS8 64
   1437          

   \                                 In segment DATA_I, align 4, align-sorted
   1438          HEADER_DESC ed_inp_hdr={0,0,131,21,icon,(int)"Edit text",0x7FFFFFFF};
   \                     ed_inp_hdr:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for ed_inp_hdr>`
   1439          

   \                                 In segment DATA_I, align 4, align-sorted
   1440          INPUTDIA_DESC ed_inp_desc=
   \                     ed_inp_desc:
   \   00000000                      DS8 56
   \   00000038                      REQUIRE `?<Initializer for ed_inp_desc>`
   1441          {
   1442            1,
   1443            ed_inp_onkey,
   1444            ed_inp_ghook,
   1445            (void *)ed_inp_locret,
   1446            0,
   1447            &menu_skt,
   1448            {0,22,131,153},
   1449            4,
   1450            100,
   1451            101,
   1452            0,
   1453            0x40000000
   1454          };
   1455          

   \                                 In segment CODE, align 4, keep-with-next
   1456          void CreateEditDialog(void)
   1457          {
   \                     CreateEditDialog:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   1458            unsigned int p;
   1459            unsigned int c;
   1460            void *ma=malloc_adr();
   \   00000008   148000EF           SWI      +32788
   1461            void *eq;
   1462            EDITCONTROL ec;
   1463          
   1464            editmode=0;
   \   0000000C   ........           LDR      R1,??DataTable199  ;; editmode
   1465            cursor_off=0;
   \   00000010   ........           LDR      R2,??DataTable200  ;; viewline
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   000081E5           STR      R0,[R1, #+0]
   \   00000020   ........           LDR      R1,??DataTable215  ;; cursor_off
   \   00000024   003092E5           LDR      R3,[R2, #+0]
   \   00000028   000081E5           STR      R0,[R1, #+0]
   \   0000002C   ........           LDR      R0,??DataTable202  ;; max_y_emode
   \   00000030   ........           LDR      R1,??DataTable203  ;; curline
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   001091E5           LDR      R1,[R1, #+0]
   \   0000003C   033041E0           SUB      R3,R1,R3
   \   00000040   000053E1           CMP      R3,R0
   \   00000044   0200002A           BCS      ??CreateEditDialog_0
   \   00000048   050000EA           B        ??CreateEditDialog_1
   1466            while ((curline-viewline)>=max_y_emode) viewline++; //≈сли ниже чем 16 строк - перемещаемс€
   \                     ??CreateEditDialog_2:
   \   0000004C   013083E2           ADD      R3,R3,#+1
   \   00000050   003082E5           STR      R3,[R2, #+0]
   \                     ??CreateEditDialog_0:
   \   00000054   003092E5           LDR      R3,[R2, #+0]
   \   00000058   035041E0           SUB      R5,R1,R3
   \   0000005C   000055E1           CMP      R5,R0
   \   00000060   F9FFFF2A           BCS      ??CreateEditDialog_2
   1467          
   1468            CutWSTR(e_ws,0);
   \                     ??CreateEditDialog_1:
   \   00000064   ........           LDR      R5,??DataTable267  ;; e_ws
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   000095E5           LDR      R0,[R5, #+0]
   \   00000070   260100EF           SWI      +294
   1469            if ((p=dsp)!=STKSZ)
   \   00000074   ........           LDR      R0,??DataTable205  ;; dsp
   \   00000078   006090E5           LDR      R6,[R0, #+0]
   \   0000007C   ........           LDR      R0,??DataTable206  ;; STKSZ
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   000056E1           CMP      R6,R0
   \   00000088   0A00000A           BEQ      ??CreateEditDialog_3
   \   0000008C   040000EA           B        ??CreateEditDialog_4
   1470            {
   1471              while((c=dstk[p]))
   1472              {
   1473                wsAppendChar(e_ws,char8to16(c));
   \                     ??CreateEditDialog_5:
   \   00000090   ........           BL       char8to16
   \   00000094   0010A0E1           MOV      R1,R0
   \   00000098   000095E5           LDR      R0,[R5, #+0]
   \   0000009C   016086E2           ADD      R6,R6,#+1
   \   000000A0   1C0000EF           SWI      +28
   1474                p++;
   1475              }
   \                     ??CreateEditDialog_4:
   \   000000A4   ........           LDR      R0,??DataTable207  ;; dstk
   \   000000A8   000090E5           LDR      R0,[R0, #+0]
   \   000000AC   0000D6E7           LDRB     R0,[R6, +R0]
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   F5FFFF1A           BNE      ??CreateEditDialog_5
   1476            }
   1477            PrepareEditControl(&ec);
   \                     ??CreateEditDialog_3:
   \   000000B8   0D00A0E1           MOV      R0,SP
   \   000000BC   640100EF           SWI      +356
   1478            eq=AllocEQueue(ma,mfree_adr());
   \   000000C0   158000EF           SWI      +32789
   \   000000C4   0010A0E1           MOV      R1,R0
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   630100EF           SWI      +355
   \   000000D0   0060A0E1           MOV      R6,R0
   1479            ConstructEditControl(&ec,3,0x40,e_ws,255);
   \   000000D4   FF00A0E3           MOV      R0,#+255
   \   000000D8   01002DE9           PUSH     {R0}
   \   000000DC   003095E5           LDR      R3,[R5, #+0]
   \   000000E0   4020A0E3           MOV      R2,#+64
   \   000000E4   0310A0E3           MOV      R1,#+3
   \   000000E8   04008DE2           ADD      R0,SP,#+4
   \   000000EC   650100EF           SWI      +357
   1480            AddEditControlToEditQend(eq,&ec,ma);
   \   000000F0   0420A0E1           MOV      R2,R4
   \   000000F4   04108DE2           ADD      R1,SP,#+4
   \   000000F8   0600A0E1           MOV      R0,R6
   \   000000FC   660100EF           SWI      +358
   1481            edit_id=CreateInputTextDialog(&ed_inp_desc,&ed_inp_hdr,eq,1,0);
   \   00000100   24109FE5           LDR      R1,??CreateEditDialog_6  ;; ed_inp_hdr
   \   00000104   0000A0E3           MOV      R0,#+0
   \   00000108   01002DE9           PUSH     {R0}
   \   0000010C   0130A0E3           MOV      R3,#+1
   \   00000110   18009FE5           LDR      R0,??CreateEditDialog_6+0x4  ;; ed_inp_desc
   \   00000114   0620A0E1           MOV      R2,R6
   \   00000118   670100EF           SWI      +359
   \   0000011C   ........           LDR      R1,??DataTable208  ;; edit_id
   \   00000120   000081E5           STR      R0,[R1, #+0]
   1482          }
   \   00000124   34D08DE2           ADD      SP,SP,#+52
   \   00000128   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??CreateEditDialog_6:
   \   0000012C   ........           DC32     ed_inp_hdr
   \   00000130   ........           DC32     ed_inp_desc
   1483          
   1484          /*void add_to_clip(char far *s)
   1485          {
   1486            int f=FileOpen((STR)clipfile,
   1487          		 clip_pasted?_O_CREAT+_O_RDWR+_O_TRUNC:_O_CREAT+_O_RDWR+_O_APPEND
   1488          		   ,_S_IREAD);
   1489            if (f!=-1)
   1490            {
   1491              FileWrite(f,s,strlen(s));
   1492              FileClose(f);
   1493            }
   1494            EX_heap_free_with_lock(s);
   1495            clip_pasted=0;
   1496          }*/
   1497          
   1498          /*volatile int light_count;
   1499          
   1500          GBSTMR light_tmr;
   1501          
   1502          void LightTimerProc(void)
   1503          {
   1504            if (light_count)
   1505            {
   1506              light_count--;
   1507              GBS_StartTimerProc(&light_tmr,262,LightTimerProc);
   1508            }
   1509          }*/
   1510          

   \                                 In segment CODE, align 4, keep-with-next
   1511          void SetViewIllumination(void)
   1512          {
   1513            SetIllumination(0,1,DISPLAY_LIGHT,0);
   \                     SetViewIllumination:
   \   00000000   34009FE5           LDR      R0,??SetViewIllumination_0  ;; DISPLAY_LIGHT
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   002090E5           LDR      R2,[R0, #+0]
   \   0000000C   0030A0E3           MOV      R3,#+0
   \   00000010   0228A0E1           MOV      R2,R2, LSL #+16
   \   00000014   2228A0E1           MOV      R2,R2, LSR #+16
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   080000EF           SWI      +8
   1514            SetIllumination(1,1,0,0);
   \   00000024   0030A0E3           MOV      R3,#+0
   \   00000028   0320A0E1           MOV      R2,R3
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   0100A0E1           MOV      R0,R1
   \   00000034   080000EF           SWI      +8
   \   00000038   0080BDE8           POP      {PC}             ;; return
   \                     ??SetViewIllumination_0:
   \   0000003C   ........           DC32     DISPLAY_LIGHT
   1515          //  light_count=30;
   1516          //  GBS_StartTimerProc(&light_tmr,1,LightTimerProc);
   1517          }
   1518          
   1519          //ѕерерисовка основного диалога

   \                                 In segment CODE, align 4, keep-with-next
   1520          void method0(MAIN_GUI *data)
   1521          {
   1522            if (data->gui.state==2)
   \                     method0:
   \   00000000   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000004   020050E3           CMP      R0,#+2
   \   00000008   1EFF2F11           BXNE     LR
   1523            {
   1524              DrawScreen();
   \   0000000C   ........           B        DrawScreen       ;; tailcall
   1525            }
   1526          }
   1527          

   \                                 In segment CODE, align 4, keep-with-next
   1528          void method1(MAIN_GUI *data, void *(*malloc_adr)(int))
   1529          {
   \                     method1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1530            void FirstLoadFile(unsigned int);
   1531            SUBPROC((void *)FirstLoadFile,0xFFFFFFFF);
   \   00000004   0010E0E3           MVN      R1,#+0
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   ........           LDR      R0,??DataTable254  ;; FirstLoadFile
   \   00000010   710100EF           SWI      +369
   1532            data->gui.state=1;
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   0C00C4E5           STRB     R0,[R4, #+12]
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
   1533          }
   1534          

   \                                 In segment CODE, align 4, keep-with-next
   1535          void method2(MAIN_GUI *data, void (*mfree_adr)(void *))
   1536          {
   1537            terminated=1;
   \                     method2:
   \   00000000   ........           LDR      R1,??DataTable289  ;; terminated
   \   00000004   0120A0E3           MOV      R2,#+1
   \   00000008   002081E5           STR      R2,[R1, #+0]
   1538            data->gui.state=0;
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000014   1EFF2FE1           BX       LR               ;; return
   1539          }
   1540          

   \                                 In segment CODE, align 4, keep-with-next
   1541          void method3(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
   1542          {
   1543            if (!draw_mode) draw_mode=1;
   \                     method3:
   \   00000000   ........           LDR      R1,??DataTable264  ;; draw_mode
   \   00000004   002091E5           LDR      R2,[R1, #+0]
   \   00000008   000052E3           CMP      R2,#+0
   \   0000000C   0120A003           MOVEQ    R2,#+1
   \   00000010   00208105           STREQ    R2,[R1, #+0]
   1544            data->gui.state=2;
   \   00000014   0210A0E3           MOV      R1,#+2
   \   00000018   0C10C0E5           STRB     R1,[R0, #+12]
   \   0000001C   1EFF2FE1           BX       LR               ;; return
   1545          }
   1546          

   \                                 In segment CODE, align 4, keep-with-next
   1547          void method4(MAIN_GUI *data, void (*mfree_adr)(void *))
   1548          {
   1549            if (data->gui.state!=2) return;
   \                     method4:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
   1550            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
   \   00000010   1EFF2FE1           BX       LR               ;; return
   1551          }
   1552          

   \                                 In segment CODE, align 4, keep-with-next
   1553          void method7(MAIN_GUI *data, void (*mfree_adr)(void *))
   1554          {
   1555            mfree_adr(data);
   \                     method7:
   \   00000000   01F0A0E1           MOV      PC,R1            ;; tailcall
   1556          }
   1557          

   \                                 In segment CODE, align 4, keep-with-next
   1558          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1559          

   \                                 In segment CODE, align 4, keep-with-next
   1560          int method9(void){return(0);}
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1561          
   1562          //------------------------------------------------------------------------------
   1563          // ќсн. диалог - обработка кнопок
   1564          //------------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
   1565          int method5(MAIN_GUI *data, GUI_MSG *msg)
   1566          {
   \                     method5:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   1567            if (disk_access) return(0); //≈сли дисковые операции
   \   00000004   ........           LDR      R4,??DataTable256  ;; disk_access
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      ??method5_1
   \                     ??method5_2:
   \   00000014   380000EA           B        ??method5_3
   1568            if ((draw_mode>1)&&(draw_mode!=4)) return(0); //≈сли еще рисуем
   \                     ??method5_1:
   \   00000018   ........           LDR      R5,??DataTable264  ;; draw_mode
   \   0000001C   000095E5           LDR      R0,[R5, #+0]
   \   00000020   020050E3           CMP      R0,#+2
   \   00000024   0200003A           BCC      ??method5_4
   \   00000028   000095E5           LDR      R0,[R5, #+0]
   \   0000002C   040050E3           CMP      R0,#+4
   \   00000030   3100001A           BNE      ??method5_3
   1569            if (msg->gbsmsg->msg==KEY_UP)
   \                     ??method5_4:
   \   00000034   041091E5           LDR      R1,[R1, #+4]
   \   00000038   0160A0E3           MOV      R6,#+1
   \   0000003C   040091E5           LDR      R0,[R1, #+4]
   \   00000040   650F50E3           CMP      R0,#+404
   \   00000044   0400001A           BNE      ??method5_5
   1570            {
   1571              if (draw_mode==4)
   \   00000048   000095E5           LDR      R0,[R5, #+0]
   \   0000004C   040050E3           CMP      R0,#+4
   \   00000050   2900001A           BNE      ??method5_3
   1572              {
   1573                draw_mode=1;
   \   00000054   006085E5           STR      R6,[R5, #+0]
   1574                SetViewIllumination();
   \   00000058   390000EA           B        ??method5_6
   1575                DrawScreen();
   1576              }
   1577              return(0);
   1578            }
   1579            if ((msg->gbsmsg->msg==KEY_DOWN)||(msg->gbsmsg->msg==LONG_PRESS))
   \                     ??method5_5:
   \   0000005C   652F86E3           ORR      R2,R6,#0x194
   \   00000060   023042E2           SUB      R3,R2,#+2
   \   00000064   030050E1           CMP      R0,R3
   \   00000068   02005011           CMPNE    R0,R2
   \   0000006C   2200001A           BNE      ??method5_3
   1580            {
   1581              switch(msg->gbsmsg->submess)
   \   00000070   ........           LDR      R0,??DataTable231  ;; max_y
   \   00000074   ........           LDR      R7,??DataTable215  ;; cursor_off
   \   00000078   08C091E5           LDR      R12,[R1, #+8]
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   003097E5           LDR      R3,[R7, #+0]
   \   00000084   0080A0E3           MOV      R8,#+0
   \   00000088   01C04CE2           SUB      R12,R12,#+1
   \   0000008C   3D005CE3           CMP      R12,#+61
   \   00000090   2400008A           BHI      ??method5_7
   \   00000094   01EF8FE2           ADR      LR,??method5_0
   \   00000098   0CE0DEE7           LDRB     LR,[LR, R12]
   \   0000009C   0EF18FE0           ADD      PC,PC,LR, LSL #+2
   \                     ??method5_0:
   \   000000A0   1821210F           DC8      +24,+33,+33,+15
   \   000000A4   21212121           DC8      +33,+33,+33,+33
   \   000000A8   2121110F           DC8      +33,+33,+17,+15
   \   000000AC   1D2F2121           DC8      +29,+47,+33,+33
   \   000000B0   21212121           DC8      +33,+33,+33,+33
   \   000000B4   21212121           DC8      +33,+33,+33,+33
   \   000000B8   21132121           DC8      +33,+19,+33,+33
   \   000000BC   21212121           DC8      +33,+33,+33,+33
   \   000000C0   21215621           DC8      +33,+33,+86,+33
   \   000000C4   21212121           DC8      +33,+33,+33,+33
   \   000000C8   21212121           DC8      +33,+33,+33,+33
   \   000000CC   21212153           DC8      +33,+33,+33,+83
   \   000000D0   211D213B           DC8      +33,+29,+33,+59
   \   000000D4   33444D2F           DC8      +51,+68,+77,+47
   \   000000D8   49211A2C           DC8      +73,+33,+26,+44
   \   000000DC   363F0000           DC8      +54,+63,+0,+0
   1582              {
   1583              case RED_BUTTON:
   1584          //  L_EXIT:
   1585                return(1); //ѕроисходит вызов GeneralFunc дл€ тек. GUI -> закрытие GUI
   \                     ??method5_8:
   \   000000E0   0100A0E3           MOV      R0,#+1
   \   000000E4   F081BDE8           POP      {R4-R8,PC}
   1586              case GREEN_BUTTON:
   1587          //    L_EDIT:
   1588                CreateEditDialog();
   \                     ??method5_9:
   \   000000E8   ........           BL       CreateEditDialog
   1589                return(0);
   \   000000EC   160000EA           B        ??method5_10
   1590              case RIGHT_SOFT:
   1591                return(1);
   1592              case ENTER_BUTTON:
   1593                DrawLoadMenu();
   \                     ??method5_11:
   \   000000F0   ........           BL       DrawLoadMenu
   1594                loadmenu_id=0;
   \   000000F4   ........           LDR      R0,??DataTable250  ;; loadmenu_id
   \   000000F8   008080E5           STR      R8,[R0, #+0]
   1595                return(0);
   \                     ??method5_3:
   \   000000FC   0000A0E3           MOV      R0,#+0
   \   00000100   F081BDE8           POP      {R4-R8,PC}
   1596              case LEFT_SOFT:
   1597                DrawSoftMenu();
   \                     ??method5_12:
   \   00000104   ........           BL       DrawSoftMenu
   1598                return(0);
   \   00000108   0F0000EA           B        ??method5_10
   1599              case UP_BUTTON:
   1600                if (cursor_off)
   \                     ??method5_13:
   \   0000010C   000053E3           CMP      R3,#+0
   \   00000110   0200000A           BEQ      ??method5_14
   1601          	PageUp(1);
   \   00000114   0100A0E3           MOV      R0,#+1
   \                     ??method5_15:
   \   00000118   ........           BL       PageUp
   \   0000011C   000000EA           B        ??method5_16
   1602                else
   1603          	LineUp();
   \                     ??method5_14:
   \   00000120   ........           BL       LineUp
   1604                draw_mode=1;
   \                     ??method5_16:
   \   00000124   006085E5           STR      R6,[R5, #+0]
   1605                break;
   1606          /*    case RECORD_BUTTON:
   1607                if (cursor_off||(dsp==STKSZ)) break;
   1608                else
   1609                {
   1610          	unsigned int i=strlen(dstk+dsp); //ƒлина тек. строки
   1611          	char far *s;
   1612          	s=EX_heap_malloc_with_lock(i+2); //“.к. добавл€ем 0 и 0d
   1613          	if (s)
   1614          	{
   1615          	  strcpy(s,dstk+dsp);
   1616          	  s[i]=0x0D;
   1617          	  s[i+1]=0x00;
   1618          	  FilesysICall_FP(add_to_clip,s);
   1619          	}
   1620                }*/
   1621              case DOWN_BUTTON:
   1622                if (cursor_off)
   1623          	PageDw(1);
   1624                else
   1625          	LineDw();
   1626                draw_mode=1;
   1627                break;
   1628              case VOL_UP_BUTTON:
   1629              case '2':
   1630                PageUp(max_y);
   1631                draw_mode=1;
   1632                break;
   1633              case VOL_DOWN_BUTTON:
   1634              case '8':
   1635                PageDw(max_y);
   1636                draw_mode=1;
   1637                break;
   1638              case '5':
   1639                cursor_off^=1;
   1640                draw_mode=1;
   1641                break;
   1642              case LEFT_BUTTON:
   1643                if (msg->gbsmsg->msg!=LONG_PRESS)
   1644                {
   1645          	doCurLeft();
   1646          	break;
   1647                }
   1648              case '4':
   1649                //Ќа слово влево
   1650                WordLeft();
   1651                cursor_off&=0xFE;
   1652                draw_mode=1;
   1653                break;
   1654              case RIGHT_BUTTON:
   1655                if (msg->gbsmsg->msg!=LONG_PRESS)
   1656                {
   1657          	doCurRight();
   1658          	break;
   1659                }
   1660              case '6':
   1661                //Ќа слово вправо
   1662                WordRight();
   1663                cursor_off&=0xFE;
   1664                draw_mode=1;
   1665                break;
   1666              case '9':
   1667                ToEOL();
   1668                cursor_off&=0xFE;
   1669                draw_mode=1;
   1670                break;
   1671              case '7':
   1672                ToBOL();
   1673                cursor_off&=0xFE;
   1674                draw_mode=1;
   1675                break;
   1676              case '0':
   1677                draw_mode=4;
   1678                break;
   1679              case '#':
   1680                if (win_dos_koi>1) win_dos_koi=0; else win_dos_koi++;
   1681                draw_mode=1;
   1682                break;
   1683              default:
   1684                break;
   1685              }
   1686              CheckDiskAccess();
   \                     ??method5_7:
   \   00000128   ........           BL       CheckDiskAccess
   1687              if (disk_access) SUBPROC((void *)DoDiskAccess,1);
   \   0000012C   000094E5           LDR      R0,[R4, #+0]
   \   00000130   000050E3           CMP      R0,#+0
   \   00000134   0200000A           BEQ      ??method5_6
   \   00000138   D8009FE5           LDR      R0,??method5_17  ;; DoDiskAccess
   \   0000013C   0110A0E3           MOV      R1,#+1
   \   00000140   710100EF           SWI      +369
   1688              SetViewIllumination();
   \                     ??method5_6:
   \   00000144   ........           BL       SetViewIllumination
   1689              DrawScreen();
   \   00000148   ........           BL       DrawScreen
   1690              return(0);
   \                     ??method5_10:
   \   0000014C   0000A0E3           MOV      R0,#+0
   \   00000150   F081BDE8           POP      {R4-R8,PC}
   \                     ??method5_18:
   \   00000154   000053E3           CMP      R3,#+0
   \   00000158   0200000A           BEQ      ??method5_19
   \   0000015C   0100A0E3           MOV      R0,#+1
   \                     ??method5_20:
   \   00000160   ........           BL       PageDw
   \   00000164   EEFFFFEA           B        ??method5_16
   \                     ??method5_19:
   \   00000168   ........           BL       LineDw
   \   0000016C   ECFFFFEA           B        ??method5_16
   \                     ??method5_21:
   \   00000170   010023E2           EOR      R0,R3,#0x1
   \                     ??method5_22:
   \   00000174   000087E5           STR      R0,[R7, #+0]
   \   00000178   E9FFFFEA           B        ??method5_16
   \                     ??method5_23:
   \   0000017C   040091E5           LDR      R0,[R1, #+4]
   \   00000180   020050E1           CMP      R0,R2
   \   00000184   0100000A           BEQ      ??method5_24
   \   00000188   ........           BL       doCurLeft
   \   0000018C   E5FFFFEA           B        ??method5_7
   \                     ??method5_24:
   \   00000190   ........           BL       WordLeft
   \   00000194   000097E5           LDR      R0,[R7, #+0]
   \   00000198   FE0000E2           AND      R0,R0,#0xFE
   \   0000019C   F4FFFFEA           B        ??method5_22
   \                     ??method5_25:
   \   000001A0   040091E5           LDR      R0,[R1, #+4]
   \   000001A4   020050E1           CMP      R0,R2
   \   000001A8   0100000A           BEQ      ??method5_26
   \   000001AC   ........           BL       doCurRight
   \   000001B0   DCFFFFEA           B        ??method5_7
   \                     ??method5_26:
   \   000001B4   ........           BL       WordRight
   \   000001B8   000097E5           LDR      R0,[R7, #+0]
   \   000001BC   FE0000E2           AND      R0,R0,#0xFE
   \                     ??method5_27:
   \   000001C0   000087E5           STR      R0,[R7, #+0]
   \   000001C4   D6FFFFEA           B        ??method5_16
   \                     ??method5_28:
   \   000001C8   ........           BL       ToEOL
   \   000001CC   000097E5           LDR      R0,[R7, #+0]
   \   000001D0   FE0000E2           AND      R0,R0,#0xFE
   \   000001D4   E6FFFFEA           B        ??method5_22
   \                     ??method5_29:
   \   000001D8   ........           LDR      R0,??DataTable217  ;; curpos
   \   000001DC   008080E5           STR      R8,[R0, #+0]
   \   000001E0   ........           LDR      R0,??DataTable301  ;; viewpos
   \   000001E4   008080E5           STR      R8,[R0, #+0]
   \   000001E8   FE0003E2           AND      R0,R3,#0xFE
   \   000001EC   F3FFFFEA           B        ??method5_27
   \                     ??method5_30:
   \   000001F0   0400A0E3           MOV      R0,#+4
   \   000001F4   000085E5           STR      R0,[R5, #+0]
   \   000001F8   CAFFFFEA           B        ??method5_7
   \                     ??method5_31:
   \   000001FC   ........           LDR      R0,??DataTable290  ;; win_dos_koi
   \   00000200   001090E5           LDR      R1,[R0, #+0]
   \   00000204   020051E3           CMP      R1,#+2
   \   00000208   011081B2           ADDLT    R1,R1,#+1
   \   0000020C   001080B5           STRLT    R1,[R0, #+0]
   \   00000210   008080A5           STRGE    R8,[R0, #+0]
   \   00000214   C2FFFFEA           B        ??method5_16
   \                     ??method5_17:
   \   00000218   ........           DC32     DoDiskAccess
   1691            }
   1692            return(0);
   1693          }
   1694          
   1695          //===================================================================
   1696          // ћеню загрузки файла
   1697          //===================================================================

   \                                 In segment CODE, align 4, keep-with-next
   1698          int sf_inp_onkey(GUI *data, GUI_MSG *msg)
   1699          {
   \                     sf_inp_onkey:
   \   00000000   00402DE9           PUSH     {LR}
   1700            if (msg->keys==0xFFF)
   \   00000004   F200D1E1           LDRSH    R0,[R1, #+2]
   \   00000008   FF10A0E3           MOV      R1,#+255
   \   0000000C   F01E81E3           ORR      R1,R1,#0xF00
   \   00000010   010050E1           CMP      R0,R1
   \   00000014   0F00001A           BNE      ??sf_inp_onkey_0
   1701            {
   1702              extern void savetext(void);
   1703              void UpdateCSMname(void);
   1704              ws_2str(e_ws,filename,126);
   \   00000018   ........           LDR      R0,??DataTable267  ;; e_ws
   \   0000001C   ........           LDR      R1,??DataTable313  ;; filename
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   7E20A0E3           MOV      R2,#+126
   \   00000028   A30000EF           SWI      +163
   1705              UpdateCSMname();
   \   0000002C   ........           BL       UpdateCSMname
   1706              HISTORY.fmt=0; //√рузим его теперь как DirectLoad
   \   00000030   ........           LDR      R0,??DataTable253  ;; HISTORY + 129
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   0010C0E5           STRB     R1,[R0, #+0]
   1707              disk_access=SAVE_FILE;
   \   0000003C   ........           LDR      R0,??DataTable256  ;; disk_access
   \   00000040   2010A0E3           MOV      R1,#+32
   \   00000044   001080E5           STR      R1,[R0, #+0]
   1708              SUBPROC((void *)savetext);
   \   00000048   10009FE5           LDR      R0,??sf_inp_onkey_1  ;; savetext
   \   0000004C   710100EF           SWI      +369
   1709              return(1); //Close
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   0080BDE8           POP      {PC}
   1710            }
   1711            return(0);
   \                     ??sf_inp_onkey_0:
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   0080BDE8           POP      {PC}             ;; return
   \                     ??sf_inp_onkey_1:
   \   00000060   ........           DC32     savetext
   1712          }
   1713          

   \                                 In segment CODE, align 4, keep-with-next
   1714          void sf_inp_ghook(GUI *data, int cmd)
   1715          {
   \                     sf_inp_ghook:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   1716            static SOFTKEY_DESC sk={0x0FFF,0x0000,(int)"Save..."};
   1717            EDITCONTROL ec;
   1718            if (cmd==7)
   \   00000008   070051E3           CMP      R1,#+7
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0A00001A           BNE      ??sf_inp_ghook_0
   1719            {
   1720              SetSoftKey(data,&sk,1);
   \   00000014   2C109FE5           LDR      R1,??sf_inp_ghook_1  ;; ??sk_1
   \   00000018   0120A0E3           MOV      R2,#+1
   \   0000001C   680100EF           SWI      +360
   1721              ExtractEditControl(data,1,&ec);
   \   00000020   0D20A0E1           MOV      R2,SP
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   690100EF           SWI      +361
   1722              wstrcpy(e_ws,ec.pWS);
   \   00000030   ........           LDR      R0,??DataTable267  ;; e_ws
   \   00000034   28109DE5           LDR      R1,[SP, #+40]
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   1F0100EF           SWI      +287
   1723            }
   1724          }
   \                     ??sf_inp_ghook_0:
   \   00000040   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   00000044   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??sf_inp_ghook_1:
   \   00000048   ........           DC32     ??sk_1

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ??sk_1:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for sk>_1`
   1725          

   \                                 In segment CODE, align 4, keep-with-next
   1726          void sf_inp_locret(void){}
   \                     sf_inp_locret:
   \   00000000   1EFF2FE1           BX       LR               ;; return
   1727          

   \                                 In segment DATA_I, align 4, align-sorted
   1728          HEADER_DESC sf_inp_hdr={0,0,131,21,icon,(int)"Save as:",0x7FFFFFFF};
   \                     sf_inp_hdr:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for sf_inp_hdr>`
   1729          

   \                                 In segment DATA_I, align 4, align-sorted
   1730          INPUTDIA_DESC sf_inp_desc=
   \                     sf_inp_desc:
   \   00000000                      DS8 56
   \   00000038                      REQUIRE `?<Initializer for sf_inp_desc>`
   1731          {
   1732            1,
   1733            sf_inp_onkey,
   1734            sf_inp_ghook,
   1735            (void *)sf_inp_locret,
   1736            0,
   1737            &menu_skt,
   1738            {0,22,131,153},
   1739            4,
   1740            100,
   1741            101,
   1742            0,
   1743            0x40000000
   1744          };
   1745          

   \                                 In segment CODE, align 4, keep-with-next
   1746          void CreateSaveAsDialog(void)
   1747          {
   \                     CreateSaveAsDialog:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   ........           LDR      R5,??DataTable267  ;; e_ws
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
   1748            void *ma=malloc_adr();
   \   0000000C   148000EF           SWI      +32788
   1749            void *eq;
   1750            EDITCONTROL ec;
   1751            str_2ws(e_ws,filename,126);
   \   00000010   ........           LDR      R1,??DataTable313  ;; filename
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   7E20A0E3           MOV      R2,#+126
   \   00000020   6C0100EF           SWI      +364
   1752            PrepareEditControl(&ec);
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   640100EF           SWI      +356
   1753            eq=AllocEQueue(ma,mfree_adr());
   \   0000002C   158000EF           SWI      +32789
   \   00000030   0010A0E1           MOV      R1,R0
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   630100EF           SWI      +355
   \   0000003C   0060A0E1           MOV      R6,R0
   1754            ConstructEditControl(&ec,3,0x40,e_ws,128);
   \   00000040   8000A0E3           MOV      R0,#+128
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   003095E5           LDR      R3,[R5, #+0]
   \   0000004C   4020A0E3           MOV      R2,#+64
   \   00000050   0310A0E3           MOV      R1,#+3
   \   00000054   04008DE2           ADD      R0,SP,#+4
   \   00000058   650100EF           SWI      +357
   1755            AddEditControlToEditQend(eq,&ec,ma);
   \   0000005C   0420A0E1           MOV      R2,R4
   \   00000060   04108DE2           ADD      R1,SP,#+4
   \   00000064   0600A0E1           MOV      R0,R6
   \   00000068   660100EF           SWI      +358
   1756            CreateInputTextDialog(&sf_inp_desc,&sf_inp_hdr,eq,1,0);
   \   0000006C   1C109FE5           LDR      R1,??CreateSaveAsDialog_0  ;; sf_inp_hdr
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   01002DE9           PUSH     {R0}
   \   00000078   0130A0E3           MOV      R3,#+1
   \   0000007C   10009FE5           LDR      R0,??CreateSaveAsDialog_0+0x4  ;; sf_inp_desc
   \   00000080   0620A0E1           MOV      R2,R6
   \   00000084   670100EF           SWI      +359
   1757          }
   \   00000088   34D08DE2           ADD      SP,SP,#+52
   \   0000008C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??CreateSaveAsDialog_0:
   \   00000090   ........           DC32     sf_inp_hdr
   \   00000094   ........           DC32     sf_inp_desc
   1758          

   \                                 In segment CODE, align 4, keep-with-next
   1759          void loadfont(int flag)
   1760          {
   1761            char fn_font[128];
   1762            int fin;
   1763            unsigned int ul;
   1764            snprintf(fn_font,sizeof(fn_font),"%s%d.fnt",ted_path,font_size);
   \                     loadfont:
   \   00000000   ........           LDR      R3,??DataTable227  ;; ted_path
   \   00000004   04219FE5           LDR      R2,??loadfont_0  ;; `?<Constant "%s%d.fnt">`
   \   00000008   70402DE9           PUSH     {R4-R6,LR}
   \   0000000C   ........           LDR      R5,??DataTable291  ;; font_size
   \   00000010   84D04DE2           SUB      SP,SP,#+132
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   8010A0E3           MOV      R1,#+128
   \   00000020   01002DE9           PUSH     {R0}
   \   00000024   08008DE2           ADD      R0,SP,#+8
   \   00000028   1B0100EF           SWI      +283
   1765            if ((fin=fopen(fn_font,A_ReadOnly+A_BIN,0,&ul))!=-1)
   \   0000002C   04308DE2           ADD      R3,SP,#+4
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   801CA0E3           MOV      R1,#+32768
   \   00000038   08008DE2           ADD      R0,SP,#+8
   \   0000003C   0A0000EF           SWI      +10
   \   00000040   0060A0E1           MOV      R6,R0
   \   00000044   010076E3           CMN      R6,#+1
   \   00000048   04D08DE2           ADD      SP,SP,#+4
   \   0000004C   0600000A           BEQ      ??loadfont_1
   1766            {
   1767              fread(fin,font,sizeof(font),&ul);
   \   00000050   ........           LDR      R1,??DataTable229  ;; font
   \   00000054   0D30A0E1           MOV      R3,SP
   \   00000058   402DA0E3           MOV      R2,#+4096
   \   0000005C   0B0000EF           SWI      +11
   1768              fclose(fin,&ul);
   \   00000060   0D10A0E1           MOV      R1,SP
   \   00000064   0600A0E1           MOV      R0,R6
   \   00000068   0D0000EF           SWI      +13
   1769            }
   1770            switch(font_size)
   \                     ??loadfont_1:
   \   0000006C   000095E5           LDR      R0,[R5, #+0]
   \   00000070   0E0050E2           SUBS     R0,R0,#+14
   \   00000074   0500000A           BEQ      ??loadfont_2
   \   00000078   020050E2           SUBS     R0,R0,#+2
   \   0000007C   0600001A           BNE      ??loadfont_3
   1771            {
   1772            case 16:
   1773              max_y_emode=128/16;
   \   00000080   0820A0E3           MOV      R2,#+8
   1774              max_y=176/16;
   \   00000084   0B30A0E3           MOV      R3,#+11
   1775              max_x=128/8;
   \                     ??loadfont_4:
   \   00000088   1010A0E3           MOV      R1,#+16
   \   0000008C   070000EA           B        ??loadfont_5
   1776              break;
   1777            case 14:
   1778              max_y_emode=128/14;
   \                     ??loadfont_2:
   \   00000090   0920A0E3           MOV      R2,#+9
   1779              max_y=176/14;
   \   00000094   0C30A0E3           MOV      R3,#+12
   \   00000098   FAFFFFEA           B        ??loadfont_4
   1780              max_x=128/8;
   1781              break;
   1782            default:
   1783              max_y_emode=128/8;
   1784              max_y=176/8;
   1785              max_x=128/font_size;
   \                     ??loadfont_3:
   \   0000009C   001095E5           LDR      R1,[R5, #+0]
   \   000000A0   8000A0E3           MOV      R0,#+128
   \   000000A4   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   000000A8   1020A0E3           MOV      R2,#+16
   \   000000AC   1630A0E3           MOV      R3,#+22
   \                     ??loadfont_5:
   \   000000B0   ........           LDR      R0,??DataTable230  ;; max_x
   \   000000B4   001080E5           STR      R1,[R0, #+0]
   \   000000B8   ........           LDR      R0,??DataTable231  ;; max_y
   1786              break;
   1787            }
   1788            zeromem(myscr,sizeof(myscr));
   \   000000BC   BB1EA0E3           MOV      R1,#+2992
   \   000000C0   003080E5           STR      R3,[R0, #+0]
   \   000000C4   ........           LDR      R0,??DataTable331  ;; max_y_emode
   \   000000C8   002080E5           STR      R2,[R0, #+0]
   \   000000CC   ........           LDR      R0,??DataTable233  ;; myscr
   \   000000D0   1D0100EF           SWI      +285
   1789            if(flag)
   \   000000D4   000054E3           CMP      R4,#+0
   \   000000D8   0A00000A           BEQ      ??loadfont_6
   1790            {
   1791              disk_access=0;
   \   000000DC   ........           LDR      R0,??DataTable256  ;; disk_access
   \   000000E0   0010A0E3           MOV      R1,#+0
   \   000000E4   001080E5           STR      R1,[R0, #+0]
   1792              draw_mode=1;
   \   000000E8   ........           LDR      R0,??DataTable264  ;; draw_mode
   \   000000EC   0110A0E3           MOV      R1,#+1
   \   000000F0   001080E5           STR      R1,[R0, #+0]
   1793              if (!terminated) REDRAW(); //ѕерерисовываем
   \   000000F4   ........           LDR      R0,??DataTable289  ;; terminated
   \   000000F8   000090E5           LDR      R0,[R0, #+0]
   \   000000FC   000050E3           CMP      R0,#+0
   \   00000100   0000001A           BNE      ??loadfont_6
   \   00000104   720100EF           SWI      +370
   1794            }
   1795          }
   \                     ??loadfont_6:
   \   00000108   84D08DE2           ADD      SP,SP,#+132      ;; stack cleaning
   \   0000010C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??loadfont_0:
   \   00000110   ........           DC32     `?<Constant "%s%d.fnt">`
   1796          

   \                                 In segment CODE, align 4, keep-with-next
   1797          void setfont(char sz)
   1798          {
   1799            font_size=sz;
   \                     setfont:
   \   00000000   ........           LDR      R1,??DataTable291  ;; font_size
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000081E5           STR      R0,[R1, #+0]
   1800            if (disk_access==FIRSTLOAD) //ѕришли из первой загрузки
   \   0000000C   ........           LDR      R0,??DataTable256  ;; disk_access
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   010051E3           CMP      R1,#+1
   \   00000018   0300001A           BNE      ??setfont_0
   1801            {
   1802              ShowMSG(1,(int)"Font selected!");
   \   0000001C   34109FE5           LDR      R1,??setfont_1   ;; `?<Constant "Font selected!">`
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   480100EF           SWI      +328
   \   00000028   0080BDE8           POP      {PC}
   1803              return;
   1804            }
   1805            disk_access=FIRSTLOAD;
   \                     ??setfont_0:
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   001080E5           STR      R1,[R0, #+0]
   1806            draw_mode=255; //Ёкран приветстви€
   \   00000034   ........           LDR      R0,??DataTable264  ;; draw_mode
   \   00000038   FF10A0E3           MOV      R1,#+255
   \   0000003C   001080E5           STR      R1,[R0, #+0]
   1807            SUBPROC((void *)loadfont,1);
   \   00000040   14009FE5           LDR      R0,??setfont_1+0x4  ;; loadfont
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   710100EF           SWI      +369
   1808            GeneralFuncF1(1); //«акрываем меню
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   3B0100EF           SWI      +315
   \   00000054   0080BDE8           POP      {PC}             ;; return
   \                     ??setfont_1:
   \   00000058   ........           DC32     `?<Constant "Font selected!">`
   \   0000005C   ........           DC32     loadfont
   1809          }
   1810          

   \                                 In segment CODE, align 4, keep-with-next
   1811          void load_setfont4(void){setfont(4);}
   \                     load_setfont4:
   \   00000000   0400A0E3           MOV      R0,#+4
   \   00000004   ........           B        setfont          ;; tailcall

   \                                 In segment CODE, align 4, keep-with-next
   1812          void load_setfont6(void){setfont(6);}
   \                     load_setfont6:
   \   00000000   0600A0E3           MOV      R0,#+6
   \   00000004   ........           B        setfont          ;; tailcall

   \                                 In segment CODE, align 4, keep-with-next
   1813          void load_setfont8(void){setfont(8);}
   \                     load_setfont8:
   \   00000000   0800A0E3           MOV      R0,#+8
   \   00000004   ........           B        setfont          ;; tailcall

   \                                 In segment CODE, align 4, keep-with-next
   1814          void load_setfont14(void){setfont(14);}
   \                     load_setfont14:
   \   00000000   0E00A0E3           MOV      R0,#+14
   \   00000004   ........           B        setfont          ;; tailcall

   \                                 In segment CODE, align 4, keep-with-next
   1815          void load_setfont16(void){setfont(16);}
   \                     load_setfont16:
   \   00000000   1000A0E3           MOV      R0,#+16
   \   00000004   ........           B        setfont          ;; tailcall
   1816          
   1817          void FirstLoadFile(unsigned int fmt);
   1818          

   \                                 In segment CODE, align 4, keep-with-next
   1819          void load_direct(void)
   1820          {
   1821            loadmenu_id=0;
   \                     load_direct:
   \   00000000   ........           LDR      R1,??DataTable250  ;; loadmenu_id
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   000081E5           STR      R0,[R1, #+0]
   1822            draw_mode=255;
   \   00000010   ........           LDR      R1,??DataTable264  ;; draw_mode
   \   00000014   FF20A0E3           MOV      R2,#+255
   \   00000018   002081E5           STR      R2,[R1, #+0]
   1823            disk_access=FIRSTLOAD;
   \   0000001C   ........           LDR      R1,??DataTable256  ;; disk_access
   \   00000020   0120A0E3           MOV      R2,#+1
   \   00000024   002081E5           STR      R2,[R1, #+0]
   1824            HISTORY.fmt=0;
   \   00000028   ........           LDR      R1,??DataTable253  ;; HISTORY + 129
   \   0000002C   0000C1E5           STRB     R0,[R1, #+0]
   1825            GeneralFuncF1(1);
   \   00000030   0100A0E3           MOV      R0,#+1
   \   00000034   3B0100EF           SWI      +315
   1826            SUBPROC((void *)FirstLoadFile,0);
   \   00000038   ........           LDR      R0,??DataTable254  ;; FirstLoadFile
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   710100EF           SWI      +369
   \   00000044   0080BDE8           POP      {PC}             ;; return
   1827          }
   1828          

   \                                 In segment CODE, align 4, keep-with-next
   1829          void load_format(void)
   1830          {
   1831            loadmenu_id=0;
   \                     load_format:
   \   00000000   ........           LDR      R0,??DataTable250  ;; loadmenu_id
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   001080E5           STR      R1,[R0, #+0]
   1832            draw_mode=255;
   \   00000010   ........           LDR      R0,??DataTable264  ;; draw_mode
   \   00000014   FF10A0E3           MOV      R1,#+255
   \   00000018   001080E5           STR      R1,[R0, #+0]
   1833            disk_access=FIRSTLOAD;
   \   0000001C   ........           LDR      R1,??DataTable256  ;; disk_access
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   000081E5           STR      R0,[R1, #+0]
   1834            HISTORY.fmt=1;
   \   00000028   ........           LDR      R1,??DataTable253  ;; HISTORY + 129
   \   0000002C   0000C1E5           STRB     R0,[R1, #+0]
   1835            GeneralFuncF1(1);
   \   00000030   3B0100EF           SWI      +315
   1836            SUBPROC((void *)FirstLoadFile,1);
   \   00000034   ........           LDR      R0,??DataTable254  ;; FirstLoadFile
   \   00000038   0110A0E3           MOV      R1,#+1
   \   0000003C   710100EF           SWI      +369
   \   00000040   0080BDE8           POP      {PC}             ;; return
   1837          }
   1838          

   \                                 In segment CODE, align 4, keep-with-next
   1839          void load_eolspc(void)
   1840          {
   1841            loadmenu_id=0;
   \                     load_eolspc:
   \   00000000   ........           LDR      R0,??DataTable250  ;; loadmenu_id
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   001080E5           STR      R1,[R0, #+0]
   1842            draw_mode=255;
   \   00000010   ........           LDR      R0,??DataTable264  ;; draw_mode
   \   00000014   FF10A0E3           MOV      R1,#+255
   \   00000018   001080E5           STR      R1,[R0, #+0]
   1843            disk_access=FIRSTLOAD;
   \   0000001C   ........           LDR      R0,??DataTable256  ;; disk_access
   \   00000020   0110A0E3           MOV      R1,#+1
   \   00000024   001080E5           STR      R1,[R0, #+0]
   1844            HISTORY.fmt=2;
   \   00000028   ........           LDR      R0,??DataTable253  ;; HISTORY + 129
   \   0000002C   0210A0E3           MOV      R1,#+2
   \   00000030   0010C0E5           STRB     R1,[R0, #+0]
   1845            GeneralFuncF1(1);
   \   00000034   0100A0E3           MOV      R0,#+1
   \   00000038   3B0100EF           SWI      +315
   1846            SUBPROC((void *)FirstLoadFile,2);
   \   0000003C   ........           LDR      R0,??DataTable254  ;; FirstLoadFile
   \   00000040   0210A0E3           MOV      R1,#+2
   \   00000044   710100EF           SWI      +369
   \   00000048   0080BDE8           POP      {PC}             ;; return
   1847          }
   1848          

   \                                 In segment CODE, align 4, keep-with-next
   1849          void load_pad(void)
   1850          {
   1851            HISTORY.fmt^=0x80;
   \                     load_pad:
   \   00000000   ........           LDR      R0,??DataTable292  ;; HISTORY
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   8110D0E5           LDRB     R1,[R0, #+129]
   \   0000000C   801021E2           EOR      R1,R1,#0x80
   \   00000010   8110C0E5           STRB     R1,[R0, #+129]
   1852            GeneralFuncF1(1);
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   3B0100EF           SWI      +315
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   1853          }
   1854          

   \                                 In segment CODE, align 4, keep-with-next
   1855          void load_save(void)
   1856          {
   \                     load_save:
   \   00000000   00402DE9           PUSH     {LR}
   1857            GeneralFuncF1(1);
   \   00000004   0100A0E3           MOV      R0,#+1
   \   00000008   3B0100EF           SWI      +315
   1858            CreateSaveAsDialog();
   \   0000000C   0040BDE8           POP      {LR}             ;; Pop
   \   00000010   ........           B        CreateSaveAsDialog  ;; tailcall
   1859          }
   1860          

   \                                 In segment DATA_I, align 4, align-sorted
   1861          void *loadmenu_HNDLS[10]=
   \                     loadmenu_HNDLS:
   \   00000000                      DS8 40
   \   00000028                      REQUIRE `?<Initializer for loadmenu_HNDLS>`
   1862          {
   1863            (void *)load_setfont4,
   1864            (void *)load_setfont6,
   1865            (void *)load_setfont8,
   1866            (void *)load_setfont14,
   1867            (void *)load_setfont16,
   1868            (void *)load_direct,
   1869            (void *)load_format,
   1870            (void *)load_eolspc,
   1871            (void *)load_pad,
   1872            (void *)load_save
   1873          };
   1874          

   \                                 In segment DATA_I, align 4, align-sorted
   1875          MENUITEM_DESC loadmenu_ITEMS[10]=
   \                     loadmenu_ITEMS:
   \   00000000                      DS8 280
   \   00000118                      REQUIRE `?<Initializer for loadmenu_ITEMS>`
   1876          {
   1877            {NULL,(int)"Font size = 4",0x7FFFFFFF,0,NULL,0,0x59D},
   1878            {NULL,(int)"Font size = 6",0x7FFFFFFF,0,NULL,0,0x59D},
   1879            {NULL,(int)"Font size = 8",0x7FFFFFFF,0,NULL,0,0x59D},
   1880            {NULL,(int)"Font size = 14",0x7FFFFFFF,0,NULL,0,0x59D},
   1881            {NULL,(int)"Font size = 16",0x7FFFFFFF,0,NULL,0,0x59D},
   1882            {NULL,(int)"Direct load",0x7FFFFFFF,0,NULL,0,0x59D},
   1883            {NULL,(int)"DOS format",0x7FFFFFFF,0,NULL,0,0x59D},
   1884            {NULL,(int)"WIN format",0x7FFFFFFF,0,NULL,0,0x59D},
   1885            {NULL,(int)"Padding on/off",0x7FFFFFFF,0,NULL,0,0x59D},
   1886            {NULL,(int)"Save as...",0x7FFFFFFF,0,NULL,0,0x59D}
   1887          };
   1888          

   \                                 In segment DATA_I, align 4, align-sorted
   1889          HEADER_DESC loadmenu_HDR={0,0,131,21,icon,(int)"General...",0x7FFFFFFF};
   \                     loadmenu_HDR:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for loadmenu_HDR>`
   1890          

   \                                 In segment DATA_I, align 4, align-sorted
   1891          MENU_DESC loadmenu_STRUCT=
   \                     loadmenu_STRUCT:
   \   00000000                      DS8 44
   \   0000002C                      REQUIRE `?<Initializer for loadmenu_STRUCT>`
   1892          {
   1893            8,NULL,NULL,NULL,
   1894            menusoftkeys,
   1895            &menu_skt,
   1896            0,
   1897            NULL,
   1898            loadmenu_ITEMS,
   1899            loadmenu_HNDLS,
   1900            8
   1901          };
   1902          

   \                                 In segment CODE, align 4, keep-with-next
   1903          int DrawLoadMenu(void)
   1904          {
   1905            int n;
   1906            if (disk_access==FIRSTLOAD) n=8; else n=10;
   \                     DrawLoadMenu:
   \   00000000   ........           LDR      R0,??DataTable256  ;; disk_access
   1907            *((int *)(&loadmenu_STRUCT.n_items))=n;
   \   00000004   3C209FE5           LDR      R2,??DrawLoadMenu_0  ;; loadmenu_STRUCT
   1908            return CreateMenu(0,0,&loadmenu_STRUCT,&loadmenu_HDR,0,n,0,0);
   \   00000008   3C309FE5           LDR      R3,??DrawLoadMenu_0+0x4  ;; loadmenu_HDR
   \   0000000C   00402DE9           PUSH     {LR}
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   010050E3           CMP      R0,#+1
   \   0000001C   0800A003           MOVEQ    R0,#+8
   \   00000020   0A00A013           MOVNE    R0,#+10
   \   00000024   280082E5           STR      R0,[R2, #+40]
   \   00000028   02002DE9           PUSH     {R1}
   \   0000002C   02002DE9           PUSH     {R1}
   \   00000030   01002DE9           PUSH     {R0}
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   01002DE9           PUSH     {R0}
   \   0000003C   520100EF           SWI      +338
   \   00000040   10D08DE2           ADD      SP,SP,#+16
   \   00000044   0080BDE8           POP      {PC}             ;; return
   \                     ??DrawLoadMenu_0:
   \   00000048   ........           DC32     loadmenu_STRUCT
   \   0000004C   ........           DC32     loadmenu_HDR
   1909          }
   1910          
   1911          //-------------------------------------------------------------------
   1912          
   1913          //===================================================================
   1914          // ћеню Goto...
   1915          //===================================================================

   \                                 In segment CODE, align 4, keep-with-next
   1916          void goto_l(unsigned long l)
   1917          {
   1918            seek_to_line=l;
   \                     goto_l:
   \   00000000   ........           LDR      R1,??DataTable314  ;; seek_to_line
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000081E5           STR      R0,[R1, #+0]
   1919            draw_mode=2; //ѕереходим на нужную строку
   \   0000000C   ........           LDR      R0,??DataTable264  ;; draw_mode
   \   00000010   0210A0E3           MOV      R1,#+2
   \   00000014   001080E5           STR      R1,[R0, #+0]
   1920            SUBPROC((void *)GotoLine);
   \   00000018   ........           LDR      R0,??DataTable265  ;; GotoLine
   \   0000001C   710100EF           SWI      +369
   1921            GeneralFuncF1(1);
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   3B0100EF           SWI      +315
   \   00000028   0080BDE8           POP      {PC}             ;; return
   1922          }
   1923          

   \                                 In segment CODE, align 4, keep-with-next
   1924          void goto_top(void)
   1925          {
   1926            goto_l(0);
   \                     goto_top:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   ........           B        goto_l           ;; tailcall
   1927          }
   1928          

   \                                 In segment CODE, align 4, keep-with-next
   1929          void goto_bot(void)
   1930          {
   1931            goto_l(0xFFFFFFFF);
   \                     goto_bot:
   \   00000000   0000E0E3           MVN      R0,#+0
   \   00000004   ........           B        goto_l           ;; tailcall
   1932          }
   1933          

   \                                 In segment DATA_Z, align 4, align-sorted
   1934          int gl_num;
   \                     gl_num:
   \   00000000                      DS8 4
   1935          

   \                                 In segment CODE, align 4, keep-with-next
   1936          unsigned int my_atoui(WSHDR *ws)
   1937          {
   \                     my_atoui:
   \   00000000   10002DE9           PUSH     {R4}
   1938            unsigned int i=0;
   1939            int p=1;
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   0120A0E3           MOV      R2,#+1
   \   00000010   023080E2           ADD      R3,R0,#+2
   \   00000014   020000EA           B        ??my_atoui_0
   1940            unsigned int c;
   1941            while(p<=ws->wsbody[0])
   1942            {
   1943              c=ws->wsbody[p]-'0';
   1944              if (c>9) break;
   1945              i=(i*10)+c;
   \                     ??my_atoui_1:
   \   00000018   0A40A0E3           MOV      R4,#+10
   \   0000001C   94C121E0           MLA      R1,R4,R1,R12
   1946              p++;
   \   00000020   012082E2           ADD      R2,R2,#+1
   \                     ??my_atoui_0:
   \   00000024   B040D0E1           LDRH     R4,[R0, #+0]
   \   00000028   020054E1           CMP      R4,R2
   \   0000002C   030000BA           BLT      ??my_atoui_2
   \   00000030   ........           LDRH     R4,[R3], #+2
   \   00000034   30C044E2           SUB      R12,R4,#+48
   \   00000038   0A005CE3           CMP      R12,#+10
   \   0000003C   F5FFFF3A           BCC      ??my_atoui_1
   1947            }
   1948            return(i);
   \                     ??my_atoui_2:
   \   00000040   1000BDE8           POP      {R4}
   \   00000044   0100A0E1           MOV      R0,R1
   \   00000048   1EFF2FE1           BX       LR               ;; return
   1949          }
   1950          

   \                                 In segment CODE, align 4, keep-with-next
   1951          int gl_inp_onkey(GUI *data, GUI_MSG *msg)
   1952          {
   \                     gl_inp_onkey:
   \   00000000   00402DE9           PUSH     {LR}
   1953            if (msg->keys==0xFFF)
   \   00000004   F200D1E1           LDRSH    R0,[R1, #+2]
   \   00000008   FF10A0E3           MOV      R1,#+255
   \   0000000C   F01E81E3           ORR      R1,R1,#0xF00
   \   00000010   010050E1           CMP      R0,R1
   \   00000014   1700001A           BNE      ??gl_inp_onkey_0
   1954            {
   1955              if (gl_num)
   \   00000018   ........           LDR      R1,??DataTable268  ;; gl_num
   \   0000001C   ........           LDR      R0,??DataTable267  ;; e_ws
   \   00000020   001091E5           LDR      R1,[R1, #+0]
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   000051E3           CMP      R1,#+0
   \   0000002C   0700000A           BEQ      ??gl_inp_onkey_1
   1956              {
   1957                seek_to_line=total_line*my_atoui(e_ws)/100;
   \   00000030   ........           BL       my_atoui
   \   00000034   ........           LDR      R1,??DataTable310  ;; total_line
   \   00000038   40209FE5           LDR      R2,??gl_inp_onkey_2  ;; 0x51eb851f
   \   0000003C   001091E5           LDR      R1,[R1, #+0]
   \   00000040   900101E0           MUL      R1,R0,R1
   \   00000044   923180E0           UMULL    R3,R0,R2,R1
   \   00000048   A002A0E1           LSR      R0,R0,#+5
   \   0000004C   000000EA           B        ??gl_inp_onkey_3
   1958              }
   1959              else
   1960              {
   1961                seek_to_line=my_atoui(e_ws);
   \                     ??gl_inp_onkey_1:
   \   00000050   ........           BL       my_atoui
   \                     ??gl_inp_onkey_3:
   \   00000054   ........           LDR      R1,??DataTable314  ;; seek_to_line
   \   00000058   000081E5           STR      R0,[R1, #+0]
   1962              }
   1963              draw_mode=2; //ѕереходим на нужную строку
   \   0000005C   ........           LDR      R0,??DataTable264  ;; draw_mode
   \   00000060   0210A0E3           MOV      R1,#+2
   \   00000064   001080E5           STR      R1,[R0, #+0]
   1964              SUBPROC((void *)GotoLine);
   \   00000068   ........           LDR      R0,??DataTable265  ;; GotoLine
   \   0000006C   710100EF           SWI      +369
   1965              return(1); //Close
   \   00000070   0100A0E3           MOV      R0,#+1
   \   00000074   0080BDE8           POP      {PC}
   1966            }
   1967            return(0);
   \                     ??gl_inp_onkey_0:
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   0080BDE8           POP      {PC}             ;; return
   \                     ??gl_inp_onkey_2:
   \   00000080   1F85EB51           DC32     0x51eb851f
   1968          }
   1969          

   \                                 In segment CODE, align 4, keep-with-next
   1970          void gl_inp_ghook(GUI *data, int cmd)
   1971          {
   \                     gl_inp_ghook:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   1972            static SOFTKEY_DESC sk={0x0FFF,0x0000,(int)"Goto..."};
   1973            EDITCONTROL ec;
   1974            if (cmd==7)
   \   00000008   070051E3           CMP      R1,#+7
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0A00001A           BNE      ??gl_inp_ghook_0
   1975            {
   1976              SetSoftKey(data,&sk,1);
   \   00000014   2C109FE5           LDR      R1,??gl_inp_ghook_1  ;; ??sk_2
   \   00000018   0120A0E3           MOV      R2,#+1
   \   0000001C   680100EF           SWI      +360
   1977              ExtractEditControl(data,1,&ec);
   \   00000020   0D20A0E1           MOV      R2,SP
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   690100EF           SWI      +361
   1978              wstrcpy(e_ws,ec.pWS);
   \   00000030   ........           LDR      R0,??DataTable267  ;; e_ws
   \   00000034   28109DE5           LDR      R1,[SP, #+40]
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   1F0100EF           SWI      +287
   1979            }
   1980          }
   \                     ??gl_inp_ghook_0:
   \   00000040   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   00000044   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??gl_inp_ghook_1:
   \   00000048   ........           DC32     ??sk_2

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ??sk_2:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for sk>_2`
   1981          

   \                                 In segment CODE, align 4, keep-with-next
   1982          void gl_inp_locret(void){}
   \                     gl_inp_locret:
   \   00000000   1EFF2FE1           BX       LR               ;; return
   1983          

   \                                 In segment DATA_I, align 4, align-sorted
   1984          HEADER_DESC gl_inp_hdr_percent={0,0,131,21,icon,(int)"Goto percent:",0x7FFFFFFF};
   \                     gl_inp_hdr_percent:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for gl_inp_hdr_percent>`

   \                                 In segment DATA_I, align 4, align-sorted
   1985          HEADER_DESC gl_inp_hdr_line={0,0,131,21,icon,(int)"Goto line:",0x7FFFFFFF};
   \                     gl_inp_hdr_line:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for gl_inp_hdr_line>`
   1986          

   \                                 In segment DATA_I, align 4, align-sorted
   1987          INPUTDIA_DESC gl_inp_desc=
   \                     gl_inp_desc:
   \   00000000                      DS8 56
   \   00000038                      REQUIRE `?<Initializer for gl_inp_desc>`
   1988          {
   1989            1,
   1990            gl_inp_onkey,
   1991            gl_inp_ghook,
   1992            (void *)gl_inp_locret,
   1993            0,
   1994            &menu_skt,
   1995            {0,22,131,153},
   1996            4,
   1997            100,
   1998            101,
   1999            0,
   2000            0x40000000
   2001          };
   2002          
   2003          

   \                                 In segment CODE, align 4, keep-with-next
   2004          void goto_line_inp(int f)
   2005          {
   \                     goto_line_inp:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   ........           LDR      R6,??DataTable267  ;; e_ws
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
   \   0000000C   0040A0E1           MOV      R4,R0
   2006            void *ma=malloc_adr();
   \   00000010   148000EF           SWI      +32788
   \   00000014   0050A0E1           MOV      R5,R0
   2007            void *eq;
   2008            EDITCONTROL ec;
   2009            CutWSTR(e_ws,0);
   \   00000018   000096E5           LDR      R0,[R6, #+0]
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   260100EF           SWI      +294
   2010            wsAppendChar(e_ws,'0');
   \   00000024   000096E5           LDR      R0,[R6, #+0]
   \   00000028   3010A0E3           MOV      R1,#+48
   \   0000002C   1C0000EF           SWI      +28
   2011            gl_num=f;
   \   00000030   ........           LDR      R0,??DataTable268  ;; gl_num
   \   00000034   004080E5           STR      R4,[R0, #+0]
   2012            PrepareEditControl(&ec);
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   640100EF           SWI      +356
   2013            eq=AllocEQueue(ma,mfree_adr());
   \   00000040   158000EF           SWI      +32789
   \   00000044   0010A0E1           MOV      R1,R0
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   630100EF           SWI      +355
   \   00000050   0070A0E1           MOV      R7,R0
   2014            ConstructEditControl(&ec,2,0x40,e_ws,7);
   \   00000054   0700A0E3           MOV      R0,#+7
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   003096E5           LDR      R3,[R6, #+0]
   \   00000060   4020A0E3           MOV      R2,#+64
   \   00000064   0210A0E3           MOV      R1,#+2
   \   00000068   04008DE2           ADD      R0,SP,#+4
   \   0000006C   650100EF           SWI      +357
   2015            AddEditControlToEditQend(eq,&ec,ma);
   \   00000070   0520A0E1           MOV      R2,R5
   \   00000074   04108DE2           ADD      R1,SP,#+4
   \   00000078   0700A0E1           MOV      R0,R7
   \   0000007C   660100EF           SWI      +358
   2016            CreateInputTextDialog(&gl_inp_desc,f?&gl_inp_hdr_percent:&gl_inp_hdr_line,eq,1,0);
   \   00000080   04D08DE2           ADD      SP,SP,#+4
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   01002DE9           PUSH     {R0}
   \   0000008C   000054E3           CMP      R4,#+0
   \   00000090   18109F15           LDRNE    R1,??goto_line_inp_0  ;; gl_inp_hdr_percent
   \   00000094   0130A0E3           MOV      R3,#+1
   \   00000098   14109F05           LDREQ    R1,??goto_line_inp_0+0x4  ;; gl_inp_hdr_line
   \   0000009C   14009FE5           LDR      R0,??goto_line_inp_0+0x8  ;; gl_inp_desc
   \   000000A0   0720A0E1           MOV      R2,R7
   \   000000A4   670100EF           SWI      +359
   2017          }
   \   000000A8   30D08DE2           ADD      SP,SP,#+48
   \   000000AC   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??goto_line_inp_0:
   \   000000B0   ........           DC32     gl_inp_hdr_percent
   \   000000B4   ........           DC32     gl_inp_hdr_line
   \   000000B8   ........           DC32     gl_inp_desc
   2018          

   \                                 In segment CODE, align 4, keep-with-next
   2019          void goto_line(void)
   2020          {
   \                     goto_line:
   \   00000000   00402DE9           PUSH     {LR}
   2021            GeneralFuncF1(1);
   \   00000004   0100A0E3           MOV      R0,#+1
   \   00000008   3B0100EF           SWI      +315
   2022            goto_line_inp(0); //ѕризнак перехода по строке
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           B        goto_line_inp    ;; tailcall
   2023          }
   2024          

   \                                 In segment CODE, align 4, keep-with-next
   2025          void goto_percent(void)
   2026          {
   \                     goto_percent:
   \   00000000   00402DE9           PUSH     {LR}
   2027            GeneralFuncF1(1);
   \   00000004   0100A0E3           MOV      R0,#+1
   \   00000008   3B0100EF           SWI      +315
   2028            goto_line_inp(1); //ѕризнак перехода по процентам
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           B        goto_line_inp    ;; tailcall
   2029          }
   2030          

   \                                 In segment CODE, align 4, keep-with-next
   2031          void goto_last_saved(void)
   2032          {
   2033            goto_l(HISTORY.line);
   \                     goto_last_saved:
   \   00000000   04009FE5           LDR      R0,??goto_last_saved_0  ;; HISTORY + 132
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   ........           B        goto_l           ;; tailcall
   \                     ??goto_last_saved_0:
   \   0000000C   ........           DC32     HISTORY + 132
   2034          }
   2035          

   \                                 In segment CODE, align 4, keep-with-next
   2036          void goto_book1(void)
   2037          {
   2038            goto_l(HISTORY.bookm1);
   \                     goto_book1:
   \   00000000   ........           LDR      R0,??DataTable273  ;; HISTORY + 140
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   ........           B        goto_l           ;; tailcall
   2039          }

   \                                 In segment CODE, align 4, keep-with-next
   2040          void goto_book2(void)
   2041          {
   2042            goto_l(HISTORY.bookm2);
   \                     goto_book2:
   \   00000000   ........           LDR      R0,??DataTable275  ;; HISTORY + 144
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   ........           B        goto_l           ;; tailcall
   2043          }

   \                                 In segment CODE, align 4, keep-with-next
   2044          void goto_book3(void)
   2045          {
   2046            goto_l(HISTORY.bookm3);
   \                     goto_book3:
   \   00000000   ........           LDR      R0,??DataTable277  ;; HISTORY + 148
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   ........           B        goto_l           ;; tailcall
   2047          }

   \                                 In segment CODE, align 4, keep-with-next
   2048          void goto_book4(void)
   2049          {
   2050            goto_l(HISTORY.bookm4);
   \                     goto_book4:
   \   00000000   ........           LDR      R0,??DataTable279  ;; HISTORY + 152
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   ........           B        goto_l           ;; tailcall
   2051          }
   2052          

   \                                 In segment DATA_I, align 4, align-sorted
   2053          void *gotomenu_HNDLS[9]=
   \                     gotomenu_HNDLS:
   \   00000000                      DS8 36
   \   00000024                      REQUIRE `?<Initializer for gotomenu_HNDLS>`
   2054          {
   2055            (void *)goto_top,
   2056            (void *)goto_line,
   2057            (void *)goto_percent,
   2058            (void *)goto_bot,
   2059            (void *)goto_last_saved,
   2060            (void *)goto_book1,
   2061            (void *)goto_book2,
   2062            (void *)goto_book3,
   2063            (void *)goto_book4
   2064          };
   2065          

   \                                 In segment DATA_I, align 4, align-sorted
   2066          MENUITEM_DESC gotomenu_ITEMS[9]=
   \                     gotomenu_ITEMS:
   \   00000000                      DS8 252
   \   000000FC                      REQUIRE `?<Initializer for gotomenu_ITEMS>`
   2067          {
   2068            {NULL,(int)"Top",0x7FFFFFFF,0,NULL,0,0x59D},
   2069            {NULL,(int)"Line",0x7FFFFFFF,0,NULL,0,0x59D},
   2070            {NULL,(int)"Percent",0x7FFFFFFF,0,NULL,0,0x59D},
   2071            {NULL,(int)"Bottom",0x7FFFFFFF,0,NULL,0,0x59D},
   2072            {NULL,(int)"Last saved",0x7FFFFFFF,0,NULL,0,0x59D},
   2073            {NULL,(int)t_bm1,0x7FFFFFFF,0,NULL,0,0x59D},
   2074            {NULL,(int)t_bm2,0x7FFFFFFF,0,NULL,0,0x59D},
   2075            {NULL,(int)t_bm3,0x7FFFFFFF,0,NULL,0,0x59D},
   2076            {NULL,(int)t_bm4,0x7FFFFFFF,0,NULL,0,0x59D},
   2077          };
   2078          

   \                                 In segment DATA_I, align 4, align-sorted
   2079          HEADER_DESC gotomenu_HDR={0,0,131,21,icon,(int)"Goto...",0x7FFFFFFF};
   \                     gotomenu_HDR:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for gotomenu_HDR>`
   2080          

   \                                 In segment DATA_I, align 4, align-sorted
   2081          MENU_DESC gotomenu_STRUCT=
   \                     gotomenu_STRUCT:
   \   00000000                      DS8 44
   \   0000002C                      REQUIRE `?<Initializer for gotomenu_STRUCT>`
   2082          {
   2083            8,NULL,NULL,NULL,
   2084            menusoftkeys,
   2085            &menu_skt,
   2086            0,
   2087            NULL,
   2088            gotomenu_ITEMS,
   2089            gotomenu_HNDLS,
   2090            9
   2091          };
   2092          

   \                                 In segment CODE, align 4, keep-with-next
   2093          void goto_menu(void)
   2094          {
   \                     goto_menu:
   \   00000000   00402DE9           PUSH     {LR}
   2095            GeneralFuncF1(1);
   \   00000004   0100A0E3           MOV      R0,#+1
   \   00000008   3B0100EF           SWI      +315
   2096            CreateMenu(0,0,&gotomenu_STRUCT,&gotomenu_HDR,0,9,0,0);
   \   0000000C   2C309FE5           LDR      R3,??goto_menu_0  ;; gotomenu_HDR
   \   00000010   2C209FE5           LDR      R2,??goto_menu_0+0x4  ;; gotomenu_STRUCT
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   01002DE9           PUSH     {R0}
   \   0000001C   01002DE9           PUSH     {R0}
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0900A0E3           MOV      R0,#+9
   \   00000028   01002DE9           PUSH     {R0}
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   01002DE9           PUSH     {R0}
   \   00000034   520100EF           SWI      +338
   2097          }
   \   00000038   10D08DE2           ADD      SP,SP,#+16
   \   0000003C   0080BDE8           POP      {PC}             ;; return
   \                     ??goto_menu_0:
   \   00000040   ........           DC32     gotomenu_HDR
   \   00000044   ........           DC32     gotomenu_STRUCT
   2098          
   2099          //===================================================================
   2100          // ћеню Bookmark...
   2101          //===================================================================

   \                                 In segment CODE, align 4, keep-with-next
   2102          void set_book1(void)
   2103          {
   2104            HISTORY.bookm1=curline;
   \                     set_book1:
   \   00000000   ........           LDR      R0,??DataTable273  ;; HISTORY + 140
   \   00000004   ........           LDR      R1,??DataTable311  ;; curline
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   001080E5           STR      R1,[R0, #+0]
   2105            GeneralFuncF1(1);
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   3B0100EF           SWI      +315
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   2106          }
   2107          

   \                                 In segment CODE, align 4, keep-with-next
   2108          void set_book2(void)
   2109          {
   2110            HISTORY.bookm2=curline;
   \                     set_book2:
   \   00000000   ........           LDR      R0,??DataTable275  ;; HISTORY + 144
   \   00000004   ........           LDR      R1,??DataTable311  ;; curline
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   001080E5           STR      R1,[R0, #+0]
   2111            GeneralFuncF1(1);
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   3B0100EF           SWI      +315
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   2112          }
   2113          

   \                                 In segment CODE, align 4, keep-with-next
   2114          void set_book3(void)
   2115          {
   2116            HISTORY.bookm3=curline;
   \                     set_book3:
   \   00000000   ........           LDR      R0,??DataTable277  ;; HISTORY + 148
   \   00000004   ........           LDR      R1,??DataTable311  ;; curline
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   001080E5           STR      R1,[R0, #+0]
   2117            GeneralFuncF1(1);
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   3B0100EF           SWI      +315
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   2118          }
   2119          

   \                                 In segment CODE, align 4, keep-with-next
   2120          void set_book4(void)
   2121          {
   2122            HISTORY.bookm4=curline;
   \                     set_book4:
   \   00000000   ........           LDR      R0,??DataTable279  ;; HISTORY + 152
   \   00000004   ........           LDR      R1,??DataTable311  ;; curline
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   001080E5           STR      R1,[R0, #+0]
   2123            GeneralFuncF1(1);
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   3B0100EF           SWI      +315
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   2124          }
   2125          

   \                                 In segment DATA_I, align 4, align-sorted
   2126          MENUITEM_DESC bookmenu_ITEMS[4]=
   \                     bookmenu_ITEMS:
   \   00000000                      DS8 112
   \   00000070                      REQUIRE `?<Initializer for bookmenu_ITEMS>`
   2127          {
   2128            {NULL,(int)t_bm1,0x7FFFFFFF,0,NULL,0,0x59D},
   2129            {NULL,(int)t_bm2,0x7FFFFFFF,0,NULL,0,0x59D},
   2130            {NULL,(int)t_bm3,0x7FFFFFFF,0,NULL,0,0x59D},
   2131            {NULL,(int)t_bm4,0x7FFFFFFF,0,NULL,0,0x59D},
   2132          };
   2133          

   \                                 In segment DATA_I, align 4, align-sorted
   2134          void *bookmenu_HNDLS[4]=
   \                     bookmenu_HNDLS:
   \   00000000                      DS8 16
   \   00000010                      REQUIRE `?<Initializer for bookmenu_HNDLS>`
   2135          {
   2136            (void *)set_book1,
   2137            (void *)set_book2,
   2138            (void *)set_book3,
   2139            (void *)set_book4
   2140          };
   2141          

   \                                 In segment DATA_I, align 4, align-sorted
   2142          HEADER_DESC bookmenu_HDR={0,0,131,21,icon,(int)"Set Bookmark...",0x7FFFFFFF};
   \                     bookmenu_HDR:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for bookmenu_HDR>`
   2143          

   \                                 In segment DATA_I, align 4, align-sorted
   2144          MENU_DESC bookmenu_STRUCT=
   \                     bookmenu_STRUCT:
   \   00000000                      DS8 44
   \   0000002C                      REQUIRE `?<Initializer for bookmenu_STRUCT>`
   2145          {
   2146            8,NULL,NULL,NULL,
   2147            menusoftkeys,
   2148            &menu_skt,
   2149            1,
   2150            NULL,
   2151            bookmenu_ITEMS,
   2152            bookmenu_HNDLS,
   2153            4
   2154          };
   2155          

   \                                 In segment CODE, align 4, keep-with-next
   2156          void bookm_menu(void)
   2157          {
   \                     bookm_menu:
   \   00000000   00402DE9           PUSH     {LR}
   2158            GeneralFuncF1(1);
   \   00000004   0100A0E3           MOV      R0,#+1
   \   00000008   3B0100EF           SWI      +315
   2159            CreateMenu(0,0,&bookmenu_STRUCT,&bookmenu_HDR,0,4,0,0);
   \   0000000C   2C309FE5           LDR      R3,??bookm_menu_0  ;; bookmenu_HDR
   \   00000010   2C209FE5           LDR      R2,??bookm_menu_0+0x4  ;; bookmenu_STRUCT
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   01002DE9           PUSH     {R0}
   \   0000001C   01002DE9           PUSH     {R0}
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0400A0E3           MOV      R0,#+4
   \   00000028   01002DE9           PUSH     {R0}
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   01002DE9           PUSH     {R0}
   \   00000034   520100EF           SWI      +338
   2160          }
   \   00000038   10D08DE2           ADD      SP,SP,#+16
   \   0000003C   0080BDE8           POP      {PC}             ;; return
   \                     ??bookm_menu_0:
   \   00000040   ........           DC32     bookmenu_HDR
   \   00000044   ........           DC32     bookmenu_STRUCT
   2161          //===================================================================
   2162          // ћеню по левому софту
   2163          //===================================================================
   2164          

   \                                 In segment CODE, align 4, keep-with-next
   2165          void search_menu(void)
   2166          {
   2167          }
   \                     search_menu:
   \   00000000   1EFF2FE1           BX       LR               ;; return
   2168          

   \                                 In segment DATA_I, align 4, align-sorted
   2169          MENUITEM_DESC softmenu_ITEMS[3]=
   \                     softmenu_ITEMS:
   \   00000000                      DS8 84
   \   00000054                      REQUIRE `?<Initializer for softmenu_ITEMS>`
   2170          {
   2171            {NULL,(int)"Goto...",0x7FFFFFFF,0,NULL,0,0x59D},
   2172            {NULL,(int)"Set Bookmark...",0x7FFFFFFF,0,NULL,0,0x59D},
   2173            {NULL,(int)"Search...",0x7FFFFFFF,0,NULL,0,0x59D},
   2174          };
   2175          

   \                                 In segment DATA_I, align 4, align-sorted
   2176          void *softmenu_HNDLS[3]=
   \                     softmenu_HNDLS:
   \   00000000                      DS8 12
   \   0000000C                      REQUIRE `?<Initializer for softmenu_HNDLS>`
   2177          {
   2178            (void *)goto_menu,
   2179            (void *)bookm_menu,
   2180            (void *)search_menu
   2181          };
   2182          

   \                                 In segment DATA_I, align 4, align-sorted
   2183          HEADER_DESC softmenu_HDR={0,0,131,21,icon,(int)"TED menu",0x7FFFFFFF};
   \                     softmenu_HDR:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for softmenu_HDR>`
   2184          

   \                                 In segment DATA_I, align 4, align-sorted
   2185          MENU_DESC softmenu_STRUCT=
   \                     softmenu_STRUCT:
   \   00000000                      DS8 44
   \   0000002C                      REQUIRE `?<Initializer for softmenu_STRUCT>`
   2186          {
   2187            8,NULL,NULL,NULL,
   2188            menusoftkeys,
   2189            &menu_skt,
   2190            1,
   2191            NULL,
   2192            softmenu_ITEMS,
   2193            softmenu_HNDLS,
   2194            3
   2195          };
   2196          

   \                                 In segment CODE, align 4, keep-with-next
   2197          void DrawSoftMenu(void)
   2198          {
   2199            static const char lfrm[]="%u";
   2200            sprintf(t_bm1+4,lfrm,HISTORY.bookm1);
   \                     DrawSoftMenu:
   \   00000000   78009FE5           LDR      R0,??DrawSoftMenu_0  ;; t_bm1 + 4
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   74409FE5           LDR      R4,??DrawSoftMenu_0+0x4  ;; ??lfrm
   \   0000000C   ........           LDR      R5,??DataTable292  ;; HISTORY
   \   00000010   0410A0E1           MOV      R1,R4
   \   00000014   8C2095E5           LDR      R2,[R5, #+140]
   \   00000018   160000EF           SWI      +22
   2201            sprintf(t_bm2+4,lfrm,HISTORY.bookm2);
   \   0000001C   902095E5           LDR      R2,[R5, #+144]
   \   00000020   60009FE5           LDR      R0,??DrawSoftMenu_0+0x8  ;; t_bm2 + 4
   \   00000024   0410A0E1           MOV      R1,R4
   \   00000028   160000EF           SWI      +22
   2202            sprintf(t_bm3+4,lfrm,HISTORY.bookm3);
   \   0000002C   942095E5           LDR      R2,[R5, #+148]
   \   00000030   54009FE5           LDR      R0,??DrawSoftMenu_0+0xC  ;; t_bm3 + 4
   \   00000034   0410A0E1           MOV      R1,R4
   \   00000038   160000EF           SWI      +22
   2203            sprintf(t_bm4+4,lfrm,HISTORY.bookm4);
   \   0000003C   982095E5           LDR      R2,[R5, #+152]
   \   00000040   48009FE5           LDR      R0,??DrawSoftMenu_0+0x10  ;; t_bm4 + 4
   \   00000044   0410A0E1           MOV      R1,R4
   \   00000048   160000EF           SWI      +22
   2204            CreateMenu(0,0,&softmenu_STRUCT,&softmenu_HDR,0,3,0,0);
   \   0000004C   40309FE5           LDR      R3,??DrawSoftMenu_0+0x14  ;; softmenu_HDR
   \   00000050   40209FE5           LDR      R2,??DrawSoftMenu_0+0x18  ;; softmenu_STRUCT
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   0010A0E3           MOV      R1,#+0
   \   00000064   0300A0E3           MOV      R0,#+3
   \   00000068   01002DE9           PUSH     {R0}
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   01002DE9           PUSH     {R0}
   \   00000074   520100EF           SWI      +338
   2205          }
   \   00000078   10D08DE2           ADD      SP,SP,#+16
   \   0000007C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??DrawSoftMenu_0:
   \   00000080   ........           DC32     t_bm1 + 4
   \   00000084   ........           DC32     ??lfrm
   \   00000088   ........           DC32     t_bm2 + 4
   \   0000008C   ........           DC32     t_bm3 + 4
   \   00000090   ........           DC32     t_bm4 + 4
   \   00000094   ........           DC32     softmenu_HDR
   \   00000098   ........           DC32     softmenu_STRUCT

   \                                 In segment DATA_C, align 1, align-sorted
   \                     ??lfrm:
   \   00000000   257500             DC8 "%u"
   2206          
   2207          //======================================================================
   2208          
   2209          //«агрузка куска входного файла

   \                                 In segment CODE, align 4, keep-with-next
   2210          unsigned int FL_loader(int fin, unsigned int p)
   2211          {
   \                     FL_loader:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   2212            unsigned int i;
   2213            unsigned int ul;
   2214            if (p==0xFFFFFFFF)
   \   00000004   ........           LDR      R6,??DataTable324  ;; dstk
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0170A0E1           MOV      R7,R1
   \   00000014   0050A0E3           MOV      R5,#+0
   \   00000018   010077E3           CMN      R7,#+1
   \   0000001C   0900001A           BNE      ??FL_loader_0
   2215            {
   2216              //ѕерва€ загрузка
   2217              i=fread(fin,dstk,STKSZ,&ul);
   \   00000020   ........           LDR      R7,??DataTable316  ;; STKSZ
   \   00000024   001096E5           LDR      R1,[R6, #+0]
   \   00000028   002097E5           LDR      R2,[R7, #+0]
   \   0000002C   0D30A0E1           MOV      R3,SP
   \   00000030   0B0000EF           SWI      +11
   2218              if (i<STKSZ)
   \   00000034   001097E5           LDR      R1,[R7, #+0]
   2219              {
   2220                //«агрузили меньше размера стека
   2221                dstk[i]=0; //ћаркер конца файла
   2222              }
   2223              p=0;
   \   00000038   0070A0E3           MOV      R7,#+0
   \   0000003C   010050E1           CMP      R0,R1
   \   00000040   00109635           LDRCC    R1,[R6, #+0]
   \   00000044   0150C037           STRBCC   R5,[R0, +R1]
   2224            }
   2225            if (p>=STKSZ50) //≈сли указатель перешел за границу половины буфера
   \                     ??FL_loader_0:
   \   00000048   ........           LDR      R8,??DataTable285  ;; STKSZ50
   \   0000004C   001098E5           LDR      R1,[R8, #+0]
   \   00000050   010057E1           CMP      R7,R1
   \   00000054   1000003A           BCC      ??FL_loader_1
   2226            {
   2227              memcpy(dstk,dstk+STKSZ50,STKSZ50); // опируем конец буфера в начало
   \   00000058   000096E5           LDR      R0,[R6, #+0]
   \   0000005C   0120A0E1           MOV      R2,R1
   \   00000060   001081E0           ADD      R1,R1,R0
   \   00000064   1E0100EF           SWI      +286
   2228              p-=STKSZ50; //Ќовый указатель
   \   00000068   000098E5           LDR      R0,[R8, #+0]
   2229              i=fread(fin,dstk+STKSZ50,STKSZ50,&ul); //—ледующие пол-буфера
   \   0000006C   001096E5           LDR      R1,[R6, #+0]
   \   00000070   007047E0           SUB      R7,R7,R0
   \   00000074   0D30A0E1           MOV      R3,SP
   \   00000078   0020A0E1           MOV      R2,R0
   \   0000007C   011080E0           ADD      R1,R0,R1
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   0B0000EF           SWI      +11
   2230              if (i<STKSZ50) dstk[i+STKSZ50]=0; //ћеньше половины - маркер конца файла
   \   00000088   001098E5           LDR      R1,[R8, #+0]
   \   0000008C   010050E1           CMP      R0,R1
   \   00000090   00008130           ADDCC    R0,R1,R0
   \   00000094   00109635           LDRCC    R1,[R6, #+0]
   \   00000098   0150C037           STRBCC   R5,[R0, +R1]
   2231            }
   2232            return(p);
   \                     ??FL_loader_1:
   \   0000009C   0700A0E1           MOV      R0,R7
   \   000000A0   04D08DE2           ADD      SP,SP,#+4
   \   000000A4   F081BDE8           POP      {R4-R8,PC}       ;; return
   2233          }
   2234          
   2235          //«апись верхнего стека при начальной загрузке

   \                                 In segment CODE, align 4, keep-with-next
   2236          unsigned int FL_saver(int fs, unsigned int p)
   2237          {
   \                     FL_saver:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   2238            unsigned int b;
   2239            unsigned int ul;
   2240            unsigned int seekpos;
   2241            if (p>=STKSZ50)
   \   00000004   ........           LDR      R5,??DataTable285  ;; STKSZ50
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   007095E5           LDR      R7,[R5, #+0]
   \   00000010   0060A0E1           MOV      R6,R0
   \   00000014   0140A0E1           MOV      R4,R1
   \   00000018   070054E1           CMP      R4,R7
   \   0000001C   2900003A           BCC      ??FL_saver_0
   2242            {
   2243              b=FindFreeBlock();
   \   00000020   ........           BL       FindFreeBlock
   2244              ubat[++u_disk]=b;
   \   00000024   ........           LDR      R1,??DataTable293  ;; u_disk
   2245              seekpos=STKSZ50*b;
   \   00000028   900707E0           MUL      R7,R0,R7
   \   0000002C   002091E5           LDR      R2,[R1, #+0]
   \   00000030   012082E2           ADD      R2,R2,#+1
   \   00000034   002081E5           STR      R2,[R1, #+0]
   \   00000038   ........           LDR      R1,??DataTable295  ;; ubat
   \   0000003C   020181E7           STR      R0,[R1, +R2, LSL #+2]
   2246              if (lseek(fs,seekpos,0,&ul,&ul)!=seekpos) DiskErrorMsg(2);
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   04308DE2           ADD      R3,SP,#+4
   \   0000004C   0020A0E3           MOV      R2,#+0
   \   00000050   0710A0E1           MOV      R1,R7
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   0F0000EF           SWI      +15
   \   0000005C   070050E1           CMP      R0,R7
   \   00000060   04D08DE2           ADD      SP,SP,#+4
   \   00000064   0100000A           BEQ      ??FL_saver_1
   \   00000068   0200A0E3           MOV      R0,#+2
   \   0000006C   ........           BL       DiskErrorMsg
   2247              if (fwrite(fs,ustk,STKSZ50,&ul)!=STKSZ50) DiskErrorMsg(1);
   \                     ??FL_saver_1:
   \   00000070   ........           LDR      R7,??DataTable323  ;; ustk
   \   00000074   002095E5           LDR      R2,[R5, #+0]
   \   00000078   001097E5           LDR      R1,[R7, #+0]
   \   0000007C   0D30A0E1           MOV      R3,SP
   \   00000080   0600A0E1           MOV      R0,R6
   \   00000084   0C0000EF           SWI      +12
   \   00000088   001095E5           LDR      R1,[R5, #+0]
   \   0000008C   010050E1           CMP      R0,R1
   \   00000090   0100000A           BEQ      ??FL_saver_2
   \   00000094   0100A0E3           MOV      R0,#+1
   \   00000098   ........           BL       DiskErrorMsg
   2248              p-=STKSZ50;
   \                     ??FL_saver_2:
   \   0000009C   001095E5           LDR      R1,[R5, #+0]
   2249              memcpy(ustk,ustk+STKSZ50,p);
   \   000000A0   000097E5           LDR      R0,[R7, #+0]
   \   000000A4   014044E0           SUB      R4,R4,R1
   \   000000A8   0420A0E1           MOV      R2,R4
   \   000000AC   001081E0           ADD      R1,R1,R0
   \   000000B0   1E0100EF           SWI      +286
   2250              if (!terminated) REDRAW();
   \   000000B4   ........           LDR      R0,??DataTable289  ;; terminated
   \   000000B8   000090E5           LDR      R0,[R0, #+0]
   \   000000BC   000050E3           CMP      R0,#+0
   \   000000C0   0000001A           BNE      ??FL_saver_0
   \   000000C4   720100EF           SWI      +370
   2251            }
   2252            return(p);
   \                     ??FL_saver_0:
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   04D08DE2           ADD      SP,SP,#+4
   \   000000D0   F080BDE8           POP      {R4-R7,PC}       ;; return
   2253          }
   2254          
   2255          //==================================================================
   2256          // ѕерва€ загрузка файла
   2257          // TODO:
   2258          //==================================================================

   \                                 In segment CODE, align 4, keep-with-next
   2259          void FirstLoadFile(unsigned int fmt)
   2260          {
   \                     FirstLoadFile:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   ........           LDR      R7,??DataTable290  ;; win_dos_koi
   \   00000008   ........           LDR      R8,??DataTable291  ;; font_size
   \   0000000C   ........           LDR      R5,??DataTable292  ;; HISTORY
   \   00000010   0090A0E1           MOV      R9,R0
   2261            int fin;
   2262            int fs;
   2263            unsigned int ul;
   2264          
   2265            u_disk=-1; //ƒисковый указатель верхнего стека
   \   00000014   ........           LDR      R0,??DataTable293  ;; u_disk
   \   00000018   04D04DE2           SUB      SP,SP,#+4
   \   0000001C   0060E0E3           MVN      R6,#+0
   \   00000020   006080E5           STR      R6,[R0, #+0]
   2266            d_disk=-1; //ƒисковый указатель нижнего стека
   \   00000024   ........           LDR      R0,??DataTable294  ;; d_disk
   2267            zeromem(ubat,sizeof(ubat)); //ѕрочищаем таблицу блоков верхнего стека
   \   00000028   401DA0E3           MOV      R1,#+4096
   \   0000002C   006080E5           STR      R6,[R0, #+0]
   \   00000030   ........           LDR      R0,??DataTable295  ;; ubat
   \   00000034   0040A0E3           MOV      R4,#+0
   \   00000038   1D0100EF           SWI      +285
   2268            zeromem(dbat,sizeof(dbat)); //ѕрочищаем таблицу блоков нижнего стека
   \   0000003C   ........           LDR      R0,??DataTable296  ;; dbat
   \   00000040   401DA0E3           MOV      R1,#+4096
   \   00000044   1D0100EF           SWI      +285
   2269            zeromem(bfree,sizeof(bfree)); //ѕрочищаем таблицу зан€тых блоков
   \   00000048   ........           LDR      R0,??DataTable297  ;; bfree
   \   0000004C   401EA0E3           MOV      R1,#+1024
   \   00000050   1D0100EF           SWI      +285
   2270            usp=0; //”казатель на верхний стек
   \   00000054   ........           LDR      R0,??DataTable309  ;; usp
   2271            dsp=STKSZ; //”казатель на нижний стек
   \   00000058   ........           LDR      R1,??DataTable316  ;; STKSZ
   \   0000005C   004080E5           STR      R4,[R0, #+0]
   \   00000060   ........           LDR      R0,??DataTable300  ;; dsp
   \   00000064   001091E5           LDR      R1,[R1, #+0]
   2272            viewpos=0;
   2273            curpos=0;
   2274            curline=0;
   2275            //CSM=0;
   2276          
   2277            draw_mode=255;
   \   00000068   FFA0A0E3           MOV      R10,#+255
   \   0000006C   001080E5           STR      R1,[R0, #+0]
   \   00000070   ........           LDR      R0,??DataTable301  ;; viewpos
   \   00000074   060059E1           CMP      R9,R6
   \   00000078   004080E5           STR      R4,[R0, #+0]
   \   0000007C   ........           LDR      R0,??DataTable302  ;; curpos
   \   00000080   004080E5           STR      R4,[R0, #+0]
   \   00000084   ........           LDR      R0,??DataTable311  ;; curline
   \   00000088   004080E5           STR      R4,[R0, #+0]
   \   0000008C   ........           LDR      R0,??DataTable315  ;; draw_mode
   \   00000090   00A080E5           STR      R10,[R0, #+0]
   \   00000094   0A00001A           BNE      ??FirstLoadFile_0
   2278          
   2279            if (fmt==0xFFFFFFFF)
   2280            {
   2281              //»щем историю
   2282              if (SearchHistory()&0x8000)
   \   00000098   ........           LDR      R11,??DataTable305  ;; cursor_off
   \   0000009C   ........           BL       SearchHistory
   \   000000A0   800C10E3           TST      R0,#0x8000
   \   000000A4   2F00000A           BEQ      ??FirstLoadFile_1
   2283              {
   2284                font_size=HISTORY.font;
   \   000000A8   8000D5E5           LDRB     R0,[R5, #+128]
   \   000000AC   000088E5           STR      R0,[R8, #+0]
   2285                fmt=HISTORY.fmt;
   2286                win_dos_koi=HISTORY.codepage;
   \   000000B0   8200D5E5           LDRB     R0,[R5, #+130]
   \   000000B4   8190D5E5           LDRB     R9,[R5, #+129]
   \   000000B8   000087E5           STR      R0,[R7, #+0]
   2287                cursor_off=HISTORY.cursor_off;
   \   000000BC   8300D5E5           LDRB     R0,[R5, #+131]
   \   000000C0   00008BE5           STR      R0,[R11, #+0]
   2288              }
   2289              else
   2290              {
   2291                win_dos_koi=0xFF; //Ќеизвестный
   2292                font_size=6; //ћинимальный шрифт
   2293                zeromem(&HISTORY.line,4*6); //¬се на самом верху
   2294                HISTORY.cursor_off=cursor_off=1; //¬ыключить курсор
   2295                HISTORY.total=1;
   2296                HISTORY.fmt=0;
   2297                HISTORY.fmt=255; //ѕервый запуск!!!!
   2298                LockSched();
   2299                loadmenu_id=DrawLoadMenu(); //ќпредел€ем, как грузить через меню
   2300                UnlockSched();
   2301                return;
   2302              }
   2303            }
   2304            if ((fmt&0x7F)>2) fmt=0;
   \                     ??FirstLoadFile_0:
   \   000000C4   7F0009E2           AND      R0,R9,#0x7F
   \   000000C8   030050E3           CMP      R0,#+3
   2305            switch(font_size)
   \   000000CC   000098E5           LDR      R0,[R8, #+0]
   \   000000D0   0090A023           MOVCS    R9,#+0
   \   000000D4   040050E2           SUBS     R0,R0,#+4
   \   000000D8   02005012           SUBSNE   R0,R0,#+2
   \   000000DC   02005012           SUBSNE   R0,R0,#+2
   \   000000E0   06005012           SUBSNE   R0,R0,#+6
   \   000000E4   02005012           SUBSNE   R0,R0,#+2
   2306            {
   2307            case 4:
   2308            case 6:
   2309            case 8:
   2310            case 14:
   2311            case 16:
   2312              break;
   2313            default:
   2314              font_size=6;
   \   000000E8   0600A013           MOVNE    R0,#+6
   \   000000EC   00008815           STRNE    R0,[R8, #+0]
   2315              break;
   2316            }
   2317            //«агружаем шрифт
   2318            loadfont(0);
   \   000000F0   0000A0E3           MOV      R0,#+0
   \   000000F4   ........           BL       loadfont
   2319          
   2320            // онвертируем все строки в верхний стек
   2321            fs=fopen(stkfile,A_Create+A_ReadWrite+A_BIN,P_READ+P_WRITE,&ul); //‘айл верхнего стека
   \   000000F8   ........           LDR      R0,??DataTable336  ;; stkfile
   \   000000FC   0D30A0E1           MOV      R3,SP
   \   00000100   602FA0E3           MOV      R2,#+384
   \   00000104   0210A0E3           MOV      R1,#+2
   \   00000108   811C81E3           ORR      R1,R1,#0x8100
   \   0000010C   0A0000EF           SWI      +10
   \   00000110   00A0A0E1           MOV      R10,R0
   2322            if (fs==-1) DiskErrorMsg(3);
   \   00000114   06005AE1           CMP      R10,R6
   \   00000118   0100001A           BNE      ??FirstLoadFile_2
   \   0000011C   0300A0E3           MOV      R0,#+3
   \   00000120   ........           BL       DiskErrorMsg
   \                     ??FirstLoadFile_2:
   \   00000124   ........           LDR      R0,??DataTable313  ;; filename
   \   00000128   0D30A0E1           MOV      R3,SP
   \   0000012C   0020A0E3           MOV      R2,#+0
   \   00000130   801CA0E3           MOV      R1,#+32768
   2323            if ((fin=fopen(filename,A_ReadOnly+A_BIN,0,&ul))!=-1)
   \   00000134   0A0000EF           SWI      +10
   \   00000138   00B0A0E1           MOV      R11,R0
   \   0000013C   06005BE1           CMP      R11,R6
   \   00000140   2500000A           BEQ      ??FirstLoadFile_3
   2324            {
   2325              switch(fmt&0x7F)
   \   00000144   7F0009E2           AND      R0,R9,#0x7F
   \   00000148   010040E2           SUB      R0,R0,#+1
   \   0000014C   010050E3           CMP      R0,#+1
   \   00000150   1600008A           BHI      ??FirstLoadFile_4
   2326              {
   2327              case 1:
   2328              case 2:
   2329                usp=ConvertFormat(fin,fs,fmt&0x7F);
   \   00000154   7F2009E2           AND      R2,R9,#0x7F
   \   00000158   0A10A0E1           MOV      R1,R10
   \   0000015C   0B00A0E1           MOV      R0,R11
   \   00000160   ........           _BLF     ConvertFormat,??ConvertFormat??rA
   \   00000164   170000EA           B        ??FirstLoadFile_5
   \                     ??FirstLoadFile_1:
   \   00000168   00A087E5           STR      R10,[R7, #+0]
   \   0000016C   0600A0E3           MOV      R0,#+6
   \   00000170   000088E5           STR      R0,[R8, #+0]
   \   00000174   1810A0E3           MOV      R1,#+24
   \   00000178   840085E2           ADD      R0,R5,#+132
   \   0000017C   1D0100EF           SWI      +285
   \   00000180   0100A0E3           MOV      R0,#+1
   \   00000184   00008BE5           STR      R0,[R11, #+0]
   \   00000188   8300C5E5           STRB     R0,[R5, #+131]
   \   0000018C   880085E5           STR      R0,[R5, #+136]
   \   00000190   81A0C5E5           STRB     R10,[R5, #+129]
   \   00000194   460100EF           SWI      +326
   \   00000198   ........           BL       DrawLoadMenu
   \   0000019C   ........           LDR      R1,??DataTable329  ;; loadmenu_id
   \   000001A0   000081E5           STR      R0,[R1, #+0]
   \   000001A4   470100EF           SWI      +327
   \   000001A8   04D08DE2           ADD      SP,SP,#+4
   \   000001AC   F08FBDE8           POP      {R4-R11,PC}
   2330                break;
   2331              case 0:
   2332              default:
   2333                if (win_dos_koi==0xFF) win_dos_koi=0;
   \                     ??FirstLoadFile_4:
   \   000001B0   000097E5           LDR      R0,[R7, #+0]
   2334                usp=ConvertSimple(fin,fs);
   \   000001B4   0A10A0E1           MOV      R1,R10
   \   000001B8   FF0050E3           CMP      R0,#+255
   \   000001BC   00408705           STREQ    R4,[R7, #+0]
   \   000001C0   0B00A0E1           MOV      R0,R11
   \   000001C4   ........           _BLF     ConvertSimple,??ConvertSimple??rA
   \                     ??FirstLoadFile_5:
   \   000001C8   ........           LDR      R1,??DataTable309  ;; usp
   \   000001CC   000081E5           STR      R0,[R1, #+0]
   2335                break;
   2336              }
   2337              fclose(fin,&ul);
   \   000001D0   0D10A0E1           MOV      R1,SP
   \   000001D4   0B00A0E1           MOV      R0,R11
   \   000001D8   0D0000EF           SWI      +13
   2338            }
   2339            fclose(fs,&ul);
   \                     ??FirstLoadFile_3:
   \   000001DC   0D10A0E1           MOV      R1,SP
   \   000001E0   ........           LDR      R6,??DataTable310  ;; total_line
   \   000001E4   0A00A0E1           MOV      R0,R10
   \   000001E8   0D0000EF           SWI      +13
   2340            total_line=viewline=curline; //Ќаходимс€ в последней строке
   \   000001EC   ........           LDR      R0,??DataTable311  ;; curline
   \   000001F0   ........           LDR      R1,??DataTable312  ;; viewline
   \   000001F4   000090E5           LDR      R0,[R0, #+0]
   \   000001F8   000081E5           STR      R0,[R1, #+0]
   2341            HISTORY.font=font_size;
   2342            HISTORY.fmt=fmt;
   2343            memcpy(HISTORY.name,filename,sizeof(HISTORY.name));
   \   000001FC   ........           LDR      R1,??DataTable313  ;; filename
   \   00000200   000086E5           STR      R0,[R6, #+0]
   \   00000204   000098E5           LDR      R0,[R8, #+0]
   \   00000208   8190C5E5           STRB     R9,[R5, #+129]
   \   0000020C   8000C5E5           STRB     R0,[R5, #+128]
   \   00000210   8020A0E3           MOV      R2,#+128
   \   00000214   0500A0E1           MOV      R0,R5
   \   00000218   1E0100EF           SWI      +286
   2344            //–асчитываем, куда перейти
   2345            if (HISTORY.total==total_line)
   \   0000021C   881095E5           LDR      R1,[R5, #+136]
   \   00000220   000096E5           LDR      R0,[R6, #+0]
   \   00000224   000051E1           CMP      R1,R0
   2346            {
   2347              seek_to_line=HISTORY.line; //ѕр€мой переход
   \   00000228   84109505           LDREQ    R1,[R5, #+132]
   \   0000022C   0400000A           BEQ      ??FirstLoadFile_6
   2348            }
   2349            else
   2350            {
   2351              if (HISTORY.total)
   \   00000230   000051E3           CMP      R1,#+0
   2352                seek_to_line=(total_line*HISTORY.line)/HISTORY.total; //ѕо отношению
   \   00000234   84209515           LDRNE    R2,[R5, #+132]
   \   00000238   92000010           MULNE    R0,R2,R0
   \   0000023C   ........           _BLFNE   ??divu32_a,??rA??divu32_a
   2353              else
   2354                seek_to_line=0;
   2355              HISTORY.line=seek_to_line;
   \   00000240   841085E5           STR      R1,[R5, #+132]
   \                     ??FirstLoadFile_6:
   \   00000244   ........           LDR      R0,??DataTable314  ;; seek_to_line
   \   00000248   001080E5           STR      R1,[R0, #+0]
   2356            }
   2357            draw_mode=2; //ѕереходим на нужную строку
   \   0000024C   ........           LDR      R0,??DataTable315  ;; draw_mode
   \   00000250   0210A0E3           MOV      R1,#+2
   \   00000254   001080E5           STR      R1,[R0, #+0]
   2358            GotoLine();
   \   00000258   ........           BL       GotoLine
   2359          }
   \   0000025C   04D08DE2           ADD      SP,SP,#+4
   \   00000260   F08FBDE8           POP      {R4-R11,PC}      ;; return
   2360          
   2361          //=========================================================================

   \                                 In segment DATA_C, align 4, align-sorted
   2362          const void * const gui_methods[11]={
   \                     gui_methods:
   \   00000000   ............       DC32 method0, method1, method2, method3, method4, method5, 0H, method7
   \              ............
   \              ............
   \              ............
   \              00000000....
   \              ....        
   \   00000020   ............       DC32 method8, method9, 0H
   \              ....00000000
   2363            (void *)method0,	//Redraw
   2364            (void *)method1,	//Create
   2365            (void *)method2,	//Close
   2366            (void *)method3,	//Focus
   2367            (void *)method4,	//Unfocus
   2368            (void *)method5,	//OnKey
   2369            0,
   2370            (void *)method7,	//Destroy
   2371            (void *)method8,
   2372            (void *)method9,
   2373            0
   2374          };
   2375          

   \                                 In segment DATA_C, align 4, align-sorted
   2376          const RECT Canvas={0,0,131,175};
   \                     Canvas:
   \   00000000   000000008300       DC16 0, 0, 131, 175
   \              AF00        
   2377          

   \                                 In segment CODE, align 4, keep-with-next
   2378          void maincsm_oncreate(CSM_RAM *data)
   2379          {
   \                     maincsm_oncreate:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   ........           LDR      R6,??DataTable316  ;; STKSZ
   \   00000008   0040A0E1           MOV      R4,R0
   2380            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   0000000C   3400A0E3           MOV      R0,#+52
   \   00000010   140000EF           SWI      +20
   \   00000014   0050A0E1           MOV      R5,R0
   2381            MAIN_CSM*csm=(MAIN_CSM*)data;
   2382            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000018   3410A0E3           MOV      R1,#+52
   \   0000001C   1D0100EF           SWI      +285
   2383          
   2384            ustk=malloc(STKSZ);
   \   00000020   000096E5           LDR      R0,[R6, #+0]
   \   00000024   140000EF           SWI      +20
   \   00000028   ........           LDR      R1,??DataTable323  ;; ustk
   \   0000002C   000081E5           STR      R0,[R1, #+0]
   2385            dstk=malloc(STKSZ);
   \   00000030   000096E5           LDR      R0,[R6, #+0]
   \   00000034   140000EF           SWI      +20
   \   00000038   ........           LDR      R1,??DataTable324  ;; dstk
   \   0000003C   000081E5           STR      R0,[R1, #+0]
   2386            info_ws=AllocWS(512);
   \   00000040   800FA0E3           MOV      R0,#+512
   \   00000044   250100EF           SWI      +293
   \   00000048   ........           LDR      R1,??DataTable325  ;; info_ws
   \   0000004C   000081E5           STR      R0,[R1, #+0]
   2387            upinfo_ws=AllocWS(256);
   \   00000050   400FA0E3           MOV      R0,#+256
   \   00000054   250100EF           SWI      +293
   \   00000058   ........           LDR      R1,??DataTable326  ;; upinfo_ws
   \   0000005C   000081E5           STR      R0,[R1, #+0]
   2388            e_ws=AllocWS(256);
   \   00000060   400FA0E3           MOV      R0,#+256
   \   00000064   250100EF           SWI      +293
   \   00000068   ........           LDR      R1,??DataTable327  ;; e_ws
   \   0000006C   000081E5           STR      R0,[R1, #+0]
   2389          
   2390            main_gui->gui.canvas=(void *)(&Canvas);
   \   00000070   34009FE5           LDR      R0,??maincsm_oncreate_0  ;; Canvas
   \   00000074   000085E5           STR      R0,[R5, #+0]
   2391            main_gui->gui.flag30=2;
   \   00000078   0200A0E3           MOV      R0,#+2
   \   0000007C   300085E5           STR      R0,[R5, #+48]
   2392            main_gui->gui.methods=(void *)gui_methods;
   \   00000080   28009FE5           LDR      R0,??maincsm_oncreate_0+0x4  ;; gui_methods
   \   00000084   040085E5           STR      R0,[R5, #+4]
   2393            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000088   158000EF           SWI      +32789
   \   0000008C   200085E5           STR      R0,[R5, #+32]
   2394            csm->csm.state=0;
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   100084E5           STR      R0,[R4, #+16]
   2395            csm->csm.unk1=0;
   \   00000098   140084E5           STR      R0,[R4, #+20]
   2396            csm->gui_id=CreateGUI(main_gui);
   \   0000009C   0500A0E1           MOV      R0,R5
   \   000000A0   370100EF           SWI      +311
   \   000000A4   280084E5           STR      R0,[R4, #+40]
   \   000000A8   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   000000AC   ........           DC32     Canvas
   \   000000B0   ........           DC32     gui_methods
   2397          }
   2398          

   \                                 In segment CODE, align 4, keep-with-next
   2399          void Killer(void)
   2400          {
   2401            extern void *ELF_BEGIN;
   2402            static unsigned int ul;
   2403            if (HISTORY.fmt!=255)
   \                     Killer:
   \   00000000   ........           LDR      R0,??DataTable322  ;; HISTORY + 129
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000000C   FF0050E3           CMP      R0,#+255
   \   00000010   0000000A           BEQ      ??Killer_0
   2404            {
   2405              SaveHistory();
   \   00000014   ........           BL       SaveHistory
   2406            }
   2407            mfree(ustk);
   \                     ??Killer_0:
   \   00000018   ........           LDR      R0,??DataTable323  ;; ustk
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   150000EF           SWI      +21
   2408            mfree(dstk);
   \   00000024   ........           LDR      R0,??DataTable324  ;; dstk
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   150000EF           SWI      +21
   2409            FreeWS(info_ws);
   \   00000030   ........           LDR      R0,??DataTable325  ;; info_ws
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   290100EF           SWI      +297
   2410            FreeWS(upinfo_ws);
   \   0000003C   ........           LDR      R0,??DataTable326  ;; upinfo_ws
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   290100EF           SWI      +297
   2411            FreeWS(e_ws);
   \   00000048   ........           LDR      R0,??DataTable327  ;; e_ws
   \   0000004C   000090E5           LDR      R0,[R0, #+0]
   \   00000050   290100EF           SWI      +297
   2412            unlink(stkfile,&ul);
   \   00000054   ........           LDR      R0,??DataTable336  ;; stkfile
   \   00000058   14109FE5           LDR      R1,??Killer_1    ;; ??ul
   \   0000005C   6B0100EF           SWI      +363
   2413            ((void (*)(void *))(mfree_adr()))(&ELF_BEGIN);
   \   00000060   158000EF           SWI      +32789
   \   00000064   0010A0E1           MOV      R1,R0
   \   00000068   08009FE5           LDR      R0,??Killer_1+0x4  ;; ELF_BEGIN
   \   0000006C   0040BDE8           POP      {LR}             ;; Pop
   \   00000070   01F0A0E1           MOV      PC,R1            ;; tailcall
   \                     ??Killer_1:
   \   00000074   ........           DC32     ??ul
   \   00000078   ........           DC32     ELF_BEGIN
   2414          }

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??ul:
   \   00000000                      DS8 4
   2415          

   \                                 In segment CODE, align 4, keep-with-next
   2416          void maincsm_onclose(CSM_RAM *csm)
   2417          {
   2418          //  GBS_StopTimer(&light_tmr);
   2419            SUBPROC((void *)Killer);
   \                     maincsm_onclose:
   \   00000000   08009FE5           LDR      R0,??maincsm_onclose_0  ;; Killer
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   710100EF           SWI      +369
   \   0000000C   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000010   ........           DC32     Killer
   2420          }
   2421          

   \                                 In segment CODE, align 4, keep-with-next
   2422          int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
   2423          {
   \                     maincsm_onmessage:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   2424            MAIN_CSM *csm=(MAIN_CSM*)data;
   2425            if (msg->msg==MSG_GUI_DESTROYED)
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0E10A0E3           MOV      R1,#+14
   \   00000014   641C81E3           ORR      R1,R1,#0x6400
   \   00000018   010050E1           CMP      R0,R1
   \   0000001C   3500001A           BNE      ??maincsm_onmessage_0
   2426            {
   2427              if ((int)msg->data0==loadmenu_id)
   \   00000020   ........           LDR      R1,??DataTable329  ;; loadmenu_id
   \   00000024   0C0095E5           LDR      R0,[R5, #+12]
   \   00000028   001091E5           LDR      R1,[R1, #+0]
   \   0000002C   010050E1           CMP      R0,R1
   \   00000030   0100001A           BNE      ??maincsm_onmessage_1
   2428              {
   2429                GeneralFuncF1(1);
   \   00000034   0100A0E3           MOV      R0,#+1
   \   00000038   3B0100EF           SWI      +315
   2430              }
   2431              if ((int)msg->data0==csm->gui_id)
   \                     ??maincsm_onmessage_1:
   \   0000003C   0C0095E5           LDR      R0,[R5, #+12]
   \   00000040   281094E5           LDR      R1,[R4, #+40]
   \   00000044   010050E1           CMP      R0,R1
   2432              {
   2433                csm->csm.state=-3;
   2434              }
   2435              if ((int)msg->data0==edit_id)
   \   00000048   ........           LDR      R1,??DataTable330  ;; edit_id
   \   0000004C   0200E003           MVNEQ    R0,#+2
   \   00000050   10008405           STREQ    R0,[R4, #+16]
   \   00000054   0C0095E5           LDR      R0,[R5, #+12]
   \   00000058   001091E5           LDR      R1,[R1, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   2400001A           BNE      ??maincsm_onmessage_0
   2436              {
   2437                //«акрыт диалог редактировани€, провер€ем
   2438                //¬ышли из редактора стрелками вверх/вниз, выполн€ем	переход
   2439                switch(editmode)
   \   00000064   ........           LDR      R0,??DataTable331  ;; max_y_emode
   \   00000068   ........           LDR      R1,??DataTable332  ;; editmode
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   002091E5           LDR      R2,[R1, #+0]
   \   00000074   0D0052E3           CMP      R2,#+13
   \   00000078   0A00000A           BEQ      ??maincsm_onmessage_2
   \   0000007C   0E0052E3           CMP      R2,#+14
   \   00000080   1500000A           BEQ      ??maincsm_onmessage_3
   \   00000084   3B0052E3           CMP      R2,#+59
   \   00000088   1100000A           BEQ      ??maincsm_onmessage_4
   \   0000008C   3C0052E3           CMP      R2,#+60
   \   00000090   1300000A           BEQ      ??maincsm_onmessage_5
   \   00000094   FF30A0E3           MOV      R3,#+255
   \   00000098   F03E83E3           ORR      R3,R3,#0xF00
   \   0000009C   030052E1           CMP      R2,R3
   \   000000A0   0100000A           BEQ      ??maincsm_onmessage_6
   \   000000A4   100000EA           B        ??maincsm_onmessage_7
   2440                {
   2441                case VOL_UP_BUTTON:
   2442          	PageUp(max_y_emode);
   \                     ??maincsm_onmessage_2:
   \   000000A8   ........           BL       PageUp
   2443          	break;
   2444                case UP_BUTTON:
   2445          	LineUp();
   2446          	break;
   2447                case VOL_DOWN_BUTTON:
   2448          	PageDw(max_y_emode);
   2449          	break;
   2450                case DOWN_BUTTON:
   2451          	LineDw();
   2452          	break;
   2453                case 0xFFF: //ѕросто меню
   2454          	break;
   2455                default:
   2456          	editmode=0; //¬ыключаем редактор
   2457          	REDRAW();
   2458          	return(1);
   2459                }
   2460                CheckDiskAccess();
   \                     ??maincsm_onmessage_6:
   \   000000AC   ........           BL       CheckDiskAccess
   2461                if (disk_access)
   \   000000B0   ........           LDR      R0,??DataTable333  ;; disk_access
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   0100000A           BEQ      ??maincsm_onmessage_8
   2462                {
   2463          	DoDiskAccess(1); //“ут кривость, прин€то через SUBPROC
   \   000000C0   0100A0E3           MOV      R0,#+1
   \   000000C4   ........           BL       DoDiskAccess
   2464                }
   2465                CreateEditDialog();
   \                     ??maincsm_onmessage_8:
   \   000000C8   ........           BL       CreateEditDialog
   2466              }
   2467            }
   2468            return(1);
   \   000000CC   0100A0E3           MOV      R0,#+1
   \   000000D0   3080BDE8           POP      {R4,R5,PC}
   \                     ??maincsm_onmessage_4:
   \   000000D4   ........           BL       LineUp
   \   000000D8   F3FFFFEA           B        ??maincsm_onmessage_6
   \                     ??maincsm_onmessage_3:
   \   000000DC   ........           BL       PageDw
   \   000000E0   F1FFFFEA           B        ??maincsm_onmessage_6
   \                     ??maincsm_onmessage_5:
   \   000000E4   ........           BL       LineDw
   \   000000E8   EFFFFFEA           B        ??maincsm_onmessage_6
   \                     ??maincsm_onmessage_7:
   \   000000EC   0000A0E3           MOV      R0,#+0
   \   000000F0   000081E5           STR      R0,[R1, #+0]
   \   000000F4   720100EF           SWI      +370
   \                     ??maincsm_onmessage_0:
   \   000000F8   0100A0E3           MOV      R0,#+1
   \   000000FC   3080BDE8           POP      {R4,R5,PC}
   2469          }
   2470          

   \                                 In segment DATA_Z, align 4, align-sorted
   2471          unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280
   2472          
   2473          const struct
   2474          {
   2475            CSM_DESC maincsm;
   2476            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   2477          }MAINCSM =
   \                     MAINCSM:
   \   00000000   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   0000001C   2C0000000100       DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0, 139
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              000000008B00
   \              0000        
   2478          {
   2479            {
   2480            maincsm_onmessage,
   2481            maincsm_oncreate,
   2482            0,
   2483            0,
   2484            0,
   2485            0,
   2486            maincsm_onclose,
   2487            sizeof(MAIN_CSM),
   2488            1,
   2489            &minus11
   2490            },
   2491            {
   2492              maincsm_name_body,
   2493              NAMECSM_MAGIC1,
   2494              NAMECSM_MAGIC2,
   2495              0x0,
   2496              139
   2497            }
   2498          };
   2499          

   \                                 In segment CODE, align 4, keep-with-next
   2500          void UpdateCSMname(void)
   2501          {
   \                     UpdateCSMname:
   \   00000000   10402DE9           PUSH     {R4,LR}
   2502            WSHDR *ws=AllocWS(256);
   \   00000004   400FA0E3           MOV      R0,#+256
   \   00000008   250100EF           SWI      +293
   2503            str_2ws(ws,filename,126);
   \   0000000C   ........           LDR      R1,??DataTable337  ;; filename
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   7E20A0E3           MOV      R2,#+126
   \   00000018   6C0100EF           SWI      +364
   2504            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"TED: %w",ws);
   \   0000001C   14109FE5           LDR      R1,??UpdateCSMname_0  ;; `?<Constant "TED: %w">`
   \   00000020   14009FE5           LDR      R0,??UpdateCSMname_0+0x4  ;; MAINCSM + 40
   \   00000024   0420A0E1           MOV      R2,R4
   \   00000028   240100EF           SWI      +292
   2505            FreeWS(ws);
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   290100EF           SWI      +297
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??UpdateCSMname_0:
   \   00000038   ........           DC32     `?<Constant "TED: %w">`
   \   0000003C   ........           DC32     MAINCSM + 40
   2506          }
   2507          

   \                                 In segment CODE, align 4, keep-with-next
   2508          int main(char *exename, char *fname)
   2509          {
   \                     main:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   3CD04DE2           SUB      SP,SP,#+60
   2510            char dummy[sizeof(MAIN_CSM)];
   2511            TDate d;
   2512            TTime t;
   2513            GetDateTime(&d,&t);
   \   00000008   0D00A0E1           MOV      R0,SP
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   08108DE2           ADD      R1,SP,#+8
   \   00000014   B40000EF           SWI      +180
   2514            snprintf(stkfile,sizeof(stkfile),"%s%d_%d_%d_%d_%d_%d.tmp",ted_path,d.year,d.month,d.day,t.hour,t.min,t.param);
   \   00000018   0A00DDE5           LDRB     R0,[SP, #+10]
   \   0000001C   ........           LDR      R3,??DataTable335  ;; ted_path
   \   00000020   7C209FE5           LDR      R2,??main_0      ;; `?<Constant "%s%d_%d_%d_%d_%d_%d.tmp">`
   \   00000024   01002DE9           PUSH     {R0}
   \   00000028   0D00DDE5           LDRB     R0,[SP, #+13]
   \   0000002C   8010A0E3           MOV      R1,#+128
   \   00000030   01002DE9           PUSH     {R0}
   \   00000034   1000DDE5           LDRB     R0,[SP, #+16]
   \   00000038   01002DE9           PUSH     {R0}
   \   0000003C   1100DDE5           LDRB     R0,[SP, #+17]
   \   00000040   01002DE9           PUSH     {R0}
   \   00000044   1400DDE5           LDRB     R0,[SP, #+20]
   \   00000048   01002DE9           PUSH     {R0}
   \   0000004C   14009DE5           LDR      R0,[SP, #+20]
   \   00000050   01002DE9           PUSH     {R0}
   \   00000054   ........           LDR      R0,??DataTable336  ;; stkfile
   \   00000058   1B0100EF           SWI      +283
   2515            if (fname)
   \   0000005C   000054E3           CMP      R4,#+0
   \   00000060   18D08DE2           ADD      SP,SP,#+24
   \   00000064   0600000A           BEQ      ??main_1
   2516            {
   2517              if (strlen(fname)<128)
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   1B0000EF           SWI      +27
   \   00000070   800050E3           CMP      R0,#+128
   \   00000074   0200002A           BCS      ??main_1
   2518              {
   2519                strcpy(filename,fname);
   \   00000078   ........           LDR      R0,??DataTable337  ;; filename
   \   0000007C   0410A0E1           MOV      R1,R4
   \   00000080   1A0000EF           SWI      +26
   2520              }
   2521            }
   2522            UpdateCSMname();
   \                     ??main_1:
   \   00000084   ........           BL       UpdateCSMname
   2523            CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   00000088   18009FE5           LDR      R0,??main_0+0x4  ;; MAINCSM
   \   0000008C   0020A0E3           MOV      R2,#+0
   \   00000090   10108DE2           ADD      R1,SP,#+16
   \   00000094   070100EF           SWI      +263
   2524            return 0;
   \   00000098   0000A0E3           MOV      R0,#+0
   \   0000009C   3CD08DE2           ADD      SP,SP,#+60
   \   000000A0   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??main_0:
   \   000000A4   ........           DC32     `?<Constant "%s%d_%d_%d_%d_%d_%d.tmp">`
   \   000000A8   ........           DC32     MAINCSM
   2525          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     wintranslation

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     koi8translation

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     font

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     myscr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     stkfile

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     STKSZ50

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   ........           DC32     dstk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable34:
   \   00000000   ........           DC32     bfree

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable37:
   \   00000000   ........           DC32     ubat

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable39:
   \   00000000   ........           DC32     ustk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable40:
   \   00000000   ........           DC32     dbat

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable43:
   \   00000000   ........           DC32     usp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable45:
   \   00000000   ........           DC32     u_disk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable47:
   \   00000000   ........           DC32     d_disk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable52:
   \   00000000   ........           DC32     ted_path

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable53:
   \   00000000   ........           DC32     `?<Constant "%sTED.history">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable54:
   \   00000000   ........           DC32     HISTORY

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable56:
   \   00000000   ........           DC32     font_size

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable59:
   \   00000000   ........           DC32     win_dos_koi

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable62:
   \   00000000   ........           DC32     disk_access

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable63:
   \   00000000   ........           DC32     seek_to_line

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable68:
   \   00000000   ........           DC32     stk_fhandle

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable70:
   \   00000000   ........           DC32     terminated

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable80:
   \   00000000   ........           DC32     STKSZ

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable81:
   \   00000000   ........           DC32     dsp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable94:
   \   00000000   ........           DC32     editline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable96:
   \   00000000   ........           DC32     max_x

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable99:
   \   00000000   ........           DC32     filename

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable100:
   \   00000000   ........           DC32     total_line

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable102:
   \   00000000   ........           DC32     upinfo_ws

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable103:
   \   00000000   ........           DC32     disk_access

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable106:
   \   00000000   ........           DC32     curline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable109:
   \   00000000   ........           DC32     e_ws

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable110:
   \   00000000   ........           DC32     info_ws

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable111:
   \   00000000   ........           DC32     filename

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable125:
   \   00000000   ........           DC32     cursor_off

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable138:
   \   00000000   ........           DC32     viewline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable145:
   \   00000000   ........           DC32     max_y

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable147:
   \   00000000   ........           DC32     font_size

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable153:
   \   00000000   ........           DC32     max_x

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable156:
   \   00000000   ........           DC32     draw_mode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable166:
   \   00000000   ........           DC32     curpos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable170:
   \   00000000   ........           DC32     viewpos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable181:
   \   00000000   ........           DC32     usp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable182:
   \   00000000   ........           DC32     ustk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable186:
   \   00000000   ........           DC32     clip_pasted

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable190:
   \   00000000   ........           DC32     editline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable193:
   \   00000000   ........           DC32     total_line

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable199:
   \   00000000   ........           DC32     editmode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable200:
   \   00000000   ........           DC32     viewline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable202:
   \   00000000   ........           DC32     max_y_emode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable203:
   \   00000000   ........           DC32     curline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable205:
   \   00000000   ........           DC32     dsp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable206:
   \   00000000   ........           DC32     STKSZ

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable207:
   \   00000000   ........           DC32     dstk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable208:
   \   00000000   ........           DC32     edit_id

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable215:
   \   00000000   ........           DC32     cursor_off

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable217:
   \   00000000   ........           DC32     curpos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable227:
   \   00000000   ........           DC32     ted_path

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable229:
   \   00000000   ........           DC32     font

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable230:
   \   00000000   ........           DC32     max_x

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable231:
   \   00000000   ........           DC32     max_y

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable233:
   \   00000000   ........           DC32     myscr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable250:
   \   00000000   ........           DC32     loadmenu_id

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable253:
   \   00000000   ........           DC32     HISTORY + 129

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable254:
   \   00000000   ........           DC32     FirstLoadFile

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable256:
   \   00000000   ........           DC32     disk_access

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable264:
   \   00000000   ........           DC32     draw_mode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable265:
   \   00000000   ........           DC32     GotoLine

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable267:
   \   00000000   ........           DC32     e_ws

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable268:
   \   00000000   ........           DC32     gl_num

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable273:
   \   00000000   ........           DC32     HISTORY + 140

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable275:
   \   00000000   ........           DC32     HISTORY + 144

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable277:
   \   00000000   ........           DC32     HISTORY + 148

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable279:
   \   00000000   ........           DC32     HISTORY + 152

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable285:
   \   00000000   ........           DC32     STKSZ50

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable289:
   \   00000000   ........           DC32     terminated

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable290:
   \   00000000   ........           DC32     win_dos_koi

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable291:
   \   00000000   ........           DC32     font_size

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable292:
   \   00000000   ........           DC32     HISTORY

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable293:
   \   00000000   ........           DC32     u_disk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable294:
   \   00000000   ........           DC32     d_disk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable295:
   \   00000000   ........           DC32     ubat

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable296:
   \   00000000   ........           DC32     dbat

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable297:
   \   00000000   ........           DC32     bfree

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable300:
   \   00000000   ........           DC32     dsp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable301:
   \   00000000   ........           DC32     viewpos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable302:
   \   00000000   ........           DC32     curpos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable305:
   \   00000000   ........           DC32     cursor_off

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable309:
   \   00000000   ........           DC32     usp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable310:
   \   00000000   ........           DC32     total_line

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable311:
   \   00000000   ........           DC32     curline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable312:
   \   00000000   ........           DC32     viewline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable313:
   \   00000000   ........           DC32     filename

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable314:
   \   00000000   ........           DC32     seek_to_line

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable315:
   \   00000000   ........           DC32     draw_mode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable316:
   \   00000000   ........           DC32     STKSZ

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable322:
   \   00000000   ........           DC32     HISTORY + 129

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable323:
   \   00000000   ........           DC32     ustk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable324:
   \   00000000   ........           DC32     dstk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable325:
   \   00000000   ........           DC32     info_ws

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable326:
   \   00000000   ........           DC32     upinfo_ws

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable327:
   \   00000000   ........           DC32     e_ws

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable329:
   \   00000000   ........           DC32     loadmenu_id

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable330:
   \   00000000   ........           DC32     edit_id

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable331:
   \   00000000   ........           DC32     max_y_emode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable332:
   \   00000000   ........           DC32     editmode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable333:
   \   00000000   ........           DC32     disk_access

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable335:
   \   00000000   ........           DC32     ted_path

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable336:
   \   00000000   ........           DC32     stkfile

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable337:
   \   00000000   ........           DC32     filename

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for menusoftkeys>`:
   \   00000000   000000000100       DC32 0, 1, 2
   \              000002000000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for menu_sk>`:
   \   00000000   18000000           DC16 24, 0
   \   00000004   ........           DC32 `?<Constant "Select">`
   \   00000008   01000000           DC16 1, 0
   \   0000000C   ........           DC32 `?<Constant "Back">`
   \   00000010   3D000000           DC16 61, 0
   \   00000014   ........           DC32 `?<Constant "+">`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for menu_skt>`:
   \   00000000   ........0000       DC32 menu_sk, 0
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for t_bm1>`:
   \   00000000   424D31203030       DC8 "BM1 000000000"
   \              303030303030
   \              3000        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for t_bm2>`:
   \   00000000   424D32203030       DC8 "BM2 000000000"
   \              303030303030
   \              3000        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for t_bm3>`:
   \   00000000   424D33203030       DC8 "BM3 000000000"
   \              303030303030
   \              3000        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for t_bm4>`:
   \   00000000   424D34203030       DC8 "BM4 000000000"
   \              303030303030
   \              3000        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for stk_fhandle>`:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for draw_mode>`:
   \   00000000   FF000000           DC32 255

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for font_size>`:
   \   00000000   06000000           DC32 6

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for disk_access>`:
   \   00000000   01000000           DC32 1

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for STKSZ>`:
   \   00000000   00000200           DC32 131072

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for STKMAX>`:
   \   00000000   90E80100           DC32 125072

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for STKMIN>`:
   \   00000000   70170000           DC32 6000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for STKSZ50>`:
   \   00000000   00000100           DC32 65536

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for MyScrHdr>`:
   \   00000000   84B00100           DC8 132, 176, 1, 0
   \   00000004   ........           DC32 myscr

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for edmenu_HNDLS>`:
   \   00000000   ............       DC32 insline, delline, splitline, joinlines, instime, insdate, paste
   \              ............
   \              ............
   \              ............
   \              ........    
   \   0000001C   ........           DC32 clearclipb

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for edmenu_ITEMS>`:
   \   00000000   00000000....       DC32 0H, `?<Constant "Insert line">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              ....FFFFFF7F
   \              000000000000
   \              000000000000
   \              9D0500000000
   \              0000        
   \   00000020   ........FFFF       DC32 `?<Constant "Delete line">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              FF7F00000000
   \              000000000000
   \              00009D050000
   \              00000000    
   \   0000003C   ........FFFF       DC32 `?<Constant "Split line">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              FF7F00000000
   \              000000000000
   \              00009D050000
   \              00000000    
   \   00000058   ........FFFF       DC32 `?<Constant "Join lines">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              FF7F00000000
   \              000000000000
   \              00009D050000
   \              00000000    
   \   00000074   ........FFFF       DC32 `?<Constant "Insert time">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              FF7F00000000
   \              000000000000
   \              00009D050000
   \              00000000    
   \   00000090   ........FFFF       DC32 `?<Constant "Insert date">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              FF7F00000000
   \              000000000000
   \              00009D050000
   \              00000000    
   \   000000AC   ........FFFF       DC32 `?<Constant "Paste">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              FF7F00000000
   \              000000000000
   \              00009D050000
   \              00000000    
   \   000000C8   ........FFFF       DC32 `?<Constant "Clear clipboard">`, 2147483647, 0, 0H, 0, 1437
   \              FF7F00000000
   \              000000000000
   \              00009D050000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for edmenu_HDR>`:
   \   00000000   000000008300       DC16 0, 0, 131, 21
   \              1500        
   \   00000008   00000000....       DC32 0H, `?<Constant "Special...">`, 2147483647
   \              ....FFFFFF7F

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for edmenu_STRUCT>`:
   \   00000000   080000000000       DC32 8, 0H, 0H, 0H, menusoftkeys, menu_skt, 0, 0H, edmenu_ITEMS
   \              000000000000
   \              00000000....
   \              ............
   \              000000000000
   \              0000........
   \   00000024   ........0800       DC32 edmenu_HNDLS, 8
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for sk>`:
   \   00000000   FF0F0000           DC16 4095, 0
   \   00000004   ........           DC32 `?<Constant "Menu">`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ed_inp_hdr>`:
   \   00000000   000000008300       DC16 0, 0, 131, 21
   \              1500        
   \   00000008   00000000....       DC32 0H, `?<Constant "Edit text">`, 2147483647
   \              ....FFFFFF7F

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ed_inp_desc>`:
   \   00000000   01000000....       DC32 1, ed_inp_onkey, ed_inp_ghook, ed_inp_locret, 0, menu_skt
   \              ............
   \              ........0000
   \              0000........
   \   00000018   000016008300       DC16 0, 22, 131, 153
   \              9900        
   \   00000020   040000006400       DC32 4, 100, 101, 0, 1073741824
   \              000065000000
   \              000000000000
   \              0040        
   \   00000034   00000000           DC8 0, 0, 0, 0

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for sk>_1`:
   \   00000000   FF0F0000           DC16 4095, 0
   \   00000004   ........           DC32 `?<Constant "Save...">`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for sf_inp_hdr>`:
   \   00000000   000000008300       DC16 0, 0, 131, 21
   \              1500        
   \   00000008   00000000....       DC32 0H, `?<Constant "Save as:">`, 2147483647
   \              ....FFFFFF7F

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for sf_inp_desc>`:
   \   00000000   01000000....       DC32 1, sf_inp_onkey, sf_inp_ghook, sf_inp_locret, 0, menu_skt
   \              ............
   \              ........0000
   \              0000........
   \   00000018   000016008300       DC16 0, 22, 131, 153
   \              9900        
   \   00000020   040000006400       DC32 4, 100, 101, 0, 1073741824
   \              000065000000
   \              000000000000
   \              0040        
   \   00000034   00000000           DC8 0, 0, 0, 0

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for loadmenu_HNDLS>`:
   \   00000000   ............       DC32 load_setfont4, load_setfont6, load_setfont8, load_setfont14
   \              ............
   \              ........    
   \   00000010   ............       DC32 load_setfont16, load_direct, load_format, load_eolspc, load_pad
   \              ............
   \              ............
   \              ....        
   \   00000024   ........           DC32 load_save

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for loadmenu_ITEMS>`:
   \   00000000   00000000....       DC32 0H, `?<Constant "Font size = 4">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              ....FFFFFF7F
   \              000000000000
   \              000000000000
   \              9D0500000000
   \              0000        
   \   00000020   ........FFFF       DC32 `?<Constant "Font size = 6">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              FF7F00000000
   \              000000000000
   \              00009D050000
   \              00000000    
   \   0000003C   ........FFFF       DC32 `?<Constant "Font size = 8">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              FF7F00000000
   \              000000000000
   \              00009D050000
   \              00000000    
   \   00000058   ........FFFF       DC32 `?<Constant "Font size = 14">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              FF7F00000000
   \              000000000000
   \              00009D050000
   \              00000000    
   \   00000074   ........FFFF       DC32 `?<Constant "Font size = 16">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              FF7F00000000
   \              000000000000
   \              00009D050000
   \              00000000    
   \   00000090   ........FFFF       DC32 `?<Constant "Direct load">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              FF7F00000000
   \              000000000000
   \              00009D050000
   \              00000000    
   \   000000AC   ........FFFF       DC32 `?<Constant "DOS format">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              FF7F00000000
   \              000000000000
   \              00009D050000
   \              00000000    
   \   000000C8   ........FFFF       DC32 `?<Constant "WIN format">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              FF7F00000000
   \              000000000000
   \              00009D050000
   \              00000000    
   \   000000E4   ........FFFF       DC32 `?<Constant "Padding on/off">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              FF7F00000000
   \              000000000000
   \              00009D050000
   \              00000000    
   \   00000100   ........FFFF       DC32 `?<Constant "Save as...">`, 2147483647, 0, 0H, 0, 1437
   \              FF7F00000000
   \              000000000000
   \              00009D050000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for loadmenu_HDR>`:
   \   00000000   000000008300       DC16 0, 0, 131, 21
   \              1500        
   \   00000008   00000000....       DC32 0H, `?<Constant "General...">`, 2147483647
   \              ....FFFFFF7F

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for loadmenu_STRUCT>`:
   \   00000000   080000000000       DC32 8, 0H, 0H, 0H, menusoftkeys, menu_skt, 0, 0H, loadmenu_ITEMS
   \              000000000000
   \              00000000....
   \              ............
   \              000000000000
   \              0000........
   \   00000024   ........0800       DC32 loadmenu_HNDLS, 8
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for sk>_2`:
   \   00000000   FF0F0000           DC16 4095, 0
   \   00000004   ........           DC32 `?<Constant "Goto...">`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for gl_inp_hdr_percent>`:
   \   00000000   000000008300       DC16 0, 0, 131, 21
   \              1500        
   \   00000008   00000000....       DC32 0H, `?<Constant "Goto percent:">`, 2147483647
   \              ....FFFFFF7F

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for gl_inp_hdr_line>`:
   \   00000000   000000008300       DC16 0, 0, 131, 21
   \              1500        
   \   00000008   00000000....       DC32 0H, `?<Constant "Goto line:">`, 2147483647
   \              ....FFFFFF7F

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for gl_inp_desc>`:
   \   00000000   01000000....       DC32 1, gl_inp_onkey, gl_inp_ghook, gl_inp_locret, 0, menu_skt
   \              ............
   \              ........0000
   \              0000........
   \   00000018   000016008300       DC16 0, 22, 131, 153
   \              9900        
   \   00000020   040000006400       DC32 4, 100, 101, 0, 1073741824
   \              000065000000
   \              000000000000
   \              0040        
   \   00000034   00000000           DC8 0, 0, 0, 0

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for gotomenu_HNDLS>`:
   \   00000000   ............       DC32 goto_top, goto_line, goto_percent, goto_bot, goto_last_saved
   \              ............
   \              ............
   \              ....        
   \   00000014   ............       DC32 goto_book1, goto_book2, goto_book3, goto_book4
   \              ............
   \              ........    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for gotomenu_ITEMS>`:
   \   00000000   00000000....       DC32 0H, `?<Constant "Top">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              ....FFFFFF7F
   \              000000000000
   \              000000000000
   \              9D0500000000
   \              0000        
   \   00000020   ........FFFF       DC32 `?<Constant "Line">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              FF7F00000000
   \              000000000000
   \              00009D050000
   \              00000000    
   \   0000003C   ........FFFF       DC32 `?<Constant "Percent">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              FF7F00000000
   \              000000000000
   \              00009D050000
   \              00000000    
   \   00000058   ........FFFF       DC32 `?<Constant "Bottom">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              FF7F00000000
   \              000000000000
   \              00009D050000
   \              00000000    
   \   00000074   ........FFFF       DC32 `?<Constant "Last saved">`, 2147483647, 0, 0H, 0, 1437, 0H, t_bm1
   \              FF7F00000000
   \              000000000000
   \              00009D050000
   \              00000000....
   \              ....        
   \   00000094   FFFFFF7F0000       DC32 2147483647, 0, 0H, 0, 1437, 0H, t_bm2, 2147483647, 0, 0H, 0, 1437
   \              000000000000
   \              000000009D05
   \              000000000000
   \              ........FFFF
   \              FF7F00000000
   \              000000000000
   \              00009D050000
   \   000000C4   00000000....       DC32 0H, t_bm3, 2147483647, 0, 0H, 0, 1437, 0H, t_bm4, 2147483647, 0
   \              ....FFFFFF7F
   \              000000000000
   \              000000000000
   \              9D0500000000
   \              0000........
   \              FFFFFF7F0000
   \              0000        
   \   000000F0   000000000000       DC32 0H, 0, 1437
   \              00009D050000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for gotomenu_HDR>`:
   \   00000000   000000008300       DC16 0, 0, 131, 21
   \              1500        
   \   00000008   00000000....       DC32 0H, `?<Constant "Goto...">`, 2147483647
   \              ....FFFFFF7F

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for gotomenu_STRUCT>`:
   \   00000000   080000000000       DC32 8, 0H, 0H, 0H, menusoftkeys, menu_skt, 0, 0H, gotomenu_ITEMS
   \              000000000000
   \              00000000....
   \              ............
   \              000000000000
   \              0000........
   \   00000024   ........0900       DC32 gotomenu_HNDLS, 9
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for bookmenu_ITEMS>`:
   \   00000000   00000000....       DC32 0H, t_bm1, 2147483647, 0, 0H, 0, 1437, 0H, t_bm2, 2147483647, 0
   \              ....FFFFFF7F
   \              000000000000
   \              000000000000
   \              9D0500000000
   \              0000........
   \              FFFFFF7F0000
   \              0000        
   \   0000002C   000000000000       DC32 0H, 0, 1437, 0H, t_bm3, 2147483647, 0, 0H, 0, 1437, 0H, t_bm4
   \              00009D050000
   \              00000000....
   \              ....FFFFFF7F
   \              000000000000
   \              000000000000
   \              9D0500000000
   \              0000........
   \   0000005C   FFFFFF7F0000       DC32 2147483647, 0, 0H, 0, 1437
   \              000000000000
   \              000000009D05
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for bookmenu_HNDLS>`:
   \   00000000   ............       DC32 set_book1, set_book2, set_book3, set_book4
   \              ............
   \              ........    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for bookmenu_HDR>`:
   \   00000000   000000008300       DC16 0, 0, 131, 21
   \              1500        
   \   00000008   00000000....       DC32 0H, `?<Constant "Set Bookmark...">`, 2147483647
   \              ....FFFFFF7F

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for bookmenu_STRUCT>`:
   \   00000000   080000000000       DC32 8, 0H, 0H, 0H, menusoftkeys, menu_skt, 1, 0H, bookmenu_ITEMS
   \              000000000000
   \              00000000....
   \              ............
   \              010000000000
   \              0000........
   \   00000024   ........0400       DC32 bookmenu_HNDLS, 4
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for softmenu_ITEMS>`:
   \   00000000   00000000....       DC32 0H, `?<Constant "Goto...">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              ....FFFFFF7F
   \              000000000000
   \              000000000000
   \              9D0500000000
   \              0000        
   \   00000020   ........FFFF       DC32 `?<Constant "Set Bookmark...">`, 2147483647, 0, 0H, 0, 1437, 0H
   \              FF7F00000000
   \              000000000000
   \              00009D050000
   \              00000000    
   \   0000003C   ........FFFF       DC32 `?<Constant "Search...">`, 2147483647, 0, 0H, 0, 1437
   \              FF7F00000000
   \              000000000000
   \              00009D050000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for softmenu_HNDLS>`:
   \   00000000   ............       DC32 goto_menu, bookm_menu, search_menu
   \              ............

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for softmenu_HDR>`:
   \   00000000   000000008300       DC16 0, 0, 131, 21
   \              1500        
   \   00000008   00000000....       DC32 0H, `?<Constant "TED menu">`, 2147483647
   \              ....FFFFFF7F

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for softmenu_STRUCT>`:
   \   00000000   080000000000       DC32 8, 0H, 0H, 0H, menusoftkeys, menu_skt, 1, 0H, softmenu_ITEMS
   \              000000000000
   \              00000000....
   \              ............
   \              010000000000
   \              0000........
   \   00000024   ........0300       DC32 softmenu_HNDLS, 3
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Direct load">`:
   \   00000000   446972656374       DC8 "Direct load"
   \              206C6F616400

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Delete line">`:
   \   00000000   44656C657465       DC8 "Delete line"
   \              206C696E6500

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Font size = 16">`:
   \   00000000   466F6E742073       DC8 "Font size = 16"
   \              697A65203D20
   \              313600      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Font size = 14">`:
   \   00000000   466F6E742073       DC8 "Font size = 14"
   \              697A65203D20
   \              313400      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Font size = 8">`:
   \   00000000   466F6E742073       DC8 "Font size = 8"
   \              697A65203D20
   \              3800        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Font size = 6">`:
   \   00000000   466F6E742073       DC8 "Font size = 6"
   \              697A65203D20
   \              3600        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Font size = 4">`:
   \   00000000   466F6E742073       DC8 "Font size = 4"
   \              697A65203D20
   \              3400        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Save as:">`:
   \   00000000   536176652061       DC8 "Save as:"
   \              733A00      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Edit text">`:
   \   00000000   456469742074       DC8 "Edit text"
   \              65787400    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Can\\'t seek in tempfile!">`:
   \   00000000   43616E277420       DC8 "Can't seek in tempfile!"
   \              7365656B2069
   \              6E2074656D70
   \              66696C652100

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Clear clipboard">`:
   \   00000000   436C65617220       DC8 "Clear clipboard"
   \              636C6970626F
   \              61726400    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Paste">`:
   \   00000000   506173746500       DC8 "Paste"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Insert date">`:
   \   00000000   496E73657274       DC8 "Insert date"
   \              206461746500

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Insert time">`:
   \   00000000   496E73657274       DC8 "Insert time"
   \              2074696D6500

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Join lines">`:
   \   00000000   4A6F696E206C       DC8 "Join lines"
   \              696E657300  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Split line">`:
   \   00000000   53706C697420       DC8 "Split line"
   \              6C696E6500  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Insert line">`:
   \   00000000   496E73657274       DC8 "Insert line"
   \              206C696E6500

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "+">`:
   \   00000000   2B00               DC8 "+"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Back">`:
   \   00000000   4261636B00         DC8 "Back"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Goto line %u...">`:
   \   00000000   476F746F206C       DC8 "Goto line %u..."
   \              696E65202575
   \              2E2E2E00    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Select">`:
   \   00000000   53656C656374       DC8 "Select"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s%d_%d_%d_%d_%d_%d.tmp">`:
   \   00000000   257325645F25       DC8 "%s%d_%d_%d_%d_%d_%d.tmp"
   \              645F25645F25
   \              645F25645F25
   \              642E746D7000

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "TED: %w">`:
   \   00000000   5445443A2025       DC8 "TED: %w"
   \              7700        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Font selected!">`:
   \   00000000   466F6E742073       DC8 "Font selected!"
   \              656C65637465
   \              642100      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s%d.fnt">`:
   \   00000000   257325642E66       DC8 "%s%d.fnt"
   \              6E7400      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Save...">`:
   \   00000000   536176652E2E       DC8 "Save..."
   \              2E00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Menu">`:
   \   00000000   4D656E7500         DC8 "Menu"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%02d-%02d-%04d">`:
   \   00000000   253032642D25       DC8 "%02d-%02d-%04d"
   \              3032642D2530
   \              346400      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%02d:%02d">`:
   \   00000000   253032643A25       DC8 "%02d:%02d"
   \              30326400    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Text viewer/editor\\nve...">`:
   \   00000000   546578742076       DC8 54H, 65H, 78H, 74H, 20H, 76H, 69H, 65H
   \              6965        
   \   00000008   7765722F6564       DC8 77H, 65H, 72H, 2FH, 65H, 64H, 69H, 74H
   \              6974        
   \   00000010   6F720A766572       DC8 6FH, 72H, 0AH, 76H, 65H, 72H, 73H, 69H
   \              7369        
   \   00000018   6F6E20312E32       DC8 6FH, 6EH, 20H, 31H, 2EH, 32H, 0AH, 41H
   \              0A41        
   \   00000020   756720323720       DC8 75H, 67H, 20H, 32H, 37H, 20H, 32H, 30H
   \              3230        
   \   00000028   30360A31323A       DC8 30H, 36H, 0AH, 31H, 32H, 3AH, 34H, 31H
   \              3431        
   \   00000030   3A34300A436F       DC8 3AH, 34H, 30H, 0AH, 43H, 6FH, 70H, 79H
   \              7079        
   \   00000038   726967687428       DC8 72H, 69H, 67H, 68H, 74H, 28H, 43H, 29H
   \              4329        
   \   00000040   323030360A62       DC8 32H, 30H, 30H, 36H, 0AH, 62H, 79H, 20H
   \              7920        
   \   00000048   527374372F43       DC8 52H, 73H, 74H, 37H, 2FH, 43H, 42H, 53H
   \              4253        
   \   00000050   49450A0A2577       DC8 49H, 45H, 0AH, 0AH, 25H, 77H, 0
   \              00          
   \   00000057   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "<<EOF>>">`:
   \   00000000   3C3C454F463E       DC8 "<<EOF>>"
   \              3E00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Line %u...">`:
   \   00000000   4C696E652025       DC8 "Line %u..."
   \              752E2E2E00  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Saving...">`:
   \   00000000   536176696E67       DC8 "Saving..."
   \              2E2E2E00    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Time:\\n%02d:%02d\\nCurre...">`:
   \   00000000   54696D653A0A       DC8 54H, 69H, 6DH, 65H, 3AH, 0AH, 25H, 30H
   \              2530        
   \   00000008   32643A253032       DC8 32H, 64H, 3AH, 25H, 30H, 32H, 64H, 0AH
   \              640A        
   \   00000010   43757272656E       DC8 43H, 75H, 72H, 72H, 65H, 6EH, 74H, 20H
   \              7420        
   \   00000018   6C696E652025       DC8 6CH, 69H, 6EH, 65H, 20H, 25H, 6CH, 75H
   \              6C75        
   \   00000020   0A546F74616C       DC8 0AH, 54H, 6FH, 74H, 61H, 6CH, 20H, 6CH
   \              206C        
   \   00000028   696E65732025       DC8 69H, 6EH, 65H, 73H, 20H, 25H, 6CH, 75H
   \              6C75        
   \   00000030   0A0A43757272       DC8 0AH, 0AH, 43H, 75H, 72H, 72H, 65H, 6EH
   \              656E        
   \   00000038   742066696C65       DC8 74H, 20H, 66H, 69H, 6CH, 65H, 3AH, 0AH
   \              3A0A        
   \   00000040   257700             DC8 25H, 77H, 0
   \   00000043   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%sTED.history">`:
   \   00000000   25735445442E       DC8 "%sTED.history"
   \              686973746F72
   \              7900        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Can\\'t read tempfile!">`:
   \   00000000   43616E277420       DC8 "Can't read tempfile!"
   \              726561642074
   \              656D7066696C
   \              652100      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Can\\'t write tempfile!">`:
   \   00000000   43616E277420       DC8 "Can't write tempfile!"
   \              777269746520
   \              74656D706669
   \              6C652100    
   \   00000016   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Special...">`:
   \   00000000   537065636961       DC8 "Special..."
   \              6C2E2E2E00  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Can\\'t open tempfile!">`:
   \   00000000   43616E277420       DC8 "Can't open tempfile!"
   \              6F70656E2074
   \              656D7066696C
   \              652100      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Can\\'t create or write...">`:
   \   00000000   43616E277420       DC8 "Can't create or write outfile!"
   \              637265617465
   \              206F72207772
   \              697465206F75
   \              7466696C6521
   \              00          
   \   0000001F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "TED menu">`:
   \   00000000   544544206D65       DC8 "TED menu"
   \              6E7500      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Search...">`:
   \   00000000   536561726368       DC8 "Search..."
   \              2E2E2E00    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Set Bookmark...">`:
   \   00000000   53657420426F       DC8 "Set Bookmark..."
   \              6F6B6D61726B
   \              2E2E2E00    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Goto...">`:
   \   00000000   476F746F2E2E       DC8 "Goto..."
   \              2E00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Last saved">`:
   \   00000000   4C6173742073       DC8 "Last saved"
   \              6176656400  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Bottom">`:
   \   00000000   426F74746F6D       DC8 "Bottom"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Percent">`:
   \   00000000   50657263656E       DC8 "Percent"
   \              7400        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Line">`:
   \   00000000   4C696E6500         DC8 "Line"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Top">`:
   \   00000000   546F7000           DC8 "Top"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Goto line:">`:
   \   00000000   476F746F206C       DC8 "Goto line:"
   \              696E653A00  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Goto percent:">`:
   \   00000000   476F746F2070       DC8 "Goto percent:"
   \              657263656E74
   \              3A00        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "General...">`:
   \   00000000   47656E657261       DC8 "General..."
   \              6C2E2E2E00  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Save as...">`:
   \   00000000   536176652061       DC8 "Save as..."
   \              732E2E2E00  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Padding on/off">`:
   \   00000000   50616464696E       DC8 "Padding on/off"
   \              67206F6E2F6F
   \              666600      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "WIN format">`:
   \   00000000   57494E20666F       DC8 "WIN format"
   \              726D617400  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "DOS format">`:
   \   00000000   444F5320666F       DC8 "DOS format"
   \              726D617400  
   \   0000000B   00                 DC8 0

   Maximum stack usage in bytes:

     Function            CSTACK
     --------            ------
     CheckDiskAccess         4
     CreateEditDialog       68
     CreateSaveAsDialog     68
     DiskErrorMsg           16
     DoDiskAccess           48
     DrawChar               20
     DrawInfo               80
     DrawLoadMenu           20
     DrawScreen             80
     DrawSoftMenu           28
     DrwImg                 64
     FL_loader              28
     FL_saver               28
     FindFreeBlock           0
     FirstLoadFile          40
     GotoLine               20
     Killer                  4
     LineDw                  4
     LineUp                  4
     PageDw                 16
     PageUp                  8
     SaveHistory           312
     SearchHistory         148
     SetViewIllumination     4
     ToBOL                   0
     ToEOL                   4
     UpdateCSMname           8
     WordLeft                0
     WordRight               0
     bookm_menu             20
     char16to8               0
     char8to16               0
     clearclipb              4
     delline                 8
     doCurLeft              12
     doCurRight             12
     drawFrmStkStr          40
     drawStkStr             32
     ed_inp_ghook           60
     ed_inp_locret           0
     ed_inp_onkey           24
     ed_inp_redraw          20
     gl_inp_ghook           52
     gl_inp_locret           0
     gl_inp_onkey            4
     goto_book1              4
     goto_book2              4
     goto_book3              4
     goto_book4              4
     goto_bot                4
     goto_l                  4
     goto_last_saved         4
     goto_line               4
     goto_line_inp          68
     goto_menu              20
     goto_percent            4
     goto_top                4
     insdate                28
     insline                 4
     instime                24
     joinlines               8
     load_direct             4
     load_eolspc             4
     load_format             4
     load_pad                4
     load_save               4
     load_setfont14          4
     load_setfont16          4
     load_setfont4           4
     load_setfont6           4
     load_setfont8           4
     loadfont              152
     main                   92
     maincsm_onclose         4
     maincsm_oncreate       16
     maincsm_onmessage      12
     method0                 4
     method1                 8
     method2                 0
     method3                 0
     method4                 0
     method5                24
     method7                 4
     method8                 0
     method9                 0
     my_atoui                4
     paste                   4
     search_menu             0
     set_book1               4
     set_book2               4
     set_book3               4
     set_book4               4
     setfont                 4
     sf_inp_ghook           52
     sf_inp_locret           0
     sf_inp_onkey            4
     splitline              12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     menusoftkeys                     12
     menu_sk                          24
     menu_skt                          8
     t_bm1                            16
     t_bm2                            16
     t_bm3                            16
     t_bm4                            16
     info_ws                           4
     upinfo_ws                         4
     e_ws                              4
     terminated                        4
     loadmenu_id                       4
     edit_id                           4
     DrwImg                           92
     editmode                          4
     stk_fhandle                       4
     draw_mode                         4
     font_size                         4
     clip_pasted                       4
     minus11                           4
     bmpDiskAccess                    12
     imgDiskAccess                     8
     u_disk                            4
     d_disk                            4
     usp                               4
     dsp                               4
     disk_access                       4
     cursor_cnt                        4
     disable_exit                      4
     win_dos_koi                       4
     cursor_off                        4
     stkfile                         128
     seek_to_line                      4
     total_line                        4
     curline                           4
     curpos                            4
     viewline                          4
     viewpos                           4
     max_y                             4
     max_y_emode                       4
     max_x                             4
     STKSZ                             4
     STKMAX                            4
     STKMIN                            4
     STKSZ50                           4
     ustk                              4
     dstk                              4
     dbat                           4096
     ubat                           4096
     bfree                          1024
     font                           4096
     editline                        256
     filename                        128
     HISTORY                         156
     myscr                          2992
     MyScrHdr                          8
     Q_DiskError                       1
     DiskErrorMsg                    152
     wintranslation                  128
     koi8translation                 128
     dos2unicode                     256
     char8to16                        92
     unicode2char                    600
     char16to8                       124
     DrawChar                        548
     drawStkStr                      148
     drawFrmStkStr                   384
     FindFreeBlock                    48
     DoDiskAccess                    960
     CheckDiskAccess                 152
     SearchHistory                   152
     SaveHistory                     304
     GotoLine                        256
     LineUp                           48
     LineDw                           76
     PageUp                          100
     PageDw                           80
     ToEOL                            64
     ToBOL                            24
     WordLeft                        100
     WordRight                       116
     DrawInfo                        244
     DrawScreen                     2376
     doCurRight                      120
     doCurLeft                       136
     insline                          64
     delline                          64
     splitline                       224
     joinlines                       108
     instime                         124
     insdate                         132
     paste                            28
     clearclipb                       28
     edmenu_HNDLS                     32
     edmenu_ITEMS                    224
     edmenu_HDR                       20
     edmenu_STRUCT                    44
     ed_inp_onkey                    196
     ed_inp_redraw                   172
     ed_inp_locret                     4
     ed_inp_ghook                    268
     sk                                8
     methods                          64
     ed_inp_hdr                       20
     ed_inp_desc                      56
     CreateEditDialog                308
     SetViewIllumination              64
     method0                          16
     method1                          32
     method2                          24
     method3                          32
     method4                          20
     method7                           4
     method8                           8
     method9                           8
     method5                         540
     sf_inp_onkey                    100
     sf_inp_ghook                     76
     sk                                8
     sf_inp_locret                     4
     sf_inp_hdr                       20
     sf_inp_desc                      56
     CreateSaveAsDialog              152
     loadfont                        276
     setfont                          96
     load_setfont4                     8
     load_setfont6                     8
     load_setfont8                     8
     load_setfont14                    8
     load_setfont16                    8
     load_direct                      72
     load_format                      68
     load_eolspc                      76
     load_pad                         32
     load_save                        20
     loadmenu_HNDLS                   40
     loadmenu_ITEMS                  280
     loadmenu_HDR                     20
     loadmenu_STRUCT                  44
     DrawLoadMenu                     80
     goto_l                           44
     goto_top                          8
     goto_bot                          8
     gl_num                            4
     my_atoui                         76
     gl_inp_onkey                    132
     gl_inp_ghook                     76
     sk                                8
     gl_inp_locret                     4
     gl_inp_hdr_percent               20
     gl_inp_hdr_line                  20
     gl_inp_desc                      56
     goto_line_inp                   188
     goto_line                        24
     goto_percent                     24
     goto_last_saved                  16
     goto_book1                       12
     goto_book2                       12
     goto_book3                       12
     goto_book4                       12
     gotomenu_HNDLS                   36
     gotomenu_ITEMS                  252
     gotomenu_HDR                     20
     gotomenu_STRUCT                  44
     goto_menu                        72
     set_book1                        32
     set_book2                        32
     set_book3                        32
     set_book4                        32
     bookmenu_ITEMS                  112
     bookmenu_HNDLS                   16
     bookmenu_HDR                     20
     bookmenu_STRUCT                  44
     bookm_menu                       72
     search_menu                       4
     softmenu_ITEMS                   84
     softmenu_HNDLS                   12
     softmenu_HDR                     20
     softmenu_STRUCT                  44
     DrawSoftMenu                    156
     lfrm                              3
     FL_loader                       168
     FL_saver                        212
     FirstLoadFile                   612
     gui_methods                      44
     Canvas                            8
     maincsm_oncreate                180
     Killer                          124
     ul                                4
     maincsm_onclose                  20
     maincsm_onmessage               256
     maincsm_name_body               280
     MAINCSM                          60
     UpdateCSMname                    64
     main                            172
     ??DataTable5                      4
     ??DataTable6                      4
     ??DataTable8                      4
     ??DataTable9                      4
     ??DataTable17                     4
     ??DataTable21                     4
     ??DataTable30                     4
     ??DataTable34                     4
     ??DataTable37                     4
     ??DataTable39                     4
     ??DataTable40                     4
     ??DataTable43                     4
     ??DataTable45                     4
     ??DataTable47                     4
     ??DataTable52                     4
     ??DataTable53                     4
     ??DataTable54                     4
     ??DataTable56                     4
     ??DataTable59                     4
     ??DataTable62                     4
     ??DataTable63                     4
     ??DataTable68                     4
     ??DataTable70                     4
     ??DataTable80                     4
     ??DataTable81                     4
     ??DataTable94                     4
     ??DataTable96                     4
     ??DataTable99                     4
     ??DataTable100                    4
     ??DataTable102                    4
     ??DataTable103                    4
     ??DataTable106                    4
     ??DataTable109                    4
     ??DataTable110                    4
     ??DataTable111                    4
     ??DataTable125                    4
     ??DataTable138                    4
     ??DataTable145                    4
     ??DataTable147                    4
     ??DataTable153                    4
     ??DataTable156                    4
     ??DataTable166                    4
     ??DataTable170                    4
     ??DataTable181                    4
     ??DataTable182                    4
     ??DataTable186                    4
     ??DataTable190                    4
     ??DataTable193                    4
     ??DataTable199                    4
     ??DataTable200                    4
     ??DataTable202                    4
     ??DataTable203                    4
     ??DataTable205                    4
     ??DataTable206                    4
     ??DataTable207                    4
     ??DataTable208                    4
     ??DataTable215                    4
     ??DataTable217                    4
     ??DataTable227                    4
     ??DataTable229                    4
     ??DataTable230                    4
     ??DataTable231                    4
     ??DataTable233                    4
     ??DataTable250                    4
     ??DataTable253                    4
     ??DataTable254                    4
     ??DataTable256                    4
     ??DataTable264                    4
     ??DataTable265                    4
     ??DataTable267                    4
     ??DataTable268                    4
     ??DataTable273                    4
     ??DataTable275                    4
     ??DataTable277                    4
     ??DataTable279                    4
     ??DataTable285                    4
     ??DataTable289                    4
     ??DataTable290                    4
     ??DataTable291                    4
     ??DataTable292                    4
     ??DataTable293                    4
     ??DataTable294                    4
     ??DataTable295                    4
     ??DataTable296                    4
     ??DataTable297                    4
     ??DataTable300                    4
     ??DataTable301                    4
     ??DataTable302                    4
     ??DataTable305                    4
     ??DataTable309                    4
     ??DataTable310                    4
     ??DataTable311                    4
     ??DataTable312                    4
     ??DataTable313                    4
     ??DataTable314                    4
     ??DataTable315                    4
     ??DataTable316                    4
     ??DataTable322                    4
     ??DataTable323                    4
     ??DataTable324                    4
     ??DataTable325                    4
     ??DataTable326                    4
     ??DataTable327                    4
     ??DataTable329                    4
     ??DataTable330                    4
     ??DataTable331                    4
     ??DataTable332                    4
     ??DataTable333                    4
     ??DataTable335                    4
     ??DataTable336                    4
     ??DataTable337                    4
     ?<Initializer for menusoftkeys>
                                      12
     ?<Initializer for menu_sk>       24
     ?<Initializer for menu_skt>       8
     ?<Initializer for t_bm1>         16
     ?<Initializer for t_bm2>         16
     ?<Initializer for t_bm3>         16
     ?<Initializer for t_bm4>         16
     ?<Initializer for stk_fhandle>    4
     ?<Initializer for draw_mode>      4
     ?<Initializer for font_size>      4
     ?<Initializer for disk_access>    4
     ?<Initializer for STKSZ>          4
     ?<Initializer for STKMAX>         4
     ?<Initializer for STKMIN>         4
     ?<Initializer for STKSZ50>        4
     ?<Initializer for MyScrHdr>       8
     ?<Initializer for edmenu_HNDLS>
                                      32
     ?<Initializer for edmenu_ITEMS>
                                     224
     ?<Initializer for edmenu_HDR>    20
     ?<Initializer for edmenu_STRUCT>
                                      44
     ?<Initializer for sk>             8
     ?<Initializer for ed_inp_hdr>    20
     ?<Initializer for ed_inp_desc>   56
     ?<Initializer for sk>_1           8
     ?<Initializer for sf_inp_hdr>    20
     ?<Initializer for sf_inp_desc>   56
     ?<Initializer for loadmenu_HNDLS>
                                      40
     ?<Initializer for loadmenu_ITEMS>
                                     280
     ?<Initializer for loadmenu_HDR>
                                      20
     ?<Initializer for loadmenu_STRUCT>
                                      44
     ?<Initializer for sk>_2           8
     ?<Initializer for gl_inp_hdr_percent>
                                      20
     ?<Initializer for gl_inp_hdr_line>
                                      20
     ?<Initializer for gl_inp_desc>   56
     ?<Initializer for gotomenu_HNDLS>
                                      36
     ?<Initializer for gotomenu_ITEMS>
                                     252
     ?<Initializer for gotomenu_HDR>
                                      20
     ?<Initializer for gotomenu_STRUCT>
                                      44
     ?<Initializer for bookmenu_ITEMS>
                                     112
     ?<Initializer for bookmenu_HNDLS>
                                      16
     ?<Initializer for bookmenu_HDR>
                                      20
     ?<Initializer for bookmenu_STRUCT>
                                      44
     ?<Initializer for softmenu_ITEMS>
                                      84
     ?<Initializer for softmenu_HNDLS>
                                      12
     ?<Initializer for softmenu_HDR>
                                      20
     ?<Initializer for softmenu_STRUCT>
                                      44
     ?<Constant "Direct load">        12
     ?<Constant "Delete line">        12
     ?<Constant "Font size = 16">     16
     ?<Constant "Font size = 14">     16
     ?<Constant "Font size = 8">      16
     ?<Constant "Font size = 6">      16
     ?<Constant "Font size = 4">      16
     ?<Constant "Save as:">           12
     ?<Constant "Edit text">          12
     ?<Constant "Can\'t seek in tempfile!">
                                      24
     ?<Constant "Clear clipboard">    16
     ?<Constant "Paste">               8
     ?<Constant "Insert date">        12
     ?<Constant "Insert time">        12
     ?<Constant "Join lines">         12
     ?<Constant "Split line">         12
     ?<Constant "Insert line">        12
     ?<Constant "+">                   2
     ?<Constant "Back">                8
     ?<Constant "Goto line %u...">    16
     ?<Constant "Select">              8
     ?<Constant "%s%d_%d_%d_%d_%d_%d.tmp">
                                      24
     ?<Constant "TED: %w">             8
     ?<Constant "Font selected!">     16
     ?<Constant "%s%d.fnt">           12
     ?<Constant "Save...">             8
     ?<Constant "Menu">                8
     ?<Constant "%02d-%02d-%04d">     16
     ?<Constant "%02d:%02d">          12
     ?<Constant "Text viewer/editor\nve...">
                                      88
     ?<Constant "">                    1
     ?<Constant "<<EOF>>">             8
     ?<Constant "Line %u...">         12
     ?<Constant "Saving...">          12
     ?<Constant "Time:\n%02d:%02d\nCurre...">
                                      68
     ?<Constant "%sTED.history">      16
     ?<Constant "Can\'t read tempfile!">
                                      24
     ?<Constant "Can\'t write tempfile!">
                                      24
     ?<Constant "Special...">         12
     ?<Constant "Can\'t open tempfile!">
                                      24
     ?<Constant "Can\'t create or write...">
                                      32
     ?<Constant "TED menu">           12
     ?<Constant "Search...">          12
     ?<Constant "Set Bookmark...">    16
     ?<Constant "Goto...">             8
     ?<Constant "Last saved">         12
     ?<Constant "Bottom">              8
     ?<Constant "Percent">             8
     ?<Constant "Line">                8
     ?<Constant "Top">                 4
     ?<Constant "Goto line:">         12
     ?<Constant "Goto percent:">      16
     ?<Constant "General...">         12
     ?<Constant "Save as...">         12
     ?<Constant "Padding on/off">     16
     ?<Constant "WIN format">         12
     ?<Constant "DOS format">         12
      Others                         496

 
 14 260 bytes in segment CODE
  2 126 bytes in segment DATA_C
  1 828 bytes in segment DATA_I
  1 828 bytes in segment DATA_ID
 17 433 bytes in segment DATA_Z
     24 bytes in segment INITTAB
 
 13 788 bytes of CODE  memory (+ 496 bytes shared)
  3 954 bytes of CONST memory
 19 261 bytes of DATA  memory

Errors: none
Warnings: none
