##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.40A/W32 EVALUATION    12/Apr/2007  15:32:12 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\MOBILE\ELFS\MY\PANDEMONIUM_II\conf_loader.c       #
#    Command line    =  D:\MOBILE\ELFS\MY\PANDEMONIUM_II\conf_loader.c -D    #
#                       NEWSGOLD -lC D:\MOBILE\ELFS\MY\PANDEMONIUM_II\Releas #
#                       e_NewSGOLD\List\ -o D:\MOBILE\ELFS\MY\PANDEMONIUM_II #
#                       \Release_NewSGOLD\Obj\ -s9 --no_unroll --cpu_mode    #
#                       arm --endian little --cpu ARM926EJ-S --stack_align   #
#                       4 --interwork -e --fpu None -I                       #
#                       D:\MOBILE\ELFS\IAR\IAR\ARM\INC\                      #
#    List file       =  D:\MOBILE\ELFS\MY\PANDEMONIUM_II\Release_NewSGOLD\Li #
#                       st\conf_loader.lst                                   #
#    Object file     =  D:\MOBILE\ELFS\MY\PANDEMONIUM_II\Release_NewSGOLD\Ob #
#                       j\conf_loader.r79                                    #
#                                                                            #
#                                                                            #
##############################################################################

D:\MOBILE\ELFS\MY\PANDEMONIUM_II\conf_loader.c
      1          #include "..\inc\swilib.h"
      2          #include "..\inc\cfg_items.h"
      3          #include "conf_loader.h"
      4          
      5          #pragma segment="CONFIG_C"
      6          

   \                                 In segment CODE, align 4, keep-with-next
      7          int LoadConfigData(const char *fname)
      8          {
   \                     LoadConfigData:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
      9            int f;
     10            unsigned int ul;
     11            char *buf;
     12            int result=0;
     13            void *cfg;
     14          
     15            extern const CFG_HDR cfghdr0; //first var in CONFIG
     16            cfg=(void*)&cfghdr0;
     17          
     18          //  extern const char _END_OF_CONFIG;
     19            unsigned int len=(int)__segment_end("CONFIG_C")-(int)__segment_begin("CONFIG_C");
   \   00000004   E4609FE5           LDR      R6,??LoadConfigData_0  ;; SFE(CONFIG_C) - SFB(CONFIG_C)
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0050A0E3           MOV      R5,#+0
     20            //unsigned int len=((char*)&_END_OF_CONFIG)-((char*)cfg);
     21          
     22            if (!(buf=malloc(len))) return -1;
   \   00000014   0600A0E1           MOV      R0,R6
   \   00000018   140000EF           SWI      +20
   \   0000001C   0070B0E1           MOVS     R7,R0
   \   00000020   0500E001           MVNEQ    R0,R5
   \   00000024   2F00000A           BEQ      ??LoadConfigData_1
     23            if ((f=fopen(fname,A_ReadOnly+A_BIN,0,&ul))!=-1)
   \   00000028   C4909FE5           LDR      R9,??LoadConfigData_0+0x4  ;; cfghdr0
   \   0000002C   0D30A0E1           MOV      R3,SP
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   801CA0E3           MOV      R1,#+32768
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   0A0000EF           SWI      +10
   \   00000040   0080A0E1           MOV      R8,R0
   \   00000044   05A0E0E1           MVN      R10,R5
   \   00000048   0A0058E1           CMP      R8,R10
   \   0000004C   1000000A           BEQ      ??LoadConfigData_2
     24            {
     25              if (fread(f,buf,len,&ul)==len)
   \   00000050   0D30A0E1           MOV      R3,SP
   \   00000054   0620A0E1           MOV      R2,R6
   \   00000058   0710A0E1           MOV      R1,R7
   \   0000005C   0B0000EF           SWI      +11
   \   00000060   060050E1           CMP      R0,R6
   \   00000064   0700001A           BNE      ??LoadConfigData_3
     26              {
     27                memcpy(cfg,buf,len);
   \   00000068   0620A0E1           MOV      R2,R6
   \   0000006C   0710A0E1           MOV      R1,R7
   \   00000070   0900A0E1           MOV      R0,R9
   \   00000074   1E0100EF           SWI      +286
     28                fclose(f,&ul);
   \                     ??LoadConfigData_4:
   \   00000078   0D10A0E1           MOV      R1,SP
   \   0000007C   0800A0E1           MOV      R0,R8
   \   00000080   0D0000EF           SWI      +13
   \   00000084   140000EA           B        ??LoadConfigData_5
     29              }
     30              else
     31              {
     32                fclose(f,&ul);
   \                     ??LoadConfigData_3:
   \   00000088   0D10A0E1           MOV      R1,SP
   \   0000008C   0800A0E1           MOV      R0,R8
   \   00000090   0D0000EF           SWI      +13
     33                goto L_SAVENEWCFG;
     34              }
     35            }
     36            else
     37            {
     38            L_SAVENEWCFG:
     39              if ((f=fopen(fname,A_ReadWrite+A_Create+A_Truncate,P_READ+P_WRITE,&ul))!=-1)
   \                     ??LoadConfigData_2:
   \   00000094   0D30A0E1           MOV      R3,SP
   \   00000098   602FA0E3           MOV      R2,#+384
   \   0000009C   0210A0E3           MOV      R1,#+2
   \   000000A0   C01F81E3           ORR      R1,R1,#0x300
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   0A0000EF           SWI      +10
   \   000000AC   0080A0E1           MOV      R8,R0
   \   000000B0   0A0058E1           CMP      R8,R10
   \   000000B4   0700000A           BEQ      ??LoadConfigData_6
     40              {
     41                if (fwrite(f,cfg,len,&ul)!=len) result=-1;
   \   000000B8   0D30A0E1           MOV      R3,SP
   \   000000BC   0620A0E1           MOV      R2,R6
   \   000000C0   0910A0E1           MOV      R1,R9
   \   000000C4   0C0000EF           SWI      +12
   \   000000C8   060050E1           CMP      R0,R6
   \   000000CC   E9FFFF0A           BEQ      ??LoadConfigData_4
   \   000000D0   0A50A0E1           MOV      R5,R10
     42                fclose(f,&ul);
   \   000000D4   E7FFFFEA           B        ??LoadConfigData_4
     43              }
     44              else
     45                result=-1;
   \                     ??LoadConfigData_6:
   \   000000D8   0A50A0E1           MOV      R5,R10
     46            }
     47            mfree(buf);
   \                     ??LoadConfigData_5:
   \   000000DC   0700A0E1           MOV      R0,R7
   \   000000E0   150000EF           SWI      +21
     48            return(result);
   \   000000E4   0500A0E1           MOV      R0,R5
   \                     ??LoadConfigData_1:
   \   000000E8   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000EC   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??LoadConfigData_0:
   \   000000F0   ........           DC32     SFE(CONFIG_C) - SFB(CONFIG_C)
   \   000000F4   ........           DC32     cfghdr0
     49          }
     50          

   \                                 In segment CODE, align 4, keep-with-next
     51          void InitConfig()
     52          {
   \                     InitConfig:
   \   00000000   10402DE9           PUSH     {R4,LR}
     53            if (LoadConfigData("4:\\ZBin\\etc\\pandemonium2.bcfg")<0)
   \   00000004   18409FE5           LDR      R4,??InitConfig_0  ;; `?<Constant "0:\\\\ZBin\\\\etc\\\\pandemoni...">`
   \   00000008   200084E2           ADD      R0,R4,#+32
   \   0000000C   ........           BL       LoadConfigData
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1080BD58           POPPL    {R4,PC}
     54            {
     55              LoadConfigData("0:\\ZBin\\etc\\pandemonium2.bcfg");
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000020   ........           B        LoadConfigData   ;; tailcall
   \                     ??InitConfig_0:
   \   00000024   ........           DC32     `?<Constant "0:\\\\ZBin\\\\etc\\\\pandemoni...">`
     56            }
     57          }

   \                                 In segment CONFIG_C, align 1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0:\\\\ZBin\\\\etc\\\\pandemoni...">`:
   \   00000000   303A5C5A4269       DC8 "0:\\ZBin\\etc\\pandemonium2.bcfg"
   \              6E5C6574635C
   \              70616E64656D
   \              6F6E69756D32
   \              2E6263666700
   \   0000001E   0000               DC8 0, 0
   \   00000020   343A5C5A4269       DC8 "4:\\ZBin\\etc\\pandemonium2.bcfg"
   \              6E5C6574635C
   \              70616E64656D
   \              6F6E69756D32
   \              2E6263666700
   \   0000003E   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function       CSTACK
     --------       ------
     InitConfig         8
     LoadConfigData    36


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     LoadConfigData                  248
     InitConfig                       40
     ?<Constant "0:\\ZBin\\etc\\pandemoni...">
                                      64
      Others                           8

 
 296 bytes in segment CODE
  64 bytes in segment DATA_C
 
 288 bytes of CODE  memory (+ 8 bytes shared)
  64 bytes of CONST memory

Errors: none
Warnings: none
