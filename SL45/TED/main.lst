C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:   1
main

 LOC CODE        LINE   SOURCELINE

                     1   ; C166/ST10 C compiler v7.5 r2            SN00123412-435 (c) 2001 TASKING, Inc.
                     2   ; options: -e -Id:\c166\include -xmifp -DCPUTYPE=0x167 -FSC -Ob -znocustack
                     3   ;          -zautobitastruct-4 -zautobita-0 -T256 -s -zvolatile_union -u
                     4   ;          -AcdFiklmpstuVx -OAcdFghjkLnoprSUx -Ml
                     5   $EXTEND
                     6   $NOMOD166
                     7   $STDNAMES(reg.def)
                     8   $SEGMENTED
                     9   $CASE
                    10   $MODEL(LARGE)
                    11           NAME    MAIN_C
                    12           ASSUME  DPP3:SYSTEM
                    13   ; main.c      1 #include "sl45.h"
                    14   ; main.c      2 #include "reg167.h"
                    15   ; main.c      3 
                    16   ; main.c      4 /*unsigned long far tmr1;
                    17   ; main.c      5 
                    18   ; main.c      6 void dummy_timer(void)
                    19   ; main.c      7 {
                    20   ; main.c      8  static const STR estr[]=
                    21   ; main.c      9  {
                    22   ; main.c     10   "See you later!"
                    23   ; main.c     11  };
                    24   ; main.c     12  SendMessage((void far *)0x3B5E8,0x90,0);
                    25   ; main.c     13  //SendMessage((void far *)0x3B5E8,0x88,0);
                    26   ; main.c     14  setExtSIDTable(estr);
                    27   ; main.c     15  DisplayMessageBoxV(1,0xE27);
                    28   ; main.c     16  DisableTimerX(&tmr1);
                    29   ; main.c     17 }*/
                    30   ; main.c     18 
                    31   ; main.c     19 unsigned int far terminated; //Признак закрытия диалога
                    32   MAIN_1_FB       SECTION DATA WORD PUBLIC 'CFAR'
0000                33   MAIN_1_FB_ENTRY LABEL   BYTE
0000                34   _terminated     LABEL   WORD
0000                35           DS      2
                    36           PUBLIC  _terminated
                    37   ; main.c     20 int far dia_id;
0002                38   _dia_id LABEL   WORD
0002                39           DS      2
                    40           PUBLIC  _dia_id
                    41   ; main.c     21 unsigned int far editmode;
0004                42   _editmode       LABEL   WORD
0004                43           DS      2
                    44           PUBLIC  _editmode
                    45   ; main.c     22 
                    46   ; main.c     23 void sd_oncreate(void){doBack0A();}
                    47           PUBLIC  _sd_oncreate
                    48   MAIN_1_FB       ENDS
                    49   
                    50   MAIN_2_PR       SECTION CODE WORD PUBLIC 'CPROGRAM'
                    51   _sd_oncreate    PROC    FAR
                    52   ; Locals:
                    53   ; 
                    54   ; Statics:
                    55   ; 
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:   2
main

 LOC CODE        LINE   SOURCELINE

                    56   ; CSEs:
                    57   ; 
0000 FA000000  R    58           JMPS    SEG _doBack0A,_doBack0A
                    59           RETV
                    60   _sd_oncreate    ENDP
                    61   ; main.c     24 void sd_onkey(void){}
                    62           PUBLIC  _sd_onkey
                    63   _sd_onkey       PROC    FAR
                    64   ; Locals:
                    65   ; 
                    66   ; Statics:
                    67   ; 
                    68   ; CSEs:
                    69   ; 
0004 DB00           70           RETS
                    71   _sd_onkey       ENDP
                    72   ; main.c     25 void sd_oninit(void){}
                    73           PUBLIC  _sd_oninit
                    74   _sd_oninit      PROC    FAR
                    75   ; Locals:
                    76   ; 
                    77   ; Statics:
                    78   ; 
                    79   ; CSEs:
                    80   ; 
0006 DB00           81           RETS
                    82   _sd_oninit      ENDP
                    83   ; main.c     26 void sd_onexit1(void){}
                    84           PUBLIC  _sd_onexit1
                    85   _sd_onexit1     PROC    FAR
                    86   ; Locals:
                    87   ; 
                    88   ; Statics:
                    89   ; 
                    90   ; CSEs:
                    91   ; 
0008 DB00           92           RETS
                    93   _sd_onexit1     ENDP
                    94   ; main.c     27 void sd_onexit2(void){}
                    95           PUBLIC  _sd_onexit2
                    96   _sd_onexit2     PROC    FAR
                    97   ; Locals:
                    98   ; 
                    99   ; Statics:
                   100   ; 
                   101   ; CSEs:
                   102   ; 
000A DB00          103           RETS
                   104   _sd_onexit2     ENDP
                   105   ; main.c     28 static const struct DIALOG sdialog={sd_onkey,sd_oninit,sd_onexit1,sd_onexit2,sd_oncreate,0x
                         10,0xc4};
                   106   MAIN_2_PR       ENDS
                   107   
                   108   MAIN_3_FC       SECTION DATA WORD PUBLIC 'CFARROM'
0000               109   _sdialog        LABEL   WORD
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:   3
main

 LOC CODE        LINE   SOURCELINE

0000 00000000  R   110           DSPTR   _sd_onkey,_sd_oninit,_sd_onexit1,_sd_onexit2,_sd_oncreate
0004 00000000  R 
0008 00000000  R 
000C 00000000  R 
0010 00000000    
0014 1000C400      111           DW      010h,0C4h
                   112   ; main.c     29 
                   113   ; main.c     30 volatile int far stk_fhandle;
                   114   MAIN_3_FC       ENDS
                   115   
                   116   MAIN_1_FB       SECTION DATA
0006               117   _stk_fhandle    LABEL   WORD
0006               118           DS      2
                   119           PUBLIC  _stk_fhandle
                   120   ; main.c     31 
                   121   ; main.c     32 //Флаг необходимости перерисовать экран
                   122   ; main.c     33 volatile unsigned char far draw_mode;
0008               123   _draw_mode      LABEL   BYTE
0008               124           DS      1
                   125           PUBLIC  _draw_mode
                   126   ; main.c     34 volatile unsigned char far font_size;
0009               127   _font_size      LABEL   BYTE
0009               128           DS      1
                   129           PUBLIC  _font_size
                   130   ; main.c     35 
                   131   ; main.c     36 volatile unsigned int far clip_pasted;
000A               132   _clip_pasted    LABEL   WORD
000A               133           DS      2
                   134           PUBLIC  _clip_pasted
                   135   ; main.c     37 
                   136   ; main.c     38 void md_onCreate(void)
                   137   ; main.c     39 {
                   138           PUBLIC  _md_onCreate
                   139   MAIN_1_FB       ENDS
                   140   
                   141   MAIN_2_PR       SECTION CODE
                   142   _md_onCreate    PROC    FAR
000C 26F01000      143           SUB     R0,#010h
                   144   ; Locals:
                   145   ;     mmm = offset 0
                   146   ; 
                   147   ; Statics:
                   148   ; 
                   149   ; CSEs:
                   150   ; 
                   151   ; main.c     40  char mmm[0x10];
                   152   ; main.c     41  void DrawScreen(void);
                   153   ; main.c     42  void FirstLoadFile(unsigned int fmt);
                   154   ; main.c     43 
                   155   ; main.c     44  pShowDialog(&sdialog,mmm); //Псевдо-диалог
0010 E6FC0000  R   156           MOV     R12,#POF _sdialog
0014 E6FD0000  R   157           MOV     R13,#PAG _sdialog
0018 F0E0          158           MOV     R14,R0
001A 66FEFF3F      159           AND     R14,#03FFFh
001E F2FF02FE      160           MOV     R15,DPP1
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:   4
main

 LOC CODE        LINE   SOURCELINE

0022 DA000000  R   161           CALLS   SEG _pShowDialog,_pShowDialog
                   162   ; main.c     45  //Запрещаем IDLE таймер
                   163   ; main.c     46  OnTimer1();
0026 DA000000  R   164           CALLS   SEG _OnTimer1,_OnTimer1
                   165   ; main.c     47  OnTimer2();
002A DA000000  R   166           CALLS   SEG _OnTimer2,_OnTimer2
                   167   ; main.c     48  DrawScreen();
002E DA009A0F  R   168           CALLS   SEG _DrawScreen,_DrawScreen
                   169   ; main.c     49  if (terminated==2)
0032 E6000000  R   170           MOV     DPP0,#PAG _terminated
0036 CC00          171           NOP
0038 F2FC0000  R   172           MOV     R12,POF _terminated
003C 48C2          173           CMP     R12,#02h
003E 3D06          174           JMPR    cc_NE,_3
                   175   ; main.c     50  {
                   176   ; main.c     51   terminated=0;
0040 F68E0000  R   177           MOV     POF _terminated,ZEROS
                   178   ; main.c     52   draw_mode=1;
0044 E112          179           MOVB    RL1,#01h
0046 F7F20000  R   180           MOVB    POF _draw_mode,RL1
                   181   ; main.c     53  }
004A 0D08          182           JMPR    cc_UC,_4
004C               183   _3:
                   184   ; main.c     54  else
                   185   ; main.c     55  {
                   186   ; main.c     56   FilesysICall_UI(FirstLoadFile,0xFFFF); //С поиском в истории и вызовом меню, если нет
004C E6FC0000  R   187           MOV     R12,#SOF _FirstLoadFile
0050 E6FD0000  R   188           MOV     R13,#SEG _FirstLoadFile
0054 E6FEFFFF      189           MOV     R14,#0FFFFh
0058 DA000000  R   190           CALLS   SEG _FilesysICall_UI,_FilesysICall_UI
                   191   ; main.c     57  }
005C               192   _4:
                   193   ; main.c     58 }
005C 06F01000      194           ADD     R0,#010h
0060 DB00          195           RETS
                   196   _md_onCreate    ENDP
                   197   ; main.c     59 
                   198   ; main.c     60 void md_onClose(void)
                   199   ; main.c     61 {
                   200           PUBLIC  _md_onClose
                   201   _md_onClose     PROC    FAR
                   202   ; Locals:
                   203   ; 
                   204   ; Statics:
                   205   ; 
                   206   ; CSEs:
                   207   ; 
                   208   ; main.c     62  void SaveHistory(void);
                   209   ; main.c     63  editmode=0;
0062 E6000000  R   210           MOV     DPP0,#PAG _editmode
0066 E01C          211           MOV     R12,#01h
0068 F68E0000  R   212           MOV     POF _editmode,ZEROS
                   213   ; main.c     64  terminated=1;
006C F6FC0000  R   214           MOV     POF _terminated,R12
                   215   ; main.c     65  FilesysICall(SaveHistory);
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:   5
main

 LOC CODE        LINE   SOURCELINE

0070 E6FC0000  R   216           MOV     R12,#SOF _SaveHistory
0074 E6FD0000  R   217           MOV     R13,#SEG _SaveHistory
0078 FA000000  R   218           JMPS    SEG _FilesysICall,_FilesysICall
                   219   ; main.c     66  //StartTimer2(&tmr1,100,dummy_timer);
                   220   ; main.c     67 }
                   221           RETV
                   222   _md_onClose     ENDP
                   223   ; main.c     68 
                   224   ; main.c     69 int md_onKey(void far *data, struct MSG far *Msg);
                   225   ; main.c     70 
                   226   ; main.c     71 static const unsigned int md_tab[]={0xFFF5};
                   227   MAIN_2_PR       ENDS
                   228   
                   229   MAIN_3_FC       SECTION DATA
0018               230   _md_tab LABEL   WORD
0018 F5FF          231           DW      0FFF5h
                   232   ; main.c     72 
                   233   ; main.c     73 static const struct DIALOG_WSK main_dia=
001A               234   _main_dia       LABEL   WORD
001A 00000000  R   235           DSPTR   _md_onKey,_md_onCreate,_md_onClose
001E 00000000  R 
0022 00000000    
0026 2C000100      236           DW      02Ch,01h
002A 00000000  R   237           DPPTR   _md_tab
                   238   ; main.c     74 {
                   239   ; main.c     75  md_onKey,
                   240   ; main.c     76  md_onCreate,
                   241   ; main.c     77  md_onClose,
                   242   ; main.c     78  0x2C,
                   243   ; main.c     79  sizeof(md_tab)/sizeof(unsigned int),
                   244   ; main.c     80  md_tab
                   245   ; main.c     81 };
                   246   ; main.c     82 
                   247   ; main.c     83 static const char bmpDiskAccess[8]={0xFC,0x86,0xB3,0xA9,0xB1,0xA9,0x81,0xFF};
002E               248   _bmpDiskAccess  LABEL   BYTE
002E FC86B3A9      249           DB      0FCh,086h,0B3h,0A9h,0B1h
0032 B1          
0033 A981FF        250           DB      0A9h,081h,0FFh
                   251   ; main.c     84 static const struct ImageHdr far imgDiskAccess = {8,8,0x1,bmpDiskAccess};
0036               252   _imgDiskAccess  LABEL   WORD
0036 0808          253           DB      08h,08h
0038 0100          254           DW      01h
003A 00000000  R   255           DPPTR   _bmpDiskAccess
                   256   ; main.c     85 
                   257   ; main.c     86 //Указатель блока в верхнем стеке
                   258   ; main.c     87 int far u_disk; //Дисковый указатель верхнего стека (в блоках по STKSZ50)
                   259   MAIN_3_FC       ENDS
                   260   
                   261   MAIN_1_FB       SECTION DATA
000C               262   _u_disk LABEL   WORD
000C               263           DS      2
                   264           PUBLIC  _u_disk
                   265   ; main.c     88 //Указатель блока в нижнем стеке
                   266   ; main.c     89 int far d_disk; //Дисковый указатель нижнего стека (в блоках по STKSZ50)
000E               267   _d_disk LABEL   WORD
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:   6
main

 LOC CODE        LINE   SOURCELINE

000E               268           DS      2
                   269           PUBLIC  _d_disk
                   270   ; main.c     90 
                   271   ; main.c     91 unsigned int far usp; //Указатель на верхний стек
0010               272   _usp    LABEL   WORD
0010               273           DS      2
                   274           PUBLIC  _usp
                   275   ; main.c     92 unsigned int far dsp; //Указатель на нижний стек
0012               276   _dsp    LABEL   WORD
0012               277           DS      2
                   278           PUBLIC  _dsp
                   279   ; main.c     93 
                   280   ; main.c     94 //Флаг работы с диском
                   281   ; main.c     95 #define FIRSTLOAD 1
                   282   ; main.c     96 #define LOAD_UP 2
                   283   ; main.c     97 #define LOAD_DOWN 4
                   284   ; main.c     98 #define SAVE_UP 8
                   285   ; main.c     99 #define SAVE_DOWN 16
                   286   ; main.c    100 #define SAVE_FILE 32
                   287   ; main.c    101 
                   288   ; main.c    102 unsigned char far disk_access;
0014               289   _disk_access    LABEL   BYTE
0014               290           DS      1
                   291           PUBLIC  _disk_access
                   292   ; main.c    103 
                   293   ; main.c    104 volatile unsigned char far cursor_cnt;
0015               294   _cursor_cnt     LABEL   BYTE
0015               295           DS      1
                   296           PUBLIC  _cursor_cnt
                   297   ; main.c    105 volatile unsigned char far disable_exit;
0016               298   _disable_exit   LABEL   BYTE
0016               299           DS      1
                   300           PUBLIC  _disable_exit
                   301   ; main.c    106 
                   302   ; main.c    107 volatile unsigned char far win_dos_koi;
0017               303   _win_dos_koi    LABEL   BYTE
0017               304           DS      1
                   305           PUBLIC  _win_dos_koi
                   306   ; main.c    108 unsigned char far cursor_off;
0018               307   _cursor_off     LABEL   BYTE
0018               308           DS      1
                   309           PUBLIC  _cursor_off
                   310   ; main.c    109 
                   311   ; main.c    110 const unsigned char clipfile[64]="A:\\Trash\\TED.clipb";
                   312   MAIN_1_FB       ENDS
                   313   
                   314   MAIN_3_FC       SECTION DATA
003E               315   _clipfile       LABEL   BYTE
003E 413A5C54      316           DB      041h,03Ah,05Ch,054h,072h
0042 72          
0043 6173685C      317           DB      061h,073h,068h,05Ch,054h
0047 54          
0048 45442E63      318           DB      045h,044h,02Eh,063h,06Ch
004C 6C          
004D 69706200      319           DB      069h,070h,062h,00h,00h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:   7
main

 LOC CODE        LINE   SOURCELINE

0051 00          
0052 00000000      320           DB      00h,00h,00h,00h,00h
0056 00          
0057 00000000      321           DB      00h,00h,00h,00h,00h
005B 00          
005C 00000000      322           DB      00h,00h,00h,00h,00h
0060 00          
0061 00000000      323           DB      00h,00h,00h,00h,00h
0065 00          
0066 00000000      324           DB      00h,00h,00h,00h,00h
006A 00          
006B 00000000      325           DB      00h,00h,00h,00h,00h
006F 00          
0070 00000000      326           DB      00h,00h,00h,00h,00h
0074 00          
0075 00000000      327           DB      00h,00h,00h,00h,00h
0079 00          
007A 00000000      328           DB      00h,00h,00h,00h
                   329           PUBLIC  _clipfile
                   330   ; main.c    111 const unsigned char stkfile[64]="A:\\Trash\\TED.tmp";
007E               331   _stkfile        LABEL   BYTE
007E 413A5C54      332           DB      041h,03Ah,05Ch,054h,072h
0082 72          
0083 6173685C      333           DB      061h,073h,068h,05Ch,054h
0087 54          
0088 45442E74      334           DB      045h,044h,02Eh,074h,06Dh
008C 6D          
008D 70000000      335           DB      070h,00h,00h,00h,00h
0091 00          
0092 00000000      336           DB      00h,00h,00h,00h,00h
0096 00          
0097 00000000      337           DB      00h,00h,00h,00h,00h
009B 00          
009C 00000000      338           DB      00h,00h,00h,00h,00h
00A0 00          
00A1 00000000      339           DB      00h,00h,00h,00h,00h
00A5 00          
00A6 00000000      340           DB      00h,00h,00h,00h,00h
00AA 00          
00AB 00000000      341           DB      00h,00h,00h,00h,00h
00AF 00          
00B0 00000000      342           DB      00h,00h,00h,00h,00h
00B4 00          
00B5 00000000      343           DB      00h,00h,00h,00h,00h
00B9 00          
00BA 00000000      344           DB      00h,00h,00h,00h
                   345           PUBLIC  _stkfile
                   346   ; main.c    112 const unsigned char snapshootfile[64]="A:\\Trash\\TED.snapshoot";
00BE               347   _snapshootfile  LABEL   BYTE
00BE 413A5C54      348           DB      041h,03Ah,05Ch,054h,072h
00C2 72          
00C3 6173685C      349           DB      061h,073h,068h,05Ch,054h
00C7 54          
00C8 45442E73      350           DB      045h,044h,02Eh,073h,06Eh
00CC 6E          
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:   8
main

 LOC CODE        LINE   SOURCELINE

00CD 61707368      351           DB      061h,070h,073h,068h,06Fh
00D1 6F          
00D2 6F740000      352           DB      06Fh,074h,00h,00h,00h
00D6 00          
00D7 00000000      353           DB      00h,00h,00h,00h,00h
00DB 00          
00DC 00000000      354           DB      00h,00h,00h,00h,00h
00E0 00          
00E1 00000000      355           DB      00h,00h,00h,00h,00h
00E5 00          
00E6 00000000      356           DB      00h,00h,00h,00h,00h
00EA 00          
00EB 00000000      357           DB      00h,00h,00h,00h,00h
00EF 00          
00F0 00000000      358           DB      00h,00h,00h,00h,00h
00F4 00          
00F5 00000000      359           DB      00h,00h,00h,00h,00h
00F9 00          
00FA 00000000      360           DB      00h,00h,00h,00h
                   361           PUBLIC  _snapshootfile
                   362   ; main.c    113 const unsigned char historyfile[64]="A:\\TED\\history";
00FE               363   _historyfile    LABEL   BYTE
00FE 413A5C54      364           DB      041h,03Ah,05Ch,054h,045h
0102 45          
0103 445C6869      365           DB      044h,05Ch,068h,069h,073h
0107 73          
0108 746F7279      366           DB      074h,06Fh,072h,079h,00h
010C 00          
010D 00000000      367           DB      00h,00h,00h,00h,00h
0111 00          
0112 00000000      368           DB      00h,00h,00h,00h,00h
0116 00          
0117 00000000      369           DB      00h,00h,00h,00h,00h
011B 00          
011C 00000000      370           DB      00h,00h,00h,00h,00h
0120 00          
0121 00000000      371           DB      00h,00h,00h,00h,00h
0125 00          
0126 00000000      372           DB      00h,00h,00h,00h,00h
012A 00          
012B 00000000      373           DB      00h,00h,00h,00h,00h
012F 00          
0130 00000000      374           DB      00h,00h,00h,00h,00h
0134 00          
0135 00000000      375           DB      00h,00h,00h,00h,00h
0139 00          
013A 00000000      376           DB      00h,00h,00h,00h
                   377           PUBLIC  _historyfile
                   378   ; main.c    114 const unsigned char fntfilename[64]="A:\\TED\\%d.fnt";
013E               379   _fntfilename    LABEL   BYTE
013E 413A5C54      380           DB      041h,03Ah,05Ch,054h,045h
0142 45          
0143 445C2564      381           DB      044h,05Ch,025h,064h,02Eh
0147 2E          
0148 666E7400      382           DB      066h,06Eh,074h,00h,00h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:   9
main

 LOC CODE        LINE   SOURCELINE

014C 00          
014D 00000000      383           DB      00h,00h,00h,00h,00h
0151 00          
0152 00000000      384           DB      00h,00h,00h,00h,00h
0156 00          
0157 00000000      385           DB      00h,00h,00h,00h,00h
015B 00          
015C 00000000      386           DB      00h,00h,00h,00h,00h
0160 00          
0161 00000000      387           DB      00h,00h,00h,00h,00h
0165 00          
0166 00000000      388           DB      00h,00h,00h,00h,00h
016A 00          
016B 00000000      389           DB      00h,00h,00h,00h,00h
016F 00          
0170 00000000      390           DB      00h,00h,00h,00h,00h
0174 00          
0175 00000000      391           DB      00h,00h,00h,00h,00h
0179 00          
017A 00000000      392           DB      00h,00h,00h,00h
                   393           PUBLIC  _fntfilename
                   394   ; main.c    115 
                   395   ; main.c    116 //Строка, на которую надо установить позицию в самом начале
                   396   ; main.c    117 unsigned long far seek_to_line;
                   397   MAIN_3_FC       ENDS
                   398   
                   399   MAIN_1_FB       SECTION DATA
0019               400           EVEN
001A               401   _seek_to_line   LABEL   WORD
001A               402           DS      4
                   403           PUBLIC  _seek_to_line
                   404   ; main.c    118 //Общее количество строк
                   405   ; main.c    119 unsigned long far total_line;
001E               406   _total_line     LABEL   WORD
001E               407           DS      4
                   408           PUBLIC  _total_line
                   409   ; main.c    120 //Номер текущей строки (курсор)
                   410   ; main.c    121 unsigned long far curline;
0022               411   _curline        LABEL   WORD
0022               412           DS      4
                   413           PUBLIC  _curline
                   414   ; main.c    122 //Текущий символ для редактирования (курсор)
                   415   ; main.c    123 unsigned int far curpos;
0026               416   _curpos LABEL   WORD
0026               417           DS      2
                   418           PUBLIC  _curpos
                   419   ; main.c    124 //Номер верхней отображаемой строки
                   420   ; main.c    125 unsigned long far viewline;
0028               421   _viewline       LABEL   WORD
0028               422           DS      4
                   423           PUBLIC  _viewline
                   424   ; main.c    126 //Номер самого левого отображаемого символа
                   425   ; main.c    127 unsigned int far viewpos;
002C               426   _viewpos        LABEL   WORD
002C               427           DS      2
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  10
main

 LOC CODE        LINE   SOURCELINE

                   428           PUBLIC  _viewpos
                   429   ; main.c    128 
                   430   ; main.c    129 unsigned int far max_y;
002E               431   _max_y  LABEL   WORD
002E               432           DS      2
                   433           PUBLIC  _max_y
                   434   ; main.c    130 unsigned int far max_x;
0030               435   _max_x  LABEL   WORD
0030               436           DS      2
                   437           PUBLIC  _max_x
                   438   ; main.c    131 
                   439   ; main.c    132 //---------------------------------
                   440   ; main.c    133 // Состояние конвертора
                   441   ; main.c    134 //---------------------------------
                   442   ; main.c    135 unsigned int far CSM;
0032               443   _CSM    LABEL   WORD
0032               444           DS      2
                   445           PUBLIC  _CSM
                   446   ; main.c    136 //Символ конца строки в конверторе
                   447   ; main.c    137 unsigned int far eolsymb;
0034               448   _eolsymb        LABEL   WORD
0034               449           DS      2
                   450           PUBLIC  _eolsymb
                   451   ; main.c    138 
                   452   ; main.c    139 //Прототипы конверторов
                   453   ; main.c    140 unsigned int ConvertFormat(int fin,int fs,int fmt);
                   454   ; main.c    141 unsigned int ConvertSimple(int fin,int fs);
                   455   ; main.c    142 
                   456   ; main.c    143 //Размер стеков
                   457   ; main.c    144 #define STKSZ (16384)
                   458   ; main.c    145 //Размер, при котором происходит запись во временный файл
                   459   ; main.c    146 #define STKMAX (16384-3000)
                   460   ; main.c    147 //Размер, при котором происходит чтение из временного файла
                   461   ; main.c    148 #define STKMIN (3000)
                   462   ; main.c    149 //Размер блока во временном файле
                   463   ; main.c    150 #define STKSZ50 (8192)
                   464   ; main.c    151 
                   465   ; main.c    152 #pragma class fb=CFAR1
                   466   ; main.c    153 unsigned char ustk[STKSZ]; //верхний стек строк
                   467   MAIN_1_FB       ENDS
                   468   
                   469   MAIN_4_FB       SECTION DATA WORD PUBLIC 'CFAR1'
0000               470   MAIN_4_FB_ENTRY LABEL   BYTE
0000               471   _ustk   LABEL   BYTE
0000               472           DS      16384
                   473           PUBLIC  _ustk
                   474   ; main.c    154 unsigned char dstk[STKSZ]; //нижний стек строк, строки хранятся в обратном порядке
                   475   MAIN_4_FB       ENDS
                   476   
                   477   MAIN_5_FB       SECTION DATA WORD PUBLIC 'CFAR1'
0000               478   MAIN_5_FB_ENTRY LABEL   BYTE
0000               479   _dstk   LABEL   BYTE
0000               480           DS      16384
                   481           PUBLIC  _dstk
                   482   ; main.c    155 unsigned char far dbat[256]; //Таблица распределения блоков нижнего стека во временном файл
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  11
main

 LOC CODE        LINE   SOURCELINE

                         е
                   483   MAIN_5_FB       ENDS
                   484   
                   485   MAIN_6_FB       SECTION DATA WORD PUBLIC 'CFAR1'
0000               486   MAIN_6_FB_ENTRY LABEL   BYTE
0000               487   _dbat   LABEL   BYTE
0000               488           DS      256
                   489           PUBLIC  _dbat
                   490   ; main.c    156 unsigned char far ubat[256]; //Таблица распределения блоков верхнего стека во временном фай
                         лe
0100               491   _ubat   LABEL   BYTE
0100               492           DS      256
                   493           PUBLIC  _ubat
                   494   ; main.c    157 unsigned char far bfree[256]; //Таблица занятости блоков (0 - свободен)
0200               495   _bfree  LABEL   BYTE
0200               496           DS      256
                   497           PUBLIC  _bfree
                   498   ; main.c    158 unsigned char far font[2048]; //Буфер для шрифта
0300               499   _font   LABEL   BYTE
0300               500           DS      2048
                   501           PUBLIC  _font
                   502   ; main.c    159 unsigned char far editline[256]; //Буфер для редактирования строки
0B00               503   _editline       LABEL   BYTE
0B00               504           DS      256
                   505           PUBLIC  _editline
                   506   ; main.c    160 unsigned char far filename[128];
0C00               507   _filename       LABEL   BYTE
0C00               508           DS      128
                   509           PUBLIC  _filename
                   510   ; main.c    161 struct 
                   511   ; main.c    162 {
                   512   ; main.c    163  unsigned char name[128]; //Имя файла
                   513   ; main.c    164  unsigned char font; //Размер шрифта
                   514   ; main.c    165  unsigned char fmt; //Тип форматера
                   515   ; main.c    166  unsigned char codepage; //Кодировка
                   516   ; main.c    167  unsigned char cursor_off; //Если 1 - выключен курсор при просмотре
                   517   ; main.c    168  unsigned long line; //Номер строки для перехода
                   518   ; main.c    169  unsigned long total; //Общее количество. Если не совпадает, переход по отношению
                   519   ; main.c    170  unsigned long bookm1;
                   520   ; main.c    171  unsigned long bookm2;
                   521   ; main.c    172  unsigned long bookm3;
                   522   ; main.c    173  unsigned long bookm4;
                   523   ; main.c    174 } far HISTORY;
0C80               524   _HISTORY        LABEL   WORD
0C80               525           DS      156
                   526           PUBLIC  _HISTORY
                   527   ; main.c    175 void huge * far estr_methods[9];
0D1C               528   _estr_methods   LABEL   WORD
0D1C               529           DS      36
                   530           PUBLIC  _estr_methods
                   531   ; main.c    176 
                   532   ; main.c    177 unsigned char far myscr[13*80];
0D40               533   _myscr  LABEL   BYTE
0D40               534           DS      1040
                   535           PUBLIC  _myscr
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  12
main

 LOC CODE        LINE   SOURCELINE

                   536   ; main.c    178 
                   537   ; main.c    179 //typedef huge void p_redraw(void far *data);
                   538   ; main.c    180 //p_redraw * far old_estr_redraw;
                   539   ; main.c    181 
                   540   ; main.c    182 #pragma default_attributes
                   541   ; main.c    183 
                   542   ; main.c    184 static const struct ImageHdr far MyScrHdr = {101,80,0x1,myscr};
                   543   MAIN_6_FB       ENDS
                   544   
                   545   MAIN_3_FC       SECTION DATA
017E               546   _MyScrHdr       LABEL   WORD
017E 6550          547           DB      065h,050h
0180 0100          548           DW      01h
0182 00000000  R   549           DPPTR   _myscr
                   550   ; main.c    185 
                   551   ; main.c    186 const far char wintranslation[128]=
0186               552   _wintranslation LABEL   BYTE
0186 5F5F275F      553           DB      05Fh,05Fh,027h,05Fh,022h
018A 22          
018B 3AC5D85F      554           DB      03Ah,0C5h,0D8h,05Fh,025h
018F 25          
0190 5F3C5F5F      555           DB      05Fh,03Ch,05Fh,05Fh,05Fh
0194 5F          
0195 5F5F2727      556           DB      05Fh,05Fh,027h,027h,022h
0199 22          
019A 22072D2D      557           DB      022h,07h,02Dh,02Dh,05Fh
019E 5F          
019F 545F3E5F      558           DB      054h,05Fh,03Eh,05Fh,05Fh
01A3 5F          
01A4 5F5FFFF6      559           DB      05Fh,05Fh,0FFh,0F6h,0F7h
01A8 F7          
01A9 5FFD83B3      560           DB      05Fh,0FDh,083h,0B3h,015h
01AD 15          
01AE F063F23C      561           DB      0F0h,063h,0F2h,03Ch,0BFh
01B2 BF          
01B3 2D52F4F8      562           DB      02Dh,052h,0F4h,0F8h,02Bh
01B7 2B          
01B8 4969A3E7      563           DB      049h,069h,0A3h,0E7h,014h
01BC 14          
01BD FAF1FCF3      564           DB      0FAh,0F1h,0FCh,0F3h,03Eh
01C1 3E          
01C2 5F5F5FF5      565           DB      05Fh,05Fh,05Fh,0F5h,080h
01C6 80          
01C7 81828384      566           DB      081h,082h,083h,084h,085h
01CB 85          
01CC 86878889      567           DB      086h,087h,088h,089h,08Ah
01D0 8A          
01D1 8B8C8D8E      568           DB      08Bh,08Ch,08Dh,08Eh,08Fh
01D5 8F          
01D6 90919293      569           DB      090h,091h,092h,093h,094h
01DA 94          
01DB 95969798      570           DB      095h,096h,097h,098h,099h
01DF 99          
01E0 9A9B9C9D      571           DB      09Ah,09Bh,09Ch,09Dh,09Eh
01E4 9E          
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  13
main

 LOC CODE        LINE   SOURCELINE

01E5 9FA0A1A2      572           DB      09Fh,0A0h,0A1h,0A2h,0A3h
01E9 A3          
01EA A4A5A6A7      573           DB      0A4h,0A5h,0A6h,0A7h,0A8h
01EE A8          
01EF A9AAABAC      574           DB      0A9h,0AAh,0ABh,0ACh,0ADh
01F3 AD          
01F4 AEAFE0E1      575           DB      0AEh,0AFh,0E0h,0E1h,0E2h
01F8 E2          
01F9 E3E4E5E6      576           DB      0E3h,0E4h,0E5h,0E6h,0E7h
01FD E7          
01FE E8E9EAEB      577           DB      0E8h,0E9h,0EAh,0EBh,0ECh
0202 EC          
0203 EDEEEF        578           DB      0EDh,0EEh,0EFh
                   579           PUBLIC  _wintranslation
                   580   ; main.c    187 {
                   581   ; main.c    188  0x5F,0x5F,0x27,0x5F,0x22,0x3A,0xC5,0xD8,0x5F,0x25,0x5F,0x3C,0x5F,0x5F,0x5F,0x5F,
                   582   ; main.c    189  0x5F,0x27,0x27,0x22,0x22,0x07,0x2D,0x2D,0x5F,0x54,0x5F,0x3E,0x5F,0x5F,0x5F,0x5F,
                   583   ; main.c    190  0xFF,0xF6,0xF7,0x5F,0xFD,0x83,0xB3,0x15,0xF0,0x63,0xF2,0x3C,0xBF,0x2D,0x52,0xF4,
                   584   ; main.c    191  0xF8,0x2B,'I' ,'i' ,0xA3,0xE7,0x14,0xFA,0xF1,0xFC,0xF3,0x3E,0x5F,0x5F,0x5F,0xF5,
                   585   ; main.c    192  0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,
                   586   ; main.c    193  0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,
                   587   ; main.c    194  0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,
                   588   ; main.c    195  0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF
                   589   ; main.c    196 };
                   590   ; main.c    197 
                   591   ; main.c    198 const far char koi8translation[128]=
0206               592   _koi8translation        LABEL   BYTE
0206 5F5F275F      593           DB      05Fh,05Fh,027h,05Fh,022h
020A 22          
020B 3AC5D85F      594           DB      03Ah,0C5h,0D8h,05Fh,025h
020F 25          
0210 5F3C5F5F      595           DB      05Fh,03Ch,05Fh,05Fh,05Fh
0214 5F          
0215 5F5F2727      596           DB      05Fh,05Fh,027h,027h,022h
0219 22          
021A 22072D2D      597           DB      022h,07h,02Dh,02Dh,05Fh
021E 5F          
021F 545F3E5F      598           DB      054h,05Fh,03Eh,05Fh,05Fh
0223 5F          
0224 5F5FFFF6      599           DB      05Fh,05Fh,0FFh,0F6h,0F7h
0228 F7          
0229 F1F35F69      600           DB      0F1h,0F3h,05Fh,069h,0F5h
022D F5          
022E F063F23C      601           DB      0F0h,063h,0F2h,03Ch,0BFh
0232 BF          
0233 A352F4F8      602           DB      0A3h,052h,0F4h,0F8h,02Bh
0237 2B          
0238 5FF0F2E7      603           DB      05Fh,0F0h,0F2h,0E7h,049h
023C 49          
023D F4F1FCF3      604           DB      0F4h,0F1h,0FCh,0F3h,03Eh
0241 3E          
0242 5F835FF5      605           DB      05Fh,083h,05Fh,0F5h,0EEh
0246 EE          
0247 A0A1E6A4      606           DB      0A0h,0A1h,0E6h,0A4h,0A5h
024B A5          
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  14
main

 LOC CODE        LINE   SOURCELINE

024C E4A3E5A8      607           DB      0E4h,0A3h,0E5h,0A8h,0A9h
0250 A9          
0251 AAABACAD      608           DB      0AAh,0ABh,0ACh,0ADh,0AEh
0255 AE          
0256 AFEFE0E1      609           DB      0AFh,0EFh,0E0h,0E1h,0E2h
025A E2          
025B E3A6A2EC      610           DB      0E3h,0A6h,0A2h,0ECh,0EBh
025F EB          
0260 A7E8EDE9      611           DB      0A7h,0E8h,0EDh,0E9h,0E7h
0264 E7          
0265 EA9E8081      612           DB      0EAh,09Eh,080h,081h,096h
0269 96          
026A 84859483      613           DB      084h,085h,094h,083h,095h
026E 95          
026F 88898A8B      614           DB      088h,089h,08Ah,08Bh,08Ch
0273 8C          
0274 8D8E8F9F      615           DB      08Dh,08Eh,08Fh,09Fh,090h
0278 90          
0279 91929386      616           DB      091h,092h,093h,086h,082h
027D 82          
027E 9C9B8798      617           DB      09Ch,09Bh,087h,098h,09Dh
0282 9D          
0283 99979A        618           DB      099h,097h,09Ah
                   619           PUBLIC  _koi8translation
                   620   ; main.c    199 {
                   621   ; main.c    200  0x5F,0x5F,0x27,0x5F,0x22,0x3A,0xC5,0xD8,0x5F,0x25,0x5F,0x3C,0x5F,0x5F,0x5F,0x5F,
                   622   ; main.c    201  0x5F,0x27,0x27,0x22,0x22,0x07,0x2D,0x2D,0x5F,0x54,0x5F,0x3E,0x5F,0x5F,0x5F,0x5F,
                   623   ; main.c    202  0xFF,0xF6,0xF7,0xF1,0xF3,0x5F,'i' ,0xF5,0xF0,0x63,0xF2,0x3C,0xBF,0xA3,0x52,0xF4,
                   624   ; main.c    203  0xF8,0x2B,0x5F,0xF0,0xF2,0xE7,'I' ,0xF4,0xF1,0xFC,0xF3,0x3E,0x5F,0x83,0x5F,0xF5,
                   625   ; main.c    204 
                   626   ; main.c    205  0xEE,0xA0,0xA1,0xE6,0xA4,0xA5,0xE4,0xA3,0xE5,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,
                   627   ; main.c    206  0xAF,0xEF,0xE0,0xE1,0xE2,0xE3,0xA6,0xA2,0xEC,0xEB,0xA7,0xE8,0xED,0xE9,0xE7,0xEA,
                   628   ; main.c    207  0x9E,0x80,0x81,0x96,0x84,0x85,0x94,0x83,0x95,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,
                   629   ; main.c    208  0x8F,0x9F,0x90,0x91,0x92,0x93,0x86,0x82,0x9C,0x9B,0x87,0x98,0x9D,0x99,0x97,0x9A
                   630   ; main.c    209 };
                   631   ; main.c    210 
                   632   ; main.c    211 const far unsigned int dos2unicode[128]=
0286               633   _dos2unicode    LABEL   WORD
0286 10041104      634           DW      0410h,0411h,0412h,0413h,0414h
028A 12041304    
028E 1404        
0290 15041604      635           DW      0415h,0416h,0417h,0418h,0419h
0294 17041804    
0298 1904        
029A 1A041B04      636           DW      041Ah,041Bh,041Ch,041Dh,041Eh
029E 1C041D04    
02A2 1E04        
02A4 1F042004      637           DW      041Fh,0420h,0421h,0422h,0423h
02A8 21042204    
02AC 2304        
02AE 24042504      638           DW      0424h,0425h,0426h,0427h,0428h
02B2 26042704    
02B6 2804        
02B8 29042A04      639           DW      0429h,042Ah,042Bh,042Ch,042Dh
02BC 2B042C04    
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  15
main

 LOC CODE        LINE   SOURCELINE

02C0 2D04        
02C2 2E042F04      640           DW      042Eh,042Fh,0430h,0431h,0432h
02C6 30043104    
02CA 3204        
02CC 33043404      641           DW      0433h,0434h,0435h,0436h,0437h
02D0 35043604    
02D4 3704        
02D6 38043904      642           DW      0438h,0439h,043Ah,043Bh,043Ch
02DA 3A043B04    
02DE 3C04        
02E0 3D043E04      643           DW      043Dh,043Eh,043Fh,02Dh,02Dh
02E4 3F042D00    
02E8 2D00        
02EA 2D00A600      644           DW      02Dh,0A6h,02Bh,0A6h,0A6h
02EE 2B00A600    
02F2 A600        
02F4 AC00AC00      645           DW      0ACh,0ACh,0A6h,0A6h,0ACh
02F8 A600A600    
02FC AC00        
02FE 2D002D00      646           DW      02Dh,02Dh,02Dh,0ACh,04Ch
0302 2D00AC00    
0306 4C00        
0308 2B005400      647           DW      02Bh,054h,02Bh,02Dh,02Bh
030C 2B002D00    
0310 2B00        
0312 A600A600      648           DW      0A6h,0A6h,04Ch,0433h,0A6h
0316 4C003304    
031A A600        
031C 5400A600      649           DW      054h,0A6h,03Dh,02Bh,0A6h
0320 3D002B00    
0324 A600        
0326 A6005400      650           DW      0A6h,054h,054h,04Ch,04Ch
032A 54004C00    
032E 4C00        
0330 2D003304      651           DW      02Dh,0433h,02Bh,02Bh,02Dh
0334 2B002B00    
0338 2D00        
033A 2D002D00      652           DW      02Dh,02Dh,02Dh,0A6h,0A6h
033E 2D00A600    
0342 A600        
0344 2D004004      653           DW      02Dh,0440h,0441h,0442h,0443h
0348 41044204    
034C 4304        
034E 44044504      654           DW      0444h,0445h,0446h,0447h,0448h
0352 46044704    
0356 4804        
0358 49044A04      655           DW      0449h,044Ah,044Bh,044Ch,044Dh
035C 4B044C04    
0360 4D04        
0362 4E044F04      656           DW      044Eh,044Fh,0401h,0451h,0404h
0366 01045104    
036A 0404        
036C 54040704      657           DW      0454h,0407h,0457h,040Eh,045Eh
0370 57040E04    
0374 5E04        
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  16
main

 LOC CODE        LINE   SOURCELINE

0376 B0002220      658           DW      0B0h,02022h,0B7h,076h,02116h
037A B7007600    
037E 1621        
0380 A400A600      659           DW      0A4h,0A6h,0A0h
0384 A000        
                   660           PUBLIC  _dos2unicode
                   661   ; main.c    212 {
                   662   ; main.c    213  0x0410,0x0411,0x0412,0x0413,0x0414,0x0415,0x0416,0x0417,
                   663   ; main.c    214  0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,0x041F,
                   664   ; main.c    215  0x0420,0x0421,0x0422,0x0423,0x0424,0x0425,0x0426,0x0427,
                   665   ; main.c    216  0x0428,0x0429,0x042A,0x042B,0x042C,0x042D,0x042E,0x042F,
                   666   ; main.c    217  0x0430,0x0431,0x0432,0x0433,0x0434,0x0435,0x0436,0x0437,
                   667   ; main.c    218  0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,0x043F,
                   668   ; main.c    219  0x002D,0x002D,0x002D,0x00A6,0x002B,0x00A6,0x00A6,0x00AC,
                   669   ; main.c    220  0x00AC,0x00A6,0x00A6,0x00AC,0x002D,0x002D,0x002D,0x00AC,
                   670   ; main.c    221  0x004C,0x002B,0x0054,0x002B,0x002D,0x002B,0x00A6,0x00A6,
                   671   ; main.c    222  0x004C,0x0433,0x00A6,0x0054,0x00A6,0x003D,0x002B,0x00A6,
                   672   ; main.c    223  0x00A6,0x0054,0x0054,0x004C,0x004C,0x002D,0x0433,0x002B,
                   673   ; main.c    224  0x002B,0x002D,0x002D,0x002D,0x002D,0x00A6,0x00A6,0x002D,
                   674   ; main.c    225  0x0440,0x0441,0x0442,0x0443,0x0444,0x0445,0x0446,0x0447,
                   675   ; main.c    226  0x0448,0x0449,0x044A,0x044B,0x044C,0x044D,0x044E,0x044F,
                   676   ; main.c    227  0x0401,0x0451,0x0404,0x0454,0x0407,0x0457,0x040E,0x045E,
                   677   ; main.c    228  0x00B0,0x2022,0x00B7,0x0076,0x2116,0x00A4,0x00A6,0x00A0
                   678   ; main.c    229 };
                   679   ; main.c    230 
                   680   ; main.c    231 unsigned int char8to16(char c)
                   681   ; main.c    232 {
                   682           PUBLIC  _char8to16
                   683   MAIN_3_FC       ENDS
                   684   
                   685   MAIN_2_PR       SECTION CODE
                   686   _char8to16      PROC    FAR
007C F01C          687           MOV     R1,R12
                   688   ; Locals:
                   689   ; 
                   690   ; Statics:
                   691   ; 
                   692   ; CSEs:
                   693   ;     c = RL1
                   694   ; 
                   695   ; main.c    233  if (c<32) return('_');
007E 47F22000      696           CMPB    RL1,#020h
0082 9D03          697           JMPR    cc_UGE,_5
0084 E6F45F00      698           MOV     R4,#05Fh
0088 DB00          699           RETS
008A               700   _5:
                   701   ; main.c    234  if (c>=128)
008A C02C          702           MOVBZ   R12,RL1
008C 46FC8000      703           CMP     R12,#080h
0090 CD1C          704           JMPR    cc_SLT,_10
                   705   ; main.c    235  {
                   706   ; main.c    236   switch(win_dos_koi)
0092 E6000000  R   707           MOV     DPP0,#PAG _win_dos_koi
0096 CC00          708           NOP
0098 F3F40000  R   709           MOVB    RL2,POF _win_dos_koi
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  17
main

 LOC CODE        LINE   SOURCELINE

009C 4941          710           CMPB    RL2,#01h
009E 2D03          711           JMPR    cc_EQ,_6
00A0 4942          712           CMPB    RL2,#02h
00A2 2D07          713           JMPR    cc_EQ,_7
00A4 0D0B          714           JMPR    cc_UC,_9
                   715   ; main.c    237   {
                   716   ; main.c    238    case 1:
00A6               717   _6:
                   718   ; main.c    239     //Win->Dos
                   719   ; main.c    240     c=wintranslation[c-128];
00A6 C02C          720           MOVBZ   R12,RL1
00A8 D7400000  R   721           EXTP    #PAG _wintranslation,#01h
00AC F42C0000 1R   722           MOVB    RL1,[R12+#POF _wintranslation-128]
                   723   ; main.c    241     break;
00B0 0D05          724           JMPR    cc_UC,_9
                   725   ; main.c    242    case 2:
00B2               726   _7:
                   727   ; main.c    243     //Koi8->Dos
                   728   ; main.c    244     c=koi8translation[c-128];
00B2 C02C          729           MOVBZ   R12,RL1
00B4 D7400000  R   730           EXTP    #PAG _koi8translation,#01h
00B8 F42C0000 1R   731           MOVB    RL1,[R12+#POF _koi8translation-128]
                   732   ; main.c    245     break;
                   733   ; main.c    246   }
00BC               734   _9:
                   735   ; main.c    247   return(dos2unicode[c-128]);
00BC C02C          736           MOVBZ   R12,RL1
00BE 5C1C          737           SHL     R12,#01h
00C0 D7400000  R   738           EXTP    #PAG _dos2unicode,#01h
00C4 D44C0000 1R   739           MOV     R4,[R12+#POF _dos2unicode-256]
00C8 DB00          740           RETS
                   741   ; main.c    248  }
00CA               742   _10:
                   743   ; main.c    249  return(c);
00CA C024          744           MOVBZ   R4,RL1
                   745   ; main.c    250 }
00CC               746   _12:
00CC DB00          747           RETS
                   748   _char8to16      ENDP
                   749   ; main.c    251 
                   750   ; main.c    252 // RECODING TABLE
                   751   ; main.c    253 //utf16,cp866,cp1251,koi8
                   752   ; main.c    254 //const far unsigned int unicode2char[]=
                   753   ; main.c    255 typedef struct
                   754   ; main.c    256 {
                   755   ; main.c    257  unsigned int u;
                   756   ; main.c    258  unsigned char dos;
                   757   ; main.c    259  unsigned char win;
                   758   ; main.c    260  unsigned char koi8;
                   759   ; main.c    261 } TUNICODE2CHAR;
                   760   ; main.c    262 
                   761   ; main.c    263 const far TUNICODE2CHAR unicode2char[]=
                   762   MAIN_2_PR       ENDS
                   763   
                   764   MAIN_3_FC       SECTION DATA
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  18
main

 LOC CODE        LINE   SOURCELINE

0386               765   _unicode2char   LABEL   WORD
0386 1004          766           DW      0410h
0388 80C0E100      767           DB      080h,0C0h,0E1h,00h
038C 1104          768           DW      0411h
038E 81C1E200      769           DB      081h,0C1h,0E2h,00h
0392 1204          770           DW      0412h
0394 82C2F700      771           DB      082h,0C2h,0F7h,00h
0398 1304          772           DW      0413h
039A 83C3E700      773           DB      083h,0C3h,0E7h,00h
039E 1404          774           DW      0414h
03A0 84C4E400      775           DB      084h,0C4h,0E4h,00h
03A4 1504          776           DW      0415h
03A6 85C5E500      777           DB      085h,0C5h,0E5h,00h
03AA 1604          778           DW      0416h
03AC 86C6F600      779           DB      086h,0C6h,0F6h,00h
03B0 1704          780           DW      0417h
03B2 87C7FA00      781           DB      087h,0C7h,0FAh,00h
03B6 1804          782           DW      0418h
03B8 88C8E900      783           DB      088h,0C8h,0E9h,00h
03BC 1904          784           DW      0419h
03BE 89C9EA00      785           DB      089h,0C9h,0EAh,00h
03C2 1A04          786           DW      041Ah
03C4 8ACAEB00      787           DB      08Ah,0CAh,0EBh,00h
03C8 1B04          788           DW      041Bh
03CA 8BCBEC00      789           DB      08Bh,0CBh,0ECh,00h
03CE 1C04          790           DW      041Ch
03D0 8CCCED00      791           DB      08Ch,0CCh,0EDh,00h
03D4 1D04          792           DW      041Dh
03D6 8DCDEE00      793           DB      08Dh,0CDh,0EEh,00h
03DA 1E04          794           DW      041Eh
03DC 8ECEEF00      795           DB      08Eh,0CEh,0EFh,00h
03E0 1F04          796           DW      041Fh
03E2 8FCFF000      797           DB      08Fh,0CFh,0F0h,00h
03E6 2004          798           DW      0420h
03E8 90D0F200      799           DB      090h,0D0h,0F2h,00h
03EC 2104          800           DW      0421h
03EE 91D1F300      801           DB      091h,0D1h,0F3h,00h
03F2 2204          802           DW      0422h
03F4 92D2F400      803           DB      092h,0D2h,0F4h,00h
03F8 2304          804           DW      0423h
03FA 93D3F500      805           DB      093h,0D3h,0F5h,00h
03FE 2404          806           DW      0424h
0400 94D4E600      807           DB      094h,0D4h,0E6h,00h
0404 2504          808           DW      0425h
0406 95D5E800      809           DB      095h,0D5h,0E8h,00h
040A 2604          810           DW      0426h
040C 96D6E300      811           DB      096h,0D6h,0E3h,00h
0410 2704          812           DW      0427h
0412 97D7FE00      813           DB      097h,0D7h,0FEh,00h
0416 2804          814           DW      0428h
0418 98D8FB00      815           DB      098h,0D8h,0FBh,00h
041C 2904          816           DW      0429h
041E 99D9FD00      817           DB      099h,0D9h,0FDh,00h
0422 2A04          818           DW      042Ah
0424 9ADAFF00      819           DB      09Ah,0DAh,0FFh,00h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  19
main

 LOC CODE        LINE   SOURCELINE

0428 2B04          820           DW      042Bh
042A 9BDBF900      821           DB      09Bh,0DBh,0F9h,00h
042E 2C04          822           DW      042Ch
0430 9CDCF800      823           DB      09Ch,0DCh,0F8h,00h
0434 2D04          824           DW      042Dh
0436 9DDDFC00      825           DB      09Dh,0DDh,0FCh,00h
043A 2E04          826           DW      042Eh
043C 9EDEE000      827           DB      09Eh,0DEh,0E0h,00h
0440 2F04          828           DW      042Fh
0442 9FDFF100      829           DB      09Fh,0DFh,0F1h,00h
0446 0204          830           DW      0402h
0448 5F805F00      831           DB      05Fh,080h,05Fh,00h
044C 0304          832           DW      0403h
044E 5F815F00      833           DB      05Fh,081h,05Fh,00h
0452 0904          834           DW      0409h
0454 5F8A5F00      835           DB      05Fh,08Ah,05Fh,00h
0458 0A04          836           DW      040Ah
045A 5F8C5F00      837           DB      05Fh,08Ch,05Fh,00h
045E 0C04          838           DW      040Ch
0460 5F8D5F00      839           DB      05Fh,08Dh,05Fh,00h
0464 0B04          840           DW      040Bh
0466 5F8E5F00      841           DB      05Fh,08Eh,05Fh,00h
046A 0F04          842           DW      040Fh
046C 5F8F5F00      843           DB      05Fh,08Fh,05Fh,00h
0470 0E04          844           DW      040Eh
0472 F6A15F00      845           DB      0F6h,0A1h,05Fh,00h
0476 0804          846           DW      0408h
0478 4AA34A00      847           DB      04Ah,0A3h,04Ah,00h
047C 0904          848           DW      0409h
047E 83A5BD00      849           DB      083h,0A5h,0BDh,00h
0482 0104          850           DW      0401h
0484 F0A8B300      851           DB      0F0h,0A8h,0B3h,00h
0488 0404          852           DW      0404h
048A F2AAB400      853           DB      0F2h,0AAh,0B4h,00h
048E 0704          854           DW      0407h
0490 F4AFB700      855           DB      0F4h,0AFh,0B7h,00h
0494 0604          856           DW      0406h
0496 49B2B600      857           DB      049h,0B2h,0B6h,00h
049A 0504          858           DW      0405h
049C 53BD5300      859           DB      053h,0BDh,053h,00h
04A0 3004          860           DW      0430h
04A2 A0E0C100      861           DB      0A0h,0E0h,0C1h,00h
04A6 3104          862           DW      0431h
04A8 A1E1C200      863           DB      0A1h,0E1h,0C2h,00h
04AC 3204          864           DW      0432h
04AE A2E2D700      865           DB      0A2h,0E2h,0D7h,00h
04B2 3304          866           DW      0433h
04B4 A3E3C700      867           DB      0A3h,0E3h,0C7h,00h
04B8 3404          868           DW      0434h
04BA A4E4C400      869           DB      0A4h,0E4h,0C4h,00h
04BE 3504          870           DW      0435h
04C0 A5E5C500      871           DB      0A5h,0E5h,0C5h,00h
04C4 3604          872           DW      0436h
04C6 A6E6D600      873           DB      0A6h,0E6h,0D6h,00h
04CA 3704          874           DW      0437h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  20
main

 LOC CODE        LINE   SOURCELINE

04CC A7E7DA00      875           DB      0A7h,0E7h,0DAh,00h
04D0 3804          876           DW      0438h
04D2 A8E8C900      877           DB      0A8h,0E8h,0C9h,00h
04D6 3904          878           DW      0439h
04D8 A9E9CA00      879           DB      0A9h,0E9h,0CAh,00h
04DC 3A04          880           DW      043Ah
04DE AAEACB00      881           DB      0AAh,0EAh,0CBh,00h
04E2 3B04          882           DW      043Bh
04E4 ABEBCC00      883           DB      0ABh,0EBh,0CCh,00h
04E8 3C04          884           DW      043Ch
04EA ACECCD00      885           DB      0ACh,0ECh,0CDh,00h
04EE 3D04          886           DW      043Dh
04F0 ADEDCE00      887           DB      0ADh,0EDh,0CEh,00h
04F4 3E04          888           DW      043Eh
04F6 AEEECF00      889           DB      0AEh,0EEh,0CFh,00h
04FA 3F04          890           DW      043Fh
04FC AFEFD000      891           DB      0AFh,0EFh,0D0h,00h
0500 4004          892           DW      0440h
0502 E0F0D200      893           DB      0E0h,0F0h,0D2h,00h
0506 4104          894           DW      0441h
0508 E1F1D300      895           DB      0E1h,0F1h,0D3h,00h
050C 4204          896           DW      0442h
050E E2F2D400      897           DB      0E2h,0F2h,0D4h,00h
0512 4304          898           DW      0443h
0514 E3F3D500      899           DB      0E3h,0F3h,0D5h,00h
0518 4404          900           DW      0444h
051A E4F4C600      901           DB      0E4h,0F4h,0C6h,00h
051E 4504          902           DW      0445h
0520 E5F5C800      903           DB      0E5h,0F5h,0C8h,00h
0524 4604          904           DW      0446h
0526 E6F6C300      905           DB      0E6h,0F6h,0C3h,00h
052A 4704          906           DW      0447h
052C E7F7DE00      907           DB      0E7h,0F7h,0DEh,00h
0530 4804          908           DW      0448h
0532 E8F8DB00      909           DB      0E8h,0F8h,0DBh,00h
0536 4904          910           DW      0449h
0538 E9F9DD00      911           DB      0E9h,0F9h,0DDh,00h
053C 4A04          912           DW      044Ah
053E EAFADF00      913           DB      0EAh,0FAh,0DFh,00h
0542 4B04          914           DW      044Bh
0544 EBFBD900      915           DB      0EBh,0FBh,0D9h,00h
0548 4C04          916           DW      044Ch
054A ECFCD800      917           DB      0ECh,0FCh,0D8h,00h
054E 4D04          918           DW      044Dh
0550 EDFDDC00      919           DB      0EDh,0FDh,0DCh,00h
0554 4E04          920           DW      044Eh
0556 EEFEC000      921           DB      0EEh,0FEh,0C0h,00h
055A 4F04          922           DW      044Fh
055C EFFFD100      923           DB      0EFh,0FFh,0D1h,00h
0560 5204          924           DW      0452h
0562 5F905F00      925           DB      05Fh,090h,05Fh,00h
0566 5304          926           DW      0453h
0568 5F835F00      927           DB      05Fh,083h,05Fh,00h
056C 5904          928           DW      0459h
056E 5F9A5F00      929           DB      05Fh,09Ah,05Fh,00h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  21
main

 LOC CODE        LINE   SOURCELINE

0572 5A04          930           DW      045Ah
0574 5F9C5F00      931           DB      05Fh,09Ch,05Fh,00h
0578 5C04          932           DW      045Ch
057A 5F9D5F00      933           DB      05Fh,09Dh,05Fh,00h
057E 5B04          934           DW      045Bh
0580 5F9E5F00      935           DB      05Fh,09Eh,05Fh,00h
0584 5F04          936           DW      045Fh
0586 5F9F5F00      937           DB      05Fh,09Fh,05Fh,00h
058A 5E04          938           DW      045Eh
058C F7A25F00      939           DB      0F7h,0A2h,05Fh,00h
0590 5804          940           DW      0458h
0592 6ABC6A00      941           DB      06Ah,0BCh,06Ah,00h
0596 9104          942           DW      0491h
0598 A3B4AD00      943           DB      0A3h,0B4h,0ADh,00h
059C 5104          944           DW      0451h
059E F1B8A300      945           DB      0F1h,0B8h,0A3h,00h
05A2 5404          946           DW      0454h
05A4 F3BAA400      947           DB      0F3h,0BAh,0A4h,00h
05A8 5704          948           DW      0457h
05AA F5BFA700      949           DB      0F5h,0BFh,0A7h,00h
05AE 5604          950           DW      0456h
05B0 69B3A600      951           DB      069h,0B3h,0A6h,00h
05B4 5504          952           DW      0455h
05B6 73BE7300      953           DB      073h,0BEh,073h,00h
05BA A000          954           DW      0A0h
05BC 5FA02000      955           DB      05Fh,0A0h,020h,00h
05C0 A400          956           DW      0A4h
05C2 5FA4FD00      957           DB      05Fh,0A4h,0FDh,00h
05C6 A600          958           DW      0A6h
05C8 5FA65F00      959           DB      05Fh,0A6h,05Fh,00h
05CC B000          960           DW      0B0h
05CE F8B09C00      961           DB      0F8h,0B0h,09Ch,00h
05D2 B700          962           DW      0B7h
05D4 FAB79E00      963           DB      0FAh,0B7h,09Eh,00h
05D8 0000          964           DW      00h
05DA 00000000      965           DB      00h,00h,00h,00h
                   966           PUBLIC  _unicode2char
                   967   ; main.c    264 {
                   968   ; main.c    265 // CAPITAL Cyrillic letters (base)
                   969   ; main.c    266 0x410,0x80,0xC0,0xE1, // А
                   970   ; main.c    267 0x411,0x81,0xC1,0xE2, // Б
                   971   ; main.c    268 0x412,0x82,0xC2,0xF7, // В
                   972   ; main.c    269 0x413,0x83,0xC3,0xE7, // Г
                   973   ; main.c    270 0x414,0x84,0xC4,0xE4, // Д
                   974   ; main.c    271 0x415,0x85,0xC5,0xE5, // Е
                   975   ; main.c    272 0x416,0x86,0xC6,0xF6, // Ж
                   976   ; main.c    273 0x417,0x87,0xC7,0xFA, // З
                   977   ; main.c    274 0x418,0x88,0xC8,0xE9, // И
                   978   ; main.c    275 0x419,0x89,0xC9,0xEA, // Й
                   979   ; main.c    276 0x41A,0x8A,0xCA,0xEB, // К
                   980   ; main.c    277 0x41B,0x8B,0xCB,0xEC, // Л
                   981   ; main.c    278 0x41C,0x8C,0xCC,0xED, // М
                   982   ; main.c    279 0x41D,0x8D,0xCD,0xEE, // Н
                   983   ; main.c    280 0x41E,0x8E,0xCE,0xEF, // О
                   984   ; main.c    281 0x41F,0x8F,0xCF,0xF0, // П
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  22
main

 LOC CODE        LINE   SOURCELINE

                   985   ; main.c    282 0x420,0x90,0xD0,0xF2, // Р
                   986   ; main.c    283 0x421,0x91,0xD1,0xF3, // С
                   987   ; main.c    284 0x422,0x92,0xD2,0xF4, // Т
                   988   ; main.c    285 0x423,0x93,0xD3,0xF5, // У
                   989   ; main.c    286 0x424,0x94,0xD4,0xE6, // Ф
                   990   ; main.c    287 0x425,0x95,0xD5,0xE8, // Х
                   991   ; main.c    288 0x426,0x96,0xD6,0xE3, // Ц
                   992   ; main.c    289 0x427,0x97,0xD7,0xFE, // Ч
                   993   ; main.c    290 0x428,0x98,0xD8,0xFB, // Ш
                   994   ; main.c    291 0x429,0x99,0xD9,0xFD, // Щ
                   995   ; main.c    292 0x42A,0x9A,0xDA,0xFF, // Ъ
                   996   ; main.c    293 0x42B,0x9B,0xDB,0xF9, // Ы
                   997   ; main.c    294 0x42C,0x9C,0xDC,0xF8, // Ь
                   998   ; main.c    295 0x42D,0x9D,0xDD,0xFC, // Э
                   999   ; main.c    296 0x42E,0x9E,0xDE,0xE0, // Ю
                  1000   ; main.c    297 0x42F,0x9F,0xDF,0xF1, // Я
                  1001   ; main.c    298 // CAPITAL Cyrillic letters (additional)
                  1002   ; main.c    299 0x402,'_',0x80,'_', // _ .*.*
                  1003   ; main.c    300 0x403,'_',0x81,'_', // _ .*.*
                  1004   ; main.c    301 0x409,'_',0x8A,'_', // _ .*.*
                  1005   ; main.c    302 0x40A,'_',0x8C,'_', // _ .*.*
                  1006   ; main.c    303 0x40C,'_',0x8D,'_', // _ .*.*
                  1007   ; main.c    304 0x40B,'_',0x8E,'_', // _ .*.*
                  1008   ; main.c    305 0x40F,'_',0x8F,'_', // _ .*.*
                  1009   ; main.c    306 0x40E,0xF6,0xA1,'_', // Ў ...*
                  1010   ; main.c    307 0x408,0x4A,0xA3,0x4A, // _ .*.*
                  1011   ; main.c    308 0x409,0x83,0xA5,0xBD, // _ .*..
                  1012   ; main.c    309 0x401,0xF0,0xA8,0xB3, // Ё
                  1013   ; main.c    310 0x404,0xF2,0xAA,0xB4, // Є
                  1014   ; main.c    311 0x407,0xF4,0xAF,0xB7, // Ї
                  1015   ; main.c    312 0x406,0x49,0xB2,0xB6, // _ .*..
                  1016   ; main.c    313 0x405,0x53,0xBD,0x53, // _ .*.*
                  1017   ; main.c    314 // SMALL Cyrillic letters (base)
                  1018   ; main.c    315 0x430,0xA0,0xE0,0xC1, // а
                  1019   ; main.c    316 0x431,0xA1,0xE1,0xC2, // б
                  1020   ; main.c    317 0x432,0xA2,0xE2,0xD7, // в
                  1021   ; main.c    318 0x433,0xA3,0xE3,0xC7, // г
                  1022   ; main.c    319 0x434,0xA4,0xE4,0xC4, // д
                  1023   ; main.c    320 0x435,0xA5,0xE5,0xC5, // е
                  1024   ; main.c    321 0x436,0xA6,0xE6,0xD6, // ж
                  1025   ; main.c    322 0x437,0xA7,0xE7,0xDA, // з
                  1026   ; main.c    323 0x438,0xA8,0xE8,0xC9, // и
                  1027   ; main.c    324 0x439,0xA9,0xE9,0xCA, // й
                  1028   ; main.c    325 0x43A,0xAA,0xEA,0xCB, // к
                  1029   ; main.c    326 0x43B,0xAB,0xEB,0xCC, // л
                  1030   ; main.c    327 0x43C,0xAC,0xEC,0xCD, // м
                  1031   ; main.c    328 0x43D,0xAD,0xED,0xCE, // н
                  1032   ; main.c    329 0x43E,0xAE,0xEE,0xCF, // о
                  1033   ; main.c    330 0x43F,0xAF,0xEF,0xD0, // п
                  1034   ; main.c    331 0x440,0xE0,0xF0,0xD2, // р
                  1035   ; main.c    332 0x441,0xE1,0xF1,0xD3, // с
                  1036   ; main.c    333 0x442,0xE2,0xF2,0xD4, // т
                  1037   ; main.c    334 0x443,0xE3,0xF3,0xD5, // у
                  1038   ; main.c    335 0x444,0xE4,0xF4,0xC6, // ф
                  1039   ; main.c    336 0x445,0xE5,0xF5,0xC8, // х
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  23
main

 LOC CODE        LINE   SOURCELINE

                  1040   ; main.c    337 0x446,0xE6,0xF6,0xC3, // ц
                  1041   ; main.c    338 0x447,0xE7,0xF7,0xDE, // ч
                  1042   ; main.c    339 0x448,0xE8,0xF8,0xDB, // ш
                  1043   ; main.c    340 0x449,0xE9,0xF9,0xDD, // щ
                  1044   ; main.c    341 0x44A,0xEA,0xFA,0xDF, // ъ
                  1045   ; main.c    342 0x44B,0xEB,0xFB,0xD9, // ы
                  1046   ; main.c    343 0x44C,0xEC,0xFC,0xD8, // ь
                  1047   ; main.c    344 0x44D,0xED,0xFD,0xDC, // э
                  1048   ; main.c    345 0x44E,0xEE,0xFE,0xC0, // ю
                  1049   ; main.c    346 0x44F,0xEF,0xFF,0xD1, // я
                  1050   ; main.c    347 // SMALL Cyrillic letters (additional)
                  1051   ; main.c    348 0x452,'_',0x90,'_', // _ .*.*
                  1052   ; main.c    349 0x453,'_',0x83,'_', // _ .*.*
                  1053   ; main.c    350 0x459,'_',0x9A,'_', // _ .*.*
                  1054   ; main.c    351 0x45A,'_',0x9C,'_', // _ .*.*
                  1055   ; main.c    352 0x45C,'_',0x9D,'_', // _ .*.*
                  1056   ; main.c    353 0x45B,'_',0x9E,'_', // _ .*.*
                  1057   ; main.c    354 0x45F,'_',0x9F,'_', // _ .*.*
                  1058   ; main.c    355 0x45E,0xF7,0xA2,'_', // ў ...*
                  1059   ; main.c    356 0x458,0x6A,0xBC,0x6A, // _ .*.*
                  1060   ; main.c    357 0x491,0xA3,0xB4,0xAD, // _ .*..
                  1061   ; main.c    358 0x451,0xF1,0xB8,0xA3, // ё
                  1062   ; main.c    359 0x454,0xF3,0xBA,0xA4, // є
                  1063   ; main.c    360 0x457,0xF5,0xBF,0xA7, // ї
                  1064   ; main.c    361 0x456,0x69,0xB3,0xA6, // _ .*..
                  1065   ; main.c    362 0x455,0x73,0xBE,0x73, // _ .*.*
                  1066   ; main.c    363 0x0A0,'_',0xA0,0x20, // space .*..
                  1067   ; main.c    364 0x0A4,'_',0xA4,0xFD, // ¤   .*..
                  1068   ; main.c    365 0x0A6,'_',0xA6,'_', // ¦   .*.*
                  1069   ; main.c    366 0x0B0,0xF8,0xB0,0x9C, // °
                  1070   ; main.c    367 0x0B7,0xFA,0xB7,0x9E, // ·
                  1071   ; main.c    368 // 0x2022,,0x95,0x95, //    .*..
                  1072   ; main.c    369 // 0x2116,0xFC,0xB9,0x23, // №   ...*
                  1073   ; main.c    370 // 0x2219,,0xF9,0x9E, //    .*..
                  1074   ; main.c    371 // 0x221A,0xFB,,0x96, // v   ..*.
                  1075   ; main.c    372 // 0x25A0,0xFE,,0x94, // ¦
                  1076   ; main.c    373 0x0000,0,0,0
                  1077   ; main.c    374 };
                  1078   ; main.c    375 
                  1079   ; main.c    376 unsigned char char16to8(unsigned int c)
                  1080   ; main.c    377 {
                  1081           PUBLIC  _char16to8
                  1082   MAIN_3_FC       ENDS
                  1083   
                  1084   MAIN_2_PR       SECTION CODE
                  1085   _char16to8      PROC    FAR
                  1086   ; Locals:
                  1087   ; 
                  1088   ; Statics:
                  1089   ; 
                  1090   ; CSEs:
                  1091   ;     c = R12
                  1092   ;     p = R13R14
                  1093   ;     i = R15
                  1094   ; 
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  24
main

 LOC CODE        LINE   SOURCELINE

                  1095   ; main.c    378  const TUNICODE2CHAR far *p=unicode2char;
00CE E6FD0000  R  1096           MOV     R13,#POF _unicode2char
00D2 E6FE0000  R  1097           MOV     R14,#PAG _unicode2char
                  1098   ; main.c    379  unsigned int i;
                  1099   ; main.c    380  if (c<32) return(' ');
00D6 46FC2000     1100           CMP     R12,#020h
00DA 8D25         1101           JMPR    cc_ULT,_48
                  1102   ; main.c    381  if (c<128) return(c);
00DC 46FC8000     1103           CMP     R12,#080h
00E0 8D25         1104           JMPR    cc_ULT,_50
                  1105   ; main.c    382  while((i=p->u))
00E2              1106   _41:
00E2 0D19         1107           JMPR    cc_UC,_47
00E4              1108   _42:
                  1109   ; main.c    383  {
                  1110   ; main.c    384   if (c==i)
00E4 40CF         1111           CMP     R12,R15
00E6 3D16         1112           JMPR    cc_NE,_46
                  1113   ; main.c    385   {
                  1114   ; main.c    386    switch(win_dos_koi)
00E8 E6000000  R  1115           MOV     DPP0,#PAG _win_dos_koi
00EC CC00         1116           NOP
00EE F3F20000  R  1117           MOVB    RL1,POF _win_dos_koi
00F2 4921         1118           CMPB    RL1,#01h
00F4 2D03         1119           JMPR    cc_EQ,_43
00F6 4922         1120           CMPB    RL1,#02h
00F8 2D05         1121           JMPR    cc_EQ,_44
00FA 0D08         1122           JMPR    cc_UC,_45
                  1123   ; main.c    387    {
                  1124   ; main.c    388    case 1:
00FC              1125   _43:
                  1126   ; main.c    389     //Win
                  1127   ; main.c    390     return(p->win);
00FC DC4E         1128           EXTP    R14,#01h
00FE F48D0300 1   1129           MOVB    RL4,[R13+#03H]
0102 DB00         1130           RETS
                  1131   ; main.c    391    case 2:
0104              1132   _44:
                  1133   ; main.c    392     //Koi8
                  1134   ; main.c    393         return(p->koi8);
0104 DC4E         1135           EXTP    R14,#01h
0106 F48D0400 1   1136           MOVB    RL4,[R13+#04H]
010A DB00         1137           RETS
                  1138   ; main.c    394    }
010C              1139   _45:
                  1140   ; main.c    395    return(p->dos);
010C DC4E         1141           EXTP    R14,#01h
010E F48D0200 1   1142           MOVB    RL4,[R13+#02H]
0112 DB00         1143           RETS
                  1144   ; main.c    396   }
0114              1145   _46:
                  1146   ; main.c    397   p++;
0114 08D6         1147           ADD     R13,#06h
0116              1148   _47:
0116 DC4E         1149           EXTP    R14,#01h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  25
main

 LOC CODE        LINE   SOURCELINE

0118 A8FD     1   1150           MOV     R15,[R13]
011A 3DE4         1151           JMPR    cc_NZ,_42
                  1152   ; main.c    398  }
                  1153   ; main.c    399  c&=0xFF;
011C 66FCFF00     1154           AND     R12,#0FFh
                  1155   ; main.c    400  if (c<32) return(' ');
0120 46FC2000     1156           CMP     R12,#020h
0124 9D03         1157           JMPR    cc_UGE,_50
0126              1158   _48:
0126 E7F82000     1159           MOVB    RL4,#020h
012A DB00         1160           RETS
012C              1161   _50:
                  1162   ; main.c    401  return(c);
012C F04C         1163           MOV     R4,R12
                  1164   ; main.c    402 }
012E              1165   _54:
012E DB00         1166           RETS
                  1167   _char16to8      ENDP
                  1168   ; main.c    403 
                  1169   ; main.c    404 //static const struct ImageHdr far imgScreen = {96,80,0x1,&screen};
                  1170   ; main.c    405 //--------------------------------------------------------------------------
                  1171   ; main.c    406 //Печать символа
                  1172   ; main.c    407 void DrawChar(char c,int x,int y)
                  1173   ; main.c    408 {
                  1174           PUBLIC  _DrawChar
                  1175   _DrawChar       PROC    FAR
0130 8890         1176           MOV     [-R0],R9
0132 8880         1177           MOV     [-R0],R8
0134 8860         1178           MOV     [-R0],R6
0136 F01C         1179           MOV     R1,R12
0138 F09D         1180           MOV     R9,R13
013A F06E         1181           MOV     R6,R14
                  1182   ; Locals:
                  1183   ; 
                  1184   ; Statics:
                  1185   ; 
                  1186   ; CSEs:
                  1187   ;     d = R12
                  1188   ;     i = R13
                  1189   ;     s = R8
                  1190   ;     c = RL1
                  1191   ;     x = R9
                  1192   ;     ms = RL1
                  1193   ;     md = RL2
                  1194   ;     y = R6
                  1195   ; 
                  1196   ; main.c    409  unsigned int d; //Куда рисуем
                  1197   ; main.c    410  unsigned int s; //Откуда рисуем
                  1198   ; main.c    411  int i;
                  1199   ; main.c    412  char ms;
                  1200   ; main.c    413  char md;
                  1201   ; main.c    414  if (c>=128)
013C C02C         1202           MOVBZ   R12,RL1
013E 46FC8000     1203           CMP     R12,#080h
0142 CD15         1204           JMPR    cc_SLT,_59
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  26
main

 LOC CODE        LINE   SOURCELINE

                  1205   ; main.c    415  switch(win_dos_koi)
0144 E6000000  R  1206           MOV     DPP0,#PAG _win_dos_koi
0148 CC00         1207           NOP
014A F3F40000  R  1208           MOVB    RL2,POF _win_dos_koi
014E 4941         1209           CMPB    RL2,#01h
0150 2D03         1210           JMPR    cc_EQ,_55
0152 4942         1211           CMPB    RL2,#02h
0154 2D07         1212           JMPR    cc_EQ,_56
0156 0D0B         1213           JMPR    cc_UC,_59
                  1214   ; main.c    416  {
                  1215   ; main.c    417   case 1:
0158              1216   _55:
                  1217   ; main.c    418    //Win->Dos
                  1218   ; main.c    419    c=wintranslation[c-128];
0158 C02C         1219           MOVBZ   R12,RL1
015A D7400000  R  1220           EXTP    #PAG _wintranslation,#01h
015E F42C0000 1R  1221           MOVB    RL1,[R12+#POF _wintranslation-128]
                  1222   ; main.c    420    break;
0162 0D05         1223           JMPR    cc_UC,_59
                  1224   ; main.c    421   case 2:
0164              1225   _56:
                  1226   ; main.c    422    //Koi8->Dos
                  1227   ; main.c    423    c=koi8translation[c-128];
0164 C02C         1228           MOVBZ   R12,RL1
0166 D7400000  R  1229           EXTP    #PAG _koi8translation,#01h
016A F42C0000 1R  1230           MOVB    RL1,[R12+#POF _koi8translation-128]
                  1231   ; main.c    424    break;
                  1232   ; main.c    425  }
016E              1233   _59:
                  1234   ; main.c    426  #pragma asm
016E EC02         1235           PUSH    DPP2
                  1236   ; @w1 = R8
                  1237   ; @w2 = R12
                  1238   ; @b3 = RL6
                  1239   ; @b4 = RL1
                  1240   ; @w5 = R13
                  1241   ; main.c    428  #pragma endasm
                  1242   ; main.c    429  switch(font_size)
0170 E6000000  R  1243           MOV     DPP0,#PAG _font_size
0174 CC00         1244           NOP
0176 F3F40000  R  1245           MOVB    RL2,POF _font_size
017A 4944         1246           CMPB    RL2,#04h
017C EA20DE02  R  1247           JMPA    cc_EQ,_66
0180 4946         1248           CMPB    RL2,#06h
0182 2D06         1249           JMPR    cc_EQ,_60
0184 47F40800     1250           CMPB    RL2,#08h
0188 EA209C02  R  1251           JMPA    cc_EQ,_65
018C EA003603  R  1252           JMPA    cc_UC,_74
                  1253   ; main.c    430  {
                  1254   ; main.c    431   case 4:
                  1255   ; main.c    432    //Обрабатываем фонт размером 4
                  1256   ; main.c    433    s=_pof(font)+(c<<3);
                  1257   ; main.c    434    d=y*(8*13)+(x>>1)+0x8000; //0E:160C - Основной экран
                  1258   ; main.c    435    i=8;
                  1259   ; main.c    436    ms=0xF0;
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  27
main

 LOC CODE        LINE   SOURCELINE

                  1260   ; main.c    437    md=0x0F;
                  1261   ; main.c    438    if (x&1) {ms=0x0F;md=0xF0;}
                  1262   ; main.c    439    //Печать в тетраде
                  1263   ; main.c    440    #pragma asm(@w1=s, @w2=d, @b3, @b4, @w5=i, @b6=ms, @b7=md )
                  1264   ; main.c    441     ADD         @w2,#POF _myscr
                  1265   ; main.c    442         MOV             DPP2,#PAG _myscr ;//0E:160C - Основной экран
                  1266   ; main.c    443         MOV             DPP0,#PAG _font
                  1267   ; main.c    444         _x_x_loop1:         
                  1268   ; main.c    445         MOVB    @b3,[@w2]
                  1269   ; main.c    446         ANDB    @b3,@b7
                  1270   ; main.c    447         MOVB    @b4,[@w1]
                  1271   ; main.c    448         ANDB    @b4,@b6
                  1272   ; main.c    449         ORB             @b3,@b4
                  1273   ; main.c    450         MOVB    [@w2],@b3
                  1274   ; main.c    451         ADD             @w2,#0Dh
                  1275   ; main.c    452         ADD             @w1,#01h
                  1276   ; main.c    453         SUB             @w5,#01h
                  1277   ; main.c    454         JMPR    cc_NZ,_x_x_loop1
                  1278   ; main.c    455    #pragma endasm()
                  1279   ; main.c    456    break;
                  1280   ; main.c    457   case 6:
0190              1281   _60:
                  1282   ; main.c    458    //Обрабатываем фонт размером 6
                  1283   ; main.c    459    s=_pof(font)+(c<<3);
0190 E6FC0000  R  1284           MOV     R12,#POF _font
0194 E6FD0000  R  1285           MOV     R13,#PAG _font
0198 F08C         1286           MOV     R8,R12
019A C02C         1287           MOVBZ   R12,RL1
019C 5C3C         1288           SHL     R12,#03h
019E 008C         1289           ADD     R8,R12
                  1290   ; main.c    460    d=y*(8*13)+((x>>2)*3)+0x8000; //0E:160C - Основной экран
01A0 E6FD6800     1291           MOV     R13,#068h
01A4 0B6D         1292           MUL     R6,R13
01A6 F2FC0EFE     1293           MOV     R12,MDL
01AA F0E9         1294           MOV     R14,R9
01AC BC2E         1295           ASHR    R14,#02h
01AE F0FE         1296           MOV     R15,R14
01B0 5C2F         1297           SHL     R15,#02h
01B2 20FE         1298           SUB     R15,R14
01B4 00CF         1299           ADD     R12,R15
01B6 06FC0080     1300           ADD     R12,#08000h
                  1301   ; main.c    461    i=8;
01BA E08D         1302           MOV     R13,#08h
                  1303   ; main.c    462    switch(x&3)
01BC 6893         1304           AND     R9,#03h
01BE 2D0B         1305           JMPR    cc_EQ,_61
01C0 4891         1306           CMP     R9,#01h
01C2 EA20FA01  R  1307           JMPA    cc_EQ,_62
01C6 4892         1308           CMP     R9,#02h
01C8 EA203402  R  1309           JMPA    cc_EQ,_63
01CC 4893         1310           CMP     R9,#03h
01CE EA207002  R  1311           JMPA    cc_EQ,_64
01D2 EA003603  R  1312           JMPA    cc_UC,_74
                  1313   ; main.c    463    {
                  1314   ; main.c    464         case 0:
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  28
main

 LOC CODE        LINE   SOURCELINE

01D6              1315   _61:
                  1316   ; main.c    465      #pragma asm(@w1=s, @w2=d, @b3, @b4, @w5=i)
01D6 06FC0000  R  1317       ADD         R12,#POF _myscr
01DA E6020000  R  1318                   MOV             DPP2,#PAG _myscr ;//0E:160C - Основной экран
01DE E6000000  R  1319                   MOV             DPP0,#PAG _font
01E2              1320                   _x_x_loop2:         
01E2 A9CC         1321                   MOVB    RL6,[R12]
01E4 69C3         1322                   ANDB    RL6,#003h
01E6 A928         1323                   MOVB    RL1,[R8]
01E8 71C2         1324                   ORB             RL6,RL1
01EA B9CC         1325                   MOVB    [R12],RL6
01EC 06FC0D00     1326                   ADD             R12,#0Dh
01F0 0881         1327                   ADD             R8,#01h
01F2 28D1         1328                   SUB             R13,#01h
01F4 3DF6         1329                   JMPR    cc_NZ,_x_x_loop2
                  1330   ; @w1 = R8
                  1331   ; @w2 = R12
                  1332   ; @b3 = RL6
                  1333   ; @w5 = R13
                  1334   ; main.c    479      #pragma endasm()
                  1335   ; main.c    480          break;
01F6 EA003603  R  1336           JMPA    cc_UC,_74
                  1337   ; main.c    481         case 1:
01FA              1338   _62:
                  1339   ; main.c    482      #pragma asm(@w1=s, @w2=d, @b3, @w5=i)
01FA 06FC0000  R  1340       ADD         R12,#POF _myscr
01FE E6020000  R  1341                   MOV             DPP2,#PAG _myscr ;//0E:160C - Основной экран
0202 E6000000  R  1342                   MOV             DPP0,#PAG _font
0206              1343                   _x_x_loop3:         
0206 A9CC         1344                   MOVB    RL6,[R12]
0208 67FCFC00     1345                   ANDB    RL6,#0FCh
020C A928         1346                   MOVB    RL1,[R8]
020E E103         1347                   MOVB    RH1,#0
0210 7C61         1348                   SHR             R1,#6
0212 71C2         1349                   ORB             RL6,RL1
0214 B9CC         1350                   MOVB    [R12],RL6
0216 08C1         1351                   ADD             R12,#1
0218 A9CC         1352                   MOVB    RL6,[R12]
021A 67FC0F00     1353                   ANDB    RL6,#00Fh
021E A928         1354                   MOVB    RL1,[R8]
0220 5C21         1355                   SHL             R1,#2
0222 71C2         1356                   ORB             RL6,RL1
0224 B9CC         1357                   MOVB    [R12],RL6
0226 06FC0C00     1358                   ADD             R12,#0Ch
022A 0881         1359                   ADD             R8,#01h
022C 28D1         1360                   SUB             R13,#01h
022E 3DEB         1361                   JMPR    cc_NZ,_x_x_loop3
                  1362   ; @w1 = R8
                  1363   ; @w2 = R12
                  1364   ; @b3 = RL6
                  1365   ; @w5 = R13
                  1366   ; main.c    505      #pragma endasm()
                  1367   ; main.c    506          break;
0230 EA003603  R  1368           JMPA    cc_UC,_74
                  1369   ; main.c    507         case 2:
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  29
main

 LOC CODE        LINE   SOURCELINE

0234              1370   _63:
                  1371   ; main.c    508          d++;
0234 08C1         1372           ADD     R12,#01h
                  1373   ; main.c    509      #pragma asm(@w1=s, @w2=d, @b3, @w5=i)
0236 06FC0000  R  1374       ADD         R12,#POF _myscr
023A E6020000  R  1375                   MOV             DPP2,#PAG _myscr;//0E:160C - Основной экран
023E E6000000  R  1376                   MOV             DPP0,#PAG _font
0242              1377                   _x_x_loop4:         
0242 A9CC         1378                   MOVB    RL6,[R12]
0244 67FCF000     1379                   ANDB    RL6,#0F0h
0248 A928         1380                   MOVB    RL1,[R8]
024A E103         1381                   MOVB    RH1,#0
024C 7C41         1382                   SHR             R1,#4
024E 71C2         1383                   ORB             RL6,RL1
0250 B9CC         1384                   MOVB    [R12],RL6
0252 08C1         1385                   ADD             R12,#1
0254 A9CC         1386                   MOVB    RL6,[R12]
0256 67FC3F00     1387                   ANDB    RL6,#03Fh
025A A928         1388                   MOVB    RL1,[R8]
025C 5C41         1389                   SHL             R1,#4
025E 71C2         1390                   ORB             RL6,RL1
0260 B9CC         1391                   MOVB    [R12],RL6
0262 06FC0C00     1392                   ADD             R12,#0Ch
0266 0881         1393                   ADD             R8,#01h
0268 28D1         1394                   SUB             R13,#01h
026A 3DEB         1395                   JMPR    cc_NZ,_x_x_loop4
                  1396   ; @w1 = R8
                  1397   ; @w2 = R12
                  1398   ; @b3 = RL6
                  1399   ; @w5 = R13
                  1400   ; main.c    532      #pragma endasm()
                  1401   ; main.c    533          break;
026C EA003603  R  1402           JMPA    cc_UC,_74
                  1403   ; main.c    534         case 3:
0270              1404   _64:
                  1405   ; main.c    535          d+=2;
0270 08C2         1406           ADD     R12,#02h
                  1407   ; main.c    536      #pragma asm(@w1=s, @w2=d, @b3,@w5=i)
0272 06FC0000  R  1408       ADD         R12,#POF _myscr
0276 E6020000  R  1409                   MOV             DPP2,#PAG _myscr ;//0E:160C - Основной экран
027A E6000000  R  1410                   MOV             DPP0,#PAG _font
027E              1411                   _x_x_loop5:         
027E A9CC         1412                   MOVB    RL6,[R12]
0280 67FCC000     1413                   ANDB    RL6,#0C0h
0284 A928         1414                   MOVB    RL1,[R8]
0286 E103         1415                   MOVB    RH1,#0
0288 7C21         1416                   SHR             R1,#2
028A 71C2         1417                   ORB             RL6,RL1
028C B9CC         1418                   MOVB    [R12],RL6
028E 06FC0D00     1419                   ADD             R12,#0Dh
0292 0881         1420                   ADD             R8,#01h
0294 28D1         1421                   SUB             R13,#01h
0296 3DF3         1422                   JMPR    cc_NZ,_x_x_loop5
                  1423   ; @w1 = R8
                  1424   ; @w2 = R12
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  30
main

 LOC CODE        LINE   SOURCELINE

                  1425   ; @b3 = RL6
                  1426   ; @w5 = R13
                  1427   ; main.c    552      #pragma endasm()
                  1428   ; main.c    553          break;
                  1429   ; main.c    554    }
                  1430   ; main.c    555    break;
0298 EA003603  R  1431           JMPA    cc_UC,_74
                  1432   ; main.c    556   case 8:
029C              1433   _65:
                  1434   ; main.c    557    //Обрабатываем фонт размером 8
                  1435   ; main.c    558    s=_pof(font)+(c<<3);
029C E6FC0000  R  1436           MOV     R12,#POF _font
02A0 E6FD0000  R  1437           MOV     R13,#PAG _font
02A4 F08C         1438           MOV     R8,R12
02A6 C02C         1439           MOVBZ   R12,RL1
02A8 5C3C         1440           SHL     R12,#03h
02AA 008C         1441           ADD     R8,R12
                  1442   ; main.c    559    d=y*(8*13)+x+0x8000; //0E:160C - Основной экран
02AC E6FD6800     1443           MOV     R13,#068h
02B0 0B6D         1444           MUL     R6,R13
02B2 F2FC0EFE     1445           MOV     R12,MDL
02B6 00C9         1446           ADD     R12,R9
02B8 06FC0080     1447           ADD     R12,#08000h
                  1448   ; main.c    560    i=8;
02BC E08D         1449           MOV     R13,#08h
                  1450   ; main.c    561    #pragma asm(@w1=s, @w2=d, @b3, @w5=i )
02BE 06FC0000  R  1451       ADD         R12,#POF _myscr
02C2 E6000000  R  1452           MOV             DPP0,#PAG _font
02C6 E6020000  R  1453           MOV             DPP2,#PAG _myscr ;//0E:160C - Основной экран
02CA CC00         1454           NOP
02CC              1455           _x_x_loop6:        
02CC A9C8         1456           MOVB    RL6,[R8]
02CE B9CC         1457           MOVB    [R12],RL6
02D0 06FC0D00     1458           ADD             R12,#0Dh
02D4 0881         1459           ADD             R8,#01h
02D6 28D1         1460           SUB             R13,#01h
02D8 3DF9         1461           JMPR    cc_NZ,_x_x_loop6
                  1462   ; @w1 = R8
                  1463   ; @w2 = R12
                  1464   ; @b3 = RL6
                  1465   ; @b4 = RL3
                  1466   ; @w5 = R13
                  1467   ; @b6 = RL1
                  1468   ; @b7 = RL2
                  1469   ; main.c    573    #pragma endasm()
                  1470   ; main.c    574    break;
02DA EA003603  R  1471           JMPA    cc_UC,_74
02DE              1472   _66:
02DE E6FC0000  R  1473           MOV     R12,#POF _font
02E2 E6FD0000  R  1474           MOV     R13,#PAG _font
02E6 F08C         1475           MOV     R8,R12
02E8 C02C         1476           MOVBZ   R12,RL1
02EA 5C3C         1477           SHL     R12,#03h
02EC 008C         1478           ADD     R8,R12
02EE E6FD6800     1479           MOV     R13,#068h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  31
main

 LOC CODE        LINE   SOURCELINE

02F2 0B6D         1480           MUL     R6,R13
02F4 F2FC0EFE     1481           MOV     R12,MDL
02F8 F0E9         1482           MOV     R14,R9
02FA BC1E         1483           ASHR    R14,#01h
02FC 00CE         1484           ADD     R12,R14
02FE 06FC0080     1485           ADD     R12,#08000h
0302 E08D         1486           MOV     R13,#08h
0304 E7F2F000     1487           MOVB    RL1,#0F0h
0308 E1F4         1488           MOVB    RL2,#0Fh
030A 9AF90300     1489           JNB     R9.0,_67
030E F124         1490           MOVB    RL1,RL2
0310 E7F4F000     1491           MOVB    RL2,#0F0h
0314              1492   _67:
0314 06FC0000  R  1493       ADD         R12,#POF _myscr
0318 E6020000  R  1494           MOV             DPP2,#PAG _myscr ;//0E:160C - Основной экран
031C E6000000  R  1495           MOV             DPP0,#PAG _font
0320              1496           _x_x_loop1:         
0320 A9CC         1497           MOVB    RL6,[R12]
0322 61C4         1498           ANDB    RL6,RL2
0324 A968         1499           MOVB    RL3,[R8]
0326 6162         1500           ANDB    RL3,RL1
0328 71C6         1501           ORB             RL6,RL3
032A B9CC         1502           MOVB    [R12],RL6
032C 06FC0D00     1503           ADD             R12,#0Dh
0330 0881         1504           ADD             R8,#01h
0332 28D1         1505           SUB             R13,#01h
0334 3DF5         1506           JMPR    cc_NZ,_x_x_loop1
                  1507   ; main.c    577  }
0336              1508   _74:
                  1509   ; main.c    578  #pragma asm
0336 FC02         1510           POP             DPP2
                  1511   ; main.c    580  #pragma endasm
                  1512   ; main.c    581 }
0338 9860         1513           MOV     R6,[R0+]
033A 9880         1514           MOV     R8,[R0+]
033C 9890         1515           MOV     R9,[R0+]
033E DB00         1516           RETS
                  1517   _DrawChar       ENDP
                  1518   ; main.c    582 
                  1519   ; main.c    583 //Печать строки из буфера текста
                  1520   ; main.c    584 void drawStkStr(unsigned char *p, unsigned int y, unsigned int vp, int ep)
                  1521   ; main.c    585 {
                  1522           PUBLIC  _drawStkStr
                  1523   _drawStkStr     PROC    FAR
0340 8890         1524           MOV     [-R0],R9
0342 8880         1525           MOV     [-R0],R8
0344 8870         1526           MOV     [-R0],R7
0346 8860         1527           MOV     [-R0],R6
0348 2802         1528           SUB     R0,#02h
034A F06D         1529           MOV     R6,R13
034C F09C         1530           MOV     R9,R12
034E F07F         1531           MOV     R7,R15
0350 D4800A00     1532           MOV     R8,[R0+#0AH]
                  1533   ; Locals:
                  1534   ; 
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  32
main

 LOC CODE        LINE   SOURCELINE

                  1535   ; Statics:
                  1536   ; 
                  1537   ; CSEs:
                  1538   ;     i = offset 0
                  1539   ;     ep = R8
                  1540   ;     c = RL1
                  1541   ;     p = R9R6
                  1542   ;     vp = R7
                  1543   ;     y = R14
                  1544   ; 
                  1545   ; main.c    586  unsigned int i=0;
0354 E00C         1546           MOV     R12,#00h
0356 B8C0         1547           MOV     [R0],R12
                  1548   ; main.c    587  unsigned char c;
                  1549   ; main.c    588  do
0358              1550   _75:
                  1551   ; main.c    589  {
                  1552   ; main.c    590   c=*p;
0358 DC46         1553           EXTP    R6,#01h
035A A929     1   1554           MOVB    RL1,[R9]
                  1555   ; main.c    591   if (c)
035C 2D1C         1556           JMPR    cc_Z,_78
                  1557   ; main.c    592   {
                  1558   ; main.c    593    if (ep>=0) editline[ep++]=c;
035E 4880         1559           CMP     R8,#00h
0360 CD06         1560           JMPR    cc_SLT,_76
0362 F0C8         1561           MOV     R12,R8
0364 0881         1562           ADD     R8,#01h
0366 D7400000  R  1563           EXTP    #PAG _editline,#01h
036A E42C0000 1R  1564           MOVB    [R12+#POF _editline],RL1
036E              1565   _76:
                  1566   ; main.c    594    p++;
036E 0891         1567           ADD     R9,#01h
                  1568   ; main.c    595    if (vp!=0) vp--; else DrawChar(c,i++,y);
0370 4870         1569           CMP     R7,#00h
0372 2D02         1570           JMPR    cc_Z,_77
0374 2871         1571           SUB     R7,#01h
0376 0D1C         1572           JMPR    cc_UC,_80
0378              1573   _77:
0378 8810         1574           MOV     [-R0],R1
037A 88E0         1575           MOV     [-R0],R14
037C C02C         1576           MOVBZ   R12,RL1
037E D4D00400     1577           MOV     R13,[R0+#04H]
0382 D4F00400     1578           MOV     R15,[R0+#04H]
0386 08F1         1579           ADD     R15,#01h
0388 C4F00400     1580           MOV     [R0+#04H],R15
038C DA003001  R  1581           CALLS   SEG _DrawChar,_DrawChar
0390 98E0         1582           MOV     R14,[R0+]
0392 0802         1583           ADD     R0,#02h
                  1584   ; main.c    596   }
0394 0D0D         1585           JMPR    cc_UC,_80
0396              1586   _78:
                  1587   ; main.c    597   else
                  1588   ; main.c    598   {
                  1589   ; main.c    599    DrawChar(' ',i++,y);
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  33
main

 LOC CODE        LINE   SOURCELINE

0396 88E0         1590           MOV     [-R0],R14
0398 E6FC2000     1591           MOV     R12,#020h
039C D4D00200     1592           MOV     R13,[R0+#02H]
03A0 D4F00200     1593           MOV     R15,[R0+#02H]
03A4 08F1         1594           ADD     R15,#01h
03A6 C4F00200     1595           MOV     [R0+#02H],R15
03AA DA003001  R  1596           CALLS   SEG _DrawChar,_DrawChar
03AE 98E0         1597           MOV     R14,[R0+]
                  1598   ; main.c    600   }
03B0              1599   _80:
                  1600   ; main.c    601  }
                  1601   ; main.c    602  while(i<max_x);
03B0 E6000000  R  1602           MOV     DPP0,#PAG _max_x
03B4 A8C0         1603           MOV     R12,[R0]
03B6 42FC0000  R  1604           CMP     R12,POF _max_x
03BA 8DCE         1605           JMPR    cc_ULT,_75
                  1606   ; main.c    603  if (ep>=0) while((c=*p++)) editline[ep++]=c; //Добиваем остаток строки
03BC 4880         1607           CMP     R8,#00h
03BE CD0A         1608           JMPR    cc_SLT,_83
03C0 0D06         1609           JMPR    cc_UC,_82
03C2              1610   _81:
03C2 F078         1611           MOV     R7,R8
03C4 0881         1612           ADD     R8,#01h
03C6 D7400000  R  1613           EXTP    #PAG _editline,#01h
03CA E4270000 1R  1614           MOVB    [R7+#POF _editline],RL1
03CE              1615   _82:
03CE DC46         1616           EXTP    R6,#01h
03D0 9929     1   1617           MOVB    RL1,[R9+]
03D2 3DF7         1618           JMPR    cc_NZ,_81
03D4              1619   _83:
                  1620   ; main.c    604 }
03D4 0802         1621           ADD     R0,#02h
03D6 9860         1622           MOV     R6,[R0+]
03D8 9870         1623           MOV     R7,[R0+]
03DA 9880         1624           MOV     R8,[R0+]
03DC 9890         1625           MOV     R9,[R0+]
03DE DB00         1626           RETS
                  1627   _drawStkStr     ENDP
                  1628   ; main.c    605 
                  1629   ; main.c    606 void drawFrmStkStr(unsigned char *p, unsigned int y, unsigned int vp, int ep)
                  1630   ; main.c    607 {
                  1631           PUBLIC  _drawFrmStkStr
                  1632   _drawFrmStkStr  PROC    FAR
03E0 8890         1633           MOV     [-R0],R9
03E2 8880         1634           MOV     [-R0],R8
03E4 8870         1635           MOV     [-R0],R7
03E6 8860         1636           MOV     [-R0],R6
03E8 2806         1637           SUB     R0,#06h
03EA F09D         1638           MOV     R9,R13
03EC F08C         1639           MOV     R8,R12
03EE D4700E00     1640           MOV     R7,[R0+#0EH]
                  1641   ; Locals:
                  1642   ; 
                  1643   ; Statics:
                  1644   ; 
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  34
main

 LOC CODE        LINE   SOURCELINE

                  1645   ; CSEs:
                  1646   ;     i = offset 0
                  1647   ;     c = RL6
                  1648   ;     p = R8R9
                  1649   ;     ep = R7
                  1650   ;     spcsum = R12R13
                  1651   ;     vp = R15
                  1652   ;     spcs = R1
                  1653   ;     spcadd = offset 2
                  1654   ;     y = R14
                  1655   ;     i << 16 = R12R13
                  1656   ; 
                  1657   ; main.c    608  unsigned int i=0;
                  1658   ; main.c    609  unsigned char c;
                  1659   ; main.c    610  unsigned long spcsum;
                  1660   ; main.c    611  unsigned long spcadd;
                  1661   ; main.c    612  unsigned int spcs=0;
03F2 E001         1662           MOV     R1,#00h
                  1663   ; main.c    613 
                  1664   ; main.c    614  //Надо посчитать пробелы
                  1665   ; main.c    615  i=0;
03F4 E00C         1666           MOV     R12,#00h
03F6 B8C0         1667           MOV     [R0],R12
                  1668   ; main.c    616  if (*p)
03F8 DC49         1669           EXTP    R9,#01h
03FA A948     1   1670           MOVB    RL2,[R8]
03FC 2D11         1671           JMPR    cc_Z,_110
                  1672   ; main.c    617  {
                  1673   ; main.c    618   i=1; //Считаем со второго символа
03FE E01D         1674           MOV     R13,#01h
0400 B8D0         1675           MOV     [R0],R13
                  1676   ; main.c    619   while((c=p[i])) //Пока не конец строки
0402 0D07         1677           JMPR    cc_UC,_109
0404              1678   _107:
                  1679   ; main.c    620   {
                  1680   ; main.c    621    if (c==' ') spcs++; //Считаем пробелы
0404 47FC2000     1681           CMPB    RL6,#020h
0408 3D01         1682           JMPR    cc_NE,_108
040A 0811         1683           ADD     R1,#01h
040C              1684   _108:
                  1685   ; main.c    622    i++;
040C A860         1686           MOV     R6,[R0]
040E 0861         1687           ADD     R6,#01h
0410 B860         1688           MOV     [R0],R6
0412              1689   _109:
0412 A8C0         1690           MOV     R12,[R0]
0414 F0D8         1691           MOV     R13,R8
0416 F029         1692           MOV     R2,R9
0418 00DC         1693           ADD     R13,R12
041A DC42         1694           EXTP    R2,#01h
041C A9CD     1   1695           MOVB    RL6,[R13]
041E 3DF2         1696           JMPR    cc_NZ,_107
                  1697   ; main.c    623   }
                  1698   ; main.c    624  }
0420              1699   _110:
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  35
main

 LOC CODE        LINE   SOURCELINE

                  1700   ; main.c    625  if (i>max_x)
0420 E6000000  R  1701           MOV     DPP0,#PAG _max_x
0424 A860         1702           MOV     R6,[R0]
0426 42F60000  R  1703           CMP     R6,POF _max_x
042A FD03         1704           JMPR    cc_ULE,_111
                  1705   ; main.c    626   i=0; //Не добавляем пробелы, строка длиннее, чем экран
042C E00C         1706           MOV     R12,#00h
042E B8C0         1707           MOV     [R0],R12
0430 0D07         1708           JMPR    cc_UC,_112
0432              1709   _111:
                  1710   ; main.c    627  else
                  1711   ; main.c    628   i=max_x-i; //Теперь в i - общее количество добавляемых пробелов
0432 E6000000  R  1712           MOV     DPP0,#PAG _max_x
0436 A8C0         1713           MOV     R12,[R0]
0438 F2F60000  R  1714           MOV     R6,POF _max_x
043C 206C         1715           SUB     R6,R12
043E B860         1716           MOV     [R0],R6
0440              1717   _112:
                  1718   ; main.c    629  spcadd=0;
0440 E006         1719           MOV     R6,#00h
0442 E00C         1720           MOV     R12,#00h
0444 C4600200     1721           MOV     [R0+#02H],R6
0448 C4C00400     1722           MOV     [R0+#04H],R12
                  1723   ; main.c    630  spcsum=0;
044C F0DC         1724           MOV     R13,R12
                  1725   ; main.c    631  if (spcs)
044E 4810         1726           CMP     R1,#00h
0450 2D15         1727           JMPR    cc_Z,_113
                  1728   ; main.c    632  {
                  1729   ; main.c    633   spcadd=((unsigned long)i<<16)/spcs;
0452 A8D0         1730           MOV     R13,[R0]
0454 F2FC1CFF     1731           MOV     R12,ZEROS
0458 F04C         1732           MOV     R4,R12
045A F05D         1733           MOV     R5,R13
045C F0A1         1734           MOV     R10,R1
045E E00B         1735           MOV     R11,#00h
0460 DA000000  R  1736           CALLS   SEG __udil,__udil
0464 C4400200     1737           MOV     [R0+#02H],R4
0468 C4500400     1738           MOV     [R0+#04H],R5
                  1739   ; main.c    634   spcsum=((unsigned long)i<<16)%spcs;
046C F04C         1740           MOV     R4,R12
046E F05D         1741           MOV     R5,R13
0470 F0A1         1742           MOV     R10,R1
0472 E00B         1743           MOV     R11,#00h
0474 DA000000  R  1744           CALLS   SEG __umol,__umol
0478 F0C4         1745           MOV     R12,R4
047A F0D5         1746           MOV     R13,R5
                  1747   ; main.c    635  }
047C              1748   _113:
                  1749   ; main.c    636  spcsum+=spcadd; //Начальное значение
047C D4600200     1750           MOV     R6,[R0+#02H]
0480 D4100400     1751           MOV     R1,[R0+#04H]
0484 00C6         1752           ADD     R12,R6
0486 10D1         1753           ADDC    R13,R1
                  1754   ; main.c    637 
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  36
main

 LOC CODE        LINE   SOURCELINE

                  1755   ; main.c    638  i=0;
0488 E002         1756           MOV     R2,#00h
048A B820         1757           MOV     [R0],R2
                  1758   ; main.c    639  c=*p;
048C DC49         1759           EXTP    R9,#01h
048E A9C8     1   1760           MOVB    RL6,[R8]
                  1761   ; main.c    640  if (c)
0490 EA203205  R  1762           JMPA    cc_Z,_124
                  1763   ; main.c    641  {
                  1764   ; main.c    642   if (ep>=0) editline[ep++]=c;
0494 4870         1765           CMP     R7,#00h
0496 CD06         1766           JMPR    cc_SLT,_114
0498 F037         1767           MOV     R3,R7
049A 0871         1768           ADD     R7,#01h
049C D7400000  R  1769           EXTP    #PAG _editline,#01h
04A0 E4C30000 1R  1770           MOVB    [R3+#POF _editline],RL6
04A4              1771   _114:
                  1772   ; main.c    643   if (vp!=0) vp--; else DrawChar(c,i++,y);
04A4 48F0         1773           CMP     R15,#00h
04A6 2D02         1774           JMPR    cc_Z,_115
04A8 28F1         1775           SUB     R15,#01h
04AA 0D0E         1776           JMPR    cc_UC,_116
04AC              1777   _115:
04AC E011         1778           MOV     R1,#01h
04AE B810         1779           MOV     [R0],R1
04B0 88E0         1780           MOV     [-R0],R14
04B2 88C0         1781           MOV     [-R0],R12
04B4 88D0         1782           MOV     [-R0],R13
04B6 88F0         1783           MOV     [-R0],R15
04B8 C0CC         1784           MOVBZ   R12,RL6
04BA E00D         1785           MOV     R13,#00h
04BC DA003001  R  1786           CALLS   SEG _DrawChar,_DrawChar
04C0 98F0         1787           MOV     R15,[R0+]
04C2 98D0         1788           MOV     R13,[R0+]
04C4 98C0         1789           MOV     R12,[R0+]
04C6 98E0         1790           MOV     R14,[R0+]
04C8              1791   _116:
                  1792   ; main.c    644   p++;
04C8 0881         1793           ADD     R8,#01h
                  1794   ; main.c    645  }
                  1795   ; main.c    646  else goto L2;
                  1796   ; main.c    647  do
04CA              1797   _117:
                  1798   ; main.c    648  {
                  1799   ; main.c    649   c=*p;
04CA DC49         1800           EXTP    R9,#01h
04CC A9C8     1   1801           MOVB    RL6,[R8]
                  1802   ; main.c    650   if (c)
04CE 2D31         1803           JMPR    cc_Z,_124
                  1804   ; main.c    651   {
                  1805   ; main.c    652    if (ep>=0) editline[ep++]=c;
04D0 4870         1806           CMP     R7,#00h
04D2 CD06         1807           JMPR    cc_SLT,_118
04D4 F017         1808           MOV     R1,R7
04D6 0871         1809           ADD     R7,#01h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  37
main

 LOC CODE        LINE   SOURCELINE

04D8 D7400000  R  1810           EXTP    #PAG _editline,#01h
04DC E4C10000 1R  1811           MOVB    [R1+#POF _editline],RL6
04E0              1812   _118:
                  1813   ; main.c    653    if (vp!=0) vp--; else DrawChar(c,i++,y);
04E0 48F0         1814           CMP     R15,#00h
04E2 2D02         1815           JMPR    cc_Z,_119
04E4 28F1         1816           SUB     R15,#01h
04E6 0D12         1817           JMPR    cc_UC,_120
04E8              1818   _119:
04E8 88E0         1819           MOV     [-R0],R14
04EA 88C0         1820           MOV     [-R0],R12
04EC 88D0         1821           MOV     [-R0],R13
04EE 88F0         1822           MOV     [-R0],R15
04F0 C0CC         1823           MOVBZ   R12,RL6
04F2 D4D00800     1824           MOV     R13,[R0+#08H]
04F6 D4100800     1825           MOV     R1,[R0+#08H]
04FA 0811         1826           ADD     R1,#01h
04FC C4100800     1827           MOV     [R0+#08H],R1
0500 DA003001  R  1828           CALLS   SEG _DrawChar,_DrawChar
0504 98F0         1829           MOV     R15,[R0+]
0506 98D0         1830           MOV     R13,[R0+]
0508 98C0         1831           MOV     R12,[R0+]
050A 98E0         1832           MOV     R14,[R0+]
050C              1833   _120:
                  1834   ; main.c    654    if (c==' ')
050C 47FC2000     1835           CMPB    RL6,#020h
0510 3D0E         1836           JMPR    cc_NE,_122
                  1837   ; main.c    655    {
                  1838   ; main.c    656       //Добавляем пробелы
                  1839   ; main.c    657       if (spcsum>=65536)
0512 F06C         1840           MOV     R6,R12
0514 F01D         1841           MOV     R1,R13
0516 2860         1842           SUB     R6,#00h
0518 3811         1843           SUBC    R1,#01h
051A 8D03         1844           JMPR    cc_ULT,_121
                  1845   ; main.c    658       {
                  1846   ; main.c    659        spcsum-=65536;
051C 28C0         1847           SUB     R12,#00h
051E 38D1         1848           SUBC    R13,#01h
                  1849   ; main.c    660            continue;
0520 0D1C         1850           JMPR    cc_UC,_126
                  1851   ; main.c    661       }
0522              1852   _121:
                  1853   ; main.c    662       spcsum+=spcadd;
0522 D4600200     1854           MOV     R6,[R0+#02H]
0526 D4100400     1855           MOV     R1,[R0+#04H]
052A 00C6         1856           ADD     R12,R6
052C 10D1         1857           ADDC    R13,R1
                  1858   ; main.c    663    }
052E              1859   _122:
                  1860   ; main.c    664    p++;
052E 0881         1861           ADD     R8,#01h
                  1862   ; main.c    665   }
0530 0D14         1863           JMPR    cc_UC,_126
                  1864   ; main.c    666   else
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  38
main

 LOC CODE        LINE   SOURCELINE

                  1865   ; main.c    667   {
                  1866   ; main.c    668    L2:
0532              1867   _124:
                  1868   ; main.c    669    DrawChar(' ',i++,y);
0532 F06E         1869           MOV     R6,R14
0534 88F0         1870           MOV     [-R0],R15
0536 88C0         1871           MOV     [-R0],R12
0538 88D0         1872           MOV     [-R0],R13
053A E6FC2000     1873           MOV     R12,#020h
053E D4D00600     1874           MOV     R13,[R0+#06H]
0542 D4E00600     1875           MOV     R14,[R0+#06H]
0546 08E1         1876           ADD     R14,#01h
0548 C4E00600     1877           MOV     [R0+#06H],R14
054C F0E6         1878           MOV     R14,R6
054E DA003001  R  1879           CALLS   SEG _DrawChar,_DrawChar
0552 98D0         1880           MOV     R13,[R0+]
0554 98C0         1881           MOV     R12,[R0+]
0556 98F0         1882           MOV     R15,[R0+]
0558 F0E6         1883           MOV     R14,R6
                  1884   ; main.c    670   }
                  1885   ; main.c    671  }
                  1886   ; main.c    672  while(i<max_x);
055A              1887   _126:
055A E6000000  R  1888           MOV     DPP0,#PAG _max_x
055E A860         1889           MOV     R6,[R0]
0560 42F60000  R  1890           CMP     R6,POF _max_x
0564 8DB2         1891           JMPR    cc_ULT,_117
                  1892   ; main.c    673  if (ep>=0) while((c=*p++)) editline[ep++]=c; //Добиваем остаток строки
0566 4870         1893           CMP     R7,#00h
0568 CD0A         1894           JMPR    cc_SLT,_129
056A 0D06         1895           JMPR    cc_UC,_128
056C              1896   _127:
056C F0C7         1897           MOV     R12,R7
056E 0871         1898           ADD     R7,#01h
0570 D7400000  R  1899           EXTP    #PAG _editline,#01h
0574 E4CC0000 1R  1900           MOVB    [R12+#POF _editline],RL6
0578              1901   _128:
0578 DC49         1902           EXTP    R9,#01h
057A 99C8     1   1903           MOVB    RL6,[R8+]
057C 3DF7         1904           JMPR    cc_NZ,_127
057E              1905   _129:
                  1906   ; main.c    674 }
057E 0806         1907           ADD     R0,#06h
0580 9860         1908           MOV     R6,[R0+]
0582 9870         1909           MOV     R7,[R0+]
0584 9880         1910           MOV     R8,[R0+]
0586 9890         1911           MOV     R9,[R0+]
0588 DB00         1912           RETS
                  1913   _drawFrmStkStr  ENDP
                  1914   ; main.c    675 
                  1915   ; main.c    676 //Поиск начала строки в верхнем стеке
                  1916   ; main.c    677 extern unsigned int bl_us(unsigned int pos);
                  1917   ; main.c    678 extern unsigned int bl_ds(unsigned int pos);
                  1918   ; main.c    679 
                  1919   ; main.c    680 //Перенос из верхнего стека в нижний (на строку вверх)
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  39
main

 LOC CODE        LINE   SOURCELINE

                  1920   ; main.c    681 extern void move_up(void);
                  1921   ; main.c    682 //Перенос из нижнего стека в верхний (на строку вниз)
                  1922   ; main.c    683 extern void move_dw(void);
                  1923   ; main.c    684 //---------------------------------------
                  1924   ; main.c    685 // Работа с таблицей блоков
                  1925   ; main.c    686 //---------------------------------------
                  1926   ; main.c    687 //Поиск первого свободного блока
                  1927   ; main.c    688 unsigned char FindFreeBlock(void)
                  1928   ; main.c    689 {
                  1929           PUBLIC  _FindFreeBlock
                  1930   _FindFreeBlock  PROC    FAR
                  1931   ; Locals:
                  1932   ; 
                  1933   ; Statics:
                  1934   ; 
                  1935   ; CSEs:
                  1936   ;     i = RL1
                  1937   ;     &bfree + (unsigned int) i = R12R13
                  1938   ; 
                  1939   ; main.c    690  unsigned char i=0;
058A E102         1940           MOVB    RL1,#00h
                  1941   ; main.c    691  do
058C              1942   _130:
                  1943   ; main.c    692  {
                  1944   ; main.c    693   if (!bfree[i])
058C E6FC0000  R  1945           MOV     R12,#POF _bfree
0590 E6FD0000  R  1946           MOV     R13,#PAG _bfree
0594 C02E         1947           MOVBZ   R14,RL1
0596 00CE         1948           ADD     R12,R14
0598 DC4D         1949           EXTP    R13,#01h
059A A94C     1   1950           MOVB    RL2,[R12]
059C 3D04         1951           JMPR    cc_NZ,_131
                  1952   ; main.c    694   {
                  1953   ; main.c    695    bfree[i]=1;
059E E114         1954           MOVB    RL2,#01h
05A0 DC4D         1955           EXTP    R13,#01h
05A2 B94C     1   1956           MOVB    [R12],RL2
                  1957   ; main.c    696    break;
05A4 0D02         1958           JMPR    cc_UC,_132
                  1959   ; main.c    697   }
05A6              1960   _131:
                  1961   ; main.c    698  }
                  1962   ; main.c    699  while(++i);
05A6 0921         1963           ADDB    RL1,#01h
05A8 3DF1         1964           JMPR    cc_NZ,_130
05AA              1965   _132:
                  1966   ; main.c    700  return(i);
05AA F182         1967           MOVB    RL4,RL1
                  1968   ; main.c    701 }
05AC DB00         1969           RETS
                  1970   _FindFreeBlock  ENDP
                  1971   ; main.c    702 
                  1972   ; main.c    703 //---------------------------------------
                  1973   ; main.c    704 // Загрузка с диска нового фрагмента
                  1974   ; main.c    705 //---------------------------------------
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  40
main

 LOC CODE        LINE   SOURCELINE

                  1975   ; main.c    706 void DoDiskAccess(unsigned int flag)
                  1976   ; main.c    707 {
                  1977           PUBLIC  _DoDiskAccess
                  1978   _DoDiskAccess   PROC    FAR
05AE 8890         1979           MOV     [-R0],R9
05B0 8880         1980           MOV     [-R0],R8
05B2 8860         1981           MOV     [-R0],R6
05B4 2804         1982           SUB     R0,#04h
                  1983   ; Locals:
                  1984   ;     ul = offset 0
                  1985   ; 
                  1986   ; Statics:
                  1987   ; 
                  1988   ; CSEs:
                  1989   ;     b = RL6
                  1990   ;     f = R8
                  1991   ;     flag = R9
                  1992   ; 
                  1993   ; main.c    708  int f;
                  1994   ; main.c    709  unsigned char b;
                  1995   ; main.c    710  long ul;
                  1996   ; main.c    711 
                  1997   ; main.c    712  if ((f=stk_fhandle)==-1)
05B6 E6000000  R  1998           MOV     DPP0,#PAG _stk_fhandle
05BA F09C         1999           MOV     R9,R12
05BC F2F80000  R  2000           MOV     R8,POF _stk_fhandle
05C0 46F8FFFF     2001           CMP     R8,#0FFFFh
05C4 3D0F         2002           JMPR    cc_NE,_133
                  2003   ; main.c    713  {
                  2004   ; main.c    714   stk_fhandle=f=FileOpen((STR)stkfile,_O_RDWR+_O_BINARY,_S_IREAD); //Файл верхнего стека
05C6 E6FC0000  R  2005           MOV     R12,#POF _stkfile
05CA E6FD0000  R  2006           MOV     R13,#PAG _stkfile
05CE E6FE0280     2007           MOV     R14,#08002h
05D2 E6FF0001     2008           MOV     R15,#0100h
05D6 DA000000  R  2009           CALLS   SEG _FileOpen,_FileOpen
05DA E6000000  R  2010           MOV     DPP0,#PAG _stk_fhandle
05DE F084         2011           MOV     R8,R4
05E0 F6F80000  R  2012           MOV     POF _stk_fhandle,R8
                  2013   ; main.c    715  }
05E4              2014   _133:
                  2015   ; main.c    716  if (disk_access&LOAD_UP)
05E4 E6000000  R  2016           MOV     DPP0,#PAG _disk_access
05E8 CC00         2017           NOP
05EA F3FC0000  R  2018           MOVB    RL6,POF _disk_access
05EE 9AF64710     2019           JNB     R6.1,_134
                  2020   ; main.c    717  {
                  2021   ; main.c    718   memcpy(ustk+STKSZ50,ustk,usp);
05F2 F2FC0000  R  2022           MOV     R12,POF _usp
05F6 88C0         2023           MOV     [-R0],R12
05F8 E6FC0000  R  2024           MOV     R12,#POF _ustk+8192
05FC E6FD0000  R  2025           MOV     R13,#PAG _ustk
0600 E6FE0000  R  2026           MOV     R14,#POF _ustk
0604 E6FF0000  R  2027           MOV     R15,#PAG _ustk
0608 DA000000  R  2028           CALLS   SEG _memcpy,_memcpy
                  2029   ; main.c    719   b=ubat[u_disk--];
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  41
main

 LOC CODE        LINE   SOURCELINE

060C E6000000  R  2030           MOV     DPP0,#PAG _u_disk
0610 0802         2031           ADD     R0,#02h
0612 F2FC0000  R  2032           MOV     R12,POF _u_disk
0616 F2FD0000  R  2033           MOV     R13,POF _u_disk
061A 28D1         2034           SUB     R13,#01h
061C F6FD0000  R  2035           MOV     POF _u_disk,R13
0620 D7400000  R  2036           EXTP    #PAG _ubat,#01h
0624 F4CC0000 1R  2037           MOVB    RL6,[R12+#POF _ubat]
                  2038   ; main.c    720   bfree[b]=0;
0628 E102         2039           MOVB    RL1,#00h
062A C0CC         2040           MOVBZ   R12,RL6
062C D7400000  R  2041           EXTP    #PAG _bfree,#01h
0630 E42C0000 1R  2042           MOVB    [R12+#POF _bfree],RL1
                  2043   ; main.c    721   FileSeek(f,_mulu32(STKSZ50,b),0,&ul);
0634 F0C0         2044           MOV     R12,R0
0636 66FCFF3F     2045           AND     R12,#03FFFh
063A F2FD02FE     2046           MOV     R13,DPP1
063E 88D0         2047           MOV     [-R0],R13
0640 88C0         2048           MOV     [-R0],R12
0642 E6FD0020     2049           MOV     R13,#02000h
0646 C0C6         2050           MOVBZ   R6,RL6
0648 1BD6         2051           MULU    R13,R6
064A F2FE0CFE     2052           MOV     R14,MDH
064E F2FD0EFE     2053           MOV     R13,MDL
0652 F0C8         2054           MOV     R12,R8
0654 E00F         2055           MOV     R15,#00h
0656 DA000000  R  2056           CALLS   SEG _FileSeek,_FileSeek
065A 0804         2057           ADD     R0,#04h
                  2058   ; main.c    722   FileRead(f,ustk,STKSZ50);
065C F0C8         2059           MOV     R12,R8
065E E6FD0000  R  2060           MOV     R13,#POF _ustk
0662 E6FE0000  R  2061           MOV     R14,#PAG _ustk
0666 E6FF0020     2062           MOV     R15,#02000h
066A DA000000  R  2063           CALLS   SEG _FileRead,_FileRead
                  2064   ; main.c    723   usp+=STKSZ50;
066E E6000000  R  2065           MOV     DPP0,#PAG _usp
0672 CC00         2066           NOP
0674 F2F60000  R  2067           MOV     R6,POF _usp
0678 06F60020     2068           ADD     R6,#02000h
067C F6F60000  R  2069           MOV     POF _usp,R6
                  2070   ; main.c    724  }
0680              2071   _134:
                  2072   ; main.c    725  if (disk_access&LOAD_DOWN)
0680 E6000000  R  2073           MOV     DPP0,#PAG _disk_access
0684 CC00         2074           NOP
0686 F3FC0000  R  2075           MOVB    RL6,POF _disk_access
068A 9AF64D20     2076           JNB     R6.2,_135
                  2077   ; main.c    726  {
                  2078   ; main.c    727   memcpy(dstk+(dsp-STKSZ50),dstk+dsp,STKSZ-dsp);
068E E6FC0040     2079           MOV     R12,#04000h
0692 22FC0000  R  2080           SUB     R12,POF _dsp
0696 88C0         2081           MOV     [-R0],R12
0698 E6FC0000  R  2082           MOV     R12,#POF _dstk-8192
069C E6FD0000  R  2083           MOV     R13,#PAG _dstk
06A0 02FC0000  R  2084           ADD     R12,POF _dsp
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  42
main

 LOC CODE        LINE   SOURCELINE

06A4 E6FE0000  R  2085           MOV     R14,#POF _dstk
06A8 E6FF0000  R  2086           MOV     R15,#PAG _dstk
06AC 02FE0000  R  2087           ADD     R14,POF _dsp
06B0 DA000000  R  2088           CALLS   SEG _memcpy,_memcpy
                  2089   ; main.c    728   b=dbat[d_disk--];
06B4 E6000000  R  2090           MOV     DPP0,#PAG _d_disk
06B8 0802         2091           ADD     R0,#02h
06BA F2FC0000  R  2092           MOV     R12,POF _d_disk
06BE F2FD0000  R  2093           MOV     R13,POF _d_disk
06C2 28D1         2094           SUB     R13,#01h
06C4 F6FD0000  R  2095           MOV     POF _d_disk,R13
06C8 D7400000  R  2096           EXTP    #PAG _dbat,#01h
06CC F4CC0000 1R  2097           MOVB    RL6,[R12+#POF _dbat]
                  2098   ; main.c    729   bfree[b]=0;
06D0 E102         2099           MOVB    RL1,#00h
06D2 C0CC         2100           MOVBZ   R12,RL6
06D4 D7400000  R  2101           EXTP    #PAG _bfree,#01h
06D8 E42C0000 1R  2102           MOVB    [R12+#POF _bfree],RL1
                  2103   ; main.c    730   FileSeek(f,_mulu32(STKSZ50,b),0,&ul);
06DC F0C0         2104           MOV     R12,R0
06DE 66FCFF3F     2105           AND     R12,#03FFFh
06E2 F2FD02FE     2106           MOV     R13,DPP1
06E6 88D0         2107           MOV     [-R0],R13
06E8 88C0         2108           MOV     [-R0],R12
06EA E6FD0020     2109           MOV     R13,#02000h
06EE C0C6         2110           MOVBZ   R6,RL6
06F0 1BD6         2111           MULU    R13,R6
06F2 F2FE0CFE     2112           MOV     R14,MDH
06F6 F2FD0EFE     2113           MOV     R13,MDL
06FA F0C8         2114           MOV     R12,R8
06FC E00F         2115           MOV     R15,#00h
06FE DA000000  R  2116           CALLS   SEG _FileSeek,_FileSeek
0702 0804         2117           ADD     R0,#04h
                  2118   ; main.c    731   FileRead(f,dstk+STKSZ50,STKSZ50);
0704 F0C8         2119           MOV     R12,R8
0706 E6FD0000  R  2120           MOV     R13,#POF _dstk+8192
070A E6FE0000  R  2121           MOV     R14,#PAG _dstk
070E E6FF0020     2122           MOV     R15,#02000h
0712 DA000000  R  2123           CALLS   SEG _FileRead,_FileRead
                  2124   ; main.c    732   dsp-=STKSZ50;
0716 E6000000  R  2125           MOV     DPP0,#PAG _dsp
071A CC00         2126           NOP
071C F2F60000  R  2127           MOV     R6,POF _dsp
0720 26F60020     2128           SUB     R6,#02000h
0724 F6F60000  R  2129           MOV     POF _dsp,R6
                  2130   ; main.c    733  }
0728              2131   _135:
                  2132   ; main.c    734  if (disk_access&SAVE_UP)
0728 E6000000  R  2133           MOV     DPP0,#PAG _disk_access
072C CC00         2134           NOP
072E F3FC0000  R  2135           MOVB    RL6,POF _disk_access
0732 9AF63F30     2136           JNB     R6.3,_136
                  2137   ; main.c    735  {
                  2138   ; main.c    736   b=FindFreeBlock();
0736 DA008A05  R  2139           CALLS   SEG _FindFreeBlock,_FindFreeBlock
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  43
main

 LOC CODE        LINE   SOURCELINE

                  2140   ; main.c    737   ubat[++u_disk]=b;
073A E6000000  R  2141           MOV     DPP0,#PAG _u_disk
073E F1C8         2142           MOVB    RL6,RL4
0740 F2FC0000  R  2143           MOV     R12,POF _u_disk
0744 08C1         2144           ADD     R12,#01h
0746 F6FC0000  R  2145           MOV     POF _u_disk,R12
074A D7400000  R  2146           EXTP    #PAG _ubat,#01h
074E E4CC0000 1R  2147           MOVB    [R12+#POF _ubat],RL6
                  2148   ; main.c    738   FileSeek(f,_mulu32(STKSZ50,b),0,&ul);
0752 F0C0         2149           MOV     R12,R0
0754 66FCFF3F     2150           AND     R12,#03FFFh
0758 F2FD02FE     2151           MOV     R13,DPP1
075C 88D0         2152           MOV     [-R0],R13
075E 88C0         2153           MOV     [-R0],R12
0760 E6FD0020     2154           MOV     R13,#02000h
0764 C0C6         2155           MOVBZ   R6,RL6
0766 1BD6         2156           MULU    R13,R6
0768 F2FE0CFE     2157           MOV     R14,MDH
076C F2FD0EFE     2158           MOV     R13,MDL
0770 F0C8         2159           MOV     R12,R8
0772 E00F         2160           MOV     R15,#00h
0774 DA000000  R  2161           CALLS   SEG _FileSeek,_FileSeek
0778 0804         2162           ADD     R0,#04h
                  2163   ; main.c    739   FileWrite(f,ustk,STKSZ50);
077A F0C8         2164           MOV     R12,R8
077C E6FD0000  R  2165           MOV     R13,#POF _ustk
0780 E6FE0000  R  2166           MOV     R14,#PAG _ustk
0784 E6FF0020     2167           MOV     R15,#02000h
0788 DA000000  R  2168           CALLS   SEG _FileWrite,_FileWrite
                  2169   ; main.c    740   memcpy(ustk,ustk+STKSZ50,usp-=STKSZ50);
078C E6000000  R  2170           MOV     DPP0,#PAG _usp
0790 E6FC0000  R  2171           MOV     R12,#POF _ustk
0794 F2F60000  R  2172           MOV     R6,POF _usp
0798 26F60020     2173           SUB     R6,#02000h
079C F6F60000  R  2174           MOV     POF _usp,R6
07A0 8860         2175           MOV     [-R0],R6
07A2 E6FD0000  R  2176           MOV     R13,#PAG _ustk
07A6 E6FE0000  R  2177           MOV     R14,#POF _ustk+8192
07AA E6FF0000  R  2178           MOV     R15,#PAG _ustk
07AE DA000000  R  2179           CALLS   SEG _memcpy,_memcpy
07B2 0802         2180           ADD     R0,#02h
                  2181   ; main.c    741  }
07B4              2182   _136:
                  2183   ; main.c    742  if (disk_access&SAVE_DOWN)
07B4 E6000000  R  2184           MOV     DPP0,#PAG _disk_access
07B8 CC00         2185           NOP
07BA F3FC0000  R  2186           MOVB    RL6,POF _disk_access
07BE 9AF64940     2187           JNB     R6.4,_137
                  2188   ; main.c    743  {
                  2189   ; main.c    744   b=FindFreeBlock();
07C2 DA008A05  R  2190           CALLS   SEG _FindFreeBlock,_FindFreeBlock
                  2191   ; main.c    745   dbat[++d_disk]=b;
07C6 E6000000  R  2192           MOV     DPP0,#PAG _d_disk
07CA F1C8         2193           MOVB    RL6,RL4
07CC F2FC0000  R  2194           MOV     R12,POF _d_disk
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  44
main

 LOC CODE        LINE   SOURCELINE

07D0 08C1         2195           ADD     R12,#01h
07D2 F6FC0000  R  2196           MOV     POF _d_disk,R12
07D6 D7400000  R  2197           EXTP    #PAG _dbat,#01h
07DA E4CC0000 1R  2198           MOVB    [R12+#POF _dbat],RL6
                  2199   ; main.c    746   FileSeek(f,_mulu32(STKSZ50,b),0,&ul);
07DE F0C0         2200           MOV     R12,R0
07E0 66FCFF3F     2201           AND     R12,#03FFFh
07E4 F2FD02FE     2202           MOV     R13,DPP1
07E8 88D0         2203           MOV     [-R0],R13
07EA 88C0         2204           MOV     [-R0],R12
07EC E6FD0020     2205           MOV     R13,#02000h
07F0 C0C6         2206           MOVBZ   R6,RL6
07F2 1BD6         2207           MULU    R13,R6
07F4 F2FE0CFE     2208           MOV     R14,MDH
07F8 F2FD0EFE     2209           MOV     R13,MDL
07FC F0C8         2210           MOV     R12,R8
07FE E00F         2211           MOV     R15,#00h
0800 DA000000  R  2212           CALLS   SEG _FileSeek,_FileSeek
0804 0804         2213           ADD     R0,#04h
                  2214   ; main.c    747   FileWrite(f,dstk+STKSZ50,STKSZ50);
0806 F0C8         2215           MOV     R12,R8
0808 E6FD0000  R  2216           MOV     R13,#POF _dstk+8192
080C E6FE0000  R  2217           MOV     R14,#PAG _dstk
0810 E6FF0020     2218           MOV     R15,#02000h
0814 DA000000  R  2219           CALLS   SEG _FileWrite,_FileWrite
                  2220   ; main.c    748   memcpy(dstk+(dsp+STKSZ50),dstk+dsp,STKSZ50-dsp);
0818 E6000000  R  2221           MOV     DPP0,#PAG _dsp
081C E6F60020     2222           MOV     R6,#02000h
0820 22F60000  R  2223           SUB     R6,POF _dsp
0824 8860         2224           MOV     [-R0],R6
0826 E6FC0000  R  2225           MOV     R12,#POF _dstk+8192
082A E6FD0000  R  2226           MOV     R13,#PAG _dstk
082E 02FC0000  R  2227           ADD     R12,POF _dsp
0832 E6FE0000  R  2228           MOV     R14,#POF _dstk
0836 E6FF0000  R  2229           MOV     R15,#PAG _dstk
083A 02FE0000  R  2230           ADD     R14,POF _dsp
083E DA000000  R  2231           CALLS   SEG _memcpy,_memcpy
                  2232   ; main.c    749   dsp+=STKSZ50;
0842 E6000000  R  2233           MOV     DPP0,#PAG _dsp
0846 0802         2234           ADD     R0,#02h
0848 F2F60000  R  2235           MOV     R6,POF _dsp
084C 06F60020     2236           ADD     R6,#02000h
0850 F6F60000  R  2237           MOV     POF _dsp,R6
                  2238   ; main.c    750  }
0854              2239   _137:
                  2240   ; main.c    751  disk_access=0;
0854 E6000000  R  2241           MOV     DPP0,#PAG _disk_access
0858 CC00         2242           NOP
085A F78E0000  R  2243           MOVB    POF _disk_access,ZEROS
                  2244   ; main.c    752  if (flag)
085E 4890         2245           CMP     R9,#00h
0860 2D08         2246           JMPR    cc_Z,_138
                  2247   ; main.c    753  {
                  2248   ; main.c    754   FileClose(f);
0862 F0C8         2249           MOV     R12,R8
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  45
main

 LOC CODE        LINE   SOURCELINE

0864 DA000000  R  2250           CALLS   SEG _FileClose,_FileClose
                  2251   ; main.c    755   stk_fhandle=-1;
0868 E6000000  R  2252           MOV     DPP0,#PAG _stk_fhandle
086C CC00         2253           NOP
086E F68F0000  R  2254           MOV     POF _stk_fhandle,ONES
                  2255   ; main.c    756  }
0872              2256   _138:
                  2257   ; main.c    757  if ((!terminated)&&flag) SendMessage((void far *)0x3B5E8,0xF8,dia_id);
0872 E6000000  R  2258           MOV     DPP0,#PAG _terminated
0876 CC00         2259           NOP
0878 F2F80000  R  2260           MOV     R8,POF _terminated
087C 3D0B         2261           JMPR    cc_NZ,_140
087E 4890         2262           CMP     R9,#00h
0880 2D09         2263           JMPR    cc_Z,_140
0882 E6FCE835     2264           MOV     R12,#035E8h
0886 E0ED         2265           MOV     R13,#0Eh
0888 E6FEF800     2266           MOV     R14,#0F8h
088C F2FF0000  R  2267           MOV     R15,POF _dia_id
0890 DA000000  R  2268           CALLS   SEG _SendMessage,_SendMessage
                  2269   ; main.c    758  return;
                  2270   ; main.c    759 }
0894              2271   _140:
0894 0804         2272           ADD     R0,#04h
0896 9860         2273           MOV     R6,[R0+]
0898 9880         2274           MOV     R8,[R0+]
089A 9890         2275           MOV     R9,[R0+]
089C DB00         2276           RETS
                  2277   _DoDiskAccess   ENDP
                  2278   ; main.c    760 
                  2279   ; main.c    761 //------------------------------------------
                  2280   ; main.c    762 // Проверка необходимости чтения/записи с диска/на диск
                  2281   ; main.c    763 //------------------------------------------
                  2282   ; main.c    764 void CheckDiskAccess(void)
                  2283   ; main.c    765 {
                  2284           PUBLIC  _CheckDiskAccess
                  2285   _CheckDiskAccess        PROC    FAR
                  2286   ; Locals:
                  2287   ; 
                  2288   ; Statics:
                  2289   ; 
                  2290   ; CSEs:
                  2291   ; 
                  2292   ; main.c    766  if ((usp<STKMIN)&&(u_disk>=0)) disk_access|=LOAD_UP;
089E E6000000  R  2293           MOV     DPP0,#PAG _usp
08A2 CC00         2294           NOP
08A4 F2FC0000  R  2295           MOV     R12,POF _usp
08A8 46FCB80B     2296           CMP     R12,#0BB8h
08AC 9D09         2297           JMPR    cc_UGE,_142
08AE F2FD0000  R  2298           MOV     R13,POF _u_disk
08B2 48D0         2299           CMP     R13,#00h
08B4 CD05         2300           JMPR    cc_SLT,_142
08B6 F3F20000  R  2301           MOVB    RL1,POF _disk_access
08BA 1FF1         2302           BSET    R1.1
08BC F7F20000  R  2303           MOVB    POF _disk_access,RL1
08C0              2304   _142:
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  46
main

 LOC CODE        LINE   SOURCELINE

                  2305   ; main.c    767  if ((dsp>STKMAX)&&(d_disk>=0)) disk_access|=LOAD_DOWN;
08C0 E6000000  R  2306           MOV     DPP0,#PAG _dsp
08C4 CC00         2307           NOP
08C6 F2FC0000  R  2308           MOV     R12,POF _dsp
08CA 46FC4834     2309           CMP     R12,#03448h
08CE FD09         2310           JMPR    cc_ULE,_144
08D0 F2FD0000  R  2311           MOV     R13,POF _d_disk
08D4 48D0         2312           CMP     R13,#00h
08D6 CD05         2313           JMPR    cc_SLT,_144
08D8 F3F20000  R  2314           MOVB    RL1,POF _disk_access
08DC 2FF1         2315           BSET    R1.2
08DE F7F20000  R  2316           MOVB    POF _disk_access,RL1
08E2              2317   _144:
                  2318   ; main.c    768  if (usp>STKMAX) disk_access|=SAVE_UP;
08E2 E6000000  R  2319           MOV     DPP0,#PAG _usp
08E6 CC00         2320           NOP
08E8 F2FC0000  R  2321           MOV     R12,POF _usp
08EC 46FC4834     2322           CMP     R12,#03448h
08F0 FD05         2323           JMPR    cc_ULE,_145
08F2 F3F20000  R  2324           MOVB    RL1,POF _disk_access
08F6 3FF1         2325           BSET    R1.3
08F8 F7F20000  R  2326           MOVB    POF _disk_access,RL1
08FC              2327   _145:
                  2328   ; main.c    769  if (dsp<STKMIN) disk_access|=SAVE_DOWN;
08FC E6000000  R  2329           MOV     DPP0,#PAG _dsp
0900 CC00         2330           NOP
0902 F2FC0000  R  2331           MOV     R12,POF _dsp
0906 46FCB80B     2332           CMP     R12,#0BB8h
090A 9D05         2333           JMPR    cc_UGE,_146
090C F3F20000  R  2334           MOVB    RL1,POF _disk_access
0910 4FF1         2335           BSET    R1.4
0912 F7F20000  R  2336           MOVB    POF _disk_access,RL1
0916              2337   _146:
                  2338   ; main.c    770 }
0916 DB00         2339           RETS
                  2340   _CheckDiskAccess        ENDP
                  2341   ; main.c    771 
                  2342   ; main.c    772 //-------------------------------------------------------
                  2343   ; main.c    773 // Работа с историей
                  2344   ; main.c    774 //-------------------------------------------------------
                  2345   ; main.c    775 unsigned int SearchHistory(void)
                  2346   ; main.c    776 {
                  2347           PUBLIC  _SearchHistory
                  2348   _SearchHistory  PROC    FAR
0918 8890         2349           MOV     [-R0],R9
091A 8880         2350           MOV     [-R0],R8
                  2351   ; Locals:
                  2352   ; 
                  2353   ; Statics:
                  2354   ; 
                  2355   ; CSEs:
                  2356   ;     history_pos = R8
                  2357   ;     fin = R9
                  2358   ;     i = R12
                  2359   ; 
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  47
main

 LOC CODE        LINE   SOURCELINE

                  2360   ; main.c    777  unsigned int history_pos=0;
091C E008         2361           MOV     R8,#00h
                  2362   ; main.c    778  int fin;
                  2363   ; main.c    779  int i;
                  2364   ; main.c    780  if ((fin=FileOpen((STR)historyfile,_O_RDONLY+_O_BINARY,0))!=-1)
091E E6FC0000  R  2365           MOV     R12,#POF _historyfile
0922 E6FD0000  R  2366           MOV     R13,#PAG _historyfile
0926 E6FE0080     2367           MOV     R14,#08000h
092A E00F         2368           MOV     R15,#00h
092C DA000000  R  2369           CALLS   SEG _FileOpen,_FileOpen
0930 F094         2370           MOV     R9,R4
0932 46F9FFFF     2371           CMP     R9,#0FFFFh
0936 2D1F         2372           JMPR    cc_EQ,_150
                  2373   ; main.c    781  {
                  2374   ; main.c    782   for(;;)
0938              2375   _147:
                  2376   ; main.c    783   {
                  2377   ; main.c    784    i=FileRead(fin,&HISTORY,sizeof(HISTORY));
0938 F0C9         2378           MOV     R12,R9
093A E6FD0000  R  2379           MOV     R13,#POF _HISTORY
093E E6FE0000  R  2380           MOV     R14,#PAG _HISTORY
0942 E6FF9C00     2381           MOV     R15,#09Ch
0946 DA000000  R  2382           CALLS   SEG _FileRead,_FileRead
094A F0C4         2383           MOV     R12,R4
                  2384   ; main.c    785    if (i<sizeof(HISTORY)) goto L_NO_HISTORY;
094C 46FC9C00     2385           CMP     R12,#09Ch
0950 8D0F         2386           JMPR    cc_ULT,_149
                  2387   ; main.c    786    if (!strcmp(HISTORY.name,filename))
0952 E6FC0000  R  2388           MOV     R12,#POF _HISTORY
0956 E6FD0000  R  2389           MOV     R13,#PAG _HISTORY
095A E6FE0000  R  2390           MOV     R14,#POF _filename
095E E6FF0000  R  2391           MOV     R15,#PAG _filename
0962 DA000000  R  2392           CALLS   SEG _strcmp,_strcmp
0966 4840         2393           CMP     R4,#00h
0968 2D02         2394           JMPR    cc_Z,_148
                  2395   ; main.c    787    {
                  2396   ; main.c    788         history_pos|=0x8000;
                  2397   ; main.c    789     break; //Нашли
                  2398   ; main.c    790    }
                  2399   ; main.c    791    history_pos++;
096A 0881         2400           ADD     R8,#01h
096C 0DE5         2401           JMPR    cc_UC,_147
096E              2402   _148:
096E FFF8         2403           BSET    R8.15
                  2404   ; main.c    792   }
                  2405   ; main.c    793   L_NO_HISTORY:
0970              2406   _149:
                  2407   ; main.c    794   FileClose(fin);
0970 F0C9         2408           MOV     R12,R9
0972 DA000000  R  2409           CALLS   SEG _FileClose,_FileClose
                  2410   ; main.c    795  }
0976              2411   _150:
                  2412   ; main.c    796  return(history_pos);
0976 F048         2413           MOV     R4,R8
                  2414   ; main.c    797 }
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  48
main

 LOC CODE        LINE   SOURCELINE

0978 9880         2415           MOV     R8,[R0+]
097A 9890         2416           MOV     R9,[R0+]
097C DB00         2417           RETS
                  2418   _SearchHistory  ENDP
                  2419   ; main.c    798 
                  2420   ; main.c    799 //Записать историю, вызывается в контексте MMC_Filesystem
                  2421   ; main.c    800 void SaveHistory(void)
                  2422   ; main.c    801 {
                  2423           PUBLIC  _SaveHistory
                  2424   _SaveHistory    PROC    FAR
097E 8890         2425           MOV     [-R0],R9
0980 8880         2426           MOV     [-R0],R8
0982 26F0A000     2427           SUB     R0,#0A0h
                  2428   ; Locals:
                  2429   ;     ss = offset 0
                  2430   ;     ul = offset 156
                  2431   ; 
                  2432   ; Statics:
                  2433   ; 
                  2434   ; CSEs:
                  2435   ;     f = R8
                  2436   ;     history_pos = R9
                  2437   ; 
                  2438   ; main.c    802  int f;
                  2439   ; main.c    803  long ul;
                  2440   ; main.c    804  char ss[sizeof(HISTORY)];
                  2441   ; main.c    805  unsigned int history_pos;
                  2442   ; main.c    806 
                  2443   ; main.c    807  memcpy(ss,&HISTORY,sizeof(HISTORY));
0986 E6FC9C00     2444           MOV     R12,#09Ch
098A 88C0         2445           MOV     [-R0],R12
098C E02C         2446           MOV     R12,#02h
098E 00C0         2447           ADD     R12,R0
0990 66FCFF3F     2448           AND     R12,#03FFFh
0994 F2FD02FE     2449           MOV     R13,DPP1
0998 E6FE0000  R  2450           MOV     R14,#POF _HISTORY
099C E6FF0000  R  2451           MOV     R15,#PAG _HISTORY
09A0 DA000000  R  2452           CALLS   SEG _memcpy,_memcpy
09A4 0802         2453           ADD     R0,#02h
                  2454   ; main.c    808  history_pos=SearchHistory()&0x7FFF;
09A6 DA001809  R  2455           CALLS   SEG _SearchHistory,_SearchHistory
09AA F094         2456           MOV     R9,R4
09AC FEF9         2457           BCLR    R9.15
                  2458   ; main.c    809  memcpy(&HISTORY,ss,sizeof(HISTORY));
09AE E6F89C00     2459           MOV     R8,#09Ch
09B2 8880         2460           MOV     [-R0],R8
09B4 E6FC0000  R  2461           MOV     R12,#POF _HISTORY
09B8 E6FD0000  R  2462           MOV     R13,#PAG _HISTORY
09BC E02E         2463           MOV     R14,#02h
09BE 00E0         2464           ADD     R14,R0
09C0 66FEFF3F     2465           AND     R14,#03FFFh
09C4 F2FF02FE     2466           MOV     R15,DPP1
09C8 DA000000  R  2467           CALLS   SEG _memcpy,_memcpy
                  2468   ; main.c    810  memcpy(HISTORY.name,filename,128);
09CC E6F88000     2469           MOV     R8,#080h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  49
main

 LOC CODE        LINE   SOURCELINE

09D0 B880         2470           MOV     [R0],R8
09D2 E6FC0000  R  2471           MOV     R12,#POF _HISTORY
09D6 E6FD0000  R  2472           MOV     R13,#PAG _HISTORY
09DA E6FE0000  R  2473           MOV     R14,#POF _filename
09DE E6FF0000  R  2474           MOV     R15,#PAG _filename
09E2 DA000000  R  2475           CALLS   SEG _memcpy,_memcpy
                  2476   ; main.c    811  HISTORY.font=font_size;
09E6 E6000000  R  2477           MOV     DPP0,#PAG _font_size
09EA 0802         2478           ADD     R0,#02h
09EC F3F20000  R  2479           MOVB    RL1,POF _font_size
09F0 E6000000  R  2480           MOV     DPP0,#PAG _HISTORY
09F4 CC00         2481           NOP
09F6 F7F20000  R  2482           MOVB    POF (_HISTORY+128),RL1
                  2483   ; main.c    812  HISTORY.line=curline;
09FA E6000000  R  2484           MOV     DPP0,#PAG _curline
09FE CC00         2485           NOP
0A00 F2F80000  R  2486           MOV     R8,POF _curline
0A04 F2FC0000  R  2487           MOV     R12,POF (_curline+2)
0A08 E6000000  R  2488           MOV     DPP0,#PAG _HISTORY
0A0C CC00         2489           NOP
0A0E F6F80000  R  2490           MOV     POF (_HISTORY+132),R8
0A12 F6FC0000  R  2491           MOV     POF (_HISTORY+134),R12
                  2492   ; main.c    813  HISTORY.total=total_line;
0A16 E6000000  R  2493           MOV     DPP0,#PAG _total_line
0A1A CC00         2494           NOP
0A1C F2FD0000  R  2495           MOV     R13,POF _total_line
0A20 F2FE0000  R  2496           MOV     R14,POF (_total_line+2)
0A24 E6000000  R  2497           MOV     DPP0,#PAG _HISTORY
0A28 CC00         2498           NOP
0A2A F6FD0000  R  2499           MOV     POF (_HISTORY+136),R13
0A2E F6FE0000  R  2500           MOV     POF (_HISTORY+138),R14
                  2501   ; main.c    814  HISTORY.codepage=win_dos_koi;
0A32 E6000000  R  2502           MOV     DPP0,#PAG _win_dos_koi
0A36 CC00         2503           NOP
0A38 F3F40000  R  2504           MOVB    RL2,POF _win_dos_koi
0A3C E6000000  R  2505           MOV     DPP0,#PAG _HISTORY
0A40 CC00         2506           NOP
0A42 F7F40000  R  2507           MOVB    POF (_HISTORY+130),RL2
                  2508   ; main.c    815  HISTORY.cursor_off=cursor_off;
0A46 E6000000  R  2509           MOV     DPP0,#PAG _cursor_off
0A4A CC00         2510           NOP
0A4C F3F60000  R  2511           MOVB    RL3,POF _cursor_off
0A50 E6000000  R  2512           MOV     DPP0,#PAG _HISTORY
0A54 E6FC0000  R  2513           MOV     R12,#POF _historyfile
0A58 F7F60000  R  2514           MOVB    POF (_HISTORY+131),RL3
                  2515   ; main.c    816  if ((f=FileOpen((STR)historyfile,_O_RDWR+_O_BINARY,_S_IREAD))==-1)
0A5C E6FD0000  R  2516           MOV     R13,#PAG _historyfile
0A60 E6FE0280     2517           MOV     R14,#08002h
0A64 E6FF0001     2518           MOV     R15,#0100h
0A68 DA000000  R  2519           CALLS   SEG _FileOpen,_FileOpen
0A6C F084         2520           MOV     R8,R4
0A6E 46F8FFFF     2521           CMP     R8,#0FFFFh
0A72 3D0B         2522           JMPR    cc_NE,_151
                  2523   ; main.c    817   f=FileOpen((STR)historyfile,_O_RDWR+_O_BINARY+_O_CREAT,_S_IREAD);
0A74 E6FC0000  R  2524           MOV     R12,#POF _historyfile
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  50
main

 LOC CODE        LINE   SOURCELINE

0A78 E6FD0000  R  2525           MOV     R13,#PAG _historyfile
0A7C E6FE0281     2526           MOV     R14,#08102h
0A80 E6FF0001     2527           MOV     R15,#0100h
0A84 DA000000  R  2528           CALLS   SEG _FileOpen,_FileOpen
0A88 F084         2529           MOV     R8,R4
0A8A              2530   _151:
                  2531   ; main.c    818  if (f!=-1)
0A8A 46F8FFFF     2532           CMP     R8,#0FFFFh
0A8E 2D21         2533           JMPR    cc_EQ,_152
                  2534   ; main.c    819  {
                  2535   ; main.c    820   FileSeek(f,sizeof(HISTORY)*history_pos,0,&ul);
0A90 E6FC9C00     2536           MOV     R12,#09Ch
0A94 00C0         2537           ADD     R12,R0
0A96 66FCFF3F     2538           AND     R12,#03FFFh
0A9A F2FD02FE     2539           MOV     R13,DPP1
0A9E 88D0         2540           MOV     [-R0],R13
0AA0 88C0         2541           MOV     [-R0],R12
0AA2 F0C8         2542           MOV     R12,R8
0AA4 E6FE9C00     2543           MOV     R14,#09Ch
0AA8 1B9E         2544           MULU    R9,R14
0AAA F2F90EFE     2545           MOV     R9,MDL
0AAE F0D9         2546           MOV     R13,R9
0AB0 E00E         2547           MOV     R14,#00h
0AB2 E00F         2548           MOV     R15,#00h
0AB4 DA000000  R  2549           CALLS   SEG _FileSeek,_FileSeek
0AB8 0804         2550           ADD     R0,#04h
                  2551   ; main.c    821   FileWrite(f,&HISTORY,sizeof(HISTORY));
0ABA F0C8         2552           MOV     R12,R8
0ABC E6FD0000  R  2553           MOV     R13,#POF _HISTORY
0AC0 E6FE0000  R  2554           MOV     R14,#PAG _HISTORY
0AC4 E6FF9C00     2555           MOV     R15,#09Ch
0AC8 DA000000  R  2556           CALLS   SEG _FileWrite,_FileWrite
                  2557   ; main.c    822   FileClose(f);
0ACC F0C8         2558           MOV     R12,R8
0ACE DA000000  R  2559           CALLS   SEG _FileClose,_FileClose
                  2560   ; main.c    823  }
0AD2              2561   _152:
                  2562   ; main.c    824  if (terminated)
0AD2 E6000000  R  2563           MOV     DPP0,#PAG _terminated
0AD6 CC00         2564           NOP
0AD8 F2F80000  R  2565           MOV     R8,POF _terminated
0ADC 2D39         2566           JMPR    cc_Z,_154
                  2567   ; main.c    825  {
                  2568   ; main.c    826   //Записываем snap-shoot
                  2569   ; main.c    827   if ((f=FileOpen((STR)snapshootfile,_O_BINARY+_O_CREAT+_O_RDWR,_S_IEXEC))!=-1)
0ADE E6FC0000  R  2570           MOV     R12,#POF _snapshootfile
0AE2 E6FD0000  R  2571           MOV     R13,#PAG _snapshootfile
0AE6 E6FE0281     2572           MOV     R14,#08102h
0AEA E6FF4000     2573           MOV     R15,#040h
0AEE DA000000  R  2574           CALLS   SEG _FileOpen,_FileOpen
0AF2 F084         2575           MOV     R8,R4
0AF4 46F8FFFF     2576           CMP     R8,#0FFFFh
0AF8 2D2B         2577           JMPR    cc_EQ,_154
                  2578   ; main.c    828   {
                  2579   ; main.c    829    FileWrite(f,(void far *)0x80000,16384);
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  51
main

 LOC CODE        LINE   SOURCELINE

0AFA F0C8         2580           MOV     R12,R8
0AFC E00D         2581           MOV     R13,#00h
0AFE E6FE2000     2582           MOV     R14,#020h
0B02 E6FF0040     2583           MOV     R15,#04000h
0B06 DA000000  R  2584           CALLS   SEG _FileWrite,_FileWrite
                  2585   ; main.c    830    FileWrite(f,(void far *)0x84000,16384);
0B0A F0C8         2586           MOV     R12,R8
0B0C E00D         2587           MOV     R13,#00h
0B0E E6FE2100     2588           MOV     R14,#021h
0B12 E6FF0040     2589           MOV     R15,#04000h
0B16 DA000000  R  2590           CALLS   SEG _FileWrite,_FileWrite
                  2591   ; main.c    831    FileWrite(f,(void far *)0x88000,16384);
0B1A F0C8         2592           MOV     R12,R8
0B1C E00D         2593           MOV     R13,#00h
0B1E E6FE2200     2594           MOV     R14,#022h
0B22 E6FF0040     2595           MOV     R15,#04000h
0B26 DA000000  R  2596           CALLS   SEG _FileWrite,_FileWrite
                  2597   ; main.c    832    FileWrite(f,(void far *)0x8C000,16384);
0B2A F0C8         2598           MOV     R12,R8
0B2C E00D         2599           MOV     R13,#00h
0B2E E6FE2300     2600           MOV     R14,#023h
0B32 E6FF0040     2601           MOV     R15,#04000h
0B36 DA000000  R  2602           CALLS   SEG _FileWrite,_FileWrite
                  2603   ; main.c    833    FileWrite(f,(void far *)0x90000,16384);
0B3A F0C8         2604           MOV     R12,R8
0B3C E00D         2605           MOV     R13,#00h
0B3E E6FE2400     2606           MOV     R14,#024h
0B42 E6FF0040     2607           MOV     R15,#04000h
0B46 DA000000  R  2608           CALLS   SEG _FileWrite,_FileWrite
                  2609   ; main.c    834    FileClose(f);
0B4A F0C8         2610           MOV     R12,R8
0B4C DA000000  R  2611           CALLS   SEG _FileClose,_FileClose
                  2612   ; main.c    835   }
                  2613   ; main.c    836  }
0B50              2614   _154:
                  2615   ; main.c    837 }
0B50 06F0A000     2616           ADD     R0,#0A0h
0B54 9880         2617           MOV     R8,[R0+]
0B56 9890         2618           MOV     R9,[R0+]
0B58 DB00         2619           RETS
                  2620   _SaveHistory    ENDP
                  2621   ; main.c    838 //------------------------------------------
                  2622   ; main.c    839 // Собственно редактор
                  2623   ; main.c    840 //------------------------------------------
                  2624   ; main.c    841 void GotoLine(void) //Переход на строку seek_to_line, вызывается в контексте MMC_Filesystem
                  2625   ; main.c    842 {
                  2626           PUBLIC  _GotoLine
                  2627   _GotoLine       PROC    FAR
                  2628   ; Locals:
                  2629   ; 
                  2630   ; Statics:
                  2631   ; 
                  2632   ; CSEs:
                  2633   ; 
                  2634   ; main.c    843 // unsigned int l;
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  52
main

 LOC CODE        LINE   SOURCELINE

                  2635   ; main.c    844 // unsigned int p;
                  2636   ; main.c    845  for(;;)
0B5A              2637   _155:
0B5A              2638   _156:
                  2639   ; main.c    846  {
                  2640   ; main.c    847   disk_access=0; //Закончили дисковые операции
0B5A E6000000  R  2641           MOV     DPP0,#PAG _disk_access
0B5E CC00         2642           NOP
0B60 F78E0000  R  2643           MOVB    POF _disk_access,ZEROS
                  2644   ; main.c    848   CheckDiskAccess();
0B64 DA009E08  R  2645           CALLS   SEG _CheckDiskAccess,_CheckDiskAccess
                  2646   ; main.c    849   if (disk_access) DoDiskAccess(0);
0B68 E6000000  R  2647           MOV     DPP0,#PAG _disk_access
0B6C CC00         2648           NOP
0B6E F3F20000  R  2649           MOVB    RL1,POF _disk_access
0B72 2D03         2650           JMPR    cc_Z,_157
0B74 E00C         2651           MOV     R12,#00h
0B76 DA00AE05  R  2652           CALLS   SEG _DoDiskAccess,_DoDiskAccess
0B7A              2653   _157:
                  2654   ; main.c    850   if (seek_to_line==curline) break; //Пришли
0B7A E6000000  R  2655           MOV     DPP0,#PAG _seek_to_line
0B7E CC00         2656           NOP
0B80 F2FC0000  R  2657           MOV     R12,POF _seek_to_line
0B84 F2FD0000  R  2658           MOV     R13,POF (_seek_to_line+2)
0B88 22FC0000  R  2659           SUB     R12,POF _curline
0B8C 32FD0000  R  2660           SUBC    R13,POF (_curline+2)
0B90 EA20240C  R  2661           JMPA    cc_EQ,_163
                  2662   ; main.c    851   if (seek_to_line<curline)
0B94 F2FC0000  R  2663           MOV     R12,POF _seek_to_line
0B98 F2FD0000  R  2664           MOV     R13,POF (_seek_to_line+2)
0B9C 22FC0000  R  2665           SUB     R12,POF _curline
0BA0 32FD0000  R  2666           SUBC    R13,POF (_curline+2)
0BA4 9D1D         2667           JMPR    cc_UGE,_159
                  2668   ; main.c    852   {
                  2669   ; main.c    853    //Пытаемся идти вверх
                  2670   ; main.c    854    if (!curline) break; //начало!
0BA6 F2FC0000  R  2671           MOV     R12,POF (_curline+2)
0BAA 72FC0000  R  2672           OR      R12,POF _curline
0BAE 2D3A         2673           JMPR    cc_Z,_163
                  2674   ; main.c    855    if (curline==viewline) viewline--; //Если первая строка экрана
0BB0 F2FC0000  R  2675           MOV     R12,POF _curline
0BB4 F2FD0000  R  2676           MOV     R13,POF (_curline+2)
0BB8 22FC0000  R  2677           SUB     R12,POF _viewline
0BBC 32FD0000  R  2678           SUBC    R13,POF (_viewline+2)
0BC0 3D05         2679           JMPR    cc_NE,_158
0BC2 E01C         2680           MOV     R12,#01h
0BC4 24FC0000  R  2681           SUB     POF _viewline,R12
0BC8 348E0000  R  2682           SUBC    POF (_viewline+2),ZEROS
0BCC              2683   _158:
                  2684   ; main.c    856    curline--;
0BCC E6000000  R  2685           MOV     DPP0,#PAG _curline
0BD0 E01C         2686           MOV     R12,#01h
0BD2 24FC0000  R  2687           SUB     POF _curline,R12
0BD6 348E0000  R  2688           SUBC    POF (_curline+2),ZEROS
                  2689   ; main.c    857    move_up();
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  53
main

 LOC CODE        LINE   SOURCELINE

0BDA DA000000  R  2690           CALLS   SEG _move_up,_move_up
                  2691   ; main.c    858   }
0BDE 0DBD         2692           JMPR    cc_UC,_156
0BE0              2693   _159:
                  2694   ; main.c    859   else
                  2695   ; main.c    860   {
                  2696   ; main.c    861     //Пытаемся идти вниз
                  2697   ; main.c    862    if (dsp==STKSZ) break; //Конец текста
0BE0 E6000000  R  2698           MOV     DPP0,#PAG _dsp
0BE4 CC00         2699           NOP
0BE6 F2FC0000  R  2700           MOV     R12,POF _dsp
0BEA 46FC0040     2701           CMP     R12,#04000h
0BEE 2D1A         2702           JMPR    cc_EQ,_163
                  2703   ; main.c    863    curline++;
0BF0 E01D         2704           MOV     R13,#01h
0BF2 04FD0000  R  2705           ADD     POF _curline,R13
0BF6 148E0000  R  2706           ADDC    POF (_curline+2),ZEROS
                  2707   ; main.c    864    if ((curline-viewline)==max_y)
0BFA F2FE0000  R  2708           MOV     R14,POF _curline
0BFE F2FF0000  R  2709           MOV     R15,POF (_curline+2)
0C02 22FE0000  R  2710           SUB     R14,POF _viewline
0C06 32FF0000  R  2711           SUBC    R15,POF (_viewline+2)
0C0A F2F10000  R  2712           MOV     R1,POF _max_y
0C0E E002         2713           MOV     R2,#00h
0C10 20E1         2714           SUB     R14,R1
0C12 30F2         2715           SUBC    R15,R2
0C14 3D04         2716           JMPR    cc_NE,_160
                  2717   ; main.c    865    {
                  2718   ; main.c    866     viewline++;
0C16 04FD0000  R  2719           ADD     POF _viewline,R13
0C1A 148E0000  R  2720           ADDC    POF (_viewline+2),ZEROS
                  2721   ; main.c    867    }
0C1E              2722   _160:
                  2723   ; main.c    868    move_dw();
0C1E DA000000  R  2724           CALLS   SEG _move_dw,_move_dw
0C22 0D9B         2725           JMPR    cc_UC,_155
                  2726   ; main.c    869   }
                  2727   ; main.c    870  }
0C24              2728   _163:
                  2729   ; main.c    871  if (stk_fhandle!=-1)
0C24 E6000000  R  2730           MOV     DPP0,#PAG _stk_fhandle
0C28 CC00         2731           NOP
0C2A F2FC0000  R  2732           MOV     R12,POF _stk_fhandle
0C2E 46FCFFFF     2733           CMP     R12,#0FFFFh
0C32 2D09         2734           JMPR    cc_EQ,_164
                  2735   ; main.c    872  {
                  2736   ; main.c    873   FileClose(stk_fhandle);
0C34 F2FC0000  R  2737           MOV     R12,POF _stk_fhandle
0C38 DA000000  R  2738           CALLS   SEG _FileClose,_FileClose
                  2739   ; main.c    874   stk_fhandle=-1;
0C3C E6000000  R  2740           MOV     DPP0,#PAG _stk_fhandle
0C40 CC00         2741           NOP
0C42 F68F0000  R  2742           MOV     POF _stk_fhandle,ONES
                  2743   ; main.c    875  }
0C46              2744   _164:
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  54
main

 LOC CODE        LINE   SOURCELINE

                  2745   ; main.c    876  draw_mode=1; //Перерисовываем
0C46 E6000000  R  2746           MOV     DPP0,#PAG _draw_mode
0C4A E112         2747           MOVB    RL1,#01h
0C4C F7F20000  R  2748           MOVB    POF _draw_mode,RL1
                  2749   ; main.c    877  if (!terminated) SendMessage((void far *)0x3B5E8,0xF8,dia_id);
0C50 F2FC0000  R  2750           MOV     R12,POF _terminated
0C54 3D09         2751           JMPR    cc_NZ,_165
0C56 E6FCE835     2752           MOV     R12,#035E8h
0C5A E0ED         2753           MOV     R13,#0Eh
0C5C E6FEF800     2754           MOV     R14,#0F8h
0C60 F2FF0000  R  2755           MOV     R15,POF _dia_id
0C64 DA000000  R  2756           CALLS   SEG _SendMessage,_SendMessage
0C68              2757   _165:
                  2758   ; main.c    878 }
0C68 DB00         2759           RETS
                  2760   _GotoLine       ENDP
                  2761   ; main.c    879 
                  2762   ; main.c    880 void LineUp(void)
                  2763   ; main.c    881 {
                  2764           PUBLIC  _LineUp
                  2765   _LineUp PROC    FAR
                  2766   ; Locals:
                  2767   ; 
                  2768   ; Statics:
                  2769   ; 
                  2770   ; CSEs:
                  2771   ; 
                  2772   ; main.c    882 // unsigned int l;
                  2773   ; main.c    883 // unsigned int p;
                  2774   ; main.c    884  if (curline) //Не начало!
0C6A E6000000  R  2775           MOV     DPP0,#PAG _curline
0C6E CC00         2776           NOP
0C70 F2FC0000  R  2777           MOV     R12,POF (_curline+2)
0C74 72FC0000  R  2778           OR      R12,POF _curline
0C78 2D17         2779           JMPR    cc_Z,_167
                  2780   ; main.c    885  {
                  2781   ; main.c    886   if (curline==viewline) viewline--; //Если первая строка экрана
0C7A F2FC0000  R  2782           MOV     R12,POF _curline
0C7E F2FD0000  R  2783           MOV     R13,POF (_curline+2)
0C82 22FC0000  R  2784           SUB     R12,POF _viewline
0C86 32FD0000  R  2785           SUBC    R13,POF (_viewline+2)
0C8A 3D05         2786           JMPR    cc_NE,_166
0C8C E01C         2787           MOV     R12,#01h
0C8E 24FC0000  R  2788           SUB     POF _viewline,R12
0C92 348E0000  R  2789           SUBC    POF (_viewline+2),ZEROS
0C96              2790   _166:
                  2791   ; main.c    887   curline--;
0C96 E6000000  R  2792           MOV     DPP0,#PAG _curline
0C9A E01C         2793           MOV     R12,#01h
0C9C 24FC0000  R  2794           SUB     POF _curline,R12
0CA0 348E0000  R  2795           SUBC    POF (_curline+2),ZEROS
                  2796   ; main.c    888   move_up();
0CA4 DA000000  R  2797           CALLS   SEG _move_up,_move_up
                  2798   ; main.c    889  }
0CA8              2799   _167:
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  55
main

 LOC CODE        LINE   SOURCELINE

                  2800   ; main.c    890 }
0CA8 DB00         2801           RETS
                  2802   _LineUp ENDP
                  2803   ; main.c    891 
                  2804   ; main.c    892 void LineDw(void)
                  2805   ; main.c    893 {
                  2806           PUBLIC  _LineDw
                  2807   _LineDw PROC    FAR
                  2808   ; Locals:
                  2809   ; 
                  2810   ; Statics:
                  2811   ; 
                  2812   ; CSEs:
                  2813   ; 
                  2814   ; main.c    894 // unsigned int l;
                  2815   ; main.c    895 // unsigned int p;
                  2816   ; main.c    896  if (dsp==STKSZ) return; //Конец текста
0CAA E6000000  R  2817           MOV     DPP0,#PAG _dsp
0CAE CC00         2818           NOP
0CB0 F2FC0000  R  2819           MOV     R12,POF _dsp
0CB4 46FC0040     2820           CMP     R12,#04000h
0CB8 2D19         2821           JMPR    cc_EQ,_169
                  2822   ; main.c    897  curline++;
0CBA E01D         2823           MOV     R13,#01h
0CBC 04FD0000  R  2824           ADD     POF _curline,R13
0CC0 148E0000  R  2825           ADDC    POF (_curline+2),ZEROS
                  2826   ; main.c    898  if ((curline-viewline)==max_y)
0CC4 F2FE0000  R  2827           MOV     R14,POF _curline
0CC8 F2FF0000  R  2828           MOV     R15,POF (_curline+2)
0CCC 22FE0000  R  2829           SUB     R14,POF _viewline
0CD0 32FF0000  R  2830           SUBC    R15,POF (_viewline+2)
0CD4 F2F10000  R  2831           MOV     R1,POF _max_y
0CD8 E002         2832           MOV     R2,#00h
0CDA 20E1         2833           SUB     R14,R1
0CDC 30F2         2834           SUBC    R15,R2
0CDE 3D04         2835           JMPR    cc_NE,_168
                  2836   ; main.c    899  {
                  2837   ; main.c    900   viewline++;
0CE0 04FD0000  R  2838           ADD     POF _viewline,R13
0CE4 148E0000  R  2839           ADDC    POF (_viewline+2),ZEROS
                  2840   ; main.c    901  }
0CE8              2841   _168:
                  2842   ; main.c    902  move_dw();
0CE8 DA000000  R  2843           CALLS   SEG _move_dw,_move_dw
                  2844   ; main.c    903 }
0CEC              2845   _169:
0CEC DB00         2846           RETS
                  2847   _LineDw ENDP
                  2848   ; main.c    904 
                  2849   ; main.c    905 void PageUp(unsigned int lines)
                  2850   ; main.c    906 {
                  2851           PUBLIC  _PageUp
                  2852   _PageUp PROC    FAR
                  2853   ; Locals:
                  2854   ; 
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  56
main

 LOC CODE        LINE   SOURCELINE

                  2855   ; Statics:
                  2856   ; 
                  2857   ; CSEs:
                  2858   ;     lines = R12
                  2859   ;     i = R13
                  2860   ; 
                  2861   ; main.c    907  unsigned int i;
                  2862   ; main.c    908 // unsigned int l;
                  2863   ; main.c    909 // unsigned int p;
                  2864   ; main.c    910  if (curline<lines)
0CEE E6000000  R  2865           MOV     DPP0,#PAG _curline
0CF2 F0FC         2866           MOV     R15,R12
0CF4 F2FD0000  R  2867           MOV     R13,POF _curline
0CF8 F2FE0000  R  2868           MOV     R14,POF (_curline+2)
0CFC E001         2869           MOV     R1,#00h
0CFE 20DF         2870           SUB     R13,R15
0D00 30E1         2871           SUBC    R14,R1
0D02 9D0B         2872           JMPR    cc_UGE,_177
                  2873   ; main.c    911  {
                  2874   ; main.c    912   i=curline;
0D04 F2FD0000  R  2875           MOV     R13,POF _curline
                  2876   ; main.c    913   viewline=0;
0D08 F68E0000  R  2877           MOV     POF _viewline,ZEROS
0D0C F68E0000  R  2878           MOV     POF (_viewline+2),ZEROS
                  2879   ; main.c    914   curline=0;
0D10 F68E0000  R  2880           MOV     POF _curline,ZEROS
0D14 F68E0000  R  2881           MOV     POF (_curline+2),ZEROS
                  2882   ; main.c    915  }
0D18 0D1F         2883           JMPR    cc_UC,_180
0D1A              2884   _177:
                  2885   ; main.c    916  else
                  2886   ; main.c    917  {
                  2887   ; main.c    918   i=lines;
0D1A F0DC         2888           MOV     R13,R12
                  2889   ; main.c    919   curline-=i;
0D1C F0EC         2890           MOV     R14,R12
0D1E E6000000  R  2891           MOV     DPP0,#PAG _curline
0D22 E00F         2892           MOV     R15,#00h
0D24 24FE0000  R  2893           SUB     POF _curline,R14
0D28 34FF0000  R  2894           SUBC    POF (_curline+2),R15
                  2895   ; main.c    920   if (viewline>i) viewline-=i; else viewline=0;
0D2C F2FE0000  R  2896           MOV     R14,POF _viewline
0D30 F2F10000  R  2897           MOV     R1,POF (_viewline+2)
0D34 F02C         2898           MOV     R2,R12
0D36 E003         2899           MOV     R3,#00h
0D38 20E2         2900           SUB     R14,R2
0D3A 3013         2901           SUBC    R1,R3
0D3C FD06         2902           JMPR    cc_ULE,_178
0D3E E00E         2903           MOV     R14,#00h
0D40 24FC0000  R  2904           SUB     POF _viewline,R12
0D44 34FE0000  R  2905           SUBC    POF (_viewline+2),R14
0D48 0D07         2906           JMPR    cc_UC,_180
0D4A              2907   _178:
0D4A E6000000  R  2908           MOV     DPP0,#PAG _viewline
0D4E CC00         2909           NOP
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  57
main

 LOC CODE        LINE   SOURCELINE

0D50 F68E0000  R  2910           MOV     POF _viewline,ZEROS
0D54 F68E0000  R  2911           MOV     POF (_viewline+2),ZEROS
                  2912   ; main.c    921  }
                  2913   ; main.c    922  while(i)
0D58              2914   _180:
0D58 0D05         2915           JMPR    cc_UC,_182
0D5A              2916   _181:
                  2917   ; main.c    923  {
                  2918   ; main.c    924   move_up();
0D5A 88D0         2919           MOV     [-R0],R13
0D5C DA000000  R  2920           CALLS   SEG _move_up,_move_up
0D60 98D0         2921           MOV     R13,[R0+]
                  2922   ; main.c    925   i--;
0D62 28D1         2923           SUB     R13,#01h
0D64              2924   _182:
0D64 48D0         2925           CMP     R13,#00h
0D66 3DF9         2926           JMPR    cc_NZ,_181
                  2927   ; main.c    926  }
                  2928   ; main.c    927 }
0D68 DB00         2929           RETS
                  2930   _PageUp ENDP
                  2931   ; main.c    928 
                  2932   ; main.c    929 void PageDw(unsigned int lines)
                  2933   ; main.c    930 {
                  2934           PUBLIC  _PageDw
                  2935   _PageDw PROC    FAR
                  2936   ; Locals:
                  2937   ; 
                  2938   ; Statics:
                  2939   ; 
                  2940   ; CSEs:
                  2941   ;     i = R12
                  2942   ;     lines = R12
                  2943   ; 
                  2944   ; main.c    931  unsigned int i;
                  2945   ; main.c    932 // unsigned int l;
                  2946   ; main.c    933 // unsigned int p;
                  2947   ; main.c    934  i=lines;
0D6A F0DC         2948           MOV     R13,R12
                  2949   ; main.c    935  do
0D6C              2950   _183:
                  2951   ; main.c    936  {
                  2952   ; main.c    937   if (dsp==STKSZ) break; //Конец текста
0D6C E6000000  R  2953           MOV     DPP0,#PAG _dsp
0D70 CC00         2954           NOP
0D72 F2FD0000  R  2955           MOV     R13,POF _dsp
0D76 46FD0040     2956           CMP     R13,#04000h
0D7A 2D0F         2957           JMPR    cc_EQ,_184
                  2958   ; main.c    938   viewline++;
0D7C E01E         2959           MOV     R14,#01h
0D7E 04FE0000  R  2960           ADD     POF _viewline,R14
0D82 148E0000  R  2961           ADDC    POF (_viewline+2),ZEROS
                  2962   ; main.c    939   curline++;
0D86 04FE0000  R  2963           ADD     POF _curline,R14
0D8A 148E0000  R  2964           ADDC    POF (_curline+2),ZEROS
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  58
main

 LOC CODE        LINE   SOURCELINE

                  2965   ; main.c    940   move_dw();
0D8E 88C0         2966           MOV     [-R0],R12
0D90 DA000000  R  2967           CALLS   SEG _move_dw,_move_dw
0D94 98C0         2968           MOV     R12,[R0+]
                  2969   ; main.c    941  }
                  2970   ; main.c    942  while(--i);
0D96 28C1         2971           SUB     R12,#01h
0D98 3DE9         2972           JMPR    cc_NZ,_183
0D9A              2973   _184:
                  2974   ; main.c    943 }
0D9A DB00         2975           RETS
                  2976   _PageDw ENDP
                  2977   ; main.c    944 
                  2978   ; main.c    945 void ToEOL(void)
                  2979   ; main.c    946 {
                  2980           PUBLIC  _ToEOL
                  2981   _ToEOL  PROC    FAR
                  2982   ; Locals:
                  2983   ; 
                  2984   ; Statics:
                  2985   ; 
                  2986   ; CSEs:
                  2987   ;     i = R12
                  2988   ; 
                  2989   ; main.c    947  unsigned int i=strlen(editline);
0D9C E6FC0000  R  2990           MOV     R12,#POF _editline
0DA0 E6FD0000  R  2991           MOV     R13,#PAG _editline
0DA4 DA000000  R  2992           CALLS   SEG _strlen,_strlen
0DA8 F0C4         2993           MOV     R12,R4
                  2994   ; main.c    948  if (i>255) curpos=0; else curpos=i;
0DAA 46FCFF00     2995           CMP     R12,#0FFh
0DAE FD06         2996           JMPR    cc_ULE,_185
0DB0 E6000000  R  2997           MOV     DPP0,#PAG _curpos
0DB4 CC00         2998           NOP
0DB6 F68E0000  R  2999           MOV     POF _curpos,ZEROS
0DBA 0D05         3000           JMPR    cc_UC,_186
0DBC              3001   _185:
0DBC E6000000  R  3002           MOV     DPP0,#PAG _curpos
0DC0 CC00         3003           NOP
0DC2 F6FC0000  R  3004           MOV     POF _curpos,R12
0DC6              3005   _186:
                  3006   ; main.c    949  if (curpos>=max_x) viewpos=curpos-max_x+1; else viewpos=0;
0DC6 E6000000  R  3007           MOV     DPP0,#PAG _curpos
0DCA CC00         3008           NOP
0DCC F2FC0000  R  3009           MOV     R12,POF _curpos
0DD0 42FC0000  R  3010           CMP     R12,POF _max_x
0DD4 8D06         3011           JMPR    cc_ULT,_187
0DD6 22FC0000  R  3012           SUB     R12,POF _max_x
0DDA 08C1         3013           ADD     R12,#01h
0DDC F6FC0000  R  3014           MOV     POF _viewpos,R12
0DE0 DB00         3015           RETS
0DE2              3016   _187:
0DE2 E6000000  R  3017           MOV     DPP0,#PAG _viewpos
0DE6 CC00         3018           NOP
0DE8 F68E0000  R  3019           MOV     POF _viewpos,ZEROS
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  59
main

 LOC CODE        LINE   SOURCELINE

0DEC              3020   _188:
                  3021   ; main.c    950 }
0DEC DB00         3022           RETS
                  3023   _ToEOL  ENDP
                  3024   ; main.c    951 
                  3025   ; main.c    952 void ToBOL(void)
                  3026   ; main.c    953 {
                  3027           PUBLIC  _ToBOL
                  3028   _ToBOL  PROC    FAR
                  3029   ; Locals:
                  3030   ; 
                  3031   ; Statics:
                  3032   ; 
                  3033   ; CSEs:
                  3034   ; 
                  3035   ; main.c    954  curpos=0;
0DEE E6000000  R  3036           MOV     DPP0,#PAG _curpos
0DF2 CC00         3037           NOP
0DF4 F68E0000  R  3038           MOV     POF _curpos,ZEROS
                  3039   ; main.c    955  viewpos=0;
0DF8 F68E0000  R  3040           MOV     POF _viewpos,ZEROS
                  3041   ; main.c    956 }
0DFC DB00         3042           RETS
                  3043   _ToBOL  ENDP
                  3044   ; main.c    957 
                  3045   ; main.c    958 void WordLeft(void)
                  3046   ; main.c    959 {
                  3047           PUBLIC  _WordLeft
                  3048   _WordLeft       PROC    FAR
                  3049   ; Locals:
                  3050   ; 
                  3051   ; Statics:
                  3052   ; 
                  3053   ; CSEs:
                  3054   ; 
                  3055   ; main.c    960  if (curpos==0) return;
0DFE E6000000  R  3056           MOV     DPP0,#PAG _curpos
0E02 CC00         3057           NOP
0E04 F2FC0000  R  3058           MOV     R12,POF _curpos
0E08 2D33         3059           JMPR    cc_Z,_205
                  3060   ; main.c    961  for(;;)
0E0A              3061   _198:
0E0A              3062   _199:
                  3063   ; main.c    962  {
                  3064   ; main.c    963   if ((--curpos)==0) break;
0E0A E6000000  R  3065           MOV     DPP0,#PAG _curpos
0E0E CC00         3066           NOP
0E10 F2FC0000  R  3067           MOV     R12,POF _curpos
0E14 28C1         3068           SUB     R12,#01h
0E16 F6FC0000  R  3069           MOV     POF _curpos,R12
0E1A 48C0         3070           CMP     R12,#00h
0E1C 2D0E         3071           JMPR    cc_Z,_200
                  3072   ; main.c    964   if ((editline[curpos-1]==' ')&&(editline[curpos]!=' ')) break;
0E1E D7400000  R  3073           EXTP    #PAG _editline,#01h
0E22 F42C0000 1R  3074           MOVB    RL1,[R12+#POF _editline-1]
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  60
main

 LOC CODE        LINE   SOURCELINE

0E26 47F22000     3075           CMPB    RL1,#020h
0E2A 3DEF         3076           JMPR    cc_NE,_199
0E2C D7400000  R  3077           EXTP    #PAG _editline,#01h
0E30 F42C0000 1R  3078           MOVB    RL1,[R12+#POF _editline]
0E34 47F22000     3079           CMPB    RL1,#020h
0E38 2DE8         3080           JMPR    cc_EQ,_198
                  3081   ; main.c    965  }
                  3082   ; main.c    966  while(curpos<viewpos)
0E3A              3083   _200:
0E3A 0D12         3084           JMPR    cc_UC,_204
0E3C              3085   _201:
                  3086   ; main.c    967  {
                  3087   ; main.c    968   if (viewpos>8) viewpos-=8; else viewpos=0;
0E3C E6000000  R  3088           MOV     DPP0,#PAG _viewpos
0E40 CC00         3089           NOP
0E42 F2FC0000  R  3090           MOV     R12,POF _viewpos
0E46 46FC0800     3091           CMP     R12,#08h
0E4A FD05         3092           JMPR    cc_ULE,_202
0E4C 26FC0800     3093           SUB     R12,#08h
0E50 F6FC0000  R  3094           MOV     POF _viewpos,R12
0E54 0D05         3095           JMPR    cc_UC,_204
0E56              3096   _202:
0E56 E6000000  R  3097           MOV     DPP0,#PAG _viewpos
0E5A CC00         3098           NOP
0E5C F68E0000  R  3099           MOV     POF _viewpos,ZEROS
0E60              3100   _204:
0E60 E6000000  R  3101           MOV     DPP0,#PAG _curpos
0E64 CC00         3102           NOP
0E66 F2FC0000  R  3103           MOV     R12,POF _curpos
0E6A 42FC0000  R  3104           CMP     R12,POF _viewpos
0E6E 8DE6         3105           JMPR    cc_ULT,_201
                  3106   ; main.c    969  }
                  3107   ; main.c    970 }
0E70              3108   _205:
0E70 DB00         3109           RETS
                  3110   _WordLeft       ENDP
                  3111   ; main.c    971 
                  3112   ; main.c    972 void WordRight(void)
                  3113   ; main.c    973 {
                  3114           PUBLIC  _WordRight
                  3115   _WordRight      PROC    FAR
                  3116   ; Locals:
                  3117   ; 
                  3118   ; Statics:
                  3119   ; 
                  3120   ; CSEs:
                  3121   ;     &editline + curpos = R12R13
                  3122   ; 
                  3123   ; main.c    974  if (!editline[curpos]) return;
0E72 E6000000  R  3124           MOV     DPP0,#PAG _curpos
0E76 CC00         3125           NOP
0E78 F2FC0000  R  3126           MOV     R12,POF _curpos
0E7C D7400000  R  3127           EXTP    #PAG _editline,#01h
0E80 F42C0000 1R  3128           MOVB    RL1,[R12+#POF _editline]
0E84 2D32         3129           JMPR    cc_Z,_218
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  61
main

 LOC CODE        LINE   SOURCELINE

                  3130   ; main.c    975  for(;;)
0E86              3131   _213:
0E86              3132   _214:
                  3133   ; main.c    976  {
                  3134   ; main.c    977   curpos++;
0E86 E6000000  R  3135           MOV     DPP0,#PAG _curpos
0E8A E6FD0000  R  3136           MOV     R13,#PAG _editline
0E8E F2FC0000  R  3137           MOV     R12,POF _curpos
0E92 08C1         3138           ADD     R12,#01h
0E94 F6FC0000  R  3139           MOV     POF _curpos,R12
                  3140   ; main.c    978   if (!editline[curpos]) break;
0E98 E6FC0000  R  3141           MOV     R12,#POF _editline
0E9C 02FC0000  R  3142           ADD     R12,POF _curpos
0EA0 DC4D         3143           EXTP    R13,#01h
0EA2 A92C     1   3144           MOVB    RL1,[R12]
0EA4 2D0E         3145           JMPR    cc_Z,_215
                  3146   ; main.c    979   if ((editline[curpos-1]==' ')&&(editline[curpos]!=' ')) break;
0EA6 F2FE0000  R  3147           MOV     R14,POF _curpos
0EAA D7400000  R  3148           EXTP    #PAG _editline,#01h
0EAE F42E0000 1R  3149           MOVB    RL1,[R14+#POF _editline-1]
0EB2 47F22000     3150           CMPB    RL1,#020h
0EB6 3DE7         3151           JMPR    cc_NE,_214
0EB8 DC4D         3152           EXTP    R13,#01h
0EBA A92C     1   3153           MOVB    RL1,[R12]
0EBC 47F22000     3154           CMPB    RL1,#020h
0EC0 2DE2         3155           JMPR    cc_EQ,_213
                  3156   ; main.c    980  }
                  3157   ; main.c    981  while((curpos-viewpos)>=max_x)
0EC2              3158   _215:
0EC2 0D09         3159           JMPR    cc_UC,_217
0EC4              3160   _216:
                  3161   ; main.c    982  {
                  3162   ; main.c    983   viewpos+=8;
0EC4 E6000000  R  3163           MOV     DPP0,#PAG _viewpos
0EC8 CC00         3164           NOP
0ECA F2FC0000  R  3165           MOV     R12,POF _viewpos
0ECE 06FC0800     3166           ADD     R12,#08h
0ED2 F6FC0000  R  3167           MOV     POF _viewpos,R12
0ED6              3168   _217:
0ED6 E6000000  R  3169           MOV     DPP0,#PAG _curpos
0EDA CC00         3170           NOP
0EDC F2FC0000  R  3171           MOV     R12,POF _curpos
0EE0 22FC0000  R  3172           SUB     R12,POF _viewpos
0EE4 42FC0000  R  3173           CMP     R12,POF _max_x
0EE8 9DED         3174           JMPR    cc_UGE,_216
                  3175   ; main.c    984  }
                  3176   ; main.c    985 }
0EEA              3177   _218:
0EEA DB00         3178           RETS
                  3179   _WordRight      ENDP
                  3180   ; main.c    986 
                  3181   ; main.c    987 void DrawInfo(void)
                  3182   ; main.c    988 {
                  3183           PUBLIC  _DrawInfo
                  3184   _DrawInfo       PROC    FAR
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  62
main

 LOC CODE        LINE   SOURCELINE

0EEC 26F00001     3185           SUB     R0,#0100h
                  3186   ; Locals:
                  3187   ;     s = offset 0
                  3188   ; 
                  3189   ; Statics:
                  3190   ; 
                  3191   ; CSEs:
                  3192   ; 
                  3193   ; main.c    989  char s[256];
                  3194   ; main.c    990  FillRect(0,0,101,80,0);
0EF0 E00C         3195           MOV     R12,#00h
0EF2 88C0         3196           MOV     [-R0],R12
0EF4 E00D         3197           MOV     R13,#00h
0EF6 E6FE6500     3198           MOV     R14,#065h
0EFA E6FF5000     3199           MOV     R15,#050h
0EFE DA000000  R  3200           CALLS   SEG _FillRect,_FillRect
                  3201   ; main.c    991  xsprintf(s,(STR)"Time:\n%02d:%02d\n"
                  3202   ; main.c    992  "Current line %lu\nTotal lines %lu\n\nCurrent file:",
                  3203   ; main.c    993  _hour,_minute,curline,total_line);
0F02 E6000000  R  3204           MOV     DPP0,#PAG _total_line
0F06 0802         3205           ADD     R0,#02h
0F08 F2FC0000  R  3206           MOV     R12,POF _total_line
0F0C F2FD0000  R  3207           MOV     R13,POF (_total_line+2)
0F10 88D0         3208           MOV     [-R0],R13
0F12 88C0         3209           MOV     [-R0],R12
0F14 F2FE0000  R  3210           MOV     R14,POF _curline
0F18 F2FF0000  R  3211           MOV     R15,POF (_curline+2)
0F1C 88F0         3212           MOV     [-R0],R15
0F1E 88E0         3213           MOV     [-R0],R14
0F20 D7400000  R  3214           EXTP    #PAG __minute,#01h
0F24 F2F10000 1R  3215           MOV     R1,POF __minute
0F28 8810         3216           MOV     [-R0],R1
0F2A D7400000  R  3217           EXTP    #PAG __hour,#01h
0F2E F2F20000 1R  3218           MOV     R2,POF __hour
0F32 8820         3219           MOV     [-R0],R2
0F34 E0CC         3220           MOV     R12,#0Ch
0F36 00C0         3221           ADD     R12,R0
0F38 66FCFF3F     3222           AND     R12,#03FFFh
0F3C F2FD02FE     3223           MOV     R13,DPP1
0F40 E6FE0000  R  3224           MOV     R14,#POF _219
0F44 E6FF0000  R  3225           MOV     R15,#PAG _219
0F48 DA000000  R  3226           CALLS   SEG _xsprintf,_xsprintf
0F4C 06F00C00     3227           ADD     R0,#0Ch
                  3228   ; main.c    994  DrawString(0,0,101,56,(STR)s,0);
0F50 E00C         3229           MOV     R12,#00h
0F52 88C0         3230           MOV     [-R0],R12
0F54 E02D         3231           MOV     R13,#02h
0F56 00D0         3232           ADD     R13,R0
0F58 66FDFF3F     3233           AND     R13,#03FFFh
0F5C F2FE02FE     3234           MOV     R14,DPP1
0F60 88E0         3235           MOV     [-R0],R14
0F62 88D0         3236           MOV     [-R0],R13
0F64 E00D         3237           MOV     R13,#00h
0F66 E6FE6500     3238           MOV     R14,#065h
0F6A E6FF3800     3239           MOV     R15,#038h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  63
main

 LOC CODE        LINE   SOURCELINE

0F6E DA000000  R  3240           CALLS   SEG _DrawString,_DrawString
0F72 0806         3241           ADD     R0,#06h
                  3242   ; main.c    995  DrawString(0,56,101,24,filename,0);
0F74 E00C         3243           MOV     R12,#00h
0F76 88C0         3244           MOV     [-R0],R12
0F78 E6FD0000  R  3245           MOV     R13,#POF _filename
0F7C E6FE0000  R  3246           MOV     R14,#PAG _filename
0F80 88E0         3247           MOV     [-R0],R14
0F82 88D0         3248           MOV     [-R0],R13
0F84 E6FD3800     3249           MOV     R13,#038h
0F88 E6FE6500     3250           MOV     R14,#065h
0F8C E6FF1800     3251           MOV     R15,#018h
0F90 DA000000  R  3252           CALLS   SEG _DrawString,_DrawString
0F94 06F00601     3253           ADD     R0,#0106h
                  3254   ; main.c    996 }
0F98 DB00         3255           RETS
                  3256   _DrawInfo       ENDP
                  3257   ; main.c    997 
                  3258   ; main.c    998 //=============================================================================
                  3259   ; main.c    999 //Вывод на экран
                  3260   ; main.c   1000 //=============================================================================
                  3261   ; main.c   1001 void DrawScreen(void)
                  3262   ; main.c   1002 {
                  3263           PUBLIC  _DrawScreen
                  3264   _DrawScreen     PROC    FAR
0F9A 8890         3265           MOV     [-R0],R9
0F9C 8880         3266           MOV     [-R0],R8
0F9E 8870         3267           MOV     [-R0],R7
0FA0 8860         3268           MOV     [-R0],R6
                  3269   ; Locals:
                  3270   ;     s = offset 2
                  3271   ; 
                  3272   ; Statics:
                  3273   ; 
                  3274   ; CSEs:
                  3275   ;     y = offset 0
                  3276   ;     p = R8
                  3277   ;     my = R9
                  3278   ;     c = RL6
                  3279   ;     d = R9R6
                  3280   ;     y = R12
                  3281   ;     p1 = R7
                  3282   ;     f = R12
                  3283   ;     x = R13
                  3284   ; 
                  3285   ; main.c   1003  unsigned int y;
                  3286   ; main.c   1004  unsigned int p;
                  3287   ; main.c   1005  unsigned char c;
                  3288   ; main.c   1006  int f;
                  3289   ; main.c   1007  char s[32];
                  3290   ; main.c   1008  unsigned int my;
                  3291   ; main.c   1009  if (disk_access)
0FA2 E6000000  R  3292           MOV     DPP0,#PAG _disk_access
0FA6 26F02200     3293           SUB     R0,#022h
0FAA F3F20000  R  3294           MOVB    RL1,POF _disk_access
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  64
main

 LOC CODE        LINE   SOURCELINE

0FAE EA20AE10  R  3295           JMPA    cc_Z,_342
                  3296   ; main.c   1010  {
                  3297   ; main.c   1011   drawImage(0,0,8,8,&imgDiskAccess);
0FB2 E6FC0000  R  3298           MOV     R12,#POF _imgDiskAccess
0FB6 E6FD0000  R  3299           MOV     R13,#PAG _imgDiskAccess
0FBA 88D0         3300           MOV     [-R0],R13
0FBC 88C0         3301           MOV     [-R0],R12
0FBE E00C         3302           MOV     R12,#00h
0FC0 E00D         3303           MOV     R13,#00h
0FC2 E08E         3304           MOV     R14,#08h
0FC4 E08F         3305           MOV     R15,#08h
0FC6 DA000000  R  3306           CALLS   SEG _drawImage,_drawImage
                  3307   ; main.c   1012   if (draw_mode==2)
0FCA E6000000  R  3308           MOV     DPP0,#PAG _draw_mode
0FCE 0804         3309           ADD     R0,#04h
0FD0 F3FC0000  R  3310           MOVB    RL6,POF _draw_mode
0FD4 49C2         3311           CMPB    RL6,#02h
0FD6 3D14         3312           JMPR    cc_NE,_337
                  3313   ; main.c   1013   {
                  3314   ; main.c   1014    xsprintf(s,(STR)"Goto line %lu...",curline);
0FD8 F2F80000  R  3315           MOV     R8,POF _curline
0FDC F2F90000  R  3316           MOV     R9,POF (_curline+2)
0FE0 8890         3317           MOV     [-R0],R9
0FE2 8880         3318           MOV     [-R0],R8
0FE4 E06C         3319           MOV     R12,#06h
0FE6 00C0         3320           ADD     R12,R0
0FE8 66FCFF3F     3321           AND     R12,#03FFFh
0FEC F2FD02FE     3322           MOV     R13,DPP1
0FF0 E6FE0000  R  3323           MOV     R14,#POF _220
0FF4 E6FF0000  R  3324           MOV     R15,#PAG _220
0FF8 DA000000  R  3325           CALLS   SEG _xsprintf,_xsprintf
0FFC 0804         3326           ADD     R0,#04h
                  3327   ; main.c   1015    FillRect(8,0,101-8,8,0);
0FFE 0D2F         3328           JMPR    cc_UC,_340
                  3329   ; main.c   1016    DrawString(8,0,101-8,8,(STR)s,0);
                  3330   ; main.c   1017    goto L_WELLCOME2;
                  3331   ; main.c   1018   }
1000              3332   _337:
                  3333   ; main.c   1019   if (disk_access==SAVE_FILE)
1000 E6000000  R  3334           MOV     DPP0,#PAG _disk_access
1004 CC00         3335           NOP
1006 F3FC0000  R  3336           MOVB    RL6,POF _disk_access
100A 47FC2000     3337           CMPB    RL6,#020h
100E 3D0D         3338           JMPR    cc_NE,_338
                  3339   ; main.c   1020   {
                  3340   ; main.c   1021    xsprintf(s,(STR)"Saving...");
1010 E02C         3341           MOV     R12,#02h
1012 00C0         3342           ADD     R12,R0
1014 66FCFF3F     3343           AND     R12,#03FFFh
1018 F2FD02FE     3344           MOV     R13,DPP1
101C E6FE0000  R  3345           MOV     R14,#POF _221
1020 E6FF0000  R  3346           MOV     R15,#PAG _221
1024 DA000000  R  3347           CALLS   SEG _xsprintf,_xsprintf
                  3348   ; main.c   1022    goto L_W1;
1028 0D1A         3349           JMPR    cc_UC,_340
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  65
main

 LOC CODE        LINE   SOURCELINE

                  3350   ; main.c   1023   }
102A              3351   _338:
                  3352   ; main.c   1024   if (disk_access==FIRSTLOAD)
102A E6000000  R  3353           MOV     DPP0,#PAG _disk_access
102E CC00         3354           NOP
1030 F3FC0000  R  3355           MOVB    RL6,POF _disk_access
1034 49C1         3356           CMPB    RL6,#01h
1036 3D30         3357           JMPR    cc_NE,_341
                  3358   ; main.c   1025   {
                  3359   ; main.c   1026    xsprintf(s,(STR)"Line %lu...",curline);
1038 F2F80000  R  3360           MOV     R8,POF _curline
103C F2F90000  R  3361           MOV     R9,POF (_curline+2)
1040 8890         3362           MOV     [-R0],R9
1042 8880         3363           MOV     [-R0],R8
1044 E06C         3364           MOV     R12,#06h
1046 00C0         3365           ADD     R12,R0
1048 66FCFF3F     3366           AND     R12,#03FFFh
104C F2FD02FE     3367           MOV     R13,DPP1
1050 E6FE0000  R  3368           MOV     R14,#POF _222
1054 E6FF0000  R  3369           MOV     R15,#PAG _222
1058 DA000000  R  3370           CALLS   SEG _xsprintf,_xsprintf
105C 0804         3371           ADD     R0,#04h
                  3372   ; main.c   1027    L_W1:
105E              3373   _340:
                  3374   ; main.c   1028    FillRect(8,0,101-8,8,0);
105E E008         3375           MOV     R8,#00h
1060 8880         3376           MOV     [-R0],R8
1062 E08C         3377           MOV     R12,#08h
1064 F0D8         3378           MOV     R13,R8
1066 E6FE5D00     3379           MOV     R14,#05Dh
106A E08F         3380           MOV     R15,#08h
106C DA000000  R  3381           CALLS   SEG _FillRect,_FillRect
                  3382   ; main.c   1029    DrawString(8,0,101-8,8,(STR)s,0);
1070 E008         3383           MOV     R8,#00h
1072 B880         3384           MOV     [R0],R8
1074 E049         3385           MOV     R9,#04h
1076 0090         3386           ADD     R9,R0
1078 66F9FF3F     3387           AND     R9,#03FFFh
107C F2F602FE     3388           MOV     R6,DPP1
1080 8860         3389           MOV     [-R0],R6
1082 8890         3390           MOV     [-R0],R9
1084 E08C         3391           MOV     R12,#08h
1086 F0D8         3392           MOV     R13,R8
1088 E6FE5D00     3393           MOV     R14,#05Dh
108C E08F         3394           MOV     R15,#08h
108E DA000000  R  3395           CALLS   SEG _DrawString,_DrawString
1092 0806         3396           ADD     R0,#06h
                  3397   ; main.c   1030    goto L_WELLCOME2;
1094 EA000A14  R  3398           JMPA    cc_UC,_376
                  3399   ; main.c   1031   }
1098              3400   _341:
                  3401   ; main.c   1032   if (draw_mode==255) goto L_WELLCOME;
1098 E6000000  R  3402           MOV     DPP0,#PAG _draw_mode
109C CC00         3403           NOP
109E C2F80000  R  3404           MOVBZ   R8,POF _draw_mode
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  66
main

 LOC CODE        LINE   SOURCELINE

10A2 46F8FF00     3405           CMP     R8,#0FFh
10A6 EA304C15  R  3406           JMPA    cc_NE,_389
10AA EA00EE13  R  3407           JMPA    cc_UC,_374
                  3408   ; main.c   1033  }
10AE              3409   _342:
                  3410   ; main.c   1034  else
                  3411   ; main.c   1035  {
                  3412   ; main.c   1036   switch(draw_mode)
10AE E6000000  R  3413           MOV     DPP0,#PAG _draw_mode
10B2 CC00         3414           NOP
10B4 F3FC0000  R  3415           MOVB    RL6,POF _draw_mode
10B8 49C1         3416           CMPB    RL6,#01h
10BA 2D0F         3417           JMPR    cc_EQ,_343
10BC 49C2         3418           CMPB    RL6,#02h
10BE EA208213  R  3419           JMPA    cc_EQ,_371
10C2 49C4         3420           CMPB    RL6,#04h
10C4 EA20E613  R  3421           JMPA    cc_EQ,_372
10C8 47FCFF00     3422           CMPB    RL6,#0FFh
10CC EA20EE13  R  3423           JMPA    cc_EQ,_374
10D0 49C0         3424           CMPB    RL6,#00h
10D2 EA20A414  R  3425           JMPA    cc_EQ,_377
10D6 EA004215  R  3426           JMPA    cc_UC,_386
                  3427   ; main.c   1037   {
                  3428   ; main.c   1038    case 1:
10DA              3429   _343:
                  3430   ; main.c   1039     my=max_y;
10DA E6000000  R  3431           MOV     DPP0,#PAG _max_y
10DE CC00         3432           NOP
10E0 F2F90000  R  3433           MOV     R9,POF _max_y
                  3434   ; main.c   1040     if (editmode) my-=4;
10E4 F2F80000  R  3435           MOV     R8,POF _editmode
10E8 2D01         3436           JMPR    cc_Z,_344
10EA 2894         3437           SUB     R9,#04h
10EC              3438   _344:
                  3439   ; main.c   1041     memset(editline,0,256);
10EC E6FC0000  R  3440           MOV     R12,#POF _editline
10F0 E6FD0000  R  3441           MOV     R13,#PAG _editline
10F4 E00E         3442           MOV     R14,#00h
10F6 E6FF0001     3443           MOV     R15,#0100h
10FA DA000000  R  3444           CALLS   SEG _memset,_memset
                  3445   ; main.c   1042     //Перерисовываем весь экран
                  3446   ; main.c   1043         y=curline-viewline;
10FE E6000000  R  3447           MOV     DPP0,#PAG _curline
1102 CC00         3448           NOP
1104 F2F80000  R  3449           MOV     R8,POF _curline
1108 22F80000  R  3450           SUB     R8,POF _viewline
110C B880         3451           MOV     [R0],R8
                  3452   ; main.c   1044         p=usp;
110E F2F80000  R  3453           MOV     R8,POF _usp
                  3454   ; main.c   1045         if (dsp!=STKSZ) c=dstk[dsp]; else c=0; //Первый символ текущей строки - если буква 
                         - форматируем
1112 F2F60000  R  3455           MOV     R6,POF _dsp
1116 46F60040     3456           CMP     R6,#04000h
111A 2D06         3457           JMPR    cc_EQ,_345
111C F076         3458           MOV     R7,R6
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  67
main

 LOC CODE        LINE   SOURCELINE

111E D7400000  R  3459           EXTP    #PAG _dstk,#01h
1122 F4C70000 1R  3460           MOVB    RL6,[R7+#POF _dstk]
1126 0D01         3461           JMPR    cc_UC,_346
1128              3462   _345:
1128 E10C         3463           MOVB    RL6,#00h
                  3464   ; main.c   1046         while(y)
112A              3465   _346:
112A EA00AE11  R  3466           JMPA    cc_UC,_352
112E              3467   _347:
                  3468   ; main.c   1047         {
                  3469   ; main.c   1048          //Есть строки выше текущей
                  3470   ; main.c   1049      p=bl_us(p);
112E F0C8         3471           MOV     R12,R8
1130 DA000000  R  3472           CALLS   SEG _bl_us,_bl_us
1134 F084         3473           MOV     R8,R4
                  3474   ; main.c   1050      if ((c>' ')&&(!(HISTORY.fmt&0x80))&&(cursor_off))
1136 47FC2000     3475           CMPB    RL6,#020h
113A FD20         3476           JMPR    cc_ULE,_350
113C E6000000  R  3477           MOV     DPP0,#PAG _HISTORY
1140 CC00         3478           NOP
1142 F3FC0000  R  3479           MOVB    RL6,POF (_HISTORY+129)
1146 8AF61970     3480           JB      R6.7,_350
114A E6000000  R  3481           MOV     DPP0,#PAG _cursor_off
114E CC00         3482           NOP
1150 F3FE0000  R  3483           MOVB    RL7,POF _cursor_off
1154 2D13         3484           JMPR    cc_Z,_350
                  3485   ; main.c   1051          drawFrmStkStr(ustk+p,--y,viewpos,-1);
1156 E6FCFFFF     3486           MOV     R12,#0FFFFh
115A 88C0         3487           MOV     [-R0],R12
115C E6FC0000  R  3488           MOV     R12,#POF _ustk
1160 E6FD0000  R  3489           MOV     R13,#PAG _ustk
1164 00C8         3490           ADD     R12,R8
1166 D4E00200     3491           MOV     R14,[R0+#02H]
116A 28E1         3492           SUB     R14,#01h
116C C4E00200     3493           MOV     [R0+#02H],R14
1170 F2FF0000  R  3494           MOV     R15,POF _viewpos
1174 DA00E003  R  3495           CALLS   SEG _drawFrmStkStr,_drawFrmStkStr
1178 0802         3496           ADD     R0,#02h
117A 0D15         3497           JMPR    cc_UC,_351
117C              3498   _350:
                  3499   ; main.c   1052      else
                  3500   ; main.c   1053      drawStkStr(ustk+p,--y,viewpos,-1);
117C E6F6FFFF     3501           MOV     R6,#0FFFFh
1180 8860         3502           MOV     [-R0],R6
1182 E6FC0000  R  3503           MOV     R12,#POF _ustk
1186 E6FD0000  R  3504           MOV     R13,#PAG _ustk
118A 00C8         3505           ADD     R12,R8
118C D4700200     3506           MOV     R7,[R0+#02H]
1190 2871         3507           SUB     R7,#01h
1192 C4700200     3508           MOV     [R0+#02H],R7
1196 E6000000  R  3509           MOV     DPP0,#PAG _viewpos
119A F0E7         3510           MOV     R14,R7
119C F2FF0000  R  3511           MOV     R15,POF _viewpos
11A0 DA004003  R  3512           CALLS   SEG _drawStkStr,_drawStkStr
11A4 0802         3513           ADD     R0,#02h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  68
main

 LOC CODE        LINE   SOURCELINE

11A6              3514   _351:
                  3515   ; main.c   1054          c=ustk[p];
11A6 D7400000  R  3516           EXTP    #PAG _ustk,#01h
11AA F4C80000 1R  3517           MOVB    RL6,[R8+#POF _ustk]
11AE              3518   _352:
11AE A870         3519           MOV     R7,[R0]
11B0 3DBE         3520           JMPR    cc_NZ,_347
                  3521   ; main.c   1055     }
                  3522   ; main.c   1056     y=curline-viewline;
11B2 E6000000  R  3523           MOV     DPP0,#PAG _curline
11B6 E00C         3524           MOV     R12,#00h
11B8 F2F80000  R  3525           MOV     R8,POF _curline
11BC 22F80000  R  3526           SUB     R8,POF _viewline
11C0 B880         3527           MOV     [R0],R8
                  3528   ; main.c   1057         //Теперь печатаем от текущей вниз
                  3529   ; main.c   1058         p=dsp;
11C2 F2F80000  R  3530           MOV     R8,POF _dsp
                  3531   ; main.c   1059         f=0;
                  3532   ; main.c   1060         while(y!=(my))
11C6 EA00BC12  R  3533           JMPA    cc_UC,_363
11CA              3534   _353:
                  3535   ; main.c   1061         {
                  3536   ; main.c   1062      if (p==STKSZ)
11CA 46F80040     3537           CMP     R8,#04000h
11CE 3D2D         3538           JMPR    cc_NE,_356
                  3539   ; main.c   1063          {
                  3540   ; main.c   1064           drawStkStr((STR)"<<EOF>>",y++,0,-1);
11D0 E6F8FFFF     3541           MOV     R8,#0FFFFh
11D4 8880         3542           MOV     [-R0],R8
11D6 E6FC0000  R  3543           MOV     R12,#POF _223
11DA E6FD0000  R  3544           MOV     R13,#PAG _223
11DE D4E00200     3545           MOV     R14,[R0+#02H]
11E2 D4600200     3546           MOV     R6,[R0+#02H]
11E6 0861         3547           ADD     R6,#01h
11E8 C4600200     3548           MOV     [R0+#02H],R6
11EC E00F         3549           MOV     R15,#00h
11EE DA004003  R  3550           CALLS   SEG _drawStkStr,_drawStkStr
11F2 0802         3551           ADD     R0,#02h
                  3552   ; main.c   1065       while(y!=my) drawStkStr("",y++,viewpos,-1);
11F4 0D15         3553           JMPR    cc_UC,_355
11F6              3554   _354:
11F6 E6F8FFFF     3555           MOV     R8,#0FFFFh
11FA 8880         3556           MOV     [-R0],R8
11FC E6FC0000  R  3557           MOV     R12,#POF _224
1200 D4E00200     3558           MOV     R14,[R0+#02H]
1204 D4600200     3559           MOV     R6,[R0+#02H]
1208 0861         3560           ADD     R6,#01h
120A C4600200     3561           MOV     [R0+#02H],R6
120E E6000000  R  3562           MOV     DPP0,#PAG _viewpos
1212 E6FD0000  R  3563           MOV     R13,#PAG _224
1216 F2FF0000  R  3564           MOV     R15,POF _viewpos
121A DA004003  R  3565           CALLS   SEG _drawStkStr,_drawStkStr
121E 0802         3566           ADD     R0,#02h
1220              3567   _355:
1220 A880         3568           MOV     R8,[R0]
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  69
main

 LOC CODE        LINE   SOURCELINE

1222 4089         3569           CMP     R8,R9
1224 3DE8         3570           JMPR    cc_NE,_354
                  3571   ; main.c   1066       break;
1226 EA00C412  R  3572           JMPA    cc_UC,_364
                  3573   ; main.c   1067          }
122A              3574   _356:
                  3575   ; main.c   1068          else
                  3576   ; main.c   1069          {
                  3577   ; main.c   1070           unsigned int p1;
                  3578   ; main.c   1071       p1=bl_ds(p);
122A F06C         3579           MOV     R6,R12
122C F0C8         3580           MOV     R12,R8
122E DA000000  R  3581           CALLS   SEG _bl_ds,_bl_ds
1232 F074         3582           MOV     R7,R4
1234 F0C6         3583           MOV     R12,R6
                  3584   ; main.c   1072           if (p1!=STKSZ) c=dstk[p1]; else c=0; //Посл. строка не расширяется
1236 46F70040     3585           CMP     R7,#04000h
123A 2D05         3586           JMPR    cc_EQ,_357
123C D7400000  R  3587           EXTP    #PAG _dstk,#01h
1240 F4C70000 1R  3588           MOVB    RL6,[R7+#POF _dstk]
1244 0D01         3589           JMPR    cc_UC,_358
1246              3590   _357:
1246 E10C         3591           MOVB    RL6,#00h
1248              3592   _358:
                  3593   ; main.c   1073       if ((c>' ')&&(!(HISTORY.fmt&0x80))&&(cursor_off))
1248 47FC2000     3594           CMPB    RL6,#020h
124C FD20         3595           JMPR    cc_ULE,_361
124E E6000000  R  3596           MOV     DPP0,#PAG _HISTORY
1252 CC00         3597           NOP
1254 F3FC0000  R  3598           MOVB    RL6,POF (_HISTORY+129)
1258 8AF61970     3599           JB      R6.7,_361
125C E6000000  R  3600           MOV     DPP0,#PAG _cursor_off
1260 CC00         3601           NOP
1262 F3F20000  R  3602           MOVB    RL1,POF _cursor_off
1266 2D13         3603           JMPR    cc_Z,_361
                  3604   ; main.c   1074           drawFrmStkStr(dstk+p,y++,viewpos,f);
1268 88C0         3605           MOV     [-R0],R12
126A E6FC0000  R  3606           MOV     R12,#POF _dstk
126E E6FD0000  R  3607           MOV     R13,#PAG _dstk
1272 00C8         3608           ADD     R12,R8
1274 D4E00200     3609           MOV     R14,[R0+#02H]
1278 D4800200     3610           MOV     R8,[R0+#02H]
127C 0881         3611           ADD     R8,#01h
127E C4800200     3612           MOV     [R0+#02H],R8
1282 F2FF0000  R  3613           MOV     R15,POF _viewpos
1286 DA00E003  R  3614           CALLS   SEG _drawFrmStkStr,_drawFrmStkStr
128A 0802         3615           ADD     R0,#02h
128C 0D14         3616           JMPR    cc_UC,_362
128E              3617   _361:
                  3618   ; main.c   1075           else
                  3619   ; main.c   1076           drawStkStr(dstk+p,y++,viewpos,f);
128E 88C0         3620           MOV     [-R0],R12
1290 E6FC0000  R  3621           MOV     R12,#POF _dstk
1294 00C8         3622           ADD     R12,R8
1296 D4E00200     3623           MOV     R14,[R0+#02H]
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  70
main

 LOC CODE        LINE   SOURCELINE

129A D4800200     3624           MOV     R8,[R0+#02H]
129E 0881         3625           ADD     R8,#01h
12A0 C4800200     3626           MOV     [R0+#02H],R8
12A4 E6000000  R  3627           MOV     DPP0,#PAG _viewpos
12A8 E6FD0000  R  3628           MOV     R13,#PAG _dstk
12AC F2FF0000  R  3629           MOV     R15,POF _viewpos
12B0 DA004003  R  3630           CALLS   SEG _drawStkStr,_drawStkStr
12B4 0802         3631           ADD     R0,#02h
12B6              3632   _362:
                  3633   ; main.c   1077           p=p1;
12B6 F087         3634           MOV     R8,R7
                  3635   ; main.c   1078           f=-1;
12B8 E6FCFFFF     3636           MOV     R12,#0FFFFh
12BC              3637   _363:
12BC A860         3638           MOV     R6,[R0]
12BE 4069         3639           CMP     R6,R9
12C0 EA30CA11  R  3640           JMPA    cc_NE,_353
                  3641   ; main.c   1079          }
                  3642   ; main.c   1080     }
12C4              3643   _364:
                  3644   ; main.c   1081     //DrawCursor(curpos-viewpos,curline-viewline);
                  3645   ; main.c   1082         {
                  3646   ; main.c   1083          //Рисуем скролл-бар
                  3647   ; main.c   1084          char far *d=myscr+12; //Последний байт
12C4 E6F90000  R  3648           MOV     R9,#POF _myscr+12
                  3649   ; main.c   1085          if (total_line)
12C8 E6000000  R  3650           MOV     DPP0,#PAG _total_line
12CC E6F60000  R  3651           MOV     R6,#PAG _myscr
12D0 F2F80000  R  3652           MOV     R8,POF (_total_line+2)
12D4 72F80000  R  3653           OR      R8,POF _total_line
12D8 2D1E         3654           JMPR    cc_Z,_365
                  3655   ; main.c   1086          {
                  3656   ; main.c   1087       y=((editmode?40:72)*curline)/total_line;
12DA F2F80000  R  3657           MOV     R8,POF _editmode
12DE 2D03         3658           JMPR    cc_Z,_390
12E0              3659   _391:
12E0 E6F82800     3660           MOV     R8,#028h
12E4 0D02         3661           JMPR    cc_UC,_392
12E6              3662   _390:
12E6 E6F84800     3663           MOV     R8,#048h
12EA              3664   _392:
12EA F048         3665           MOV     R4,R8
12EC F054         3666           MOV     R5,R4
12EE E6000000  R  3667           MOV     DPP0,#PAG _curline
12F2 BCF5         3668           ASHR    R5,#0Fh
12F4 F2FA0000  R  3669           MOV     R10,POF _curline
12F8 F2FB0000  R  3670           MOV     R11,POF (_curline+2)
12FC DA000000  R  3671           CALLS   SEG __mul,__mul
1300 E6000000  R  3672           MOV     DPP0,#PAG _total_line
1304 CC00         3673           NOP
1306 F2FA0000  R  3674           MOV     R10,POF _total_line
130A F2FB0000  R  3675           MOV     R11,POF (_total_line+2)
130E DA000000  R  3676           CALLS   SEG __udil,__udil
1312 B840         3677           MOV     [R0],R4
                  3678   ; main.c   1088          }
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  71
main

 LOC CODE        LINE   SOURCELINE

1314 0D02         3679           JMPR    cc_UC,_366
1316              3680   _365:
                  3681   ; main.c   1089          else
                  3682   ; main.c   1090          {
                  3683   ; main.c   1091           y=0;
1316 E008         3684           MOV     R8,#00h
1318 B880         3685           MOV     [R0],R8
                  3686   ; main.c   1092          }
131A              3687   _366:
                  3688   ; main.c   1093          p=0;
131A E008         3689           MOV     R8,#00h
                  3690   ; main.c   1094          do
131C              3691   _367:
                  3692   ; main.c   1095          {
                  3693   ; main.c   1096           if ((p<y)||(p>(y+7)))
131C A870         3694           MOV     R7,[R0]
131E 4087         3695           CMP     R8,R7
1320 8D03         3696           JMPR    cc_ULT,_368
1322 0877         3697           ADD     R7,#07h
1324 4078         3698           CMP     R7,R8
1326 9D0A         3699           JMPR    cc_UGE,_369
1328              3700   _368:
                  3701   ; main.c   1097           {
                  3702   ; main.c   1098            *d=p&1?0x50:0x28;
1328 9AF80300     3703           JNB     R8.0,_393
132C              3704   _394:
132C E7FE5000     3705           MOVB    RL7,#050h
1330 0D02         3706           JMPR    cc_UC,_395
1332              3707   _393:
1332 E7FE2800     3708           MOVB    RL7,#028h
1336              3709   _395:
1336 DC46         3710           EXTP    R6,#01h
1338 B9E9     1   3711           MOVB    [R9],RL7
                  3712   ; main.c   1099       }
133A 0D04         3713           JMPR    cc_UC,_370
133C              3714   _369:
                  3715   ; main.c   1100           else
                  3716   ; main.c   1101           {
                  3717   ; main.c   1102            *d=0x78;
133C E7FE7800     3718           MOVB    RL7,#078h
1340 DC46         3719           EXTP    R6,#01h
1342 B9E9     1   3720           MOVB    [R9],RL7
                  3721   ; main.c   1103       }
1344              3722   _370:
                  3723   ; main.c   1104           d+=13;
1344 06F90D00     3724           ADD     R9,#0Dh
                  3725   ; main.c   1105           p++;
1348 0881         3726           ADD     R8,#01h
                  3727   ; main.c   1106      }
                  3728   ; main.c   1107          while(p<80);
134A 46F85000     3729           CMP     R8,#050h
134E 8DE6         3730           JMPR    cc_ULT,_367
                  3731   ; main.c   1108     }
                  3732   ; main.c   1109         if (editmode)
1350 E6000000  R  3733           MOV     DPP0,#PAG _editmode
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  72
main

 LOC CODE        LINE   SOURCELINE

1354 CC00         3734           NOP
1356 F2F80000  R  3735           MOV     R8,POF _editmode
135A EA20C014  R  3736           JMPA    cc_Z,_378
                  3737   ; main.c   1110          drawImage(0,16,101,48,&MyScrHdr);
135E E6F90000  R  3738           MOV     R9,#POF _MyScrHdr
1362 E6F60000  R  3739           MOV     R6,#PAG _MyScrHdr
1366 8860         3740           MOV     [-R0],R6
1368 8890         3741           MOV     [-R0],R9
136A E00C         3742           MOV     R12,#00h
136C E6FD1000     3743           MOV     R13,#010h
1370 E6FE6500     3744           MOV     R14,#065h
1374 E6FF3000     3745           MOV     R15,#030h
1378 DA000000  R  3746           CALLS   SEG _drawImage,_drawImage
137C 0804         3747           ADD     R0,#04h
137E EA00DE14  R  3748           JMPA    cc_UC,_379
                  3749   ; main.c   1111         else
                  3750   ; main.c   1112          drawImage(0,0,101,80,&MyScrHdr);
                  3751   ; main.c   1113         cursor_cnt=3;
                  3752   ; main.c   1114         goto L_CURSOR;
                  3753   ; main.c   1115    case 2:
1382              3754   _371:
                  3755   ; main.c   1116     //Процесс перехода на строку
                  3756   ; main.c   1117     {
                  3757   ; main.c   1118      FillRect(0,0,101,8,0);
1382 E008         3758           MOV     R8,#00h
1384 8880         3759           MOV     [-R0],R8
1386 F0C8         3760           MOV     R12,R8
1388 F0D8         3761           MOV     R13,R8
138A E6FE6500     3762           MOV     R14,#065h
138E E08F         3763           MOV     R15,#08h
1390 DA000000  R  3764           CALLS   SEG _FillRect,_FillRect
                  3765   ; main.c   1119      xsprintf(s,(STR)"Goto line %lu...",curline);
1394 E6000000  R  3766           MOV     DPP0,#PAG _curline
1398 0802         3767           ADD     R0,#02h
139A F2F80000  R  3768           MOV     R8,POF _curline
139E F2F90000  R  3769           MOV     R9,POF (_curline+2)
13A2 8890         3770           MOV     [-R0],R9
13A4 8880         3771           MOV     [-R0],R8
13A6 E06C         3772           MOV     R12,#06h
13A8 00C0         3773           ADD     R12,R0
13AA 66FCFF3F     3774           AND     R12,#03FFFh
13AE F2FD02FE     3775           MOV     R13,DPP1
13B2 E6FE0000  R  3776           MOV     R14,#POF _225
13B6 E6FF0000  R  3777           MOV     R15,#PAG _225
13BA DA000000  R  3778           CALLS   SEG _xsprintf,_xsprintf
13BE 0804         3779           ADD     R0,#04h
                  3780   ; main.c   1120      DrawString(0,0,101,8,(STR)s,0);
13C0 E008         3781           MOV     R8,#00h
13C2 8880         3782           MOV     [-R0],R8
13C4 E049         3783           MOV     R9,#04h
13C6 0090         3784           ADD     R9,R0
13C8 66F9FF3F     3785           AND     R9,#03FFFh
13CC F2F602FE     3786           MOV     R6,DPP1
13D0 8860         3787           MOV     [-R0],R6
13D2 8890         3788           MOV     [-R0],R9
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  73
main

 LOC CODE        LINE   SOURCELINE

13D4 F0C8         3789           MOV     R12,R8
13D6 F0D8         3790           MOV     R13,R8
13D8 E6FE6500     3791           MOV     R14,#065h
13DC E08F         3792           MOV     R15,#08h
13DE DA000000  R  3793           CALLS   SEG _DrawString,_DrawString
13E2 0806         3794           ADD     R0,#06h
                  3795   ; main.c   1121          goto L_WELLCOME2;
13E4 0D12         3796           JMPR    cc_UC,_376
                  3797   ; main.c   1122     }
                  3798   ; main.c   1123     //return;
                  3799   ; main.c   1124    case 4:
13E6              3800   _372:
                  3801   ; main.c   1125     //Экран информации
                  3802   ; main.c   1126         DrawInfo();
13E6 DA00EC0E  R  3803           CALLS   SEG _DrawInfo,_DrawInfo
                  3804   ; main.c   1127         return;
13EA EA004C15  R  3805           JMPA    cc_UC,_389
                  3806   ; main.c   1128    case 255:
                  3807   ; main.c   1129     //Экран приветствия
                  3808   ; main.c   1130         L_WELLCOME:
13EE              3809   _374:
                  3810   ; main.c   1131     FillRect(0,0,101,8,0);
13EE E008         3811           MOV     R8,#00h
13F0 8880         3812           MOV     [-R0],R8
13F2 F0C8         3813           MOV     R12,R8
13F4 F0D8         3814           MOV     R13,R8
13F6 E6FE6500     3815           MOV     R14,#065h
13FA E08F         3816           MOV     R15,#08h
13FC DA000000  R  3817           CALLS   SEG _FillRect,_FillRect
                  3818   ; main.c   1132         draw_mode=0;
1400 E6000000  R  3819           MOV     DPP0,#PAG _draw_mode
1404 0802         3820           ADD     R0,#02h
1406 F78E0000  R  3821           MOVB    POF _draw_mode,ZEROS
                  3822   ; main.c   1133         L_WELLCOME2:
140A              3823   _376:
                  3824   ; main.c   1134         FillRect(0,8,101,80-8,0);
140A E008         3825           MOV     R8,#00h
140C 8880         3826           MOV     [-R0],R8
140E F0C8         3827           MOV     R12,R8
1410 E08D         3828           MOV     R13,#08h
1412 E6FE6500     3829           MOV     R14,#065h
1416 E6FF4800     3830           MOV     R15,#048h
141A DA000000  R  3831           CALLS   SEG _FillRect,_FillRect
                  3832   ; main.c   1135         DrawString(0,16,101,48,(STR)"Text viewer/editor\nversion 2.0\nCopyright(C)2005/2006
                         \nby Rst7/CBSIE",0);
141E E008         3833           MOV     R8,#00h
1420 B880         3834           MOV     [R0],R8
1422 E6F90000  R  3835           MOV     R9,#POF _226
1426 E6F60000  R  3836           MOV     R6,#PAG _226
142A 8860         3837           MOV     [-R0],R6
142C 8890         3838           MOV     [-R0],R9
142E F0C8         3839           MOV     R12,R8
1430 E6FD1000     3840           MOV     R13,#010h
1434 E6FE6500     3841           MOV     R14,#065h
1438 E6FF3000     3842           MOV     R15,#030h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  74
main

 LOC CODE        LINE   SOURCELINE

143C DA000000  R  3843           CALLS   SEG _DrawString,_DrawString
1440 0806         3844           ADD     R0,#06h
                  3845   ; main.c   1136         DrawString(0,48,101,8,*(char far *)(0x3B960)==1?(STR)"26MHz":(STR)"13MHz",0);
1442 E008         3846           MOV     R8,#00h
1444 8880         3847           MOV     [-R0],R8
1446 E6F96039     3848           MOV     R9,#03960h
144A E0E6         3849           MOV     R6,#0Eh
144C DC46         3850           EXTP    R6,#01h
144E A9C9     1   3851           MOVB    RL6,[R9]
1450 49C1         3852           CMPB    RL6,#01h
1452 3D05         3853           JMPR    cc_NE,_396
1454              3854   _397:
1454 E6F80000  R  3855           MOV     R8,#POF _227
1458 E6F90000  R  3856           MOV     R9,#PAG _227
145C 0D04         3857           JMPR    cc_UC,_398
145E              3858   _396:
145E E6F80000  R  3859           MOV     R8,#POF _228
1462 E6F90000  R  3860           MOV     R9,#PAG _228
1466              3861   _398:
1466 8890         3862           MOV     [-R0],R9
1468 8880         3863           MOV     [-R0],R8
146A E00C         3864           MOV     R12,#00h
146C E6FD3000     3865           MOV     R13,#030h
1470 E6FE6500     3866           MOV     R14,#065h
1474 E08F         3867           MOV     R15,#08h
1476 DA000000  R  3868           CALLS   SEG _DrawString,_DrawString
147A 0806         3869           ADD     R0,#06h
                  3870   ; main.c   1137         {
                  3871   ; main.c   1138          DrawString(0,56,101,24,filename,0);
147C E008         3872           MOV     R8,#00h
147E 8880         3873           MOV     [-R0],R8
1480 E6F90000  R  3874           MOV     R9,#POF _filename
1484 E6F60000  R  3875           MOV     R6,#PAG _filename
1488 8860         3876           MOV     [-R0],R6
148A 8890         3877           MOV     [-R0],R9
148C F0C8         3878           MOV     R12,R8
148E E6FD3800     3879           MOV     R13,#038h
1492 E6FE6500     3880           MOV     R14,#065h
1496 E6FF1800     3881           MOV     R15,#018h
149A DA000000  R  3882           CALLS   SEG _DrawString,_DrawString
149E 0806         3883           ADD     R0,#06h
                  3884   ; main.c   1139     }
                  3885   ; main.c   1140         return;
14A0 EA004C15  R  3886           JMPA    cc_UC,_389
                  3887   ; main.c   1141    case 0:
14A4              3888   _377:
                  3889   ; main.c   1142     //Курсор
                  3890   ; main.c   1143         if (cursor_cnt)
14A4 E6000000  R  3891           MOV     DPP0,#PAG _cursor_cnt
14A8 CC00         3892           NOP
14AA F3FC0000  R  3893           MOVB    RL6,POF _cursor_cnt
14AE 49C0         3894           CMPB    RL6,#00h
14B0 2D1B         3895           JMPR    cc_Z,_380
                  3896   ; main.c   1144         {
                  3897   ; main.c   1145          cursor_cnt--;
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  75
main

 LOC CODE        LINE   SOURCELINE

14B2 F3FC0000  R  3898           MOVB    RL6,POF _cursor_cnt
14B6 29C1         3899           SUBB    RL6,#01h
14B8 F7FC0000  R  3900           MOVB    POF _cursor_cnt,RL6
                  3901   ; main.c   1146          break;
14BC EA004215  R  3902           JMPA    cc_UC,_386
14C0              3903   _378:
14C0 E6F80000  R  3904           MOV     R8,#POF _MyScrHdr
14C4 E6F90000  R  3905           MOV     R9,#PAG _MyScrHdr
14C8 8890         3906           MOV     [-R0],R9
14CA 8880         3907           MOV     [-R0],R8
14CC E00C         3908           MOV     R12,#00h
14CE E00D         3909           MOV     R13,#00h
14D0 E6FE6500     3910           MOV     R14,#065h
14D4 E6FF5000     3911           MOV     R15,#050h
14D8 DA000000  R  3912           CALLS   SEG _drawImage,_drawImage
14DC 0804         3913           ADD     R0,#04h
14DE              3914   _379:
14DE E6000000  R  3915           MOV     DPP0,#PAG _cursor_cnt
14E2 E13C         3916           MOVB    RL6,#03h
14E4 F7FC0000  R  3917           MOVB    POF _cursor_cnt,RL6
                  3918   ; main.c   1147     }
                  3919   ; main.c   1148         L_CURSOR:
14E8              3920   _380:
                  3921   ; main.c   1149     {
                  3922   ; main.c   1150      unsigned int x=curpos-viewpos;
14E8 E6000000  R  3923           MOV     DPP0,#PAG _curpos
14EC CC00         3924           NOP
14EE F2FD0000  R  3925           MOV     R13,POF _curpos
14F2 22FD0000  R  3926           SUB     R13,POF _viewpos
                  3927   ; main.c   1151      unsigned int y=curline-viewline;
14F6 F2FC0000  R  3928           MOV     R12,POF _curline
14FA 22FC0000  R  3929           SUB     R12,POF _viewline
                  3930   ; main.c   1152          my=max_y;
14FE F2F90000  R  3931           MOV     R9,POF _max_y
                  3932   ; main.c   1153          if (editmode)
1502 F2F80000  R  3933           MOV     R8,POF _editmode
1506 2D02         3934           JMPR    cc_Z,_381
                  3935   ; main.c   1154          {
                  3936   ; main.c   1155           my-=2;
1508 2892         3937           SUB     R9,#02h
                  3938   ; main.c   1156           y+=2;
150A 08C2         3939           ADD     R12,#02h
                  3940   ; main.c   1157          }
150C              3941   _381:
                  3942   ; main.c   1158      if ((x<max_x)&&(y<my)&&(!cursor_off))
150C E6000000  R  3943           MOV     DPP0,#PAG _max_x
1510 CC00         3944           NOP
1512 42FD0000  R  3945           CMP     R13,POF _max_x
1516 9D15         3946           JMPR    cc_UGE,_386
1518 40C9         3947           CMP     R12,R9
151A 9D13         3948           JMPR    cc_UGE,_386
151C F3FC0000  R  3949           MOVB    RL6,POF _cursor_off
1520 3D10         3950           JMPR    cc_NZ,_386
                  3951   ; main.c   1159      {
                  3952   ; main.c   1160       FillRect(x*font_size,y*8,font_size,8,1);
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  76
main

 LOC CODE        LINE   SOURCELINE

1522 E018         3953           MOV     R8,#01h
1524 8880         3954           MOV     [-R0],R8
1526 C2F90000  R  3955           MOVBZ   R9,POF _font_size
152A 1BD9         3956           MULU    R13,R9
152C F09C         3957           MOV     R9,R12
152E F2FC0EFE     3958           MOV     R12,MDL
1532 F0D9         3959           MOV     R13,R9
1534 5C3D         3960           SHL     R13,#03h
1536 C2FE0000  R  3961           MOVBZ   R14,POF _font_size
153A E08F         3962           MOV     R15,#08h
153C DA000000  R  3963           CALLS   SEG _FillRect,_FillRect
1540 0802         3964           ADD     R0,#02h
                  3965   ; main.c   1161      }
                  3966   ; main.c   1162         }
                  3967   ; main.c   1163         break;
                  3968   ; main.c   1164   }
1542              3969   _386:
                  3970   ; main.c   1165   draw_mode=0;
1542 E6000000  R  3971           MOV     DPP0,#PAG _draw_mode
1546 CC00         3972           NOP
1548 F78E0000  R  3973           MOVB    POF _draw_mode,ZEROS
                  3974   ; main.c   1166  } 
                  3975   ; main.c   1167  return;
                  3976   ; main.c   1168 }
154C              3977   _389:
154C 06F02200     3978           ADD     R0,#022h
1550 9860         3979           MOV     R6,[R0+]
1552 9870         3980           MOV     R7,[R0+]
1554 9880         3981           MOV     R8,[R0+]
1556 9890         3982           MOV     R9,[R0+]
1558 DB00         3983           RETS
                  3984   _DrawScreen     ENDP
                  3985   ; main.c   1169 
                  3986   ; main.c   1170 void DrawLoadMenu(void);
                  3987   ; main.c   1171 void DrawSoftMenu(void);
                  3988   ; main.c   1172 
                  3989   ; main.c   1173 
                  3990   ; main.c   1174 unsigned int IsFocus(void far *data)
                  3991   ; main.c   1175 {
                  3992           PUBLIC  _IsFocus
                  3993   _IsFocus        PROC    FAR
                  3994   ; Locals:
                  3995   ; 
                  3996   ; Statics:
                  3997   ; 
                  3998   ; CSEs:
                  3999   ;     data = R12R13
                  4000   ;     id = R14
                  4001   ; 
                  4002   ; main.c   1176  int id;
                  4003   ; main.c   1177  if (((int far *)data)[0x10]) return 0; //Есть меню поверх
155A DC4D         4004           EXTP    R13,#01h
155C D4EC2000 1   4005           MOV     R14,[R12+#020H]
1560 3D13         4006           JMPR    cc_NZ,_406
                  4007   ; main.c   1178  if (((int far *)data)[0x0A]) return 0; //Есть модальное окно поверх
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  77
main

 LOC CODE        LINE   SOURCELINE

1562 DC4D         4008           EXTP    R13,#01h
1564 D4EC1400 1   4009           MOV     R14,[R12+#014H]
1568 3D0F         4010           JMPR    cc_NZ,_406
                  4011   ; main.c   1179  id=(*((int far * far *)(0x37*0x4000L+0x327A)))[6];
156A E6FF7A32     4012           MOV     R15,#0327Ah
156E E6F13700     4013           MOV     R1,#037h
1572 DC51         4014           EXTP    R1,#02h
1574 982F     2   4015           MOV     R2,[R15+]
1576 A83F     1   4016           MOV     R3,[R15]
1578 DC43         4017           EXTP    R3,#01h
157A D4E20C00 1   4018           MOV     R14,[R2+#0CH]
                  4019   ; main.c   1180  if (((int far *)data)[6]!=id) return 0; //Есть диалог поверх
157E DC4D         4020           EXTP    R13,#01h
1580 D4FC0C00 1   4021           MOV     R15,[R12+#0CH]
1584 40FE         4022           CMP     R15,R14
1586 2D02         4023           JMPR    cc_EQ,_407
1588              4024   _406:
1588 E004         4025           MOV     R4,#00h
158A DB00         4026           RETS
158C              4027   _407:
                  4028   ; main.c   1181  //if (((int far *)data)[6]!=GetBotDialogWSK_ID()) return 0; //Есть диалог поверх
                  4029   ; main.c   1182  return(1);
158C E014         4030           MOV     R4,#01h
                  4031   ; main.c   1183 }
158E              4032   _408:
158E DB00         4033           RETS
                  4034   _IsFocus        ENDP
                  4035   ; main.c   1184 
                  4036   ; main.c   1185 void doCurRight(void)
                  4037   ; main.c   1186 {
                  4038           PUBLIC  _doCurRight
                  4039   _doCurRight     PROC    FAR
                  4040   ; Locals:
                  4041   ; 
                  4042   ; Statics:
                  4043   ; 
                  4044   ; CSEs:
                  4045   ; 
                  4046   ; main.c   1187     if (cursor_off)
1590 E6000000  R  4047           MOV     DPP0,#PAG _cursor_off
1594 CC00         4048           NOP
1596 F3F20000  R  4049           MOVB    RL1,POF _cursor_off
159A 2D0A         4050           JMPR    cc_Z,_414
                  4051   ; main.c   1188         {
                  4052   ; main.c   1189          if (curpos>=(256-8)) return;
159C F2FC0000  R  4053           MOV     R12,POF _curpos
15A0 46FCF800     4054           CMP     R12,#0F8h
15A4 9D23         4055           JMPR    cc_UGE,_418
                  4056   ; main.c   1190          curpos+=8;
15A6 06FC0800     4057           ADD     R12,#08h
15AA F6FC0000  R  4058           MOV     POF _curpos,R12
                  4059   ; main.c   1191          viewpos+=8;
15AE 0D10         4060           JMPR    cc_UC,_415
                  4061   ; main.c   1192          draw_mode=1;
                  4062   ; main.c   1193          return;
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  78
main

 LOC CODE        LINE   SOURCELINE

                  4063   ; main.c   1194     }
15B0              4064   _414:
                  4065   ; main.c   1195     if (curpos>=256) return;
15B0 E6000000  R  4066           MOV     DPP0,#PAG _curpos
15B4 CC00         4067           NOP
15B6 F2FC0000  R  4068           MOV     R12,POF _curpos
15BA 46FC0001     4069           CMP     R12,#0100h
15BE 9D16         4070           JMPR    cc_UGE,_418
                  4071   ; main.c   1196     curpos++;
15C0 08C1         4072           ADD     R12,#01h
15C2 F6FC0000  R  4073           MOV     POF _curpos,R12
                  4074   ; main.c   1197     if ((curpos-viewpos)>=max_x)
15C6 22FC0000  R  4075           SUB     R12,POF _viewpos
15CA 42FC0000  R  4076           CMP     R12,POF _max_x
15CE 8D09         4077           JMPR    cc_ULT,_416
                  4078   ; main.c   1198     {
                  4079   ; main.c   1199      viewpos+=8;
15D0              4080   _415:
15D0 E6000000  R  4081           MOV     DPP0,#PAG _viewpos
15D4 CC00         4082           NOP
15D6 F2FC0000  R  4083           MOV     R12,POF _viewpos
15DA 06FC0800     4084           ADD     R12,#08h
15DE F6FC0000  R  4085           MOV     POF _viewpos,R12
                  4086   ; main.c   1200     }
15E2              4087   _416:
                  4088   ; main.c   1201     draw_mode=1;
15E2 E6000000  R  4089           MOV     DPP0,#PAG _draw_mode
15E6 E112         4090           MOVB    RL1,#01h
15E8 F7F20000  R  4091           MOVB    POF _draw_mode,RL1
                  4092   ; main.c   1202 }
15EC              4093   _418:
15EC DB00         4094           RETS
                  4095   _doCurRight     ENDP
                  4096   ; main.c   1203 
                  4097   ; main.c   1204 void doCurLeft(void)
                  4098   ; main.c   1205 {
                  4099           PUBLIC  _doCurLeft
                  4100   _doCurLeft      PROC    FAR
                  4101   ; Locals:
                  4102   ; 
                  4103   ; Statics:
                  4104   ; 
                  4105   ; CSEs:
                  4106   ; 
                  4107   ; main.c   1206     if (cursor_off)
15EE E6000000  R  4108           MOV     DPP0,#PAG _cursor_off
15F2 CC00         4109           NOP
15F4 F3F20000  R  4110           MOVB    RL1,POF _cursor_off
15F8 2D2B         4111           JMPR    cc_Z,_423
                  4112   ; main.c   1207         {
                  4113   ; main.c   1208          if (curpos<8)
15FA F2FC0000  R  4114           MOV     R12,POF _curpos
15FE 46FC0800     4115           CMP     R12,#08h
1602 9D03         4116           JMPR    cc_UGE,_419
                  4117   ; main.c   1209           curpos=0;
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  79
main

 LOC CODE        LINE   SOURCELINE

1604 F68E0000  R  4118           MOV     POF _curpos,ZEROS
1608 0D09         4119           JMPR    cc_UC,_420
160A              4120   _419:
                  4121   ; main.c   1210          else
                  4122   ; main.c   1211           curpos-=8;
160A E6000000  R  4123           MOV     DPP0,#PAG _curpos
160E CC00         4124           NOP
1610 F2FC0000  R  4125           MOV     R12,POF _curpos
1614 26FC0800     4126           SUB     R12,#08h
1618 F6FC0000  R  4127           MOV     POF _curpos,R12
161C              4128   _420:
                  4129   ; main.c   1212          if (viewpos<8)
161C E6000000  R  4130           MOV     DPP0,#PAG _viewpos
1620 CC00         4131           NOP
1622 F2FC0000  R  4132           MOV     R12,POF _viewpos
1626 46FC0800     4133           CMP     R12,#08h
162A 9D03         4134           JMPR    cc_UGE,_421
                  4135   ; main.c   1213           viewpos=0;
162C F68E0000  R  4136           MOV     POF _viewpos,ZEROS
1630 0D09         4137           JMPR    cc_UC,_422
1632              4138   _421:
                  4139   ; main.c   1214          else
                  4140   ; main.c   1215           viewpos-=8;
1632 E6000000  R  4141           MOV     DPP0,#PAG _viewpos
1636 CC00         4142           NOP
1638 F2FC0000  R  4143           MOV     R12,POF _viewpos
163C 26FC0800     4144           SUB     R12,#08h
1640 F6FC0000  R  4145           MOV     POF _viewpos,R12
1644              4146   _422:
                  4147   ; main.c   1216          draw_mode=1;
1644 E6000000  R  4148           MOV     DPP0,#PAG _draw_mode
1648 E112         4149           MOVB    RL1,#01h
164A F7F20000  R  4150           MOVB    POF _draw_mode,RL1
                  4151   ; main.c   1217          return;
164E DB00         4152           RETS
                  4153   ; main.c   1218     }
1650              4154   _423:
                  4155   ; main.c   1219     if (curpos==0) return;
1650 E6000000  R  4156           MOV     DPP0,#PAG _curpos
1654 CC00         4157           NOP
1656 F2FC0000  R  4158           MOV     R12,POF _curpos
165A 2D18         4159           JMPR    cc_Z,_428
                  4160   ; main.c   1220     draw_mode=1;
165C E112         4161           MOVB    RL1,#01h
165E F7F20000  R  4162           MOVB    POF _draw_mode,RL1
                  4163   ; main.c   1221     curpos--;
1662 28C1         4164           SUB     R12,#01h
1664 F6FC0000  R  4165           MOV     POF _curpos,R12
                  4166   ; main.c   1222     if (curpos>=viewpos) return;
1668 42FC0000  R  4167           CMP     R12,POF _viewpos
166C 9D0F         4168           JMPR    cc_UGE,_428
                  4169   ; main.c   1223     if (viewpos>8) viewpos-=8; else viewpos=0;
166E F2FD0000  R  4170           MOV     R13,POF _viewpos
1672 46FD0800     4171           CMP     R13,#08h
1676 FD05         4172           JMPR    cc_ULE,_424
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  80
main

 LOC CODE        LINE   SOURCELINE

1678 26FD0800     4173           SUB     R13,#08h
167C F6FD0000  R  4174           MOV     POF _viewpos,R13
1680 DB00         4175           RETS
1682              4176   _424:
1682 E6000000  R  4177           MOV     DPP0,#PAG _viewpos
1686 CC00         4178           NOP
1688 F68E0000  R  4179           MOV     POF _viewpos,ZEROS
                  4180   ; main.c   1224 }
168C              4181   _428:
168C DB00         4182           RETS
                  4183   _doCurLeft      ENDP
                  4184   ; main.c   1225 
                  4185   ; main.c   1226 void insline(void)
                  4186   ; main.c   1227 {
                  4187           PUBLIC  _insline
                  4188   _insline        PROC    FAR
                  4189   ; Locals:
                  4190   ; 
                  4191   ; Statics:
                  4192   ; 
                  4193   ; CSEs:
                  4194   ; 
                  4195   ; main.c   1228  dstk[--dsp]=0;
168E E6000000  R  4196           MOV     DPP0,#PAG _dsp
1692 E102         4197           MOVB    RL1,#00h
1694 F2FC0000  R  4198           MOV     R12,POF _dsp
1698 28C1         4199           SUB     R12,#01h
169A F6FC0000  R  4200           MOV     POF _dsp,R12
169E D7400000  R  4201           EXTP    #PAG _dstk,#01h
16A2 E42C0000 1R  4202           MOVB    [R12+#POF _dstk],RL1
                  4203   ; main.c   1229  total_line++;
16A6 E6000000  R  4204           MOV     DPP0,#PAG _total_line
16AA E01C         4205           MOV     R12,#01h
16AC 04FC0000  R  4206           ADD     POF _total_line,R12
16B0 148E0000  R  4207           ADDC    POF (_total_line+2),ZEROS
                  4208   ; main.c   1230  GeneralFunc(1);
16B4 FA000000  R  4209           JMPS    SEG _GeneralFunc,_GeneralFunc
                  4210   ; main.c   1231 }
                  4211           RETV
                  4212   _insline        ENDP
                  4213   ; main.c   1232 
                  4214   ; main.c   1233 void delline(void)
                  4215   ; main.c   1234 {
                  4216           PUBLIC  _delline
                  4217   _delline        PROC    FAR
                  4218   ; Locals:
                  4219   ; 
                  4220   ; Statics:
                  4221   ; 
                  4222   ; CSEs:
                  4223   ; 
                  4224   ; main.c   1235  if (dsp!=STKSZ)
16B8 E6000000  R  4225           MOV     DPP0,#PAG _dsp
16BC CC00         4226           NOP
16BE F2FC0000  R  4227           MOV     R12,POF _dsp
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  81
main

 LOC CODE        LINE   SOURCELINE

16C2 46FC0040     4228           CMP     R12,#04000h
16C6 2D0B         4229           JMPR    cc_EQ,_429
                  4230   ; main.c   1236  {
                  4231   ; main.c   1237   dsp=bl_ds(dsp);
16C8 DA000000  R  4232           CALLS   SEG _bl_ds,_bl_ds
16CC E6000000  R  4233           MOV     DPP0,#PAG _dsp
16D0 E01C         4234           MOV     R12,#01h
16D2 F6F40000  R  4235           MOV     POF _dsp,R4
                  4236   ; main.c   1238   total_line--;
16D6 24FC0000  R  4237           SUB     POF _total_line,R12
16DA 348E0000  R  4238           SUBC    POF (_total_line+2),ZEROS
                  4239   ; main.c   1239  }
16DE              4240   _429:
                  4241   ; main.c   1240  GeneralFunc(1);
16DE E01C         4242           MOV     R12,#01h
16E0 FA000000  R  4243           JMPS    SEG _GeneralFunc,_GeneralFunc
                  4244   ; main.c   1241 }
                  4245           RETV
                  4246   _delline        ENDP
                  4247   ; main.c   1242 
                  4248   ; main.c   1243 void splitline(void)
                  4249   ; main.c   1244 {
                  4250           PUBLIC  _splitline
                  4251   _splitline      PROC    FAR
                  4252   ; Locals:
                  4253   ; 
                  4254   ; Statics:
                  4255   ; 
                  4256   ; CSEs:
                  4257   ; 
                  4258   ; main.c   1245  if ((curpos<=strlen(dstk+dsp))&&(dsp!=STKSZ))
16E4 E6FC0000  R  4259           MOV     R12,#POF _dstk
16E8 E6000000  R  4260           MOV     DPP0,#PAG _dsp
16EC E6FD0000  R  4261           MOV     R13,#PAG _dstk
16F0 02FC0000  R  4262           ADD     R12,POF _dsp
16F4 DA000000  R  4263           CALLS   SEG _strlen,_strlen
16F8 E6000000  R  4264           MOV     DPP0,#PAG _curpos
16FC CC00         4265           NOP
16FE 42F40000  R  4266           CMP     R4,POF _curpos
1702 EA809417  R  4267           JMPA    cc_ULT,_433
1706 F2FC0000  R  4268           MOV     R12,POF _dsp
170A 46FC0040     4269           CMP     R12,#04000h
170E EA209417  R  4270           JMPA    cc_EQ,_433
                  4271   ; main.c   1246  {
                  4272   ; main.c   1247   while(curpos)
1712 0D21         4273           JMPR    cc_UC,_431
1714              4274   _430:
                  4275   ; main.c   1248   {
                  4276   ; main.c   1249    ustk[usp++]=dstk[dsp++];
1714 E6000000  R  4277           MOV     DPP0,#PAG _dsp
1718 CC00         4278           NOP
171A F2FC0000  R  4279           MOV     R12,POF _dsp
171E F2FD0000  R  4280           MOV     R13,POF _dsp
1722 08D1         4281           ADD     R13,#01h
1724 F6FD0000  R  4282           MOV     POF _dsp,R13
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  82
main

 LOC CODE        LINE   SOURCELINE

1728 D7400000  R  4283           EXTP    #PAG _dstk,#01h
172C F42C0000 1R  4284           MOVB    RL1,[R12+#POF _dstk]
1730 F2FC0000  R  4285           MOV     R12,POF _usp
1734 F2FE0000  R  4286           MOV     R14,POF _usp
1738 08E1         4287           ADD     R14,#01h
173A F6FE0000  R  4288           MOV     POF _usp,R14
173E D7400000  R  4289           EXTP    #PAG _ustk,#01h
1742 E42C0000 1R  4290           MOVB    [R12+#POF _ustk],RL1
                  4291   ; main.c   1250    curpos--;
1746 E6000000  R  4292           MOV     DPP0,#PAG _curpos
174A CC00         4293           NOP
174C F2FC0000  R  4294           MOV     R12,POF _curpos
1750 28C1         4295           SUB     R12,#01h
1752 F6FC0000  R  4296           MOV     POF _curpos,R12
1756              4297   _431:
1756 E6000000  R  4298           MOV     DPP0,#PAG _curpos
175A CC00         4299           NOP
175C F2FC0000  R  4300           MOV     R12,POF _curpos
1760 3DD9         4301           JMPR    cc_NZ,_430
                  4302   ; main.c   1251   }
                  4303   ; main.c   1252   viewpos=0;
1762 F68E0000  R  4304           MOV     POF _viewpos,ZEROS
                  4305   ; main.c   1253   ustk[usp++]=0;
1766 E102         4306           MOVB    RL1,#00h
1768 F2FD0000  R  4307           MOV     R13,POF _usp
176C F2FE0000  R  4308           MOV     R14,POF _usp
1770 08E1         4309           ADD     R14,#01h
1772 F6FE0000  R  4310           MOV     POF _usp,R14
1776 D7400000  R  4311           EXTP    #PAG _ustk,#01h
177A E42D0000 1R  4312           MOVB    [R13+#POF _ustk],RL1
                  4313   ; main.c   1254   total_line++;
177E E6000000  R  4314           MOV     DPP0,#PAG _total_line
1782 E01C         4315           MOV     R12,#01h
1784 04FC0000  R  4316           ADD     POF _total_line,R12
1788 148E0000  R  4317           ADDC    POF (_total_line+2),ZEROS
                  4318   ; main.c   1255   curline++;
178C 04FC0000  R  4319           ADD     POF _curline,R12
1790 148E0000  R  4320           ADDC    POF (_curline+2),ZEROS
                  4321   ; main.c   1256  }
1794              4322   _433:
                  4323   ; main.c   1257  GeneralFunc(1);
1794 E01C         4324           MOV     R12,#01h
1796 FA000000  R  4325           JMPS    SEG _GeneralFunc,_GeneralFunc
                  4326   ; main.c   1258 }
                  4327           RETV
                  4328   _splitline      ENDP
                  4329   ; main.c   1259 
                  4330   ; main.c   1260 void joinlines(void)
                  4331   ; main.c   1261 {
                  4332           PUBLIC  _joinlines
                  4333   _joinlines      PROC    FAR
                  4334   ; Locals:
                  4335   ; 
                  4336   ; Statics:
                  4337   ; 
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  83
main

 LOC CODE        LINE   SOURCELINE

                  4338   ; CSEs:
                  4339   ;     p = R12
                  4340   ; 
                  4341   ; main.c   1262  unsigned int p=bl_ds(dsp);
179A E6000000  R  4342           MOV     DPP0,#PAG _dsp
179E CC00         4343           NOP
17A0 F2FC0000  R  4344           MOV     R12,POF _dsp
17A4 DA000000  R  4345           CALLS   SEG _bl_ds,_bl_ds
17A8 F0C4         4346           MOV     R12,R4
                  4347   ; main.c   1263  if (p!=STKSZ)
17AA 46FC0040     4348           CMP     R12,#04000h
17AE 2D17         4349           JMPR    cc_EQ,_439
                  4350   ; main.c   1264  {
                  4351   ; main.c   1265   p--;
17B0 0D06         4352           JMPR    cc_UC,_438
                  4353   ; main.c   1266   while(p!=dsp)
17B2              4354   _437:
                  4355   ; main.c   1267   {
                  4356   ; main.c   1268    dstk[p]=dstk[p-1];
17B2 D7500000  R  4357           EXTP    #PAG _dstk,#02h
17B6 F42C0000 2R  4358           MOVB    RL1,[R12+#POF _dstk-1]
17BA E42C0000 1R  4359           MOVB    [R12+#POF _dstk],RL1
                  4360   ; main.c   1269    p--;
17BE              4361   _438:
17BE E6000000  R  4362           MOV     DPP0,#PAG _dsp
17C2 28C1         4363           SUB     R12,#01h
17C4 42FC0000  R  4364           CMP     R12,POF _dsp
17C8 3DF4         4365           JMPR    cc_NE,_437
                  4366   ; main.c   1270   }
                  4367   ; main.c   1271   dsp++;
17CA F2FC0000  R  4368           MOV     R12,POF _dsp
17CE 08C1         4369           ADD     R12,#01h
17D0 F6FC0000  R  4370           MOV     POF _dsp,R12
                  4371   ; main.c   1272   total_line--;
17D4 E01D         4372           MOV     R13,#01h
17D6 24FD0000  R  4373           SUB     POF _total_line,R13
17DA 348E0000  R  4374           SUBC    POF (_total_line+2),ZEROS
                  4375   ; main.c   1273  }
17DE              4376   _439:
                  4377   ; main.c   1274  GeneralFunc(1);
17DE E01C         4378           MOV     R12,#01h
17E0 FA000000  R  4379           JMPS    SEG _GeneralFunc,_GeneralFunc
                  4380   ; main.c   1275 }
                  4381           RETV
                  4382   _joinlines      ENDP
                  4383   ; main.c   1276 
                  4384   ; main.c   1277 void instime(void)
                  4385   ; main.c   1278 {
                  4386           PUBLIC  _instime
                  4387   _instime        PROC    FAR
                  4388   ; Locals:
                  4389   ; 
                  4390   ; Statics:
                  4391   ; 
                  4392   ; CSEs:
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  84
main

 LOC CODE        LINE   SOURCELINE

                  4393   ; 
                  4394   ; main.c   1279  usp+=xsprintf(ustk+usp,"%02d:%02d",_hour,_minute)+1;
17E4 D7400000  R  4395           EXTP    #PAG __minute,#01h
17E8 F2FC0000 1R  4396           MOV     R12,POF __minute
17EC 88C0         4397           MOV     [-R0],R12
17EE D7400000  R  4398           EXTP    #PAG __hour,#01h
17F2 F2FD0000 1R  4399           MOV     R13,POF __hour
17F6 88D0         4400           MOV     [-R0],R13
17F8 E6FC0000  R  4401           MOV     R12,#POF _ustk
17FC E6000000  R  4402           MOV     DPP0,#PAG _usp
1800 E6FD0000  R  4403           MOV     R13,#PAG _ustk
1804 02FC0000  R  4404           ADD     R12,POF _usp
1808 E6FE0000  R  4405           MOV     R14,#POF _440
180C E6FF0000  R  4406           MOV     R15,#PAG _440
1810 DA000000  R  4407           CALLS   SEG _xsprintf,_xsprintf
1814 0804         4408           ADD     R0,#04h
1816 E6000000  R  4409           MOV     DPP0,#PAG _usp
181A 0841         4410           ADD     R4,#01h
181C F2FC0000  R  4411           MOV     R12,POF _usp
1820 00C4         4412           ADD     R12,R4
1822 F6FC0000  R  4413           MOV     POF _usp,R12
                  4414   ; main.c   1280  curline++;
1826 E01D         4415           MOV     R13,#01h
1828 04FD0000  R  4416           ADD     POF _curline,R13
182C 148E0000  R  4417           ADDC    POF (_curline+2),ZEROS
                  4418   ; main.c   1281  total_line++;
1830 04FD0000  R  4419           ADD     POF _total_line,R13
1834 148E0000  R  4420           ADDC    POF (_total_line+2),ZEROS
                  4421   ; main.c   1282  GeneralFunc(1);
1838 F0CD         4422           MOV     R12,R13
183A FA000000  R  4423           JMPS    SEG _GeneralFunc,_GeneralFunc
                  4424   ; main.c   1283 }
                  4425           RETV
                  4426   _instime        ENDP
                  4427   ; main.c   1284 
                  4428   ; main.c   1285 void insdate(void)
                  4429   ; main.c   1286 {
                  4430           PUBLIC  _insdate
                  4431   _insdate        PROC    FAR
                  4432   ; Locals:
                  4433   ; 
                  4434   ; Statics:
                  4435   ; 
                  4436   ; CSEs:
                  4437   ; 
                  4438   ; main.c   1287  usp+=xsprintf(ustk+usp,"%02d-%02d-%04d",_day,_month,_year)+1;
183E D7400000  R  4439           EXTP    #PAG __year,#01h
1842 F2FC0000 1R  4440           MOV     R12,POF __year
1846 88C0         4441           MOV     [-R0],R12
1848 D7400000  R  4442           EXTP    #PAG __month,#01h
184C F2FD0000 1R  4443           MOV     R13,POF __month
1850 88D0         4444           MOV     [-R0],R13
1852 D7400000  R  4445           EXTP    #PAG __day,#01h
1856 F2FE0000 1R  4446           MOV     R14,POF __day
185A 88E0         4447           MOV     [-R0],R14
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  85
main

 LOC CODE        LINE   SOURCELINE

185C E6FC0000  R  4448           MOV     R12,#POF _ustk
1860 E6000000  R  4449           MOV     DPP0,#PAG _usp
1864 E6FD0000  R  4450           MOV     R13,#PAG _ustk
1868 02FC0000  R  4451           ADD     R12,POF _usp
186C E6FE0000  R  4452           MOV     R14,#POF _441
1870 E6FF0000  R  4453           MOV     R15,#PAG _441
1874 DA000000  R  4454           CALLS   SEG _xsprintf,_xsprintf
1878 0806         4455           ADD     R0,#06h
187A E6000000  R  4456           MOV     DPP0,#PAG _usp
187E 0841         4457           ADD     R4,#01h
1880 F2FC0000  R  4458           MOV     R12,POF _usp
1884 00C4         4459           ADD     R12,R4
1886 F6FC0000  R  4460           MOV     POF _usp,R12
                  4461   ; main.c   1288  curline++;
188A E01D         4462           MOV     R13,#01h
188C 04FD0000  R  4463           ADD     POF _curline,R13
1890 148E0000  R  4464           ADDC    POF (_curline+2),ZEROS
                  4465   ; main.c   1289  total_line++;
1894 04FD0000  R  4466           ADD     POF _total_line,R13
1898 148E0000  R  4467           ADDC    POF (_total_line+2),ZEROS
                  4468   ; main.c   1290  GeneralFunc(1);
189C F0CD         4469           MOV     R12,R13
189E FA000000  R  4470           JMPS    SEG _GeneralFunc,_GeneralFunc
                  4471   ; main.c   1291 }
                  4472           RETV
                  4473   _insdate        ENDP
                  4474   ; main.c   1292 
                  4475   ; main.c   1293 void paste(void)
                  4476   ; main.c   1294 {
                  4477           PUBLIC  _paste
                  4478   _paste  PROC    FAR
                  4479   ; Locals:
                  4480   ; 
                  4481   ; Statics:
                  4482   ; 
                  4483   ; CSEs:
                  4484   ; 
                  4485   ; main.c   1295  clip_pasted=1;
18A2 E6000000  R  4486           MOV     DPP0,#PAG _clip_pasted
18A6 E01C         4487           MOV     R12,#01h
18A8 F6FC0000  R  4488           MOV     POF _clip_pasted,R12
                  4489   ; main.c   1296  GeneralFunc(1);
18AC FA000000  R  4490           JMPS    SEG _GeneralFunc,_GeneralFunc
                  4491   ; main.c   1297 }
                  4492           RETV
                  4493   _paste  ENDP
                  4494   ; main.c   1298 
                  4495   ; main.c   1299 //void cliperase(void)
                  4496   ; main.c   1300 //{
                  4497   ; main.c   1301 // FileErase((STR)clipfile);
                  4498   ; main.c   1302 //}
                  4499   ; main.c   1303 
                  4500   ; main.c   1304 void clearclipb(void)
                  4501   ; main.c   1305 {
                  4502           PUBLIC  _clearclipb
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  86
main

 LOC CODE        LINE   SOURCELINE

                  4503   _clearclipb     PROC    FAR
                  4504   ; Locals:
                  4505   ; 
                  4506   ; Statics:
                  4507   ; 
                  4508   ; CSEs:
                  4509   ; 
                  4510   ; main.c   1306 // FilesysICall(cliperase);
                  4511   ; main.c   1307  clip_pasted=1;
18B0 E6000000  R  4512           MOV     DPP0,#PAG _clip_pasted
18B4 E01C         4513           MOV     R12,#01h
18B6 F6FC0000  R  4514           MOV     POF _clip_pasted,R12
                  4515   ; main.c   1308  GeneralFunc(1);
18BA FA000000  R  4516           JMPS    SEG _GeneralFunc,_GeneralFunc
                  4517   ; main.c   1309 }
                  4518           RETV
                  4519   _clearclipb     ENDP
                  4520   ; main.c   1310 
                  4521   ; main.c   1311 static const STR emenu_ExtendedSTR[]=
                  4522   MAIN_2_PR       ENDS
                  4523   
                  4524   MAIN_3_FC       SECTION DATA
05DE              4525   _emenu_ExtendedSTR      LABEL   WORD
05DE 00000000  R  4526           DPPTR   _442,_443,_444,_445,_446
05E2 00000000  R 
05E6 00000000  R 
05EA 00000000  R 
05EE 00000000    
05F2 00000000  R  4527           DPPTR   _447,_448,_449
05F6 00000000  R 
05FA 00000000    
                  4528   ; main.c   1312 {
                  4529   ; main.c   1313  "Insert line",
                  4530   ; main.c   1314  "Delete line",
                  4531   ; main.c   1315  "Split line",
                  4532   ; main.c   1316  "Join lines",
                  4533   ; main.c   1317  "Insert time",
                  4534   ; main.c   1318  "Insert date",
                  4535   ; main.c   1319  "Paste",
                  4536   ; main.c   1320  "Clear clipb"
                  4537   ; main.c   1321 };
                  4538   ; main.c   1322 
                  4539   ; main.c   1323 static const struct ITEMSDATA far emenu_ITEMS[]=
05FE              4540   _emenu_ITEMS    LABEL   WORD
05FE 00000000     4541           DW      00h,00h
0602 270E270E     4542           DW      0E27h,0E27h,00h
0606 0000        
0608 063CEB02     4543           DW      03C06h,02EBh
060C 0300D000     4544           DW      03h,0D0h
0610 00000000     4545           DW      00h,00h
0614 280E280E     4546           DW      0E28h,0E28h,00h
0618 0000        
061A 063CEB02     4547           DW      03C06h,02EBh
061E 0300D000     4548           DW      03h,0D0h
0622 00000000     4549           DW      00h,00h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  87
main

 LOC CODE        LINE   SOURCELINE

0626 290E290E     4550           DW      0E29h,0E29h,00h
062A 0000        
062C 063CEB02     4551           DW      03C06h,02EBh
0630 0300D000     4552           DW      03h,0D0h
0634 00000000     4553           DW      00h,00h
0638 2A0E2A0E     4554           DW      0E2Ah,0E2Ah,00h
063C 0000        
063E 063CEB02     4555           DW      03C06h,02EBh
0642 0300D000     4556           DW      03h,0D0h
0646 00000000     4557           DW      00h,00h
064A 2B0E2B0E     4558           DW      0E2Bh,0E2Bh,00h
064E 0000        
0650 063CEB02     4559           DW      03C06h,02EBh
0654 0300D000     4560           DW      03h,0D0h
0658 00000000     4561           DW      00h,00h
065C 2C0E2C0E     4562           DW      0E2Ch,0E2Ch,00h
0660 0000        
0662 063CEB02     4563           DW      03C06h,02EBh
0666 0300D000     4564           DW      03h,0D0h
066A 00000000     4565           DW      00h,00h
066E 2D0E2D0E     4566           DW      0E2Dh,0E2Dh,00h
0672 0000        
0674 063CEB02     4567           DW      03C06h,02EBh
0678 0300D000     4568           DW      03h,0D0h
067C 00000000     4569           DW      00h,00h
0680 2E0E2E0E     4570           DW      0E2Eh,0E2Eh,00h
0684 0000        
0686 063CEB02     4571           DW      03C06h,02EBh
068A 0300D000     4572           DW      03h,0D0h
                  4573   ; main.c   1324 {
                  4574   ; main.c   1325  NULL,0xE27,0xE27,0,(void far *)0xBAFC06,3,0xD0,
                  4575   ; main.c   1326  NULL,0xE28,0xE28,0,(void far *)0xBAFC06,3,0xD0,
                  4576   ; main.c   1327  NULL,0xE29,0xE29,0,(void far *)0xBAFC06,3,0xD0,
                  4577   ; main.c   1328  NULL,0xE2A,0xE2A,0,(void far *)0xBAFC06,3,0xD0,
                  4578   ; main.c   1329  NULL,0xE2B,0xE2B,0,(void far *)0xBAFC06,3,0xD0,
                  4579   ; main.c   1330  NULL,0xE2C,0xE2C,0,(void far *)0xBAFC06,3,0xD0,
                  4580   ; main.c   1331  NULL,0xE2D,0xE2D,0,(void far *)0xBAFC06,3,0xD0,
                  4581   ; main.c   1332  NULL,0xE2E,0xE2E,0,(void far *)0xBAFC06,3,0xD0
                  4582   ; main.c   1333 };
                  4583   ; main.c   1334 
                  4584   ; main.c   1335 static const struct ITEMSHNDL far emenu_HNDLS[]=
068E              4585   _emenu_HNDLS    LABEL   WORD
068E 00000000  R  4586           DSPTR   _insline,_delline,_splitline,_joinlines,_instime
0692 00000000  R 
0696 00000000  R 
069A 00000000  R 
069E 00000000    
06A2 00000000  R  4587           DSPTR   _insdate,_paste,_clearclipb
06A6 00000000  R 
06AA 00000000    
                  4588   ; main.c   1336 {
                  4589   ; main.c   1337  insline,
                  4590   ; main.c   1338  delline,
                  4591   ; main.c   1339  splitline,
                  4592   ; main.c   1340  joinlines,
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  88
main

 LOC CODE        LINE   SOURCELINE

                  4593   ; main.c   1341  instime,
                  4594   ; main.c   1342  insdate,
                  4595   ; main.c   1343  paste,
                  4596   ; main.c   1344  clearclipb
                  4597   ; main.c   1345 };
                  4598   ; main.c   1346 
                  4599   ; main.c   1347 static const struct MENUHEADER far emenu_HDR=
06AE              4600   _emenu_HDR      LABEL   WORD
06AE 05000900     4601           DW      05h,09h,05Fh,015h
06B2 5F001500    
06B6 00000000     4602           DW      00h,00h
06BA F502FF7F     4603           DW      02F5h,07FFFh
                  4604   ; main.c   1348 {
                  4605   ; main.c   1349  5,9,95,21,NULL,0x2F5,0x7FFF 
                  4606   ; main.c   1350 };
                  4607   ; main.c   1351 
                  4608   ; main.c   1352 static const struct MENUSTRUCT far emenu_STRUCT=
06BE              4609   _emenu_STRUCT   LABEL   WORD
06BE 00000000     4610           DW      00h,00h,00h,00h,00h,00h,00h,00h
06C2 00000000    
06C6 00000000    
06CA 00000000    
06CE 023CEB02     4611           DW      03C02h,02EBh,03BFCh,02EBh
06D2 FC3BEB02    
06D6 48000000     4612           DW      048h,00h
06DA 00000000     4613           DW      00h,00h
06DE 00000000  R  4614           DPPTR   _emenu_ITEMS,_emenu_HNDLS
06E2 00000000    
06E6 0800         4615           DW      08h
                  4616   ; main.c   1353 {
                  4617   ; main.c   1354  NULL,NULL,NULL,NULL,
                  4618   ; main.c   1355  (char far*)0xBAFC02,(char far*)0xBAFBFC,
                  4619   ; main.c   1356  0x48,0x00,
                  4620   ; main.c   1357  NULL,
                  4621   ; main.c   1358  (struct ITEMSDATA far*)&emenu_ITEMS,
                  4622   ; main.c   1359  (struct ITEMSHNDL far*)&emenu_HNDLS,
                  4623   ; main.c   1360  8
                  4624   ; main.c   1361 };
                  4625   ; main.c   1362 
                  4626   ; main.c   1363 int e_OnKey2(void far *data, int far *msg)
                  4627   ; main.c   1364 {
                  4628           PUBLIC  _e_OnKey2
                  4629   MAIN_3_FC       ENDS
                  4630   
                  4631   MAIN_2_PR       SECTION CODE
                  4632   _e_OnKey2       PROC    FAR
18BE 8880         4633           MOV     [-R0],R8
                  4634   ; Locals:
                  4635   ; 
                  4636   ; Statics:
                  4637   ; 
                  4638   ; CSEs:
                  4639   ;     p = R8
                  4640   ;     msg = R14R15
                  4641   ; 
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  89
main

 LOC CODE        LINE   SOURCELINE

                  4642   ; main.c   1365  int p=msg[1];
18C0 DC4F         4643           EXTP    R15,#01h
18C2 D48E0200 1   4644           MOV     R8,[R14+#02H]
                  4645   ; main.c   1366  if (p==0x2F)
18C6 46F82F00     4646           CMP     R8,#02Fh
18CA 3D29         4647           JMPR    cc_NE,_450
                  4648   ; main.c   1367  {
                  4649   ; main.c   1368   //Создаем меню редактора
                  4650   ; main.c   1369   setExtSIDTable(emenu_ExtendedSTR);
18CC E6FC0000  R  4651           MOV     R12,#POF _emenu_ExtendedSTR
18D0 E6FD0000  R  4652           MOV     R13,#PAG _emenu_ExtendedSTR
18D4 DA000000  R  4653           CALLS   SEG _setExtSIDTable,_setExtSIDTable
                  4654   ; main.c   1370   CreateMenu02(menu_options,0,0,
                  4655   ; main.c   1371                (struct MENUSTRUCT far*)&emenu_STRUCT,
                  4656   ; main.c   1372                (struct MENUHEADER far*)&emenu_HDR,
                  4657   ; main.c   1373                0,0,0,0);
18D8 E00C         4658           MOV     R12,#00h
18DA E00D         4659           MOV     R13,#00h
18DC 88D0         4660           MOV     [-R0],R13
18DE 88C0         4661           MOV     [-R0],R12
18E0 E00E         4662           MOV     R14,#00h
18E2 E00F         4663           MOV     R15,#00h
18E4 88F0         4664           MOV     [-R0],R15
18E6 88E0         4665           MOV     [-R0],R14
18E8 E001         4666           MOV     R1,#00h
18EA E002         4667           MOV     R2,#00h
18EC 8820         4668           MOV     [-R0],R2
18EE 8810         4669           MOV     [-R0],R1
18F0 E003         4670           MOV     R3,#00h
18F2 E004         4671           MOV     R4,#00h
18F4 8840         4672           MOV     [-R0],R4
18F6 8830         4673           MOV     [-R0],R3
18F8 E6F50000  R  4674           MOV     R5,#POF _emenu_HDR
18FC E6FA0000  R  4675           MOV     R10,#PAG _emenu_HDR
1900 88A0         4676           MOV     [-R0],R10
1902 8850         4677           MOV     [-R0],R5
1904 E6FB0000  R  4678           MOV     R11,#POF _emenu_STRUCT
1908 E6FC0000  R  4679           MOV     R12,#PAG _emenu_STRUCT
190C 88C0         4680           MOV     [-R0],R12
190E 88B0         4681           MOV     [-R0],R11
1910 E01C         4682           MOV     R12,#01h
1912 E00D         4683           MOV     R13,#00h
1914 E00E         4684           MOV     R14,#00h
1916 DA000000  R  4685           CALLS   SEG _CreateMenu02,_CreateMenu02
191A 06F01800     4686           ADD     R0,#018h
                  4687   ; main.c   1374  }
191E              4688   _450:
                  4689   ; main.c   1375  if ((p==0x21)||(p==0x20)||(p==0x25)||(p==0x24)||(p==0x0E)||(p==0x0D)||(p==0x2F))
191E 46F82100     4690           CMP     R8,#021h
1922 2D12         4691           JMPR    cc_EQ,_456
1924 46F82000     4692           CMP     R8,#020h
1928 2D0F         4693           JMPR    cc_EQ,_456
192A 46F82500     4694           CMP     R8,#025h
192E 2D0C         4695           JMPR    cc_EQ,_456
1930 46F82400     4696           CMP     R8,#024h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  90
main

 LOC CODE        LINE   SOURCELINE

1934 2D09         4697           JMPR    cc_EQ,_456
1936 46F80E00     4698           CMP     R8,#0Eh
193A 2D06         4699           JMPR    cc_EQ,_456
193C 46F80D00     4700           CMP     R8,#0Dh
1940 2D03         4701           JMPR    cc_EQ,_456
1942 46F82F00     4702           CMP     R8,#02Fh
1946 3D06         4703           JMPR    cc_NE,_457
1948              4704   _456:
                  4705   ; main.c   1376  {
                  4706   ; main.c   1377   editmode=p;
1948 E6000000  R  4707           MOV     DPP0,#PAG _editmode
194C E014         4708           MOV     R4,#01h
194E F6F80000  R  4709           MOV     POF _editmode,R8
                  4710   ; main.c   1378   return(1);
1952 0D01         4711           JMPR    cc_UC,_458
                  4712   ; main.c   1379  }
1954              4713   _457:
                  4714   ; main.c   1380  data=data;
                  4715   ; main.c   1381  return(0);
1954 E004         4716           MOV     R4,#00h
                  4717   ; main.c   1382 }
1956              4718   _458:
1956 9880         4719           MOV     R8,[R0+]
1958 DB00         4720           RETS
                  4721   _e_OnKey2       ENDP
                  4722   ; main.c   1383 
                  4723   ; main.c   1384 void e_redraw(void far *data)
                  4724   ; main.c   1385 {
                  4725           PUBLIC  _e_redraw
                  4726   _e_redraw       PROC    FAR
195A 8890         4727           MOV     [-R0],R9
195C 8880         4728           MOV     [-R0],R8
195E 8870         4729           MOV     [-R0],R7
1960 8860         4730           MOV     [-R0],R6
1962 F06D         4731           MOV     R6,R13
                  4732   ; Locals:
                  4733   ; 
                  4734   ; Statics:
                  4735   ; 
                  4736   ; CSEs:
                  4737   ;     p = R8
                  4738   ;     sz = R9
                  4739   ;     ecp = R8
                  4740   ;     es = R6R7
                  4741   ;     data = R9R6
                  4742   ;     wc = R12
                  4743   ; 
                  4744   ; main.c   1386  WS_HDR far *es;
                  4745   ; main.c   1387  unsigned int sz;
                  4746   ; main.c   1388  unsigned int p;
                  4747   ; main.c   1389  int ecp;
                  4748   ; main.c   1390 
                  4749   ; main.c   1391  if (editmode==1)
1964 E6000000  R  4750           MOV     DPP0,#PAG _editmode
1968 F09C         4751           MOV     R9,R12
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  91
main

 LOC CODE        LINE   SOURCELINE

196A F2FC0000  R  4752           MOV     R12,POF _editmode
196E 48C1         4753           CMP     R12,#01h
1970 3D0B         4754           JMPR    cc_NE,_459
                  4755   ; main.c   1392  {
                  4756   ; main.c   1393   ((int far *)data)[20]=curpos+1;
1972 F2FD0000  R  4757           MOV     R13,POF _curpos
1976 08D1         4758           ADD     R13,#01h
1978 DC46         4759           EXTP    R6,#01h
197A C4D92800 1   4760           MOV     [R9+#028H],R13
                  4761   ; main.c   1394   editmode=2;
197E E6000000  R  4762           MOV     DPP0,#PAG _editmode
1982 E028         4763           MOV     R8,#02h
1984 F6F80000  R  4764           MOV     POF _editmode,R8
                  4765   ; main.c   1395  }
1988              4766   _459:
                  4767   ; main.c   1396  ecp=((int far *)data)[20];
1988 DC46         4768           EXTP    R6,#01h
198A D4892800 1   4769           MOV     R8,[R9+#028H]
                  4770   ; main.c   1397  ecp--;
198E 2881         4771           SUB     R8,#01h
                  4772   ; main.c   1398  while(ecp>curpos) doCurRight();
1990 0D02         4773           JMPR    cc_UC,_461
1992              4774   _460:
1992 DA009015  R  4775           CALLS   SEG _doCurRight,_doCurRight
1996              4776   _461:
1996 E6000000  R  4777           MOV     DPP0,#PAG _curpos
199A CC00         4778           NOP
199C 42F80000  R  4779           CMP     R8,POF _curpos
19A0 EDF8         4780           JMPR    cc_UGT,_460
                  4781   ; main.c   1399  while(ecp<curpos) doCurLeft();
19A2 0D02         4782           JMPR    cc_UC,_463
19A4              4783   _462:
19A4 DA00EE15  R  4784           CALLS   SEG _doCurLeft,_doCurLeft
19A8              4785   _463:
19A8 E6000000  R  4786           MOV     DPP0,#PAG _curpos
19AC CC00         4787           NOP
19AE 42F80000  R  4788           CMP     R8,POF _curpos
19B2 8DF8         4789           JMPR    cc_ULT,_462
                  4790   ; main.c   1400 
                  4791   ; main.c   1401  es=((void far * far *)data)[8];
19B4 F086         4792           MOV     R8,R6
19B6 DC58         4793           EXTP    R8,#02h
19B8 D4692000 2   4794           MOV     R6,[R9+#020H]
19BC D4792200 1   4795           MOV     R7,[R9+#022H]
                  4796   ; main.c   1402  sz=WSTR_Len(es)-11;
19C0 F0C6         4797           MOV     R12,R6
19C2 F0D7         4798           MOV     R13,R7
19C4 DA000000  R  4799           CALLS   SEG _WSTR_Len,_WSTR_Len
19C8 F094         4800           MOV     R9,R4
19CA 26F90B00     4801           SUB     R9,#0Bh
                  4802   ; main.c   1403  p=0;
19CE E008         4803           MOV     R8,#00h
                  4804   ; main.c   1404  while((p<255)&&(p<sz))
19D0 0D0F         4805           JMPR    cc_UC,_465
19D2              4806   _464:
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  92
main

 LOC CODE        LINE   SOURCELINE

                  4807   ; main.c   1405  {
                  4808   ; main.c   1406   int wc=WString_GetChar(es,p+12);
19D2 F0C6         4809           MOV     R12,R6
19D4 F0D7         4810           MOV     R13,R7
19D6 F0E8         4811           MOV     R14,R8
19D8 06FE0C00     4812           ADD     R14,#0Ch
19DC DA000000  R  4813           CALLS   SEG _WString_GetChar,_WString_GetChar
19E0 F0C4         4814           MOV     R12,R4
                  4815   ; main.c   1407   editline[p]=char16to8(wc);
19E2 DA00CE00  R  4816           CALLS   SEG _char16to8,_char16to8
19E6 D7400000  R  4817           EXTP    #PAG _editline,#01h
19EA E4880000 1R  4818           MOVB    [R8+#POF _editline],RL4
                  4819   ; main.c   1408   p++;
19EE 0881         4820           ADD     R8,#01h
19F0              4821   _465:
19F0 46F8FF00     4822           CMP     R8,#0FFh
19F4 9D02         4823           JMPR    cc_UGE,_466
19F6 4089         4824           CMP     R8,R9
19F8 8DEC         4825           JMPR    cc_ULT,_464
19FA              4826   _466:
                  4827   ; main.c   1409  }
                  4828   ; main.c   1410  editline[p]=0;
19FA E10C         4829           MOVB    RL6,#00h
19FC D7400000  R  4830           EXTP    #PAG _editline,#01h
1A00 E4C80000 1R  4831           MOVB    [R8+#POF _editline],RL6
                  4832   ; main.c   1411  if ((sz=dsp)==STKSZ) total_line++;
1A04 E6000000  R  4833           MOV     DPP0,#PAG _dsp
1A08 CC00         4834           NOP
1A0A F2F90000  R  4835           MOV     R9,POF _dsp
1A0E 46F90040     4836           CMP     R9,#04000h
1A12 3D05         4837           JMPR    cc_NE,_467
1A14 E017         4838           MOV     R7,#01h
1A16 04F70000  R  4839           ADD     POF _total_line,R7
1A1A 148E0000  R  4840           ADDC    POF (_total_line+2),ZEROS
1A1E              4841   _467:
                  4842   ; main.c   1412  sz=bl_ds(sz); //Ищем начало сл. строки
1A1E F0C9         4843           MOV     R12,R9
1A20 DA000000  R  4844           CALLS   SEG _bl_ds,_bl_ds
1A24 F094         4845           MOV     R9,R4
                  4846   ; main.c   1413  sz-=p+1; //Вновь добавляемая строка
1A26 0881         4847           ADD     R8,#01h
1A28 2098         4848           SUB     R9,R8
                  4849   ; main.c   1414  strcpy(dstk+(dsp=sz),editline); //Добавляем
1A2A E6FC0000  R  4850           MOV     R12,#POF _dstk
1A2E E6000000  R  4851           MOV     DPP0,#PAG _dsp
1A32 E6FD0000  R  4852           MOV     R13,#PAG _dstk
1A36 F6F90000  R  4853           MOV     POF _dsp,R9
1A3A 00C9         4854           ADD     R12,R9
1A3C E6FE0000  R  4855           MOV     R14,#POF _editline
1A40 E6FF0000  R  4856           MOV     R15,#PAG _editline
1A44 DA000000  R  4857           CALLS   SEG _strcpy,_strcpy
                  4858   ; main.c   1415  draw_mode=1;
1A48 E6000000  R  4859           MOV     DPP0,#PAG _draw_mode
1A4C E11C         4860           MOVB    RL6,#01h
1A4E F7FC0000  R  4861           MOVB    POF _draw_mode,RL6
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  93
main

 LOC CODE        LINE   SOURCELINE

                  4862   ; main.c   1416  DrawScreen();
1A52 DA009A0F  R  4863           CALLS   SEG _DrawScreen,_DrawScreen
                  4864   ; main.c   1417 }
1A56 9860         4865           MOV     R6,[R0+]
1A58 9870         4866           MOV     R7,[R0+]
1A5A 9880         4867           MOV     R8,[R0+]
1A5C 9890         4868           MOV     R9,[R0+]
1A5E DB00         4869           RETS
                  4870   _e_redraw       ENDP
                  4871   ; main.c   1418 
                  4872   ; main.c   1419 void e_OnKey(void far* data, int param)
                  4873   ; main.c   1420 {
                  4874           PUBLIC  _e_OnKey
                  4875   _e_OnKey        PROC    FAR
1A60 8890         4876           MOV     [-R0],R9
1A62 8880         4877           MOV     [-R0],R8
1A64 8870         4878           MOV     [-R0],R7
1A66 8860         4879           MOV     [-R0],R6
1A68 88E0         4880           MOV     [-R0],R14
1A6A F06C         4881           MOV     R6,R12
1A6C F07D         4882           MOV     R7,R13
                  4883   ; Locals:
                  4884   ; 
                  4885   ; Statics:
                  4886   ; 
                  4887   ; CSEs:
                  4888   ;     mp = R8R9
                  4889   ;     data = R6R7
                  4890   ;     param = offset 0
                  4891   ; 
                  4892   ; main.c   1421  void far * far *mp;
                  4893   ; main.c   1422  mp=Find_Pointer0A_ItemInMenuITEMSQ_by_ID(data,4);
1A6E E04E         4894           MOV     R14,#04h
1A70 DA000000  R  4895           CALLS   SEG _Find_Pointer0A_ItemInMenuITEMSQ_by_ID,_Find_Pointer0A_ItemInMenuITEMSQ_by_ID
1A74 F084         4896           MOV     R8,R4
1A76 F095         4897           MOV     R9,R5
                  4898   ; main.c   1423  memcpy(estr_methods,(void far *)(0xE06944),sizeof(estr_methods));
1A78 E6FC2400     4899           MOV     R12,#024h
1A7C 88C0         4900           MOV     [-R0],R12
1A7E E6FC0000  R  4901           MOV     R12,#POF _estr_methods
1A82 E6FD0000  R  4902           MOV     R13,#PAG _estr_methods
1A86 E6FE4429     4903           MOV     R14,#02944h
1A8A E6FF8103     4904           MOV     R15,#0381h
1A8E DA000000  R  4905           CALLS   SEG _memcpy,_memcpy
1A92 0802         4906           ADD     R0,#02h
                  4907   ; main.c   1424  estr_methods[0]=e_redraw;
1A94 E6FC0000  R  4908           MOV     R12,#SOF _e_redraw
1A98 E6000000  R  4909           MOV     DPP0,#PAG _estr_methods
1A9C E6FD0000  R  4910           MOV     R13,#SEG _e_redraw
1AA0 F6FC0000  R  4911           MOV     POF _estr_methods,R12
1AA4 F6FD0000  R  4912           MOV     POF (_estr_methods+2),R13
                  4913   ; main.c   1425  mp[1]=estr_methods;
1AA8 E6FE0000  R  4914           MOV     R14,#POF _estr_methods
1AAC E6FF0000  R  4915           MOV     R15,#PAG _estr_methods
1AB0 DC59         4916           EXTP    R9,#02h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  94
main

 LOC CODE        LINE   SOURCELINE

1AB2 C4E80400 2   4917           MOV     [R8+#04H],R14
1AB6 C4F80600 1   4918           MOV     [R8+#06H],R15
                  4919   ; main.c   1426  if (param==7)
1ABA A880         4920           MOV     R8,[R0]
1ABC 4887         4921           CMP     R8,#07h
1ABE 3D06         4922           JMPR    cc_NE,_468
                  4923   ; main.c   1427  {
                  4924   ; main.c   1428   SetSoftKeyID(data,0,1);
1AC0 F0C6         4925           MOV     R12,R6
1AC2 F0D7         4926           MOV     R13,R7
1AC4 E00E         4927           MOV     R14,#00h
1AC6 E01F         4928           MOV     R15,#01h
1AC8 DA000000  R  4929           CALLS   SEG _SetSoftKeyID,_SetSoftKeyID
                  4930   ; main.c   1429  }
1ACC              4931   _468:
                  4932   ; main.c   1430 } 
1ACC 0802         4933           ADD     R0,#02h
1ACE 9860         4934           MOV     R6,[R0+]
1AD0 9870         4935           MOV     R7,[R0+]
1AD2 9880         4936           MOV     R8,[R0+]
1AD4 9890         4937           MOV     R9,[R0+]
1AD6 DB00         4938           RETS
                  4939   _e_OnKey        ENDP
                  4940   ; main.c   1431 
                  4941   ; main.c   1432 void e_OnKey3(void){}
                  4942           PUBLIC  _e_OnKey3
                  4943   _e_OnKey3       PROC    FAR
                  4944   ; Locals:
                  4945   ; 
                  4946   ; Statics:
                  4947   ; 
                  4948   ; CSEs:
                  4949   ; 
1AD8 DB00         4950           RETS
                  4951   _e_OnKey3       ENDP
                  4952   ; main.c   1433 
                  4953   ; main.c   1434 static const DIALOG_HEADER e_header = { 0, 0, 101, 12, (char far*)0xBAFB8A, 0x2A3, 0x7FFF }
                         ;
                  4954   MAIN_2_PR       ENDS
                  4955   
                  4956   MAIN_3_FC       SECTION DATA
06E8              4957   _e_header       LABEL   WORD
06E8 00000000     4958           DW      00h,00h,065h,0Ch
06EC 65000C00    
06F0 8A3BEB02     4959           DW      03B8Ah,02EBh
06F4 A302FF7F     4960           DW      02A3h,07FFFh
                  4961   ; main.c   1435 static const INPUTDIA_HDNL e_hndl = { 
06F8              4962   _e_hndl LABEL   WORD
06F8 01000000     4963           DW      01h,00h
06FC 00000000  R  4964           DSPTR   _e_OnKey2,_e_OnKey,_e_OnKey3
0700 00000000  R 
0704 00000000    
0708 00000000     4965           DW      00h,00h,0F84h,02E3h
070C 840FE302    
0710 00001000     4966           DW      00h,010h,065h,020h,00h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  95
main

 LOC CODE        LINE   SOURCELINE

0714 65002000    
0718 0000        
071A 02000000     4967           DW      02h,00h,00h,00h,00h
071E 00000000    
0722 0000        
0724 00000000     4968           DW      00h,00h
                  4969   ; main.c   1436  1, 0,
                  4970   ; main.c   1437  e_OnKey2, //InputDiaOn2, //OnKeyUp????
                  4971   ; main.c   1438  e_OnKey,
                  4972   ; main.c   1439  e_OnKey3,
                  4973   ; main.c   1440  NULL,
                  4974   ; main.c   1441  (char far*)0xB8CF84,           //0xBAFBFC,
                  4975   ; main.c   1442  0, 16, 101, 32,
                  4976   ; main.c   1443  0, //Шрифт
                  4977   ; main.c   1444  2, //Количество строк
                  4978   ; main.c   1445  0, 0, 0, 0, 0, 0
                  4979   ; main.c   1446 };
                  4980   ; main.c   1447 
                  4981   ; main.c   1448 void CreateEditDialog(void)
                  4982   ; main.c   1449 {
                  4983           PUBLIC  _CreateEditDialog
                  4984   MAIN_3_FC       ENDS
                  4985   
                  4986   MAIN_2_PR       SECTION CODE
                  4987   _CreateEditDialog       PROC    FAR
1ADA 8890         4988           MOV     [-R0],R9
1ADC 8880         4989           MOV     [-R0],R8
1ADE 8860         4990           MOV     [-R0],R6
1AE0 26F01600     4991           SUB     R0,#016h
                  4992   ; Locals:
                  4993   ;     data = offset 0
                  4994   ; 
                  4995   ; Statics:
                  4996   ; 
                  4997   ; CSEs:
                  4998   ;     ws_hdr2 = R8R9
                  4999   ;     p = R6
                  5000   ;     c = RL1
                  5001   ; 
                  5002   ; main.c   1450  INPUT_DATA data;
                  5003   ; main.c   1451  WS_HDR far* ws_hdr2;
                  5004   ; main.c   1452  unsigned int p;
                  5005   ; main.c   1453  char c;
                  5006   ; main.c   1454 
                  5007   ; main.c   1455  ws_hdr2=AllocWSTR(256+11,MMIMalloc);
1AE4 E6FC0B01     5008           MOV     R12,#010Bh
1AE8 E6FD0000  R  5009           MOV     R13,#SOF _MMIMalloc
1AEC E6FE0000  R  5010           MOV     R14,#SEG _MMIMalloc
1AF0 DA000000  R  5011           CALLS   SEG _AllocWSTR,_AllocWSTR
1AF4 F084         5012           MOV     R8,R4
1AF6 F095         5013           MOV     R9,R5
                  5014   ; main.c   1456  CutWSTR(ws_hdr2,0);
1AF8 F0C8         5015           MOV     R12,R8
1AFA F0D9         5016           MOV     R13,R9
1AFC E00E         5017           MOV     R14,#00h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  96
main

 LOC CODE        LINE   SOURCELINE

1AFE DA000000  R  5018           CALLS   SEG _CutWSTR,_CutWSTR
                  5019   ; main.c   1457  ClearInputData(&data);
1B02 F0C0         5020           MOV     R12,R0
1B04 66FCFF3F     5021           AND     R12,#03FFFh
1B08 F2FD02FE     5022           MOV     R13,DPP1
1B0C DA000000  R  5023           CALLS   SEG _ClearInputData,_ClearInputData
                  5024   ; main.c   1458  SetInputData(&data,NULL,256);
1B10 E6F60001     5025           MOV     R6,#0100h
1B14 8860         5026           MOV     [-R0],R6
1B16 E02C         5027           MOV     R12,#02h
1B18 00C0         5028           ADD     R12,R0
1B1A 66FCFF3F     5029           AND     R12,#03FFFh
1B1E F2FD02FE     5030           MOV     R13,DPP1
1B22 E00E         5031           MOV     R14,#00h
1B24 E00F         5032           MOV     R15,#00h
1B26 DA000000  R  5033           CALLS   SEG _SetInputData,_SetInputData
1B2A 0802         5034           ADD     R0,#02h
                  5035   ; main.c   1459  SetInputType(&data,3);
1B2C F0C0         5036           MOV     R12,R0
1B2E 66FCFF3F     5037           AND     R12,#03FFFh
1B32 F2FD02FE     5038           MOV     R13,DPP1
1B36 E03E         5039           MOV     R14,#03h
1B38 DA000000  R  5040           CALLS   SEG _SetInputType,_SetInputType
                  5041   ; main.c   1460  AddInputToWSTR(ws_hdr2,&data);
1B3C F0C8         5042           MOV     R12,R8
1B3E F0D9         5043           MOV     R13,R9
1B40 F0E0         5044           MOV     R14,R0
1B42 66FEFF3F     5045           AND     R14,#03FFFh
1B46 F2FF02FE     5046           MOV     R15,DPP1
1B4A DA000000  R  5047           CALLS   SEG _AddInputToWSTR,_AddInputToWSTR
                  5048   ; main.c   1461  if ((p=dsp)!=STKSZ)
1B4E E6000000  R  5049           MOV     DPP0,#PAG _dsp
1B52 CC00         5050           NOP
1B54 F2F60000  R  5051           MOV     R6,POF _dsp
1B58 46F60040     5052           CMP     R6,#04000h
1B5C 2D10         5053           JMPR    cc_EQ,_471
                  5054   ; main.c   1462  {
                  5055   ; main.c   1463   while((c=dstk[p]))
1B5E 0D0A         5056           JMPR    cc_UC,_470
1B60              5057   _469:
                  5058   ; main.c   1464   {
                  5059   ; main.c   1465    AddCharToWSTR(ws_hdr2,char8to16(c));
1B60 F011         5060           MOV     R1,R1
1B62 C02C         5061           MOVBZ   R12,RL1
1B64 DA007C00  R  5062           CALLS   SEG _char8to16,_char8to16
1B68 F0E4         5063           MOV     R14,R4
1B6A F0C8         5064           MOV     R12,R8
1B6C F0D9         5065           MOV     R13,R9
1B6E DA000000  R  5066           CALLS   SEG _AddCharToWSTR,_AddCharToWSTR
                  5067   ; main.c   1466    p++;
1B72 0861         5068           ADD     R6,#01h
1B74              5069   _470:
1B74 D7400000  R  5070           EXTP    #PAG _dstk,#01h
1B78 F4260000 1R  5071           MOVB    RL1,[R6+#POF _dstk]
1B7C 3DF1         5072           JMPR    cc_NZ,_469
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  97
main

 LOC CODE        LINE   SOURCELINE

                  5073   ; main.c   1467   }
                  5074   ; main.c   1468  }
1B7E              5075   _471:
                  5076   ; main.c   1469  if ((curline-viewline)>2)
1B7E E6000000  R  5077           MOV     DPP0,#PAG _curline
1B82 CC00         5078           NOP
1B84 F2F60000  R  5079           MOV     R6,POF _curline
1B88 F2FC0000  R  5080           MOV     R12,POF (_curline+2)
1B8C 22F60000  R  5081           SUB     R6,POF _viewline
1B90 32FC0000  R  5082           SUBC    R12,POF (_viewline+2)
1B94 2862         5083           SUB     R6,#02h
1B96 38C0         5084           SUBC    R12,#00h
1B98 FD0B         5085           JMPR    cc_ULE,_472
                  5086   ; main.c   1470  {
                  5087   ; main.c   1471   *(int far *)(&e_hndl.y)=16;
1B9A E6000000  R  5088           MOV     DPP0,#PAG _e_hndl
1B9E E6F61000     5089           MOV     R6,#010h
1BA2 F6F60000  R  5090           MOV     POF (_e_hndl+26),R6
                  5091   ; main.c   1472   *(int far *)(&e_hndl.h)=32;
1BA6 E6FC2000     5092           MOV     R12,#020h
1BAA F6FC0000  R  5093           MOV     POF (_e_hndl+30),R12
                  5094   ; main.c   1473  }
1BAE 0D0A         5095           JMPR    cc_UC,_473
1BB0              5096   _472:
                  5097   ; main.c   1474  else
                  5098   ; main.c   1475  {
                  5099   ; main.c   1476   *(int far *)(&e_hndl.y)=48;
1BB0 E6000000  R  5100           MOV     DPP0,#PAG _e_hndl
1BB4 E6F63000     5101           MOV     R6,#030h
1BB8 F6F60000  R  5102           MOV     POF (_e_hndl+26),R6
                  5103   ; main.c   1477   *(int far *)(&e_hndl.h)=64;
1BBC E6FC4000     5104           MOV     R12,#040h
1BC0 F6FC0000  R  5105           MOV     POF (_e_hndl+30),R12
                  5106   ; main.c   1478  }
1BC4              5107   _473:
                  5108   ; main.c   1479  CreateInputTextDialog((INPUTDIA_HDNL far*)&e_hndl, (DIALOG_HEADER far*)&e_header, ws_hdr2,
                          1);
1BC4 E016         5109           MOV     R6,#01h
1BC6 8860         5110           MOV     [-R0],R6
1BC8 8890         5111           MOV     [-R0],R9
1BCA 8880         5112           MOV     [-R0],R8
1BCC E6FC0000  R  5113           MOV     R12,#POF _e_hndl
1BD0 E6FD0000  R  5114           MOV     R13,#PAG _e_hndl
1BD4 E6FE0000  R  5115           MOV     R14,#POF _e_header
1BD8 E6FF0000  R  5116           MOV     R15,#PAG _e_header
1BDC DA000000  R  5117           CALLS   SEG _CreateInputTextDialog,_CreateInputTextDialog
1BE0 06F01C00     5118           ADD     R0,#01Ch
                  5119   ; main.c   1480 }
1BE4 9860         5120           MOV     R6,[R0+]
1BE6 9880         5121           MOV     R8,[R0+]
1BE8 9890         5122           MOV     R9,[R0+]
1BEA DB00         5123           RETS
                  5124   _CreateEditDialog       ENDP
                  5125   ; main.c   1481 
                  5126   ; main.c   1482 void add_to_clip(unsigned char far *s)
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  98
main

 LOC CODE        LINE   SOURCELINE

                  5127   ; main.c   1483 {
                  5128           PUBLIC  _add_to_clip
                  5129   _add_to_clip    PROC    FAR
1BEC 8890         5130           MOV     [-R0],R9
1BEE 8880         5131           MOV     [-R0],R8
1BF0 8860         5132           MOV     [-R0],R6
1BF2 F06D         5133           MOV     R6,R13
1BF4 F09C         5134           MOV     R9,R12
                  5135   ; Locals:
                  5136   ; 
                  5137   ; Statics:
                  5138   ; 
                  5139   ; CSEs:
                  5140   ;     f = R8
                  5141   ;     s = R9R6
                  5142   ; 
                  5143   ; main.c   1484  int f=FileOpen((STR)clipfile,
                  5144   ; main.c   1485  clip_pasted?_O_CREAT+_O_RDWR+_O_TRUNC:_O_CREAT+_O_RDWR+_O_APPEND
                  5145   ; main.c   1486  ,_S_IREAD);
1BF6 E6FC0000  R  5146           MOV     R12,#POF _clipfile
1BFA E6000000  R  5147           MOV     DPP0,#PAG _clip_pasted
1BFE E6FD0000  R  5148           MOV     R13,#PAG _clipfile
1C02 F2FE0000  R  5149           MOV     R14,POF _clip_pasted
1C06 48E0         5150           CMP     R14,#00h
1C08 2D03         5151           JMPR    cc_Z,_475
1C0A              5152   _476:
1C0A E6FE0203     5153           MOV     R14,#0302h
1C0E 0D02         5154           JMPR    cc_UC,_477
1C10              5155   _475:
1C10 E6FE0A01     5156           MOV     R14,#010Ah
1C14              5157   _477:
1C14 E6FF0001     5158           MOV     R15,#0100h
1C18 DA000000  R  5159           CALLS   SEG _FileOpen,_FileOpen
1C1C F084         5160           MOV     R8,R4
                  5161   ; main.c   1487  if (f!=-1)
1C1E 46F8FFFF     5162           CMP     R8,#0FFFFh
1C22 2D0D         5163           JMPR    cc_EQ,_474
                  5164   ; main.c   1488  {
                  5165   ; main.c   1489   FileWrite(f,s,strlen(s));
1C24 F0C9         5166           MOV     R12,R9
1C26 F0D6         5167           MOV     R13,R6
1C28 DA000000  R  5168           CALLS   SEG _strlen,_strlen
1C2C F0F4         5169           MOV     R15,R4
1C2E F0C8         5170           MOV     R12,R8
1C30 F0D9         5171           MOV     R13,R9
1C32 F0E6         5172           MOV     R14,R6
1C34 DA000000  R  5173           CALLS   SEG _FileWrite,_FileWrite
                  5174   ; main.c   1490   FileClose(f);
1C38 F0C8         5175           MOV     R12,R8
1C3A DA000000  R  5176           CALLS   SEG _FileClose,_FileClose
                  5177   ; main.c   1491  }
1C3E              5178   _474:
                  5179   ; main.c   1492  EX_heap_free_with_lock(s);
1C3E F0C9         5180           MOV     R12,R9
1C40 F0D6         5181           MOV     R13,R6
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page:  99
main

 LOC CODE        LINE   SOURCELINE

1C42 DA000000  R  5182           CALLS   SEG _EX_heap_free_with_lock,_EX_heap_free_with_lock
                  5183   ; main.c   1493  clip_pasted=0;
1C46 E6000000  R  5184           MOV     DPP0,#PAG _clip_pasted
1C4A 9860         5185           MOV     R6,[R0+]
1C4C F68E0000  R  5186           MOV     POF _clip_pasted,ZEROS
                  5187   ; main.c   1494 }
1C50 9880         5188           MOV     R8,[R0+]
1C52 9890         5189           MOV     R9,[R0+]
1C54 DB00         5190           RETS
                  5191   _add_to_clip    ENDP
                  5192   ; main.c   1495 
                  5193   ; main.c   1496 //------------------------------------------------------------------------------
                  5194   ; main.c   1497 // Осн. диалог
                  5195   ; main.c   1498 //------------------------------------------------------------------------------
                  5196   ; main.c   1499 int md_onKey(void far *data, struct MSG far *Msg)
                  5197   ; main.c   1500 {
                  5198           PUBLIC  _md_onKey
                  5199   _md_onKey       PROC    FAR
1C56 8890         5200           MOV     [-R0],R9
1C58 8880         5201           MOV     [-R0],R8
1C5A 8860         5202           MOV     [-R0],R6
                  5203   ; Locals:
                  5204   ; 
                  5205   ; Statics:
                  5206   ; 
                  5207   ; CSEs:
                  5208   ;     Msg + 4 = R8R9
                  5209   ;     s = R8R9
                  5210   ;     i = R6
                  5211   ;     data = R12R13
                  5212   ;     Msg = R14R15
                  5213   ; 
                  5214   ; main.c   1501  if ((Msg->Msg==0xF8)&&(Msg->Param[0]==dia_id))
1C5C F08E         5215           MOV     R8,R14
1C5E F09F         5216           MOV     R9,R15
1C60 0884         5217           ADD     R8,#04h
1C62 DC49         5218           EXTP    R9,#01h
1C64 A818     1   5219           MOV     R1,[R8]
1C66 46F1F800     5220           CMP     R1,#0F8h
1C6A 3D18         5221           JMPR    cc_NE,_570
1C6C DC4F         5222           EXTP    R15,#01h
1C6E D41E0600 1   5223           MOV     R1,[R14+#06H]
1C72 E6000000  R  5224           MOV     DPP0,#PAG _dia_id
1C76 CC00         5225           NOP
1C78 42F10000  R  5226           CMP     R1,POF _dia_id
1C7C 3D0F         5227           JMPR    cc_NE,_570
                  5228   ; main.c   1502  {
                  5229   ; main.c   1503   if (IsFocus(data))
1C7E DA005A15  R  5230           CALLS   SEG _IsFocus,_IsFocus
1C82 4840         5231           CMP     R4,#00h
1C84 EA209820  R  5232           JMPA    cc_Z,_649
                  5233   ; main.c   1504   {
                  5234   ; main.c   1505    if (editmode>2) goto L_EDIT; //Перестартуем редактор
1C88 E6000000  R  5235           MOV     DPP0,#PAG _editmode
1C8C CC00         5236           NOP
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 100
main

 LOC CODE        LINE   SOURCELINE

1C8E F2F80000  R  5237           MOV     R8,POF _editmode
1C92 4882         5238           CMP     R8,#02h
1C94 EAE0A21E  R  5239           JMPA    cc_UGT,_594
                  5240   ; main.c   1506    DrawScreen();
1C98 EA009420  R  5241           JMPA    cc_UC,_642
                  5242   ; main.c   1507   }
                  5243   ; main.c   1508   return(0);
                  5244   ; main.c   1509  }
1C9C              5245   _570:
                  5246   ; main.c   1510  if (!IsFocus(data)) return(1);
1C9C F06E         5247           MOV     R6,R14
1C9E 88F0         5248           MOV     [-R0],R15
1CA0 88C0         5249           MOV     [-R0],R12
1CA2 88D0         5250           MOV     [-R0],R13
1CA4 DA005A15  R  5251           CALLS   SEG _IsFocus,_IsFocus
1CA8 98D0         5252           MOV     R13,[R0+]
1CAA 98C0         5253           MOV     R12,[R0+]
1CAC 98F0         5254           MOV     R15,[R0+]
1CAE F0E6         5255           MOV     R14,R6
1CB0 4840         5256           CMP     R4,#00h
1CB2 EA20A620  R  5257           JMPA    cc_Z,_655
                  5258   ; main.c   1511  if ((Msg->Msg==0x90)||(Msg->Msg==0x88))
1CB6 DC49         5259           EXTP    R9,#01h
1CB8 A868     1   5260           MOV     R6,[R8]
1CBA 46F69000     5261           CMP     R6,#090h
1CBE 2D06         5262           JMPR    cc_EQ,_571
1CC0 DC49         5263           EXTP    R9,#01h
1CC2 A868     1   5264           MOV     R6,[R8]
1CC4 46F68800     5265           CMP     R6,#088h
1CC8 EA307E1D  R  5266           JMPA    cc_NE,_584
1CCC              5267   _571:
                  5268   ; main.c   1512  {
                  5269   ; main.c   1513   if (editmode>2)
1CCC E6000000  R  5270           MOV     DPP0,#PAG _editmode
1CD0 CC00         5271           NOP
1CD2 F2F80000  R  5272           MOV     R8,POF _editmode
1CD6 4882         5273           CMP     R8,#02h
1CD8 FD32         5274           JMPR    cc_ULE,_582
                  5275   ; main.c   1514   {
                  5276   ; main.c   1515    //Вышли из редактора стрелками вверх/вниз, выполняем переход
                  5277   ; main.c   1516    switch(editmode)
1CDA 46F80E00     5278           CMP     R8,#0Eh
1CDE 2D1A         5279           JMPR    cc_EQ,_577
1CE0 46F82100     5280           CMP     R8,#021h
1CE4 2D0D         5281           JMPR    cc_EQ,_573
1CE6 46F82500     5282           CMP     R8,#025h
1CEA 2D0A         5283           JMPR    cc_EQ,_573
1CEC 46F80D00     5284           CMP     R8,#0Dh
1CF0 2D0A         5285           JMPR    cc_EQ,_574
1CF2 46F82000     5286           CMP     R8,#020h
1CF6 2D0B         5287           JMPR    cc_EQ,_576
1CF8 46F82400     5288           CMP     R8,#024h
1CFC 2D08         5289           JMPR    cc_EQ,_576
1CFE 0D0D         5290           JMPR    cc_UC,_581
                  5291   ; main.c   1517    {
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 101
main

 LOC CODE        LINE   SOURCELINE

                  5292   ; main.c   1518     case 0x0E:
                  5293   ; main.c   1519          PageUp(6);
                  5294   ; main.c   1520          break;
                  5295   ; main.c   1521     case 0x21:
                  5296   ; main.c   1522         case 0x25:
1D00              5297   _573:
                  5298   ; main.c   1523          //Стрелка вверх
                  5299   ; main.c   1524          LineUp();
1D00 DA006A0C  R  5300           CALLS   SEG _LineUp,_LineUp
                  5301   ; main.c   1525          break;
1D04 0D0A         5302           JMPR    cc_UC,_581
                  5303   ; main.c   1526         case 0x0D:
1D06              5304   _574:
                  5305   ; main.c   1527          PageDw(6);
1D06 E06C         5306           MOV     R12,#06h
1D08 DA006A0D  R  5307           CALLS   SEG _PageDw,_PageDw
                  5308   ; main.c   1528          break;
1D0C 0D06         5309           JMPR    cc_UC,_581
                  5310   ; main.c   1529         case 0x20:
                  5311   ; main.c   1530         case 0x24:
1D0E              5312   _576:
                  5313   ; main.c   1531          //Стрелка вниз
                  5314   ; main.c   1532          LineDw();
1D0E DA00AA0C  R  5315           CALLS   SEG _LineDw,_LineDw
                  5316   ; main.c   1533          break;
1D12 0D03         5317           JMPR    cc_UC,_581
1D14              5318   _577:
1D14 E06C         5319           MOV     R12,#06h
1D16 DA00EE0C  R  5320           CALLS   SEG _PageUp,_PageUp
                  5321   ; main.c   1534         case 0x2F:
                  5322   ; main.c   1535          //Создано меню
                  5323   ; main.c   1536          break;
                  5324   ; main.c   1537    }
1D1A              5325   _581:
                  5326   ; main.c   1538    CheckDiskAccess();
1D1A DA009E08  R  5327           CALLS   SEG _CheckDiskAccess,_CheckDiskAccess
                  5328   ; main.c   1539    if (disk_access) 
1D1E E6000000  R  5329           MOV     DPP0,#PAG _disk_access
1D22 CC00         5330           NOP
1D24 F3FC0000  R  5331           MOVB    RL6,POF _disk_access
1D28 EA20A21E  R  5332           JMPA    cc_Z,_594
                  5333   ; main.c   1540    {
                  5334   ; main.c   1541     FilesysICall_UI(DoDiskAccess,1);
1D2C E6FC0000  R  5335           MOV     R12,#SOF _DoDiskAccess
1D30 E6FD0000  R  5336           MOV     R13,#SEG _DoDiskAccess
1D34 E01E         5337           MOV     R14,#01h
1D36 DA000000  R  5338           CALLS   SEG _FilesysICall_UI,_FilesysICall_UI
                  5339   ; main.c   1542         return(0);
1D3A EA009820  R  5340           JMPA    cc_UC,_649
                  5341   ; main.c   1543    }
                  5342   ; main.c   1544    goto L_EDIT;
                  5343   ; main.c   1545   }
1D3E              5344   _582:
                  5345   ; main.c   1546   editmode=0; //Выключаем редактор
1D3E E6000000  R  5346           MOV     DPP0,#PAG _editmode
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 102
main

 LOC CODE        LINE   SOURCELINE

1D42 CC00         5347           NOP
1D44 F68E0000  R  5348           MOV     POF _editmode,ZEROS
                  5349   ; main.c   1547   //Если вышли из меню не выбрав пункт загрузки
                  5350   ; main.c   1548   if (HISTORY.fmt==255)
1D48 E6000000  R  5351           MOV     DPP0,#PAG _HISTORY
1D4C CC00         5352           NOP
1D4E C2F80000  R  5353           MOVBZ   R8,POF (_HISTORY+129)
1D52 46F8FF00     5354           CMP     R8,#0FFh
1D56 3D0A         5355           JMPR    cc_NE,_583
                  5356   ; main.c   1549   {
                  5357   ; main.c   1550    if (disable_exit) //Если выбирали шрифт
1D58 E6000000  R  5358           MOV     DPP0,#PAG _disable_exit
1D5C CC00         5359           NOP
1D5E F3FC0000  R  5360           MOVB    RL6,POF _disable_exit
1D62 49C0         5361           CMPB    RL6,#00h
1D64 EA20921E  R  5362           JMPA    cc_Z,_591
                  5363   ; main.c   1551    {
                  5364   ; main.c   1552         disable_exit=0; //Не выходим
                  5365   ; main.c   1553         return(1);
1D68 EA009C20  R  5366           JMPA    cc_UC,_650
                  5367   ; main.c   1554    }
                  5368   ; main.c   1555    goto L_EXIT;
                  5369   ; main.c   1556   }
1D6C              5370   _583:
                  5371   ; main.c   1557   //Перерисовывание после меню, если ничего не изменили
                  5372   ; main.c   1558   if (!draw_mode) draw_mode=1;
1D6C E6000000  R  5373           MOV     DPP0,#PAG _draw_mode
1D70 CC00         5374           NOP
1D72 F3FC0000  R  5375           MOVB    RL6,POF _draw_mode
1D76 49C0         5376           CMPB    RL6,#00h
1D78 EA309420  R  5377           JMPA    cc_NZ,_642
1D7C 0D26         5378           JMPR    cc_UC,_587
                  5379   ; main.c   1559   DrawScreen();
                  5380   ; main.c   1560   return(0); //Обработали сообщение 0x90
                  5381   ; main.c   1561  }
1D7E              5382   _584:
                  5383   ; main.c   1562  //if (Msg->Msg==0xB7) return(0); //Убить скроллер имени
                  5384   ; main.c   1563  if (Msg->Msg==0xB8)
1D7E DC49         5385           EXTP    R9,#01h
1D80 A868     1   5386           MOV     R6,[R8]
1D82 46F6B800     5387           CMP     R6,#0B8h
1D86 3D04         5388           JMPR    cc_NE,_585
                  5389   ; main.c   1564  {
                  5390   ; main.c   1565   DrawScreen(); //Перерисовываем по таймеру
1D88 DA009A0F  R  5391           CALLS   SEG _DrawScreen,_DrawScreen
                  5392   ; main.c   1566   return(1);
1D8C EA00A620  R  5393           JMPA    cc_UC,_655
                  5394   ; main.c   1567  }
1D90              5395   _585:
                  5396   ; main.c   1568  if (disk_access) return(1); //Если дисковые операции
1D90 E6000000  R  5397           MOV     DPP0,#PAG _disk_access
1D94 CC00         5398           NOP
1D96 F3FC0000  R  5399           MOVB    RL6,POF _disk_access
1D9A EA30A620  R  5400           JMPA    cc_NZ,_655
                  5401   ; main.c   1569  if (draw_mode&&(draw_mode!=4)) return(1); //Если еще рисуем
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 103
main

 LOC CODE        LINE   SOURCELINE

1D9E F3F20000  R  5402           MOVB    RL1,POF _draw_mode
1DA2 4920         5403           CMPB    RL1,#00h
1DA4 2D05         5404           JMPR    cc_Z,_586
1DA6 F3F20000  R  5405           MOVB    RL1,POF _draw_mode
1DAA 4924         5406           CMPB    RL1,#04h
1DAC EA30A620  R  5407           JMPA    cc_NE,_655
1DB0              5408   _586:
                  5409   ; main.c   1570  if (Msg->Msg==KEY_UP)
1DB0 DC49         5410           EXTP    R9,#01h
1DB2 A868     1   5411           MOV     R6,[R8]
1DB4 46F6EA00     5412           CMP     R6,#0EAh
1DB8 3D0F         5413           JMPR    cc_NE,_588
                  5414   ; main.c   1571  {
                  5415   ; main.c   1572   if (draw_mode==4)
1DBA E6000000  R  5416           MOV     DPP0,#PAG _draw_mode
1DBE CC00         5417           NOP
1DC0 F3FC0000  R  5418           MOVB    RL6,POF _draw_mode
1DC4 49C4         5419           CMPB    RL6,#04h
1DC6 EA309820  R  5420           JMPA    cc_NE,_649
                  5421   ; main.c   1573   {
                  5422   ; main.c   1574    draw_mode=1;
1DCA              5423   _587:
1DCA E6000000  R  5424           MOV     DPP0,#PAG _draw_mode
1DCE E11C         5425           MOVB    RL6,#01h
1DD0 F7FC0000  R  5426           MOVB    POF _draw_mode,RL6
                  5427   ; main.c   1575    DrawScreen();
1DD4 EA009420  R  5428           JMPA    cc_UC,_642
                  5429   ; main.c   1576   }
                  5430   ; main.c   1577   return(0);
                  5431   ; main.c   1578  }
1DD8              5432   _588:
                  5433   ; main.c   1579  if ((Msg->Msg==KEY_DOWN)||(Msg->Msg==LONG_PRESS)) 
1DD8 DC49         5434           EXTP    R9,#01h
1DDA A868     1   5435           MOV     R6,[R8]
1DDC 46F6E900     5436           CMP     R6,#0E9h
1DE0 2D06         5437           JMPR    cc_EQ,_589
1DE2 DC49         5438           EXTP    R9,#01h
1DE4 A868     1   5439           MOV     R6,[R8]
1DE6 46F6EB00     5440           CMP     R6,#0EBh
1DEA EA30A620  R  5441           JMPA    cc_NE,_655
1DEE              5442   _589:
                  5443   ; main.c   1580  {
                  5444   ; main.c   1581   switch(Msg->Param[0])
1DEE DC4F         5445           EXTP    R15,#01h
1DF0 D46E0600 1   5446           MOV     R6,[R14+#06H]
1DF4 46F60C00     5447           CMP     R6,#0Ch
1DF8 EA20921E  R  5448           JMPA    cc_EQ,_591
1DFC 46F60B00     5449           CMP     R6,#0Bh
1E00 EA20A21E  R  5450           JMPA    cc_EQ,_594
1E04 4864         5451           CMP     R6,#04h
1E06 EA20E41E  R  5452           JMPA    cc_EQ,_597
1E0A 4861         5453           CMP     R6,#01h
1E0C EA20F81E  R  5454           JMPA    cc_EQ,_598
1E10 46F63B00     5455           CMP     R6,#03Bh
1E14 EA20001F  R  5456           JMPA    cc_EQ,_599
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 104
main

 LOC CODE        LINE   SOURCELINE

1E18 4866         5457           CMP     R6,#06h
1E1A EA20181F  R  5458           JMPA    cc_EQ,_600
1E1E 46F63C00     5459           CMP     R6,#03Ch
1E22 EA20961F  R  5460           JMPA    cc_EQ,_602
1E26 46F60D00     5461           CMP     R6,#0Dh
1E2A EA20B41F  R  5462           JMPA    cc_EQ,_605
1E2E 46F63200     5463           CMP     R6,#032h
1E32 EA20B41F  R  5464           JMPA    cc_EQ,_605
1E36 46F60E00     5465           CMP     R6,#0Eh
1E3A EA20C61F  R  5466           JMPA    cc_EQ,_607
1E3E 46F63800     5467           CMP     R6,#038h
1E42 EA20C61F  R  5468           JMPA    cc_EQ,_607
1E46 46F63500     5469           CMP     R6,#035h
1E4A EA20D81F  R  5470           JMPA    cc_EQ,_608
1E4E 46F63D00     5471           CMP     R6,#03Dh
1E52 EA20EC1F  R  5472           JMPA    cc_EQ,_609
1E56 46F63400     5473           CMP     R6,#034h
1E5A EA20FE1F  R  5474           JMPA    cc_EQ,_611
1E5E 46F63E00     5475           CMP     R6,#03Eh
1E62 EA200420  R  5476           JMPA    cc_EQ,_612
1E66 46F63600     5477           CMP     R6,#036h
1E6A EA201420  R  5478           JMPA    cc_EQ,_614
1E6E 46F63900     5479           CMP     R6,#039h
1E72 EA201A20  R  5480           JMPA    cc_EQ,_615
1E76 46F63700     5481           CMP     R6,#037h
1E7A EA202020  R  5482           JMPA    cc_EQ,_616
1E7E 46F63000     5483           CMP     R6,#030h
1E82 EA203620  R  5484           JMPA    cc_EQ,_620
1E86 46F62300     5485           CMP     R6,#023h
1E8A EA204220  R  5486           JMPA    cc_EQ,_621
1E8E EA007620  R  5487           JMPA    cc_UC,_638
                  5488   ; main.c   1582   {
                  5489   ; main.c   1583    case RED_BUTTON:
                  5490   ; main.c   1584     L_EXIT:
1E92              5491   _591:
                  5492   ; main.c   1585     CloseDialogWithSoftKeys(((int far *)data)[6]);
1E92 F08C         5493           MOV     R8,R12
1E94 DC4D         5494           EXTP    R13,#01h
1E96 D4C80C00 1   5495           MOV     R12,[R8+#0CH]
1E9A DA000000  R  5496           CALLS   SEG _CloseDialogWithSoftKeys,_CloseDialogWithSoftKeys
                  5497   ; main.c   1586         //((unsigned int far *)data)[7]=0xFFFD;
                  5498   ; main.c   1587         //((unsigned int far *)data)[8]=0x0000;
                  5499   ; main.c   1588     return(0);
1E9E EA009820  R  5500           JMPA    cc_UC,_649
                  5501   ; main.c   1589    case GREEN_BUTTON:
                  5502   ; main.c   1590     L_EDIT:
1EA2              5503   _594:
                  5504   ; main.c   1591     editmode=1;
1EA2 E6000000  R  5505           MOV     DPP0,#PAG _editmode
1EA6 E018         5506           MOV     R8,#01h
1EA8 F6F80000  R  5507           MOV     POF _editmode,R8
                  5508   ; main.c   1592         cursor_off=0;
1EAC F78E0000  R  5509           MOVB    POF _cursor_off,ZEROS
                  5510   ; main.c   1593         while ((curline-viewline)>=6) viewline++; //Если ниже чем 6 строк - перемещаемся
1EB0 0D07         5511           JMPR    cc_UC,_596
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 105
main

 LOC CODE        LINE   SOURCELINE

1EB2              5512   _595:
1EB2 E6000000  R  5513           MOV     DPP0,#PAG _viewline
1EB6 E018         5514           MOV     R8,#01h
1EB8 04F80000  R  5515           ADD     POF _viewline,R8
1EBC 148E0000  R  5516           ADDC    POF (_viewline+2),ZEROS
1EC0              5517   _596:
1EC0 E6000000  R  5518           MOV     DPP0,#PAG _curline
1EC4 CC00         5519           NOP
1EC6 F2F80000  R  5520           MOV     R8,POF _curline
1ECA F2F90000  R  5521           MOV     R9,POF (_curline+2)
1ECE 22F80000  R  5522           SUB     R8,POF _viewline
1ED2 32F90000  R  5523           SUBC    R9,POF (_viewline+2)
1ED6 2886         5524           SUB     R8,#06h
1ED8 3890         5525           SUBC    R9,#00h
1EDA 9DEB         5526           JMPR    cc_UGE,_595
                  5527   ; main.c   1594         CreateEditDialog();
1EDC DA00DA1A  R  5528           CALLS   SEG _CreateEditDialog,_CreateEditDialog
                  5529   ; main.c   1595         return(0);
1EE0 EA009820  R  5530           JMPA    cc_UC,_649
                  5531   ; main.c   1596    case RIGHT_SOFT:
1EE4              5532   _597:
                  5533   ; main.c   1597     FilesysICall(SaveHistory);
1EE4 E6FC0000  R  5534           MOV     R12,#SOF _SaveHistory
1EE8 E6FD0000  R  5535           MOV     R13,#SEG _SaveHistory
1EEC DA000000  R  5536           CALLS   SEG _FilesysICall,_FilesysICall
                  5537   ; main.c   1598     DrawLoadMenu();
1EF0 DA009C24  R  5538           CALLS   SEG _DrawLoadMenu,_DrawLoadMenu
                  5539   ; main.c   1599     return(0);
1EF4 EA009820  R  5540           JMPA    cc_UC,_649
                  5541   ; main.c   1600    case LEFT_SOFT:
1EF8              5542   _598:
                  5543   ; main.c   1601     DrawSoftMenu();
1EF8 DA001A2A  R  5544           CALLS   SEG _DrawSoftMenu,_DrawSoftMenu
                  5545   ; main.c   1602         return(0);
1EFC EA009820  R  5546           JMPA    cc_UC,_649
                  5547   ; main.c   1603    case UP_BUTTON:
1F00              5548   _599:
                  5549   ; main.c   1604     if (cursor_off)
1F00 E6000000  R  5550           MOV     DPP0,#PAG _cursor_off
1F04 CC00         5551           NOP
1F06 F3FC0000  R  5552           MOVB    RL6,POF _cursor_off
1F0A EA206820  R  5553           JMPA    cc_Z,_623
                  5554   ; main.c   1605          PageUp(1);
1F0E E01C         5555           MOV     R12,#01h
1F10 DA00EE0C  R  5556           CALLS   SEG _PageUp,_PageUp
1F14 EA006C20  R  5557           JMPA    cc_UC,_632
                  5558   ; main.c   1606          else
                  5559   ; main.c   1607      LineUp();
                  5560   ; main.c   1608     draw_mode=1;
                  5561   ; main.c   1609     break;
                  5562   ; main.c   1610    case RECORD_BUTTON:
1F18              5563   _600:
                  5564   ; main.c   1611     if (cursor_off||(dsp==STKSZ)) break;
1F18 E6000000  R  5565           MOV     DPP0,#PAG _cursor_off
1F1C CC00         5566           NOP
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 106
main

 LOC CODE        LINE   SOURCELINE

1F1E F3FC0000  R  5567           MOVB    RL6,POF _cursor_off
1F22 EA307620  R  5568           JMPA    cc_NZ,_638
1F26 F2F80000  R  5569           MOV     R8,POF _dsp
1F2A 46F80040     5570           CMP     R8,#04000h
1F2E EA207620  R  5571           JMPA    cc_EQ,_638
                  5572   ; main.c   1612         else
                  5573   ; main.c   1613         {
                  5574   ; main.c   1614          unsigned int i=strlen(dstk+dsp); //Длина тек. строки
1F32 E6FC0000  R  5575           MOV     R12,#POF _dstk
1F36 E6FD0000  R  5576           MOV     R13,#PAG _dstk
1F3A 00C8         5577           ADD     R12,R8
1F3C DA000000  R  5578           CALLS   SEG _strlen,_strlen
1F40 F064         5579           MOV     R6,R4
                  5580   ; main.c   1615          unsigned char far *s;
                  5581   ; main.c   1616          s=EX_heap_malloc_with_lock(i+2); //Т.к. добавляем 0 и 0d
1F42 F0C6         5582           MOV     R12,R6
1F44 08C2         5583           ADD     R12,#02h
1F46 DA000000  R  5584           CALLS   SEG _EX_heap_malloc_with_lock,_EX_heap_malloc_with_lock
1F4A F084         5585           MOV     R8,R4
1F4C F095         5586           MOV     R9,R5
                  5587   ; main.c   1617          if (s)
1F4E F0C9         5588           MOV     R12,R9
1F50 70C8         5589           OR      R12,R8
1F52 2D21         5590           JMPR    cc_Z,_602
                  5591   ; main.c   1618          {
                  5592   ; main.c   1619           strcpy(s,dstk+dsp);
1F54 F0C8         5593           MOV     R12,R8
1F56 F0D9         5594           MOV     R13,R9
1F58 E6FE0000  R  5595           MOV     R14,#POF _dstk
1F5C E6000000  R  5596           MOV     DPP0,#PAG _dsp
1F60 E6FF0000  R  5597           MOV     R15,#PAG _dstk
1F64 02FE0000  R  5598           ADD     R14,POF _dsp
1F68 DA000000  R  5599           CALLS   SEG _strcpy,_strcpy
                  5600   ; main.c   1620           s[i]=0x0D;
1F6C E1D2         5601           MOVB    RL1,#0Dh
1F6E F0C8         5602           MOV     R12,R8
1F70 F0D9         5603           MOV     R13,R9
1F72 00C6         5604           ADD     R12,R6
1F74 DC4D         5605           EXTP    R13,#01h
1F76 B92C     1   5606           MOVB    [R12],RL1
                  5607   ; main.c   1621           s[i+1]=0x00;
1F78 E104         5608           MOVB    RL2,#00h
1F7A F0C8         5609           MOV     R12,R8
1F7C F0D9         5610           MOV     R13,R9
1F7E 08C1         5611           ADD     R12,#01h
1F80 00C6         5612           ADD     R12,R6
1F82 DC4D         5613           EXTP    R13,#01h
1F84 B94C     1   5614           MOVB    [R12],RL2
                  5615   ; main.c   1622           FilesysICall_FP(add_to_clip,s);
1F86 E6FC0000  R  5616           MOV     R12,#SOF _add_to_clip
1F8A E6FD0000  R  5617           MOV     R13,#SEG _add_to_clip
1F8E F0E8         5618           MOV     R14,R8
1F90 F0F9         5619           MOV     R15,R9
1F92 DA000000  R  5620           CALLS   SEG _FilesysICall_FP,_FilesysICall_FP
                  5621   ; main.c   1623      }
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 107
main

 LOC CODE        LINE   SOURCELINE

                  5622   ; main.c   1624         }
                  5623   ; main.c   1625    case DOWN_BUTTON:
1F96              5624   _602:
                  5625   ; main.c   1626     if (cursor_off)
1F96 E6000000  R  5626           MOV     DPP0,#PAG _cursor_off
1F9A CC00         5627           NOP
1F9C F3FC0000  R  5628           MOVB    RL6,POF _cursor_off
1FA0 2D05         5629           JMPR    cc_Z,_603
                  5630   ; main.c   1627          PageDw(1);
1FA2 E01C         5631           MOV     R12,#01h
1FA4 DA006A0D  R  5632           CALLS   SEG _PageDw,_PageDw
1FA8 EA006C20  R  5633           JMPA    cc_UC,_632
1FAC              5634   _603:
                  5635   ; main.c   1628          else
                  5636   ; main.c   1629      LineDw();
1FAC DA00AA0C  R  5637           CALLS   SEG _LineDw,_LineDw
                  5638   ; main.c   1630     draw_mode=1;
1FB0 EA006C20  R  5639           JMPA    cc_UC,_632
                  5640   ; main.c   1631     break;
                  5641   ; main.c   1632    case VOL_UP_BUTTON:
                  5642   ; main.c   1633    case '2':
1FB4              5643   _605:
                  5644   ; main.c   1634     PageUp(max_y);
1FB4 E6000000  R  5645           MOV     DPP0,#PAG _max_y
1FB8 CC00         5646           NOP
1FBA F2FC0000  R  5647           MOV     R12,POF _max_y
1FBE DA00EE0C  R  5648           CALLS   SEG _PageUp,_PageUp
                  5649   ; main.c   1635     draw_mode=1;
1FC2 EA006C20  R  5650           JMPA    cc_UC,_632
                  5651   ; main.c   1636     break;
                  5652   ; main.c   1637    case VOL_DOWN_BUTTON:
                  5653   ; main.c   1638    case '8':
1FC6              5654   _607:
                  5655   ; main.c   1639     PageDw(max_y);
1FC6 E6000000  R  5656           MOV     DPP0,#PAG _max_y
1FCA CC00         5657           NOP
1FCC F2FC0000  R  5658           MOV     R12,POF _max_y
1FD0 DA006A0D  R  5659           CALLS   SEG _PageDw,_PageDw
                  5660   ; main.c   1640     draw_mode=1;
1FD4 EA006C20  R  5661           JMPA    cc_UC,_632
                  5662   ; main.c   1641     break;
                  5663   ; main.c   1642    case '5':
1FD8              5664   _608:
                  5665   ; main.c   1643     cursor_off^=1;
1FD8 E6000000  R  5666           MOV     DPP0,#PAG _cursor_off
1FDC CC00         5667           NOP
1FDE F3FC0000  R  5668           MOVB    RL6,POF _cursor_off
1FE2 59C1         5669           XORB    RL6,#01h
1FE4 F7FC0000  R  5670           MOVB    POF _cursor_off,RL6
                  5671   ; main.c   1644         draw_mode=1;
1FE8 EA006C20  R  5672           JMPA    cc_UC,_632
                  5673   ; main.c   1645         break;
                  5674   ; main.c   1646    case LEFT_BUTTON:
1FEC              5675   _609:
                  5676   ; main.c   1647     if (Msg->Msg!=LONG_PRESS)
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 108
main

 LOC CODE        LINE   SOURCELINE

1FEC DC49         5677           EXTP    R9,#01h
1FEE A888     1   5678           MOV     R8,[R8]
1FF0 46F8EB00     5679           CMP     R8,#0EBh
1FF4 2D04         5680           JMPR    cc_EQ,_611
                  5681   ; main.c   1648         {
                  5682   ; main.c   1649      doCurLeft();
1FF6 DA00EE15  R  5683           CALLS   SEG _doCurLeft,_doCurLeft
                  5684   ; main.c   1650      break;
1FFA EA007620  R  5685           JMPA    cc_UC,_638
                  5686   ; main.c   1651         }
                  5687   ; main.c   1652    case '4':
1FFE              5688   _611:
                  5689   ; main.c   1653     //На слово влево
                  5690   ; main.c   1654     WordLeft();
1FFE DA00FE0D  R  5691           CALLS   SEG _WordLeft,_WordLeft
                  5692   ; main.c   1655         cursor_off&=0xFE;
2002 0D10         5693           JMPR    cc_UC,_619
                  5694   ; main.c   1656         draw_mode=1;
                  5695   ; main.c   1657     break;
                  5696   ; main.c   1658    case RIGHT_BUTTON:
2004              5697   _612:
                  5698   ; main.c   1659     if (Msg->Msg!=LONG_PRESS)
2004 DC49         5699           EXTP    R9,#01h
2006 A888     1   5700           MOV     R8,[R8]
2008 46F8EB00     5701           CMP     R8,#0EBh
200C 2D03         5702           JMPR    cc_EQ,_614
                  5703   ; main.c   1660         {
                  5704   ; main.c   1661      doCurRight();
200E DA009015  R  5705           CALLS   SEG _doCurRight,_doCurRight
                  5706   ; main.c   1662      break;
2012 0D31         5707           JMPR    cc_UC,_638
                  5708   ; main.c   1663         }
                  5709   ; main.c   1664    case '6':
2014              5710   _614:
                  5711   ; main.c   1665     //На слово вправо
                  5712   ; main.c   1666     WordRight();
2014 DA00720E  R  5713           CALLS   SEG _WordRight,_WordRight
                  5714   ; main.c   1667         cursor_off&=0xFE;
2018 0D05         5715           JMPR    cc_UC,_619
                  5716   ; main.c   1668         draw_mode=1;
                  5717   ; main.c   1669     break;
                  5718   ; main.c   1670    case '9':
201A              5719   _615:
                  5720   ; main.c   1671     ToEOL();
201A DA009C0D  R  5721           CALLS   SEG _ToEOL,_ToEOL
                  5722   ; main.c   1672         cursor_off&=0xFE;
201E 0D02         5723           JMPR    cc_UC,_619
                  5724   ; main.c   1673         draw_mode=1;
                  5725   ; main.c   1674         break;
                  5726   ; main.c   1675    case '7':
2020              5727   _616:
                  5728   ; main.c   1676     ToBOL();
2020 DA00EE0D  R  5729           CALLS   SEG _ToBOL,_ToBOL
                  5730   ; main.c   1677         cursor_off&=0xFE;
2024              5731   _619:
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 109
main

 LOC CODE        LINE   SOURCELINE

2024 E6000000  R  5732           MOV     DPP0,#PAG _cursor_off
2028 CC00         5733           NOP
202A F3FC0000  R  5734           MOVB    RL6,POF _cursor_off
202E 0EF6         5735           BCLR    R6.0
2030 F7FC0000  R  5736           MOVB    POF _cursor_off,RL6
                  5737   ; main.c   1678         draw_mode=1;
2034 0D1B         5738           JMPR    cc_UC,_632
                  5739   ; main.c   1679         break;
                  5740   ; main.c   1680    case '0':
2036              5741   _620:
                  5742   ; main.c   1681     draw_mode=4;
2036 E6000000  R  5743           MOV     DPP0,#PAG _draw_mode
203A E14C         5744           MOVB    RL6,#04h
203C F7FC0000  R  5745           MOVB    POF _draw_mode,RL6
                  5746   ; main.c   1682         break;
2040 0D1A         5747           JMPR    cc_UC,_638
                  5748   ; main.c   1683    case '#':
2042              5749   _621:
                  5750   ; main.c   1684     if (win_dos_koi>1) win_dos_koi=0; else win_dos_koi++;
2042 E6000000  R  5751           MOV     DPP0,#PAG _win_dos_koi
2046 CC00         5752           NOP
2048 F3FC0000  R  5753           MOVB    RL6,POF _win_dos_koi
204C 49C1         5754           CMPB    RL6,#01h
204E FD03         5755           JMPR    cc_ULE,_622
2050 F78E0000  R  5756           MOVB    POF _win_dos_koi,ZEROS
2054 0D0B         5757           JMPR    cc_UC,_632
2056              5758   _622:
2056 E6000000  R  5759           MOV     DPP0,#PAG _win_dos_koi
205A CC00         5760           NOP
205C F3FC0000  R  5761           MOVB    RL6,POF _win_dos_koi
2060 09C1         5762           ADDB    RL6,#01h
2062 F7FC0000  R  5763           MOVB    POF _win_dos_koi,RL6
                  5764   ; main.c   1685     draw_mode=1;
2066 0D02         5765           JMPR    cc_UC,_632
2068              5766   _623:
2068 DA006A0C  R  5767           CALLS   SEG _LineUp,_LineUp
206C              5768   _632:
206C E6000000  R  5769           MOV     DPP0,#PAG _draw_mode
2070 E11C         5770           MOVB    RL6,#01h
2072 F7FC0000  R  5771           MOVB    POF _draw_mode,RL6
                  5772   ; main.c   1686     break;
                  5773   ; main.c   1687    default:          
                  5774   ; main.c   1688     break;
                  5775   ; main.c   1689   }
2076              5776   _638:
                  5777   ; main.c   1690   CheckDiskAccess();
2076 DA009E08  R  5778           CALLS   SEG _CheckDiskAccess,_CheckDiskAccess
                  5779   ; main.c   1691   if (disk_access) FilesysICall_UI(DoDiskAccess,1);
207A E6000000  R  5780           MOV     DPP0,#PAG _disk_access
207E CC00         5781           NOP
2080 F3FC0000  R  5782           MOVB    RL6,POF _disk_access
2084 2D07         5783           JMPR    cc_Z,_642
2086 E6FC0000  R  5784           MOV     R12,#SOF _DoDiskAccess
208A E6FD0000  R  5785           MOV     R13,#SEG _DoDiskAccess
208E E01E         5786           MOV     R14,#01h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 110
main

 LOC CODE        LINE   SOURCELINE

2090 DA000000  R  5787           CALLS   SEG _FilesysICall_UI,_FilesysICall_UI
2094              5788   _642:
                  5789   ; main.c   1692   DrawScreen();
2094 DA009A0F  R  5790           CALLS   SEG _DrawScreen,_DrawScreen
                  5791   ; main.c   1693   return(0);
2098              5792   _649:
2098 E004         5793           MOV     R4,#00h
209A 0D06         5794           JMPR    cc_UC,_656
209C              5795   _650:
209C E6000000  R  5796           MOV     DPP0,#PAG _disable_exit
20A0 CC00         5797           NOP
20A2 F78E0000  R  5798           MOVB    POF _disable_exit,ZEROS
                  5799   ; main.c   1694  }
20A6              5800   _655:
                  5801   ; main.c   1695  return(1); //Оставить для остальных
20A6 E014         5802           MOV     R4,#01h
                  5803   ; main.c   1696 }
20A8              5804   _656:
20A8 9860         5805           MOV     R6,[R0+]
20AA 9880         5806           MOV     R8,[R0+]
20AC 9890         5807           MOV     R9,[R0+]
20AE DB00         5808           RETS
                  5809   _md_onKey       ENDP
                  5810   ; main.c   1697 
                  5811   ; main.c   1698 //===================================================================
                  5812   ; main.c   1699 // Меню загрузки файла
                  5813   ; main.c   1700 //===================================================================
                  5814   ; main.c   1701 void sf_OnKey(char far* data, int param)
                  5815   ; main.c   1702 {
                  5816           PUBLIC  _sf_OnKey
                  5817   _sf_OnKey       PROC    FAR
20B0 8890         5818           MOV     [-R0],R9
20B2 8880         5819           MOV     [-R0],R8
20B4 8860         5820           MOV     [-R0],R6
                  5821   ; Locals:
                  5822   ; 
                  5823   ; Statics:
                  5824   ; 
                  5825   ; CSEs:
                  5826   ;     p = R12
                  5827   ;     wc = R13
                  5828   ;     ESTR = R8R9
                  5829   ;     data = R12R13
                  5830   ;     sz = R6
                  5831   ;     param = R14
                  5832   ; 
                  5833   ; main.c   1703  WS_HDR far* ESTR;
                  5834   ; main.c   1704  unsigned int p=0;
                  5835   ; main.c   1705  unsigned int sz;
                  5836   ; main.c   1706 
                  5837   ; main.c   1707  extern void savetext(void);
                  5838   ; main.c   1708 
                  5839   ; main.c   1709  if (param!=0xB) return;
20B6 46FE0B00     5840           CMP     R14,#0Bh
20BA EA304E21  R  5841           JMPA    cc_NE,_670
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 111
main

 LOC CODE        LINE   SOURCELINE

                  5842   ; main.c   1710  if (sub_E70BAC(data)) return;
20BE F09D         5843           MOV     R9,R13
20C0 F08C         5844           MOV     R8,R12
20C2 DA000000  R  5845           CALLS   SEG _sub_E70BAC,_sub_E70BAC
20C6 F0D9         5846           MOV     R13,R9
20C8 F0C8         5847           MOV     R12,R8
20CA 4840         5848           CMP     R4,#00h
20CC EA304E21  R  5849           JMPA    cc_NZ,_670
                  5850   ; main.c   1711  ESTR=GetDataPointer_ITEM04(data);
20D0 DA000000  R  5851           CALLS   SEG _GetDataPointer_ITEM04,_GetDataPointer_ITEM04
20D4 F084         5852           MOV     R8,R4
20D6 F095         5853           MOV     R9,R5
                  5854   ; main.c   1712  sz=WSTR_Len(ESTR)-11;
20D8 F0C8         5855           MOV     R12,R8
20DA F0D9         5856           MOV     R13,R9
20DC DA000000  R  5857           CALLS   SEG _WSTR_Len,_WSTR_Len
20E0 F064         5858           MOV     R6,R4
20E2 26F60B00     5859           SUB     R6,#0Bh
                  5860   ; main.c   1713  p=0;
20E6 E00C         5861           MOV     R12,#00h
                  5862   ; main.c   1714  while((p<255)&&(p<sz))
20E8 0D18         5863           JMPR    cc_UC,_667
20EA              5864   _664:
                  5865   ; main.c   1715  {
                  5866   ; main.c   1716   int wc=WString_GetChar(ESTR,p+12);
20EA 88C0         5867           MOV     [-R0],R12
20EC F0C8         5868           MOV     R12,R8
20EE F0D9         5869           MOV     R13,R9
20F0 A8E0         5870           MOV     R14,[R0]
20F2 06FE0C00     5871           ADD     R14,#0Ch
20F6 DA000000  R  5872           CALLS   SEG _WString_GetChar,_WString_GetChar
20FA F0D4         5873           MOV     R13,R4
20FC 98C0         5874           MOV     R12,[R0+]
                  5875   ; main.c   1717   if ((wc>=0x410)&&(wc<0x450)) wc-=0x350;
20FE 46FD1004     5876           CMP     R13,#0410h
2102 CD05         5877           JMPR    cc_SLT,_666
2104 46FD5004     5878           CMP     R13,#0450h
2108 DD02         5879           JMPR    cc_SGE,_666
210A 26FD5003     5880           SUB     R13,#0350h
210E              5881   _666:
                  5882   ; main.c   1718   filename[p]=wc;
210E F01D         5883           MOV     R1,R13
2110 D7400000  R  5884           EXTP    #PAG _filename,#01h
2114 E42C0000 1R  5885           MOVB    [R12+#POF _filename],RL1
                  5886   ; main.c   1719   p++;
2118 08C1         5887           ADD     R12,#01h
211A              5888   _667:
211A 46FCFF00     5889           CMP     R12,#0FFh
211E 9D02         5890           JMPR    cc_UGE,_668
2120 40C6         5891           CMP     R12,R6
2122 8DE3         5892           JMPR    cc_ULT,_664
2124              5893   _668:
                  5894   ; main.c   1720  }
                  5895   ; main.c   1721  filename[p]=0;
2124 E10C         5896           MOVB    RL6,#00h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 112
main

 LOC CODE        LINE   SOURCELINE

2126 D7400000  R  5897           EXTP    #PAG _filename,#01h
212A E4CC0000 1R  5898           MOVB    [R12+#POF _filename],RL6
                  5899   ; main.c   1722  HISTORY.fmt=0; //Грузим его теперь как DirectLoad
212E E6000000  R  5900           MOV     DPP0,#PAG _HISTORY
2132 E7F22000     5901           MOVB    RL1,#020h
2136 F78E0000  R  5902           MOVB    POF (_HISTORY+129),ZEROS
                  5903   ; main.c   1723  disk_access=SAVE_FILE;
213A E6000000  R  5904           MOV     DPP0,#PAG _disk_access
213E E6FC0000  R  5905           MOV     R12,#SOF _savetext
2142 F7F20000  R  5906           MOVB    POF _disk_access,RL1
                  5907   ; main.c   1724  FilesysICall(savetext);
2146 E6FD0000  R  5908           MOV     R13,#SEG _savetext
214A DA000000  R  5909           CALLS   SEG _FilesysICall,_FilesysICall
                  5910   ; main.c   1725  //memcpy(HISTORY.name,filename,sizeof(HISTORY.name));
                  5911   ; main.c   1726 }
214E              5912   _670:
214E 9860         5913           MOV     R6,[R0+]
2150 9880         5914           MOV     R8,[R0+]
2152 9890         5915           MOV     R9,[R0+]
2154 DB00         5916           RETS
                  5917   _sf_OnKey       ENDP
                  5918   ; main.c   1727 
                  5919   ; main.c   1728 static const DIALOG_HEADER sf_header = { 0, 0, 101, 12, (char far*)0xBAFB8A, 0xE2F, 0x7FFF 
                         };
                  5920   MAIN_2_PR       ENDS
                  5921   
                  5922   MAIN_3_FC       SECTION DATA
0728              5923   _sf_header      LABEL   WORD
0728 00000000     5924           DW      00h,00h,065h,0Ch
072C 65000C00    
0730 8A3BEB02     5925           DW      03B8Ah,02EBh
0734 2F0EFF7F     5926           DW      0E2Fh,07FFFh
                  5927   ; main.c   1729 static const INPUTDIA_HDNL sf_hndl = { 
0738              5928   _sf_hndl        LABEL   WORD
0738 01000000     5929           DW      01h,00h
073C 00000000     5930           DW      00h,00h
0740 00000000  R  5931           DSPTR   _sf_OnKey
0744 00000000     5932           DW      00h,00h
0748 00000000     5933           DW      00h,00h,03BFCh,02EBh
074C FC3BEB02    
0750 00001000     5934           DW      00h,010h,065h,040h,03h
0754 65004000    
0758 0300        
075A 02000000     5935           DW      02h,00h,00h,00h,00h
075E 00000000    
0762 0000        
0764 00000000     5936           DW      00h,00h
                  5937   ; main.c   1730  1, 0,
                  5938   ; main.c   1731  NULL, //InputDiaOn2, //OnKeyUp????
                  5939   ; main.c   1732  sf_OnKey,
                  5940   ; main.c   1733  NULL,
                  5941   ; main.c   1734  NULL,
                  5942   ; main.c   1735  (char far*)0xBAFBFC,
                  5943   ; main.c   1736  0, 16, 101, 64,
                  5944   ; main.c   1737  3, //Шрифт
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 113
main

 LOC CODE        LINE   SOURCELINE

                  5945   ; main.c   1738  2, //Количество строк
                  5946   ; main.c   1739  0, 0, 0, 0, 0, 0
                  5947   ; main.c   1740 };
                  5948   ; main.c   1741 
                  5949   ; main.c   1742 void CreateSaveAsDialog(void)
                  5950   ; main.c   1743 {
                  5951           PUBLIC  _CreateSaveAsDialog
                  5952   MAIN_3_FC       ENDS
                  5953   
                  5954   MAIN_2_PR       SECTION CODE
                  5955   _CreateSaveAsDialog     PROC    FAR
2156 8890         5956           MOV     [-R0],R9
2158 8880         5957           MOV     [-R0],R8
215A 26F01E01     5958           SUB     R0,#011Eh
                  5959   ; Locals:
                  5960   ;     ws_hdr1 = offset 0
                  5961   ;     data = offset 8
                  5962   ;     wstr = offset 30
                  5963   ; 
                  5964   ; Statics:
                  5965   ; 
                  5966   ; CSEs:
                  5967   ;     ws_hdr2 = R8R9
                  5968   ; 
                  5969   ; main.c   1744  unsigned int wstr[128];
                  5970   ; main.c   1745  WS_HDR ws_hdr1;
                  5971   ; main.c   1746  INPUT_DATA data;
                  5972   ; main.c   1747  WS_HDR far* ws_hdr2;
                  5973   ; main.c   1748  ClearWideString(&ws_hdr1,(unsigned int far*)&wstr,128);
215E E6FC8000     5974           MOV     R12,#080h
2162 88C0         5975           MOV     [-R0],R12
2164 E02C         5976           MOV     R12,#02h
2166 00C0         5977           ADD     R12,R0
2168 66FCFF3F     5978           AND     R12,#03FFFh
216C F2FD02FE     5979           MOV     R13,DPP1
2170 E6FE2000     5980           MOV     R14,#020h
2174 00E0         5981           ADD     R14,R0
2176 66FEFF3F     5982           AND     R14,#03FFFh
217A F2FF02FE     5983           MOV     R15,DPP1
217E DA000000  R  5984           CALLS   SEG _ClearWideString,_ClearWideString
2182 0802         5985           ADD     R0,#02h
                  5986   ; main.c   1749  CutWSTR(&ws_hdr1,0);
2184 F0C0         5987           MOV     R12,R0
2186 66FCFF3F     5988           AND     R12,#03FFFh
218A F2FD02FE     5989           MOV     R13,DPP1
218E E00E         5990           MOV     R14,#00h
2190 DA000000  R  5991           CALLS   SEG _CutWSTR,_CutWSTR
                  5992   ; main.c   1750  ws_hdr2=AllocWSTR(128+11,MMIMalloc);
2194 E6FC8B00     5993           MOV     R12,#08Bh
2198 E6FD0000  R  5994           MOV     R13,#SOF _MMIMalloc
219C E6FE0000  R  5995           MOV     R14,#SEG _MMIMalloc
21A0 DA000000  R  5996           CALLS   SEG _AllocWSTR,_AllocWSTR
21A4 F084         5997           MOV     R8,R4
21A6 F095         5998           MOV     R9,R5
                  5999   ; main.c   1751  CutWSTR(ws_hdr2,0);
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 114
main

 LOC CODE        LINE   SOURCELINE

21A8 F0C8         6000           MOV     R12,R8
21AA F0D9         6001           MOV     R13,R9
21AC E00E         6002           MOV     R14,#00h
21AE DA000000  R  6003           CALLS   SEG _CutWSTR,_CutWSTR
                  6004   ; main.c   1752  ClearInputData(&data);
21B2 E08C         6005           MOV     R12,#08h
21B4 00C0         6006           ADD     R12,R0
21B6 66FCFF3F     6007           AND     R12,#03FFFh
21BA F2FD02FE     6008           MOV     R13,DPP1
21BE DA000000  R  6009           CALLS   SEG _ClearInputData,_ClearInputData
                  6010   ; main.c   1753  SetInputData(&data,&ws_hdr1,127);
21C2 E6FC7F00     6011           MOV     R12,#07Fh
21C6 88C0         6012           MOV     [-R0],R12
21C8 E0AC         6013           MOV     R12,#0Ah
21CA 00C0         6014           ADD     R12,R0
21CC 66FCFF3F     6015           AND     R12,#03FFFh
21D0 F2FD02FE     6016           MOV     R13,DPP1
21D4 E02E         6017           MOV     R14,#02h
21D6 00E0         6018           ADD     R14,R0
21D8 66FEFF3F     6019           AND     R14,#03FFFh
21DC F2FF02FE     6020           MOV     R15,DPP1
21E0 DA000000  R  6021           CALLS   SEG _SetInputData,_SetInputData
21E4 0802         6022           ADD     R0,#02h
                  6023   ; main.c   1754  SetInputType(&data,3);
21E6 E08C         6024           MOV     R12,#08h
21E8 00C0         6025           ADD     R12,R0
21EA 66FCFF3F     6026           AND     R12,#03FFFh
21EE F2FD02FE     6027           MOV     R13,DPP1
21F2 E03E         6028           MOV     R14,#03h
21F4 DA000000  R  6029           CALLS   SEG _SetInputType,_SetInputType
                  6030   ; main.c   1755  AsciizToWSTR(&ws_hdr1,filename);
21F8 F0C0         6031           MOV     R12,R0
21FA 66FCFF3F     6032           AND     R12,#03FFFh
21FE F2FD02FE     6033           MOV     R13,DPP1
2202 E6FE0000  R  6034           MOV     R14,#POF _filename
2206 E6FF0000  R  6035           MOV     R15,#PAG _filename
220A DA000000  R  6036           CALLS   SEG _AsciizToWSTR,_AsciizToWSTR
                  6037   ; main.c   1756  AddInputToWSTR(ws_hdr2,&data);
220E F0C8         6038           MOV     R12,R8
2210 F0D9         6039           MOV     R13,R9
2212 E08E         6040           MOV     R14,#08h
2214 00E0         6041           ADD     R14,R0
2216 66FEFF3F     6042           AND     R14,#03FFFh
221A F2FF02FE     6043           MOV     R15,DPP1
221E DA000000  R  6044           CALLS   SEG _AddInputToWSTR,_AddInputToWSTR
                  6045   ; main.c   1757  CreateInputTextDialog((INPUTDIA_HDNL far*)&sf_hndl, (DIALOG_HEADER far*)&sf_header, ws_hdr
                         2, 1);
2222 E01C         6046           MOV     R12,#01h
2224 88C0         6047           MOV     [-R0],R12
2226 8890         6048           MOV     [-R0],R9
2228 8880         6049           MOV     [-R0],R8
222A E6FC0000  R  6050           MOV     R12,#POF _sf_hndl
222E E6FD0000  R  6051           MOV     R13,#PAG _sf_hndl
2232 E6FE0000  R  6052           MOV     R14,#POF _sf_header
2236 E6FF0000  R  6053           MOV     R15,#PAG _sf_header
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 115
main

 LOC CODE        LINE   SOURCELINE

223A DA000000  R  6054           CALLS   SEG _CreateInputTextDialog,_CreateInputTextDialog
223E 06F02401     6055           ADD     R0,#0124h
                  6056   ; main.c   1758 }
2242 9880         6057           MOV     R8,[R0+]
2244 9890         6058           MOV     R9,[R0+]
2246 DB00         6059           RETS
                  6060   _CreateSaveAsDialog     ENDP
                  6061   ; main.c   1759 
                  6062   ; main.c   1760 static const STR loadmenu_ExtendedSTR[]=
                  6063   MAIN_2_PR       ENDS
                  6064   
                  6065   MAIN_3_FC       SECTION DATA
0768              6066   _loadmenu_ExtendedSTR   LABEL   WORD
0768 00000000  R  6067           DPPTR   _671,_672,_673,_674,_675
076C 00000000  R 
0770 00000000  R 
0774 00000000  R 
0778 00000000    
077C 00000000  R  6068           DPPTR   _676,_677,_678,_679
0780 00000000  R 
0784 00000000  R 
0788 00000000    
                  6069   ; main.c   1761 {
                  6070   ; main.c   1762  "Load options",
                  6071   ; main.c   1763  "Font size=4",
                  6072   ; main.c   1764  "Font size=6",
                  6073   ; main.c   1765  "Font size=8",
                  6074   ; main.c   1766  "Direct load",
                  6075   ; main.c   1767  "Load & Format",
                  6076   ; main.c   1768  "EOL->EOL SPC",
                  6077   ; main.c   1769  "Extend lines",
                  6078   ; main.c   1770  "Save as..."
                  6079   ; main.c   1771 };
                  6080   ; main.c   1772 
                  6081   ; main.c   1773 static const struct ITEMSDATA far loadmenu_ITEMS[]=
078C              6082   _loadmenu_ITEMS LABEL   WORD
078C 223CEB02     6083           DW      03C22h,02EBh
0790 280E280E     6084           DW      0E28h,0E28h,00h
0794 0000        
0796 00000000     6085           DW      00h,00h
079A 03003A05     6086           DW      03h,053Ah
079E 223CEB02     6087           DW      03C22h,02EBh
07A2 290E290E     6088           DW      0E29h,0E29h,00h
07A6 0000        
07A8 00000000     6089           DW      00h,00h
07AC 03003A05     6090           DW      03h,053Ah
07B0 223CEB02     6091           DW      03C22h,02EBh
07B4 2A0E2A0E     6092           DW      0E2Ah,0E2Ah,00h
07B8 0000        
07BA 00000000     6093           DW      00h,00h
07BE 03003A05     6094           DW      03h,053Ah
07C2 223CEB02     6095           DW      03C22h,02EBh
07C6 2B0E2B0E     6096           DW      0E2Bh,0E2Bh,00h
07CA 0000        
07CC 00000000     6097           DW      00h,00h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 116
main

 LOC CODE        LINE   SOURCELINE

07D0 03003A05     6098           DW      03h,053Ah
07D4 223CEB02     6099           DW      03C22h,02EBh
07D8 2C0E2C0E     6100           DW      0E2Ch,0E2Ch,00h
07DC 0000        
07DE 00000000     6101           DW      00h,00h
07E2 03003A05     6102           DW      03h,053Ah
07E6 223CEB02     6103           DW      03C22h,02EBh
07EA 2D0E2D0E     6104           DW      0E2Dh,0E2Dh,00h
07EE 0000        
07F0 00000000     6105           DW      00h,00h
07F4 03003A05     6106           DW      03h,053Ah
07F8 223CEB02     6107           DW      03C22h,02EBh
07FC 2E0E2E0E     6108           DW      0E2Eh,0E2Eh,00h
0800 0000        
0802 00000000     6109           DW      00h,00h
0806 03003A05     6110           DW      03h,053Ah
080A 223CEB02     6111           DW      03C22h,02EBh
080E 2F0E2F0E     6112           DW      0E2Fh,0E2Fh,00h
0812 0000        
0814 00000000     6113           DW      00h,00h
0818 03003A05     6114           DW      03h,053Ah
                  6115   ; main.c   1774 {//0xB867CE
                  6116   ; main.c   1775  (char far*)0xBAFC22, 0xE28,0xE28, 0,NULL,3,0x53A,
                  6117   ; main.c   1776  (char far*)0xBAFC22, 0xE29,0xE29, 0,NULL,3,0x53A,
                  6118   ; main.c   1777  (char far*)0xBAFC22, 0xE2A,0xE2A, 0,NULL,3,0x53A,
                  6119   ; main.c   1778  (char far*)0xBAFC22, 0xE2B,0xE2B, 0,NULL,3,0x53A,
                  6120   ; main.c   1779  (char far*)0xBAFC22, 0xE2C,0xE2C, 0,NULL,3,0x53A,
                  6121   ; main.c   1780  (char far*)0xBAFC22, 0xE2D,0xE2D, 0,NULL,3,0x53A,
                  6122   ; main.c   1781  (char far*)0xBAFC22, 0xE2E,0xE2E, 0,NULL,3,0x53A,
                  6123   ; main.c   1782  (char far*)0xBAFC22, 0xE2F,0xE2F, 0,NULL,3,0x53A
                  6124   ; main.c   1783 };
                  6125   ; main.c   1784 
                  6126   ; main.c   1785 
                  6127   ; main.c   1786 void loadfont(int flag)
                  6128   ; main.c   1787 {
                  6129           PUBLIC  _loadfont
                  6130   MAIN_3_FC       ENDS
                  6131   
                  6132   MAIN_2_PR       SECTION CODE
                  6133   _loadfont       PROC    FAR
2248 8890         6134           MOV     [-R0],R9
224A 8880         6135           MOV     [-R0],R8
224C 26F02000     6136           SUB     R0,#020h
                  6137   ; Locals:
                  6138   ;     fn_font = offset 0
                  6139   ; 
                  6140   ; Statics:
                  6141   ; 
                  6142   ; CSEs:
                  6143   ;     fin = R8
                  6144   ;     flag = R9
                  6145   ; 
                  6146   ; main.c   1788  char fn_font[32];
                  6147   ; main.c   1789  int fin;
                  6148   ; main.c   1790  xsprintf(fn_font,(STR)fntfilename,font_size);
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 117
main

 LOC CODE        LINE   SOURCELINE

2250 E6000000  R  6149           MOV     DPP0,#PAG _font_size
2254 F09C         6150           MOV     R9,R12
2256 C2FC0000  R  6151           MOVBZ   R12,POF _font_size
225A 88C0         6152           MOV     [-R0],R12
225C E02C         6153           MOV     R12,#02h
225E 00C0         6154           ADD     R12,R0
2260 66FCFF3F     6155           AND     R12,#03FFFh
2264 F2FD02FE     6156           MOV     R13,DPP1
2268 E6FE0000  R  6157           MOV     R14,#POF _fntfilename
226C E6FF0000  R  6158           MOV     R15,#PAG _fntfilename
2270 DA000000  R  6159           CALLS   SEG _xsprintf,_xsprintf
2274 0802         6160           ADD     R0,#02h
                  6161   ; main.c   1791  if ((fin=FileOpen(fn_font,_O_RDONLY+_O_BINARY,0))!=-1)
2276 F0C0         6162           MOV     R12,R0
2278 66FCFF3F     6163           AND     R12,#03FFFh
227C F2FD02FE     6164           MOV     R13,DPP1
2280 E6FE0080     6165           MOV     R14,#08000h
2284 E00F         6166           MOV     R15,#00h
2286 DA000000  R  6167           CALLS   SEG _FileOpen,_FileOpen
228A F084         6168           MOV     R8,R4
228C 46F8FFFF     6169           CMP     R8,#0FFFFh
2290 2D0C         6170           JMPR    cc_EQ,_680
                  6171   ; main.c   1792  {
                  6172   ; main.c   1793   FileRead(fin,font,sizeof(font));
2292 F0C8         6173           MOV     R12,R8
2294 E6FD0000  R  6174           MOV     R13,#POF _font
2298 E6FE0000  R  6175           MOV     R14,#PAG _font
229C E6FF0008     6176           MOV     R15,#0800h
22A0 DA000000  R  6177           CALLS   SEG _FileRead,_FileRead
                  6178   ; main.c   1794   FileClose(fin);
22A4 F0C8         6179           MOV     R12,R8
22A6 DA000000  R  6180           CALLS   SEG _FileClose,_FileClose
                  6181   ; main.c   1795  }
22AA              6182   _680:
                  6183   ; main.c   1796  max_x=96/font_size;
22AA E6000000  R  6184           MOV     DPP0,#PAG _font_size
22AE CC00         6185           NOP
22B0 C2F80000  R  6186           MOVBZ   R8,POF _font_size
22B4 E6076000     6187           MOV     MDL,#060h
22B8 4B88         6188           DIV     R8
22BA F6070000  R  6189           MOV     POF _max_x,MDL
22BE F2FC0EFE     6190           MOV     R12,MDL
                  6191   ; main.c   1797  max_y=80/8;
22C2 E0A8         6192           MOV     R8,#0Ah
22C4 F6F80000  R  6193           MOV     POF _max_y,R8
                  6194   ; main.c   1798  if(flag)
22C8 4890         6195           CMP     R9,#00h
22CA 2D11         6196           JMPR    cc_Z,_682
                  6197   ; main.c   1799  {
                  6198   ; main.c   1800   disk_access=0;
22CC F78E0000  R  6199           MOVB    POF _disk_access,ZEROS
                  6200   ; main.c   1801   draw_mode=1;
22D0 E112         6201           MOVB    RL1,#01h
22D2 F7F20000  R  6202           MOVB    POF _draw_mode,RL1
                  6203   ; main.c   1802   if (!terminated) SendMessage((void far *)0x3B5E8,0xF8,dia_id); //Перерисовываем
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 118
main

 LOC CODE        LINE   SOURCELINE

22D6 F2F90000  R  6204           MOV     R9,POF _terminated
22DA 3D09         6205           JMPR    cc_NZ,_682
22DC E6FCE835     6206           MOV     R12,#035E8h
22E0 E0ED         6207           MOV     R13,#0Eh
22E2 E6FEF800     6208           MOV     R14,#0F8h
22E6 F2FF0000  R  6209           MOV     R15,POF _dia_id
22EA DA000000  R  6210           CALLS   SEG _SendMessage,_SendMessage
                  6211   ; main.c   1803  }
22EE              6212   _682:
                  6213   ; main.c   1804 }
22EE 06F02000     6214           ADD     R0,#020h
22F2 9880         6215           MOV     R8,[R0+]
22F4 9890         6216           MOV     R9,[R0+]
22F6 DB00         6217           RETS
                  6218   _loadfont       ENDP
                  6219   ; main.c   1805 
                  6220   ; main.c   1806 void setfont(char sz)
                  6221   ; main.c   1807 {
                  6222           PUBLIC  _setfont
                  6223   _setfont        PROC    FAR
                  6224   ; Locals:
                  6225   ; 
                  6226   ; Statics:
                  6227   ; 
                  6228   ; CSEs:
                  6229   ;     sz = R12
                  6230   ; 
                  6231   ; main.c   1808  font_size=sz;
22F8 E6000000  R  6232           MOV     DPP0,#PAG _font_size
22FC F01C         6233           MOV     R1,R12
22FE F7F20000  R  6234           MOVB    POF _font_size,RL1
                  6235   ; main.c   1809  if (disk_access==FIRSTLOAD) //Пришли из первой загрузки
2302 F3F20000  R  6236           MOVB    RL1,POF _disk_access
2306 4921         6237           CMPB    RL1,#01h
2308 3D08         6238           JMPR    cc_NE,_683
                  6239   ; main.c   1810  {
                  6240   ; main.c   1811   disable_exit=1;
230A E114         6241           MOVB    RL2,#01h
230C F7F40000  R  6242           MOVB    POF _disable_exit,RL2
                  6243   ; main.c   1812   DisplayMessageBoxV(1,0x55A);
2310 E01C         6244           MOV     R12,#01h
2312 E6FD5A05     6245           MOV     R13,#055Ah
2316 FA000000  R  6246           JMPS    SEG _DisplayMessageBoxV,_DisplayMessageBoxV
                  6247   ; main.c   1813   return;
                  6248           RETV
                  6249   ; main.c   1814  }
231A              6250   _683:
                  6251   ; main.c   1815  disk_access=FIRSTLOAD;
231A E6000000  R  6252           MOV     DPP0,#PAG _disk_access
231E E112         6253           MOVB    RL1,#01h
2320 F7F20000  R  6254           MOVB    POF _disk_access,RL1
                  6255   ; main.c   1816  draw_mode=255; //Экран приветствия
2324 F78F0000  R  6256           MOVB    POF _draw_mode,ONES
                  6257   ; main.c   1817  FilesysICall_I(loadfont,1);
2328 E6FC0000  R  6258           MOV     R12,#SOF _loadfont
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 119
main

 LOC CODE        LINE   SOURCELINE

232C E6FD0000  R  6259           MOV     R13,#SEG _loadfont
2330 E01E         6260           MOV     R14,#01h
2332 DA000000  R  6261           CALLS   SEG _FilesysICall_I,_FilesysICall_I
                  6262   ; main.c   1818  GeneralFunc(1);
2336 E01C         6263           MOV     R12,#01h
2338 DA000000  R  6264           CALLS   SEG _GeneralFunc,_GeneralFunc
                  6265   ; main.c   1819 }
233C              6266   _684:
233C DB00         6267           RETS
                  6268   _setfont        ENDP
                  6269   ; main.c   1820 
                  6270   ; main.c   1821 void load_setfont4(void){setfont(4);}
                  6271           PUBLIC  _load_setfont4
                  6272   _load_setfont4  PROC    FAR
                  6273   ; Locals:
                  6274   ; 
                  6275   ; Statics:
                  6276   ; 
                  6277   ; CSEs:
                  6278   ; 
233E E04C         6279           MOV     R12,#04h
2340 FA00F822  R  6280           JMPS    SEG _setfont,_setfont
                  6281           RETV
                  6282   _load_setfont4  ENDP
                  6283   ; main.c   1822 void load_setfont6(void){setfont(6);}
                  6284           PUBLIC  _load_setfont6
                  6285   _load_setfont6  PROC    FAR
                  6286   ; Locals:
                  6287   ; 
                  6288   ; Statics:
                  6289   ; 
                  6290   ; CSEs:
                  6291   ; 
2344 E06C         6292           MOV     R12,#06h
2346 FA00F822  R  6293           JMPS    SEG _setfont,_setfont
                  6294           RETV
                  6295   _load_setfont6  ENDP
                  6296   ; main.c   1823 void load_setfont8(void){setfont(8);}
                  6297           PUBLIC  _load_setfont8
                  6298   _load_setfont8  PROC    FAR
                  6299   ; Locals:
                  6300   ; 
                  6301   ; Statics:
                  6302   ; 
                  6303   ; CSEs:
                  6304   ; 
234A E08C         6305           MOV     R12,#08h
234C FA00F822  R  6306           JMPS    SEG _setfont,_setfont
                  6307           RETV
                  6308   _load_setfont8  ENDP
                  6309   ; main.c   1824 
                  6310   ; main.c   1825 void FirstLoadFile(unsigned int fmt);
                  6311   ; main.c   1826 
                  6312   ; main.c   1827 void load_direct(void)
                  6313   ; main.c   1828 {
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 120
main

 LOC CODE        LINE   SOURCELINE

                  6314           PUBLIC  _load_direct
                  6315   _load_direct    PROC    FAR
                  6316   ; Locals:
                  6317   ; 
                  6318   ; Statics:
                  6319   ; 
                  6320   ; CSEs:
                  6321   ; 
                  6322   ; main.c   1829  draw_mode=255;
2350 E6000000  R  6323           MOV     DPP0,#PAG _draw_mode
2354 E112         6324           MOVB    RL1,#01h
2356 F78F0000  R  6325           MOVB    POF _draw_mode,ONES
                  6326   ; main.c   1830  disk_access=FIRSTLOAD;
235A F7F20000  R  6327           MOVB    POF _disk_access,RL1
                  6328   ; main.c   1831  HISTORY.fmt=0;
235E E6000000  R  6329           MOV     DPP0,#PAG _HISTORY
2362 E01C         6330           MOV     R12,#01h
2364 F78E0000  R  6331           MOVB    POF (_HISTORY+129),ZEROS
                  6332   ; main.c   1832  GeneralFunc(1);
2368 DA000000  R  6333           CALLS   SEG _GeneralFunc,_GeneralFunc
                  6334   ; main.c   1833  FilesysICall_UI(FirstLoadFile,0);
236C E6FC0000  R  6335           MOV     R12,#SOF _FirstLoadFile
2370 E6FD0000  R  6336           MOV     R13,#SEG _FirstLoadFile
2374 E00E         6337           MOV     R14,#00h
2376 FA000000  R  6338           JMPS    SEG _FilesysICall_UI,_FilesysICall_UI
                  6339   ; main.c   1834 }
                  6340           RETV
                  6341   _load_direct    ENDP
                  6342   ; main.c   1835 
                  6343   ; main.c   1836 void load_format(void)
                  6344   ; main.c   1837 {
                  6345           PUBLIC  _load_format
                  6346   _load_format    PROC    FAR
                  6347   ; Locals:
                  6348   ; 
                  6349   ; Statics:
                  6350   ; 
                  6351   ; CSEs:
                  6352   ; 
                  6353   ; main.c   1838  draw_mode=255;
237A E6000000  R  6354           MOV     DPP0,#PAG _draw_mode
237E E112         6355           MOVB    RL1,#01h
2380 F78F0000  R  6356           MOVB    POF _draw_mode,ONES
                  6357   ; main.c   1839  disk_access=FIRSTLOAD;
2384 F7F20000  R  6358           MOVB    POF _disk_access,RL1
                  6359   ; main.c   1840  HISTORY.fmt=1;
2388 E6000000  R  6360           MOV     DPP0,#PAG _HISTORY
238C E01C         6361           MOV     R12,#01h
238E F7F20000  R  6362           MOVB    POF (_HISTORY+129),RL1
                  6363   ; main.c   1841  GeneralFunc(1);
2392 DA000000  R  6364           CALLS   SEG _GeneralFunc,_GeneralFunc
                  6365   ; main.c   1842  FilesysICall_UI(FirstLoadFile,1);
2396 E6FC0000  R  6366           MOV     R12,#SOF _FirstLoadFile
239A E6FD0000  R  6367           MOV     R13,#SEG _FirstLoadFile
239E E01E         6368           MOV     R14,#01h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 121
main

 LOC CODE        LINE   SOURCELINE

23A0 FA000000  R  6369           JMPS    SEG _FilesysICall_UI,_FilesysICall_UI
                  6370   ; main.c   1843 }
                  6371           RETV
                  6372   _load_format    ENDP
                  6373   ; main.c   1844 
                  6374   ; main.c   1845 void load_eolspc(void)
                  6375   ; main.c   1846 {
                  6376           PUBLIC  _load_eolspc
                  6377   _load_eolspc    PROC    FAR
                  6378   ; Locals:
                  6379   ; 
                  6380   ; Statics:
                  6381   ; 
                  6382   ; CSEs:
                  6383   ; 
                  6384   ; main.c   1847  draw_mode=255;
23A4 E6000000  R  6385           MOV     DPP0,#PAG _draw_mode
23A8 E112         6386           MOVB    RL1,#01h
23AA F78F0000  R  6387           MOVB    POF _draw_mode,ONES
                  6388   ; main.c   1848  disk_access=FIRSTLOAD;
23AE F7F20000  R  6389           MOVB    POF _disk_access,RL1
                  6390   ; main.c   1849  HISTORY.fmt=2;
23B2 E6000000  R  6391           MOV     DPP0,#PAG _HISTORY
23B6 E124         6392           MOVB    RL2,#02h
23B8 F7F40000  R  6393           MOVB    POF (_HISTORY+129),RL2
                  6394   ; main.c   1850  GeneralFunc(1);
23BC E01C         6395           MOV     R12,#01h
23BE DA000000  R  6396           CALLS   SEG _GeneralFunc,_GeneralFunc
                  6397   ; main.c   1851  FilesysICall_UI(FirstLoadFile,2);
23C2 E6FC0000  R  6398           MOV     R12,#SOF _FirstLoadFile
23C6 E6FD0000  R  6399           MOV     R13,#SEG _FirstLoadFile
23CA E02E         6400           MOV     R14,#02h
23CC FA000000  R  6401           JMPS    SEG _FilesysICall_UI,_FilesysICall_UI
                  6402   ; main.c   1852 }
                  6403           RETV
                  6404   _load_eolspc    ENDP
                  6405   ; main.c   1853 
                  6406   ; main.c   1854 void load_pad(void)
                  6407   ; main.c   1855 {
                  6408           PUBLIC  _load_pad
                  6409   _load_pad       PROC    FAR
                  6410   ; Locals:
                  6411   ; 
                  6412   ; Statics:
                  6413   ; 
                  6414   ; CSEs:
                  6415   ; 
                  6416   ; main.c   1856  HISTORY.fmt^=0x80;
23D0 E6000000  R  6417           MOV     DPP0,#PAG _HISTORY
23D4 E01C         6418           MOV     R12,#01h
23D6 F3F20000  R  6419           MOVB    RL1,POF (_HISTORY+129)
23DA 57F28000     6420           XORB    RL1,#080h
23DE F7F20000  R  6421           MOVB    POF (_HISTORY+129),RL1
                  6422   ; main.c   1857  GeneralFunc(1);
23E2 FA000000  R  6423           JMPS    SEG _GeneralFunc,_GeneralFunc
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 122
main

 LOC CODE        LINE   SOURCELINE

                  6424   ; main.c   1858 }
                  6425           RETV
                  6426   _load_pad       ENDP
                  6427   ; main.c   1859 
                  6428   ; main.c   1860 void loadmenu_ITEMPROC(char far* Unk1, int Curr, int Unk2)
                  6429   ; main.c   1861 {
                  6430           PUBLIC  _loadmenu_ITEMPROC
                  6431   _loadmenu_ITEMPROC      PROC    FAR
                  6432   MAIN_2_PR       ENDS
                  6433   
                  6434   MAIN_7_CO       SECTION DATA WORD PUBLIC 'CROM'
0000              6435   __swtable739    LABEL   WORD
0000 0000      R  6436           DW      SOF _715
0002 0000      R  6437           DW      SOF _716
0004 0000      R  6438           DW      SOF _717
0006 0000      R  6439           DW      SOF _718
0008 0000      R  6440           DW      SOF _719
000A 0000      R  6441           DW      SOF _720
000C 0000      R  6442           DW      SOF _726
000E 0000      R  6443           DW      SOF _734
                  6444   MAIN_7_CO       ENDS
                  6445   
                  6446   MAIN_2_PR       SECTION CODE
                  6447   ; Locals:
                  6448   ; 
                  6449   ; Statics:
                  6450   ; 
                  6451   ; CSEs:
                  6452   ;     i = R1
                  6453   ;     Curr = R14
                  6454   ;     Unk1 = R12R13
                  6455   ;     Unk2 = R15
                  6456   ; 
                  6457   ; main.c   1862  int i=0;
23E6 E001         6458           MOV     R1,#00h
                  6459   ; main.c   1863  switch(Curr)
23E8 F02E         6460           MOV     R2,R14
23EA 4827         6461           CMP     R2,#07h
23EC EAE08624  R  6462           JMPA    cc_UGT,_738
23F0 5C12         6463           SHL     R2,#01h
23F2 06F20000  R  6464           ADD     R2,#POF __swtable739
23F6 D7400000  R  6465           EXTP    #PAG __swtable739,#01h
23FA A822     1   6466           MOV     R2,[R2]
23FC 9C02         6467           JMPI    cc_UC,[R2]
                  6468   ; main.c   1864  {
                  6469   ; main.c   1865   case 0: if (font_size==4) i=1; else i=0; break;
23FE              6470   _715:
23FE E6000000  R  6471           MOV     DPP0,#PAG _font_size
2402 CC00         6472           NOP
2404 F3F20000  R  6473           MOVB    RL1,POF _font_size
2408 4924         6474           CMPB    RL1,#04h
240A 3D2F         6475           JMPR    cc_NE,_725
240C EA007C24  R  6476           JMPA    cc_UC,_732
                  6477   ; main.c   1866   case 1: if (font_size==6) i=1; else i=0; break;
2410              6478   _716:
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 123
main

 LOC CODE        LINE   SOURCELINE

2410 E6000000  R  6479           MOV     DPP0,#PAG _font_size
2414 CC00         6480           NOP
2416 F3F20000  R  6481           MOVB    RL1,POF _font_size
241A 4926         6482           CMPB    RL1,#06h
241C 3D26         6483           JMPR    cc_NE,_725
241E 0D2E         6484           JMPR    cc_UC,_732
                  6485   ; main.c   1867   case 2: if (font_size==8) i=1; else i=0; break;
2420              6486   _717:
2420 E6000000  R  6487           MOV     DPP0,#PAG _font_size
2424 CC00         6488           NOP
2426 F3F20000  R  6489           MOVB    RL1,POF _font_size
242A 47F20800     6490           CMPB    RL1,#08h
242E 3D1D         6491           JMPR    cc_NE,_725
2430 0D25         6492           JMPR    cc_UC,_732
                  6493   ; main.c   1868   case 3: if ((HISTORY.fmt&0x7F)==0) i=1; else i=0; break;
2432              6494   _718:
2432 E6000000  R  6495           MOV     DPP0,#PAG _HISTORY
2436 CC00         6496           NOP
2438 F3F20000  R  6497           MOVB    RL1,POF (_HISTORY+129)
243C 66F17F00     6498           AND     R1,#07Fh
2440 3D14         6499           JMPR    cc_NZ,_725
2442 0D1C         6500           JMPR    cc_UC,_732
                  6501   ; main.c   1869   case 4: if ((HISTORY.fmt&0x7F)==1) i=1; else i=0; break;
2444              6502   _719:
2444 E6000000  R  6503           MOV     DPP0,#PAG _HISTORY
2448 CC00         6504           NOP
244A F3F20000  R  6505           MOVB    RL1,POF (_HISTORY+129)
244E 66F17F00     6506           AND     R1,#07Fh
2452 4811         6507           CMP     R1,#01h
2454 3D0A         6508           JMPR    cc_NE,_725
2456 0D12         6509           JMPR    cc_UC,_732
                  6510   ; main.c   1870   case 5: if ((HISTORY.fmt&0x7F)==2) i=1; else i=0; break;
2458              6511   _720:
2458 E6000000  R  6512           MOV     DPP0,#PAG _HISTORY
245C CC00         6513           NOP
245E F3F20000  R  6514           MOVB    RL1,POF (_HISTORY+129)
2462 66F17F00     6515           AND     R1,#07Fh
2466 4812         6516           CMP     R1,#02h
2468 2D09         6517           JMPR    cc_EQ,_732
246A              6518   _725:
246A E001         6519           MOV     R1,#00h
246C 0D0C         6520           JMPR    cc_UC,_738
                  6521   ; main.c   1871   case 6: if (!(HISTORY.fmt&0x80)) i=1; else i=2; break;
246E              6522   _726:
246E E6000000  R  6523           MOV     DPP0,#PAG _HISTORY
2472 CC00         6524           NOP
2474 F3F20000  R  6525           MOVB    RL1,POF (_HISTORY+129)
2478 8AF10270     6526           JB      R1.7,_733
247C              6527   _732:
247C E011         6528           MOV     R1,#01h
247E 0D03         6529           JMPR    cc_UC,_738
2480              6530   _733:
2480 E021         6531           MOV     R1,#02h
2482 0D01         6532           JMPR    cc_UC,_738
                  6533   ; main.c   1872   case 7: i=4; break;
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 124
main

 LOC CODE        LINE   SOURCELINE

2484              6534   _734:
2484 E041         6535           MOV     R1,#04h
                  6536   ; main.c   1873  }
2486              6537   _738:
                  6538   ; main.c   1874  SetMenuItemIcon(Unk1,Curr,Unk2,i);
2486 F011         6539           MOV     R1,R1
2488 8810         6540           MOV     [-R0],R1
248A DA000000  R  6541           CALLS   SEG _SetMenuItemIcon,_SetMenuItemIcon
248E 0802         6542           ADD     R0,#02h
                  6543   ; main.c   1875 }
2490 DB00         6544           RETS
                  6545   _loadmenu_ITEMPROC      ENDP
                  6546   ; main.c   1876 
                  6547   ; main.c   1877 void load_save(void)
                  6548   ; main.c   1878 {
                  6549           PUBLIC  _load_save
                  6550   _load_save      PROC    FAR
                  6551   ; Locals:
                  6552   ; 
                  6553   ; Statics:
                  6554   ; 
                  6555   ; CSEs:
                  6556   ; 
                  6557   ; main.c   1879  GeneralFunc(1);
2492 E01C         6558           MOV     R12,#01h
2494 DA000000  R  6559           CALLS   SEG _GeneralFunc,_GeneralFunc
                  6560   ; main.c   1880  CreateSaveAsDialog();
2498 FA005621  R  6561           JMPS    SEG _CreateSaveAsDialog,_CreateSaveAsDialog
                  6562   ; main.c   1881 }
                  6563           RETV
                  6564   _load_save      ENDP
                  6565   ; main.c   1882 
                  6566   ; main.c   1883 static const struct ITEMSHNDL far loadmenu_HNDLS[]=
                  6567   MAIN_2_PR       ENDS
                  6568   
                  6569   MAIN_3_FC       SECTION DATA
081C              6570   _loadmenu_HNDLS LABEL   WORD
081C 00000000  R  6571           DSPTR   _load_setfont4,_load_setfont6,_load_setfont8,_load_direct,_load_format
0820 00000000  R 
0824 00000000  R 
0828 00000000  R 
082C 00000000    
0830 00000000  R  6572           DSPTR   _load_eolspc,_load_pad,_load_save
0834 00000000  R 
0838 00000000    
                  6573   ; main.c   1884 {
                  6574   ; main.c   1885  load_setfont4,
                  6575   ; main.c   1886  load_setfont6,
                  6576   ; main.c   1887  load_setfont8,
                  6577   ; main.c   1888  load_direct,
                  6578   ; main.c   1889  load_format,
                  6579   ; main.c   1890  load_eolspc,
                  6580   ; main.c   1891  load_pad,
                  6581   ; main.c   1892  load_save
                  6582   ; main.c   1893 };
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 125
main

 LOC CODE        LINE   SOURCELINE

                  6583   ; main.c   1894 
                  6584   ; main.c   1895 static const struct MENUHEADER far loadmenu_HDR=
083C              6585   _loadmenu_HDR   LABEL   WORD
083C 00000000     6586           DW      00h,00h,065h,0Ch
0840 65000C00    
0844 B00DE202     6587           DW      0DB0h,02E2h
0848 270EFF7F     6588           DW      0E27h,07FFFh
                  6589   ; main.c   1896 {
                  6590   ; main.c   1897  0x00,0x00,0x65,0x0C,(char far*)0xB88DB0,0xE27,0x7FFF 
                  6591   ; main.c   1898 };
                  6592   ; main.c   1899 
                  6593   ; main.c   1900 static const struct MENUSTRUCT far loadmenu_STRUCT=
084C              6594   _loadmenu_STRUCT        LABEL   WORD
084C 00000000     6595           DW      00h,00h,00h,00h,00h,00h,00h,00h
0850 00000000    
0854 00000000    
0858 00000000    
085C 063CEB02     6596           DW      03C06h,02EBh,03BFCh,02EBh
0860 FC3BEB02    
0864 01000000     6597           DW      01h,00h
0868 00000000  R  6598           DSPTR   _loadmenu_ITEMPROC
086C 00000000  R  6599           DPPTR   _loadmenu_ITEMS,_loadmenu_HNDLS
0870 00000000    
0874 0800         6600           DW      08h
                  6601   ; main.c   1901 {
                  6602   ; main.c   1902  NULL,NULL,NULL,NULL,
                  6603   ; main.c   1903  (char far*)0xBAFC06,(char far*)0xBAFBFC,
                  6604   ; main.c   1904  0x01,0x00,
                  6605   ; main.c   1905  loadmenu_ITEMPROC,
                  6606   ; main.c   1906  (struct ITEMSDATA far*)&loadmenu_ITEMS,
                  6607   ; main.c   1907  (struct ITEMSHNDL far*)&loadmenu_HNDLS,
                  6608   ; main.c   1908  8
                  6609   ; main.c   1909 };
                  6610   ; main.c   1910 
                  6611   ; main.c   1911 void DrawLoadMenu(void)
                  6612   ; main.c   1912 {
                  6613           PUBLIC  _DrawLoadMenu
                  6614   MAIN_3_FC       ENDS
                  6615   
                  6616   MAIN_2_PR       SECTION CODE
                  6617   _DrawLoadMenu   PROC    FAR
                  6618   ; Locals:
                  6619   ; 
                  6620   ; Statics:
                  6621   ; 
                  6622   ; CSEs:
                  6623   ; 
                  6624   ; main.c   1913  setExtSIDTable(loadmenu_ExtendedSTR);
249C E6FC0000  R  6625           MOV     R12,#POF _loadmenu_ExtendedSTR
24A0 E6FD0000  R  6626           MOV     R13,#PAG _loadmenu_ExtendedSTR
24A4 DA000000  R  6627           CALLS   SEG _setExtSIDTable,_setExtSIDTable
                  6628   ; main.c   1914  CreateMenu02(menu_full,0,0,
                  6629   ; main.c   1915               (struct MENUSTRUCT far*)&loadmenu_STRUCT,
                  6630   ; main.c   1916               (struct MENUHEADER far*)&loadmenu_HDR,
                  6631   ; main.c   1917               0,0,0,0);
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 126
main

 LOC CODE        LINE   SOURCELINE

24A8 E00C         6632           MOV     R12,#00h
24AA E00D         6633           MOV     R13,#00h
24AC 88D0         6634           MOV     [-R0],R13
24AE 88C0         6635           MOV     [-R0],R12
24B0 E00E         6636           MOV     R14,#00h
24B2 E00F         6637           MOV     R15,#00h
24B4 88F0         6638           MOV     [-R0],R15
24B6 88E0         6639           MOV     [-R0],R14
24B8 E001         6640           MOV     R1,#00h
24BA E002         6641           MOV     R2,#00h
24BC 8820         6642           MOV     [-R0],R2
24BE 8810         6643           MOV     [-R0],R1
24C0 E003         6644           MOV     R3,#00h
24C2 E004         6645           MOV     R4,#00h
24C4 8840         6646           MOV     [-R0],R4
24C6 8830         6647           MOV     [-R0],R3
24C8 E6F50000  R  6648           MOV     R5,#POF _loadmenu_HDR
24CC E6FA0000  R  6649           MOV     R10,#PAG _loadmenu_HDR
24D0 88A0         6650           MOV     [-R0],R10
24D2 8850         6651           MOV     [-R0],R5
24D4 E6FB0000  R  6652           MOV     R11,#POF _loadmenu_STRUCT
24D8 E6FC0000  R  6653           MOV     R12,#PAG _loadmenu_STRUCT
24DC 88C0         6654           MOV     [-R0],R12
24DE 88B0         6655           MOV     [-R0],R11
24E0 E00C         6656           MOV     R12,#00h
24E2 E00D         6657           MOV     R13,#00h
24E4 E00E         6658           MOV     R14,#00h
24E6 DA000000  R  6659           CALLS   SEG _CreateMenu02,_CreateMenu02
24EA 06F01800     6660           ADD     R0,#018h
                  6661   ; main.c   1918 }
24EE DB00         6662           RETS
                  6663   _DrawLoadMenu   ENDP
                  6664   ; main.c   1919 
                  6665   ; main.c   1920 //-------------------------------------------------------------------
                  6666   ; main.c   1921 //===================================================================
                  6667   ; main.c   1922 // Ввод строки
                  6668   ; main.c   1923 //===================================================================
                  6669   ; main.c   1924 void InDigitStrProcess(STR s, char key, unsigned int protect_len, unsigned int edit_len)
                  6670   ; main.c   1925 {
                  6671           PUBLIC  _InDigitStrProcess
                  6672   _InDigitStrProcess      PROC    FAR
24F0 8890         6673           MOV     [-R0],R9
24F2 8880         6674           MOV     [-R0],R8
24F4 8860         6675           MOV     [-R0],R6
24F6 F09D         6676           MOV     R9,R13
24F8 F08C         6677           MOV     R8,R12
24FA F06E         6678           MOV     R6,R14
                  6679   ; Locals:
                  6680   ; 
                  6681   ; Statics:
                  6682   ; 
                  6683   ; CSEs:
                  6684   ;     l = R12
                  6685   ;     s = R8R9
                  6686   ;     key = RL6
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 127
main

 LOC CODE        LINE   SOURCELINE

                  6687   ;     l1 = R13
                  6688   ;     protect_len = R15
                  6689   ;     edit_len = offset 6
                  6690   ; 
                  6691   ; main.c   1926  unsigned int l=strlen(s);
24FC 88F0         6692           MOV     [-R0],R15
24FE F0C8         6693           MOV     R12,R8
2500 F0D9         6694           MOV     R13,R9
2502 DA000000  R  6695           CALLS   SEG _strlen,_strlen
2506 F0C4         6696           MOV     R12,R4
2508 98F0         6697           MOV     R15,[R0+]
                  6698   ; main.c   1927  unsigned int l1=l-protect_len;
250A F0DC         6699           MOV     R13,R12
250C 20DF         6700           SUB     R13,R15
                  6701   ; main.c   1928  if ((key>='0')&&(key<='9')&&(l1<edit_len))
250E 47FC3000     6702           CMPB    RL6,#030h
2512 8D13         6703           JMPR    cc_ULT,_745
2514 47FC3900     6704           CMPB    RL6,#039h
2518 ED10         6705           JMPR    cc_UGT,_745
251A D4E00600     6706           MOV     R14,[R0+#06H]
251E 40DE         6707           CMP     R13,R14
2520 9D0C         6708           JMPR    cc_UGE,_745
                  6709   ; main.c   1929  {
                  6710   ; main.c   1930   s[l]=key; s[l+1]=0;
2522 F0F8         6711           MOV     R15,R8
2524 F019         6712           MOV     R1,R9
2526 00FC         6713           ADD     R15,R12
2528 DC41         6714           EXTP    R1,#01h
252A B9CF     1   6715           MOVB    [R15],RL6
252C E102         6716           MOVB    RL1,#00h
252E F0E8         6717           MOV     R14,R8
2530 F0F9         6718           MOV     R15,R9
2532 08E1         6719           ADD     R14,#01h
2534 00EC         6720           ADD     R14,R12
2536 DC4F         6721           EXTP    R15,#01h
2538 B92E     1   6722           MOVB    [R14],RL1
                  6723   ; main.c   1931  }
253A              6724   _745:
                  6725   ; main.c   1932  if ((key==LEFT_SOFT)&&(l1!=0))
253A 49C1         6726           CMPB    RL6,#01h
253C 3D09         6727           JMPR    cc_NE,_747
253E 48D0         6728           CMP     R13,#00h
2540 2D07         6729           JMPR    cc_Z,_747
                  6730   ; main.c   1933  {
                  6731   ; main.c   1934   s[l-1]=0;
2542 E10C         6732           MOVB    RL6,#00h
2544 F0D8         6733           MOV     R13,R8
2546 F0E9         6734           MOV     R14,R9
2548 28D1         6735           SUB     R13,#01h
254A 00DC         6736           ADD     R13,R12
254C DC4E         6737           EXTP    R14,#01h
254E B9CD     1   6738           MOVB    [R13],RL6
                  6739   ; main.c   1935  }
2550              6740   _747:
                  6741   ; main.c   1936  FillRect(0,0,101,80,0);
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 128
main

 LOC CODE        LINE   SOURCELINE

2550 E006         6742           MOV     R6,#00h
2552 8860         6743           MOV     [-R0],R6
2554 F0C6         6744           MOV     R12,R6
2556 F0D6         6745           MOV     R13,R6
2558 E6FE6500     6746           MOV     R14,#065h
255C E6FF5000     6747           MOV     R15,#050h
2560 DA000000  R  6748           CALLS   SEG _FillRect,_FillRect
                  6749   ; main.c   1937  DrawString(0,0,101,56,s,3);
2564 E036         6750           MOV     R6,#03h
2566 B860         6751           MOV     [R0],R6
2568 8890         6752           MOV     [-R0],R9
256A 8880         6753           MOV     [-R0],R8
256C E00C         6754           MOV     R12,#00h
256E E00D         6755           MOV     R13,#00h
2570 E6FE6500     6756           MOV     R14,#065h
2574 E6FF3800     6757           MOV     R15,#038h
2578 DA000000  R  6758           CALLS   SEG _DrawString,_DrawString
257C 0806         6759           ADD     R0,#06h
                  6760   ; main.c   1938  DrawString(0,56,101,12,(STR)"Digit - input",3);
257E E038         6761           MOV     R8,#03h
2580 8880         6762           MOV     [-R0],R8
2582 E6F90000  R  6763           MOV     R9,#POF _740
2586 E6F60000  R  6764           MOV     R6,#PAG _740
258A 8860         6765           MOV     [-R0],R6
258C 8890         6766           MOV     [-R0],R9
258E E00C         6767           MOV     R12,#00h
2590 E6FD3800     6768           MOV     R13,#038h
2594 E6FE6500     6769           MOV     R14,#065h
2598 E0CF         6770           MOV     R15,#0Ch
259A DA000000  R  6771           CALLS   SEG _DrawString,_DrawString
259E 0806         6772           ADD     R0,#06h
                  6773   ; main.c   1939  DrawString(0,68,50,12,(STR)"Clear",3);
25A0 E038         6774           MOV     R8,#03h
25A2 8880         6775           MOV     [-R0],R8
25A4 E6F90000  R  6776           MOV     R9,#POF _741
25A8 E6F60000  R  6777           MOV     R6,#PAG _741
25AC 8860         6778           MOV     [-R0],R6
25AE 8890         6779           MOV     [-R0],R9
25B0 E00C         6780           MOV     R12,#00h
25B2 E6FD4400     6781           MOV     R13,#044h
25B6 E6FE3200     6782           MOV     R14,#032h
25BA E0CF         6783           MOV     R15,#0Ch
25BC DA000000  R  6784           CALLS   SEG _DrawString,_DrawString
25C0 0806         6785           ADD     R0,#06h
                  6786   ; main.c   1940  DrawString(51,68,50,12,(STR)"Ok",3);
25C2 E038         6787           MOV     R8,#03h
25C4 8880         6788           MOV     [-R0],R8
25C6 E6F90000  R  6789           MOV     R9,#POF _742
25CA E6F60000  R  6790           MOV     R6,#PAG _742
25CE 8860         6791           MOV     [-R0],R6
25D0 8890         6792           MOV     [-R0],R9
25D2 E6FC3300     6793           MOV     R12,#033h
25D6 E6FD4400     6794           MOV     R13,#044h
25DA E6FE3200     6795           MOV     R14,#032h
25DE E0CF         6796           MOV     R15,#0Ch
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 129
main

 LOC CODE        LINE   SOURCELINE

25E0 DA000000  R  6797           CALLS   SEG _DrawString,_DrawString
25E4 0806         6798           ADD     R0,#06h
                  6799   ; main.c   1941 }
25E6 9860         6800           MOV     R6,[R0+]
25E8 9880         6801           MOV     R8,[R0+]
25EA 9890         6802           MOV     R9,[R0+]
25EC DB00         6803           RETS
                  6804   _InDigitStrProcess      ENDP
                  6805   ; main.c   1942 
                  6806   ; main.c   1943 static const STR gl_01[]=
                  6807   MAIN_2_PR       ENDS
                  6808   
                  6809   MAIN_3_FC       SECTION DATA
0876              6810   _gl_01  LABEL   WORD
0876 00000000  R  6811           DPPTR   _748,_749
087A 00000000    
                  6812   ; main.c   1944 {
                  6813   ; main.c   1945  "Go to line\nnumber:\n\0\0\0\0\0",
                  6814   ; main.c   1946  "Go to percent\n\0\0\0"
                  6815   ; main.c   1947 };
                  6816   ; main.c   1948 
                  6817   ; main.c   1949 unsigned int far gl_num;
                  6818   MAIN_3_FC       ENDS
                  6819   
                  6820   MAIN_1_FB       SECTION DATA
0036              6821   _gl_num LABEL   WORD
0036              6822           DS      2
                  6823           PUBLIC  _gl_num
                  6824   ; main.c   1950 
                  6825   ; main.c   1951 unsigned long my_atoi(STR s)
                  6826   ; main.c   1952 {
                  6827           PUBLIC  _my_atoi
                  6828   MAIN_1_FB       ENDS
                  6829   
                  6830   MAIN_2_PR       SECTION CODE
                  6831   _my_atoi        PROC    FAR
                  6832   ; Locals:
                  6833   ; 
                  6834   ; Statics:
                  6835   ; 
                  6836   ; CSEs:
                  6837   ;     r = R14R15
                  6838   ;     s = R12R13
                  6839   ;     c = RL1
                  6840   ; 
                  6841   ; main.c   1953  unsigned long r=0;
25EE E00E         6842           MOV     R14,#00h
25F0 E00F         6843           MOV     R15,#00h
                  6844   ; main.c   1954  for(;;)
25F2              6845   _750:
                  6846   ; main.c   1955  {
                  6847   ; main.c   1956   unsigned char c=*s-'0';
25F2 DC4D         6848           EXTP    R13,#01h
25F4 A92C     1   6849           MOVB    RL1,[R12]
25F6 27F23000     6850           SUBB    RL1,#030h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 130
main

 LOC CODE        LINE   SOURCELINE

                  6851   ; main.c   1957   if (c>9) break;
25FA 47F20900     6852           CMPB    RL1,#09h
25FE ED0E         6853           JMPR    cc_UGT,_751
                  6854   ; main.c   1958   r=r*10+c;
2600 F04E         6855           MOV     R4,R14
2602 F05F         6856           MOV     R5,R15
2604 E0AA         6857           MOV     R10,#0Ah
2606 E00B         6858           MOV     R11,#00h
2608 DA000000  R  6859           CALLS   SEG __mul,__mul
260C F0E4         6860           MOV     R14,R4
260E F0F5         6861           MOV     R15,R5
2610 C021         6862           MOVBZ   R1,RL1
2612 E002         6863           MOV     R2,#00h
2614 00E1         6864           ADD     R14,R1
2616 10F2         6865           ADDC    R15,R2
                  6866   ; main.c   1959   s++;
2618 08C1         6867           ADD     R12,#01h
261A 0DEB         6868           JMPR    cc_UC,_750
                  6869   ; main.c   1960  }
261C              6870   _751:
                  6871   ; main.c   1961  return(r);
261C F04E         6872           MOV     R4,R14
261E F05F         6873           MOV     R5,R15
                  6874   ; main.c   1962 }
2620 DB00         6875           RETS
                  6876   _my_atoi        ENDP
                  6877   ; main.c   1963 
                  6878   ; main.c   1964 void gl_oncreate(void)
                  6879   ; main.c   1965 {
                  6880           PUBLIC  _gl_oncreate
                  6881   _gl_oncreate    PROC    FAR
                  6882   ; Locals:
                  6883   ; 
                  6884   ; Statics:
                  6885   ; 
                  6886   ; CSEs:
                  6887   ;     i = R12
                  6888   ; 
                  6889   ; main.c   1966  int i=gl_num;
2622 E6000000  R  6890           MOV     DPP0,#PAG _gl_num
2626 CC00         6891           NOP
2628 F2FC0000  R  6892           MOV     R12,POF _gl_num
                  6893   ; main.c   1967  InDigitStrProcess(gl_01[i],0,i?14:19,i?3:5);
262C 88C0         6894           MOV     [-R0],R12
262E 48C0         6895           CMP     R12,#00h
2630 2D02         6896           JMPR    cc_Z,_752
2632              6897   _753:
2632 E03C         6898           MOV     R12,#03h
2634 0D01         6899           JMPR    cc_UC,_754
2636              6900   _752:
2636 E05C         6901           MOV     R12,#05h
2638              6902   _754:
2638 88C0         6903           MOV     [-R0],R12
263A D4C00200     6904           MOV     R12,[R0+#02H]
263E 5C2C         6905           SHL     R12,#02h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 131
main

 LOC CODE        LINE   SOURCELINE

2640 F0EC         6906           MOV     R14,R12
2642 D7500000  R  6907           EXTP    #PAG _gl_01,#02h
2646 D4CE0000 2R  6908           MOV     R12,[R14+#POF _gl_01]
264A D4DE0000 1R  6909           MOV     R13,[R14+#POF _gl_01+2]
264E E00E         6910           MOV     R14,#00h
2650 88C0         6911           MOV     [-R0],R12
2652 D4C00400     6912           MOV     R12,[R0+#04H]
2656 2D02         6913           JMPR    cc_Z,_755
2658              6914   _756:
2658 E0EF         6915           MOV     R15,#0Eh
265A 0D02         6916           JMPR    cc_UC,_757
265C              6917   _755:
265C E6FF1300     6918           MOV     R15,#013h
2660              6919   _757:
2660 98C0         6920           MOV     R12,[R0+]
2662 F01D         6921           MOV     R1,R13
2664 DA00F024  R  6922           CALLS   SEG _InDigitStrProcess,_InDigitStrProcess
2668 0804         6923           ADD     R0,#04h
                  6924   ; main.c   1968 }
266A DB00         6925           RETS
                  6926   _gl_oncreate    ENDP
                  6927   ; main.c   1969 
                  6928   ; main.c   1970 int gl_onkey(void far* data, struct MSG far* Msg)
                  6929   ; main.c   1971 {
                  6930           PUBLIC  _gl_onkey
                  6931   _gl_onkey       PROC    FAR
266C 8890         6932           MOV     [-R0],R9
266E 8880         6933           MOV     [-R0],R8
2670 8860         6934           MOV     [-R0],R6
2672 88D0         6935           MOV     [-R0],R13
2674 88C0         6936           MOV     [-R0],R12
2676 2802         6937           SUB     R0,#02h
2678 F06F         6938           MOV     R6,R15
                  6939   ; Locals:
                  6940   ; 
                  6941   ; Statics:
                  6942   ; 
                  6943   ; CSEs:
                  6944   ;     i = R8
                  6945   ;     Msg + 4 = R14R15
                  6946   ;     Msg = R9R6
                  6947   ;     i * 4 = offset 0
                  6948   ;     data = offset 2
                  6949   ;     *&gl_01 + 19 = R12R13
                  6950   ;     Msg + 6 = R12R13
                  6951   ;     *(&gl_01 + 4) + 14 = R12R13
                  6952   ; 
                  6953   ; main.c   1972  int i=gl_num;
267A E6000000  R  6954           MOV     DPP0,#PAG _gl_num
267E F09E         6955           MOV     R9,R14
2680 F2F80000  R  6956           MOV     R8,POF _gl_num
                  6957   ; main.c   1973  if (IsFocus(data))
2684 DA005A15  R  6958           CALLS   SEG _IsFocus,_IsFocus
2688 4840         6959           CMP     R4,#00h
268A EA20EC27  R  6960           JMPA    cc_Z,_788
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 132
main

 LOC CODE        LINE   SOURCELINE

                  6961   ; main.c   1974  {
                  6962   ; main.c   1975   InDigitStrProcess(gl_01[i],0,i?14:19,i?3:5);
268E 4880         6963           CMP     R8,#00h
2690 2D02         6964           JMPR    cc_Z,_790
2692              6965   _791:
2692 E03C         6966           MOV     R12,#03h
2694 0D01         6967           JMPR    cc_UC,_792
2696              6968   _790:
2696 E05C         6969           MOV     R12,#05h
2698              6970   _792:
2698 88C0         6971           MOV     [-R0],R12
269A F0D8         6972           MOV     R13,R8
269C 5C2D         6973           SHL     R13,#02h
269E C4D00200     6974           MOV     [R0+#02H],R13
26A2 F0ED         6975           MOV     R14,R13
26A4 D7500000  R  6976           EXTP    #PAG _gl_01,#02h
26A8 D4CE0000 2R  6977           MOV     R12,[R14+#POF _gl_01]
26AC D4DE0000 1R  6978           MOV     R13,[R14+#POF _gl_01+2]
26B0 E00E         6979           MOV     R14,#00h
26B2 4880         6980           CMP     R8,#00h
26B4 2D02         6981           JMPR    cc_Z,_793
26B6              6982   _794:
26B6 E0EF         6983           MOV     R15,#0Eh
26B8 0D02         6984           JMPR    cc_UC,_795
26BA              6985   _793:
26BA E6FF1300     6986           MOV     R15,#013h
26BE              6987   _795:
26BE DA00F024  R  6988           CALLS   SEG _InDigitStrProcess,_InDigitStrProcess
26C2 0802         6989           ADD     R0,#02h
                  6990   ; main.c   1976   if (Msg->Msg==KEY_DOWN)
26C4 F0E9         6991           MOV     R14,R9
26C6 F0F6         6992           MOV     R15,R6
26C8 08E4         6993           ADD     R14,#04h
26CA DC4F         6994           EXTP    R15,#01h
26CC A8CE     1   6995           MOV     R12,[R14]
26CE 46FCE900     6996           CMP     R12,#0E9h
26D2 EA30D427  R  6997           JMPA    cc_NE,_781
                  6998   ; main.c   1977   {
                  6999   ; main.c   1978    switch(Msg->Param[0])
26D6 F0C9         7000           MOV     R12,R9
26D8 F0D6         7001           MOV     R13,R6
26DA 08C6         7002           ADD     R12,#06h
26DC DC4D         7003           EXTP    R13,#01h
26DE A89C     1   7004           MOV     R9,[R12]
26E0 4894         7005           CMP     R9,#04h
26E2 2D09         7006           JMPR    cc_EQ,_776
26E4 46F90B00     7007           CMP     R9,#0Bh
26E8 2D06         7008           JMPR    cc_EQ,_776
26EA 46F90C00     7009           CMP     R9,#0Ch
26EE EA208627  R  7010           JMPA    cc_EQ,_779
26F2 EA009A27  R  7011           JMPA    cc_UC,_780
                  7012   ; main.c   1979    {
                  7013   ; main.c   1980     case RIGHT_SOFT:
                  7014   ; main.c   1981     case GREEN_BUTTON:
26F6              7015   _776:
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 133
main

 LOC CODE        LINE   SOURCELINE

                  7016   ; main.c   1982      if (i)
26F6 4880         7017           CMP     R8,#00h
26F8 2D25         7018           JMPR    cc_Z,_777
                  7019   ; main.c   1983          {
                  7020   ; main.c   1984           if (!gl_01[1][14]) return(0);
26FA E6000000  R  7021           MOV     DPP0,#PAG _gl_01
26FE CC00         7022           NOP
2700 F2FC0000  R  7023           MOV     R12,POF (_gl_01+4)
2704 F2FD0000  R  7024           MOV     R13,POF (_gl_01+6)
2708 06FC0E00     7025           ADD     R12,#0Eh
270C DC4D         7026           EXTP    R13,#01h
270E A9CC     1   7027           MOVB    RL6,[R12]
2710 EA20E827  R  7028           JMPA    cc_Z,_786
                  7029   ; main.c   1985           seek_to_line=total_line*my_atoi(gl_01[1]+14)/100;
2714 DA00EE25  R  7030           CALLS   SEG _my_atoi,_my_atoi
2718 E6000000  R  7031           MOV     DPP0,#PAG _total_line
271C CC00         7032           NOP
271E F2FA0000  R  7033           MOV     R10,POF _total_line
2722 F2FB0000  R  7034           MOV     R11,POF (_total_line+2)
2726 DA000000  R  7035           CALLS   SEG __mul,__mul
272A E6FA6400     7036           MOV     R10,#064h
272E E00B         7037           MOV     R11,#00h
2730 DA000000  R  7038           CALLS   SEG __udil,__udil
2734 E6000000  R  7039           MOV     DPP0,#PAG _seek_to_line
2738 CC00         7040           NOP
273A F6F40000  R  7041           MOV     POF _seek_to_line,R4
273E F6F50000  R  7042           MOV     POF (_seek_to_line+2),R5
                  7043   ; main.c   1986      }
2742 0D16         7044           JMPR    cc_UC,_778
2744              7045   _777:
                  7046   ; main.c   1987          else
                  7047   ; main.c   1988          {
                  7048   ; main.c   1989           if (!gl_01[0][19]) return(0);
2744 E6000000  R  7049           MOV     DPP0,#PAG _gl_01
2748 CC00         7050           NOP
274A F2FC0000  R  7051           MOV     R12,POF _gl_01
274E F2FD0000  R  7052           MOV     R13,POF (_gl_01+2)
2752 06FC1300     7053           ADD     R12,#013h
2756 DC4D         7054           EXTP    R13,#01h
2758 A9CC     1   7055           MOVB    RL6,[R12]
275A EA20E827  R  7056           JMPA    cc_Z,_786
                  7057   ; main.c   1990           seek_to_line=my_atoi(gl_01[0]+19);
275E DA00EE25  R  7058           CALLS   SEG _my_atoi,_my_atoi
2762 E6000000  R  7059           MOV     DPP0,#PAG _seek_to_line
2766 CC00         7060           NOP
2768 F6F40000  R  7061           MOV     POF _seek_to_line,R4
276C F6F50000  R  7062           MOV     POF (_seek_to_line+2),R5
                  7063   ; main.c   1991      }
2770              7064   _778:
                  7065   ; main.c   1992      draw_mode=2; //Переходим на нужную строку
2770 E6000000  R  7066           MOV     DPP0,#PAG _draw_mode
2774 E12C         7067           MOVB    RL6,#02h
2776 F7FC0000  R  7068           MOVB    POF _draw_mode,RL6
                  7069   ; main.c   1993      FilesysICall(GotoLine);
277A E6FC0000  R  7070           MOV     R12,#SOF _GotoLine
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 134
main

 LOC CODE        LINE   SOURCELINE

277E E6FD0000  R  7071           MOV     R13,#SEG _GotoLine
2782 DA000000  R  7072           CALLS   SEG _FilesysICall,_FilesysICall
                  7073   ; main.c   1994     case RED_BUTTON:
2786              7074   _779:
                  7075   ; main.c   1995      CloseDialogWithSoftKeys(((int far *)data)[6]);
2786 D4800200     7076           MOV     R8,[R0+#02H]
278A D4900400     7077           MOV     R9,[R0+#04H]
278E DC49         7078           EXTP    R9,#01h
2790 D4C80C00 1   7079           MOV     R12,[R8+#0CH]
2794 DA000000  R  7080           CALLS   SEG _CloseDialogWithSoftKeys,_CloseDialogWithSoftKeys
                  7081   ; main.c   1996         return(0);
2798 0D27         7082           JMPR    cc_UC,_786
                  7083   ; main.c   1997    }
279A              7084   _780:
                  7085   ; main.c   1998    InDigitStrProcess(gl_01[i],Msg->Param[0],i?14:19,i?3:5);
279A F09C         7086           MOV     R9,R12
279C F06D         7087           MOV     R6,R13
279E 4880         7088           CMP     R8,#00h
27A0 2D02         7089           JMPR    cc_Z,_796
27A2              7090   _797:
27A2 E03C         7091           MOV     R12,#03h
27A4 0D01         7092           JMPR    cc_UC,_798
27A6              7093   _796:
27A6 E05C         7094           MOV     R12,#05h
27A8              7095   _798:
27A8 88C0         7096           MOV     [-R0],R12
27AA D4D00200     7097           MOV     R13,[R0+#02H]
27AE F0ED         7098           MOV     R14,R13
27B0 D7500000  R  7099           EXTP    #PAG _gl_01,#02h
27B4 D4CE0000 2R  7100           MOV     R12,[R14+#POF _gl_01]
27B8 D4DE0000 1R  7101           MOV     R13,[R14+#POF _gl_01+2]
27BC DC46         7102           EXTP    R6,#01h
27BE A8E9     1   7103           MOV     R14,[R9]
27C0 4880         7104           CMP     R8,#00h
27C2 2D02         7105           JMPR    cc_Z,_799
27C4              7106   _800:
27C4 E0EF         7107           MOV     R15,#0Eh
27C6 0D02         7108           JMPR    cc_UC,_801
27C8              7109   _799:
27C8 E6FF1300     7110           MOV     R15,#013h
27CC              7111   _801:
27CC DA00F024  R  7112           CALLS   SEG _InDigitStrProcess,_InDigitStrProcess
27D0 0802         7113           ADD     R0,#02h
                  7114   ; main.c   1999    return(0);  
27D2 0D0A         7115           JMPR    cc_UC,_786
                  7116   ; main.c   2000   }
27D4              7117   _781:
                  7118   ; main.c   2001   if ((Msg->Msg==KEY_UP)||(Msg->Msg==LONG_PRESS)) return(0);
27D4 DC4F         7119           EXTP    R15,#01h
27D6 A88E     1   7120           MOV     R8,[R14]
27D8 46F8EA00     7121           CMP     R8,#0EAh
27DC 2D05         7122           JMPR    cc_EQ,_786
27DE DC4F         7123           EXTP    R15,#01h
27E0 A88E     1   7124           MOV     R8,[R14]
27E2 46F8EB00     7125           CMP     R8,#0EBh
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 135
main

 LOC CODE        LINE   SOURCELINE

27E6 3D02         7126           JMPR    cc_NE,_788
27E8              7127   _786:
27E8 E004         7128           MOV     R4,#00h
27EA 0D01         7129           JMPR    cc_UC,_789
                  7130   ; main.c   2002  }
27EC              7131   _788:
                  7132   ; main.c   2003  return(1);
27EC E014         7133           MOV     R4,#01h
                  7134   ; main.c   2004 }
27EE              7135   _789:
27EE 0806         7136           ADD     R0,#06h
27F0 9860         7137           MOV     R6,[R0+]
27F2 9880         7138           MOV     R8,[R0+]
27F4 9890         7139           MOV     R9,[R0+]
27F6 DB00         7140           RETS
                  7141   _gl_onkey       ENDP
                  7142   ; main.c   2005 
                  7143   ; main.c   2006 //===================================================================
                  7144   ; main.c   2007 // Меню Goto...
                  7145   ; main.c   2008 //===================================================================
                  7146   ; main.c   2009 void goto_l(unsigned long l)
                  7147   ; main.c   2010 {
                  7148           PUBLIC  _goto_l
                  7149   _goto_l PROC    FAR
                  7150   ; Locals:
                  7151   ; 
                  7152   ; Statics:
                  7153   ; 
                  7154   ; CSEs:
                  7155   ;     l = R12R13
                  7156   ; 
                  7157   ; main.c   2011  seek_to_line=l;
27F8 E6000000  R  7158           MOV     DPP0,#PAG _seek_to_line
27FC E122         7159           MOVB    RL1,#02h
27FE F6FC0000  R  7160           MOV     POF _seek_to_line,R12
2802 F6FD0000  R  7161           MOV     POF (_seek_to_line+2),R13
                  7162   ; main.c   2012  draw_mode=2; //Переходим на нужную строку
2806 F7F20000  R  7163           MOVB    POF _draw_mode,RL1
                  7164   ; main.c   2013  FilesysICall(GotoLine);
280A E6FC0000  R  7165           MOV     R12,#SOF _GotoLine
280E E6FD0000  R  7166           MOV     R13,#SEG _GotoLine
2812 DA000000  R  7167           CALLS   SEG _FilesysICall,_FilesysICall
                  7168   ; main.c   2014  GeneralFunc(1);
2816 E01C         7169           MOV     R12,#01h
2818 FA000000  R  7170           JMPS    SEG _GeneralFunc,_GeneralFunc
                  7171   ; main.c   2015 }
                  7172           RETV
                  7173   _goto_l ENDP
                  7174   ; main.c   2016 
                  7175   ; main.c   2017 void goto_top(void)
                  7176   ; main.c   2018 {
                  7177           PUBLIC  _goto_top
                  7178   _goto_top       PROC    FAR
                  7179   ; Locals:
                  7180   ; 
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 136
main

 LOC CODE        LINE   SOURCELINE

                  7181   ; Statics:
                  7182   ; 
                  7183   ; CSEs:
                  7184   ; 
                  7185   ; main.c   2019  goto_l(0);
281C E00C         7186           MOV     R12,#00h
281E E00D         7187           MOV     R13,#00h
2820 FA00F827  R  7188           JMPS    SEG _goto_l,_goto_l
                  7189   ; main.c   2020 }
                  7190           RETV
                  7191   _goto_top       ENDP
                  7192   ; main.c   2021 
                  7193   ; main.c   2022 void goto_bot(void)
                  7194   ; main.c   2023 {
                  7195           PUBLIC  _goto_bot
                  7196   _goto_bot       PROC    FAR
                  7197   ; Locals:
                  7198   ; 
                  7199   ; Statics:
                  7200   ; 
                  7201   ; CSEs:
                  7202   ; 
                  7203   ; main.c   2024  goto_l(0xFFFFFFFF);
2824 E6FCFFFF     7204           MOV     R12,#0FFFFh
2828 E6FDFFFF     7205           MOV     R13,#0FFFFh
282C FA00F827  R  7206           JMPS    SEG _goto_l,_goto_l
                  7207   ; main.c   2025 }
                  7208           RETV
                  7209   _goto_bot       ENDP
                  7210   ; main.c   2026 
                  7211   ; main.c   2027 void gl_onclose(void){}
                  7212           PUBLIC  _gl_onclose
                  7213   _gl_onclose     PROC    FAR
                  7214   ; Locals:
                  7215   ; 
                  7216   ; Statics:
                  7217   ; 
                  7218   ; CSEs:
                  7219   ; 
2830 DB00         7220           RETS
                  7221   _gl_onclose     ENDP
                  7222   ; main.c   2028 static const struct DIALOG_WSK gl_dialog=
                  7223   MAIN_2_PR       ENDS
                  7224   
                  7225   MAIN_3_FC       SECTION DATA
087E              7226   _gl_dialog      LABEL   WORD
087E 00000000  R  7227           DSPTR   _gl_onkey,_gl_oncreate,_gl_onclose
0882 00000000  R 
0886 00000000    
088A 2C000100     7228           DW      02Ch,01h
088E 00000000  R  7229           DPPTR   _md_tab
                  7230   ; main.c   2029 {gl_onkey,gl_oncreate,gl_onclose,0x2C, sizeof(md_tab)/sizeof(unsigned int),md_tab};
                  7231   ; main.c   2030 
                  7232   ; main.c   2031 void goto_line(void)
                  7233   ; main.c   2032 {
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 137
main

 LOC CODE        LINE   SOURCELINE

                  7234           PUBLIC  _goto_line
                  7235   MAIN_3_FC       ENDS
                  7236   
                  7237   MAIN_2_PR       SECTION CODE
                  7238   _goto_line      PROC    FAR
                  7239   ; Locals:
                  7240   ;     mmm = offset 0
                  7241   ; 
                  7242   ; Statics:
                  7243   ; 
                  7244   ; CSEs:
                  7245   ; 
                  7246   ; main.c   2033  unsigned char mmm[0x2C];
                  7247   ; main.c   2034  gl_num=0; //Признак перехода по строке
2832 E6000000  R  7248           MOV     DPP0,#PAG _gl_num
2836 26F02C00     7249           SUB     R0,#02Ch
283A F68E0000  R  7250           MOV     POF _gl_num,ZEROS
                  7251   ; main.c   2035  GeneralFunc(1);
283E E01C         7252           MOV     R12,#01h
2840 DA000000  R  7253           CALLS   SEG _GeneralFunc,_GeneralFunc
                  7254   ; main.c   2036  CreateDialogWithSoftKeys(&gl_dialog,mmm,0);
2844 E00C         7255           MOV     R12,#00h
2846 88C0         7256           MOV     [-R0],R12
2848 E6FC0000  R  7257           MOV     R12,#POF _gl_dialog
284C E6FD0000  R  7258           MOV     R13,#PAG _gl_dialog
2850 E02E         7259           MOV     R14,#02h
2852 00E0         7260           ADD     R14,R0
2854 66FEFF3F     7261           AND     R14,#03FFFh
2858 F2FF02FE     7262           MOV     R15,DPP1
285C DA000000  R  7263           CALLS   SEG _CreateDialogWithSoftKeys,_CreateDialogWithSoftKeys
2860 06F02E00     7264           ADD     R0,#02Eh
                  7265   ; main.c   2037 }
2864 DB00         7266           RETS
                  7267   _goto_line      ENDP
                  7268   ; main.c   2038 
                  7269   ; main.c   2039 void goto_percent(void)
                  7270   ; main.c   2040 {
                  7271           PUBLIC  _goto_percent
                  7272   _goto_percent   PROC    FAR
2866 26F02C00     7273           SUB     R0,#02Ch
                  7274   ; Locals:
                  7275   ;     mmm = offset 0
                  7276   ; 
                  7277   ; Statics:
                  7278   ; 
                  7279   ; CSEs:
                  7280   ; 
                  7281   ; main.c   2041  unsigned char mmm[0x2C];
                  7282   ; main.c   2042  gl_num=1; //Признак перехода по процентам
286A E6000000  R  7283           MOV     DPP0,#PAG _gl_num
286E E01C         7284           MOV     R12,#01h
2870 F6FC0000  R  7285           MOV     POF _gl_num,R12
                  7286   ; main.c   2043  GeneralFunc(1);
2874 DA000000  R  7287           CALLS   SEG _GeneralFunc,_GeneralFunc
                  7288   ; main.c   2044  CreateDialogWithSoftKeys(&gl_dialog,mmm,0);
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 138
main

 LOC CODE        LINE   SOURCELINE

2878 E00C         7289           MOV     R12,#00h
287A 88C0         7290           MOV     [-R0],R12
287C E6FC0000  R  7291           MOV     R12,#POF _gl_dialog
2880 E6FD0000  R  7292           MOV     R13,#PAG _gl_dialog
2884 E02E         7293           MOV     R14,#02h
2886 00E0         7294           ADD     R14,R0
2888 66FEFF3F     7295           AND     R14,#03FFFh
288C F2FF02FE     7296           MOV     R15,DPP1
2890 DA000000  R  7297           CALLS   SEG _CreateDialogWithSoftKeys,_CreateDialogWithSoftKeys
2894 06F02E00     7298           ADD     R0,#02Eh
                  7299   ; main.c   2045 }
2898 DB00         7300           RETS
                  7301   _goto_percent   ENDP
                  7302   ; main.c   2046 
                  7303   ; main.c   2047 void goto_last_saved(void)
                  7304   ; main.c   2048 {
                  7305           PUBLIC  _goto_last_saved
                  7306   _goto_last_saved        PROC    FAR
                  7307   ; Locals:
                  7308   ; 
                  7309   ; Statics:
                  7310   ; 
                  7311   ; CSEs:
                  7312   ; 
                  7313   ; main.c   2049  goto_l(HISTORY.line);
289A E6000000  R  7314           MOV     DPP0,#PAG _HISTORY
289E CC00         7315           NOP
28A0 F2FC0000  R  7316           MOV     R12,POF (_HISTORY+132)
28A4 F2FD0000  R  7317           MOV     R13,POF (_HISTORY+134)
28A8 FA00F827  R  7318           JMPS    SEG _goto_l,_goto_l
                  7319   ; main.c   2050 }
                  7320           RETV
                  7321   _goto_last_saved        ENDP
                  7322   ; main.c   2051 
                  7323   ; main.c   2052 void goto_book1(void)
                  7324   ; main.c   2053 {
                  7325           PUBLIC  _goto_book1
                  7326   _goto_book1     PROC    FAR
                  7327   ; Locals:
                  7328   ; 
                  7329   ; Statics:
                  7330   ; 
                  7331   ; CSEs:
                  7332   ; 
                  7333   ; main.c   2054  goto_l(HISTORY.bookm1);
28AC E6000000  R  7334           MOV     DPP0,#PAG _HISTORY
28B0 CC00         7335           NOP
28B2 F2FC0000  R  7336           MOV     R12,POF (_HISTORY+140)
28B6 F2FD0000  R  7337           MOV     R13,POF (_HISTORY+142)
28BA FA00F827  R  7338           JMPS    SEG _goto_l,_goto_l
                  7339   ; main.c   2055 }
                  7340           RETV
                  7341   _goto_book1     ENDP
                  7342   ; main.c   2056 void goto_book2(void)
                  7343   ; main.c   2057 {
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 139
main

 LOC CODE        LINE   SOURCELINE

                  7344           PUBLIC  _goto_book2
                  7345   _goto_book2     PROC    FAR
                  7346   ; Locals:
                  7347   ; 
                  7348   ; Statics:
                  7349   ; 
                  7350   ; CSEs:
                  7351   ; 
                  7352   ; main.c   2058  goto_l(HISTORY.bookm2);
28BE E6000000  R  7353           MOV     DPP0,#PAG _HISTORY
28C2 CC00         7354           NOP
28C4 F2FC0000  R  7355           MOV     R12,POF (_HISTORY+144)
28C8 F2FD0000  R  7356           MOV     R13,POF (_HISTORY+146)
28CC FA00F827  R  7357           JMPS    SEG _goto_l,_goto_l
                  7358   ; main.c   2059 }
                  7359           RETV
                  7360   _goto_book2     ENDP
                  7361   ; main.c   2060 void goto_book3(void)
                  7362   ; main.c   2061 {
                  7363           PUBLIC  _goto_book3
                  7364   _goto_book3     PROC    FAR
                  7365   ; Locals:
                  7366   ; 
                  7367   ; Statics:
                  7368   ; 
                  7369   ; CSEs:
                  7370   ; 
                  7371   ; main.c   2062  goto_l(HISTORY.bookm3);
28D0 E6000000  R  7372           MOV     DPP0,#PAG _HISTORY
28D4 CC00         7373           NOP
28D6 F2FC0000  R  7374           MOV     R12,POF (_HISTORY+148)
28DA F2FD0000  R  7375           MOV     R13,POF (_HISTORY+150)
28DE FA00F827  R  7376           JMPS    SEG _goto_l,_goto_l
                  7377   ; main.c   2063 }
                  7378           RETV
                  7379   _goto_book3     ENDP
                  7380   ; main.c   2064 void goto_book4(void)
                  7381   ; main.c   2065 {
                  7382           PUBLIC  _goto_book4
                  7383   _goto_book4     PROC    FAR
                  7384   ; Locals:
                  7385   ; 
                  7386   ; Statics:
                  7387   ; 
                  7388   ; CSEs:
                  7389   ; 
                  7390   ; main.c   2066  goto_l(HISTORY.bookm4);
28E2 E6000000  R  7391           MOV     DPP0,#PAG _HISTORY
28E6 CC00         7392           NOP
28E8 F2FC0000  R  7393           MOV     R12,POF (_HISTORY+152)
28EC F2FD0000  R  7394           MOV     R13,POF (_HISTORY+154)
28F0 FA00F827  R  7395           JMPS    SEG _goto_l,_goto_l
                  7396   ; main.c   2067 }
                  7397           RETV
                  7398   _goto_book4     ENDP
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 140
main

 LOC CODE        LINE   SOURCELINE

                  7399   ; main.c   2068 
                  7400   ; main.c   2069 static const struct ITEMSDATA far gotomenu_ITEMS[]=
                  7401   MAIN_2_PR       ENDS
                  7402   
                  7403   MAIN_3_FC       SECTION DATA
0892              7404   _gotomenu_ITEMS LABEL   WORD
0892 00000000     7405           DW      00h,00h
0896 2B0E2B0E     7406           DW      0E2Bh,0E2Bh,00h
089A 0000        
089C 00000000     7407           DW      00h,00h
08A0 0300BC02     7408           DW      03h,02BCh
08A4 00000000     7409           DW      00h,00h
08A8 2C0E2C0E     7410           DW      0E2Ch,0E2Ch,00h
08AC 0000        
08AE 00000000     7411           DW      00h,00h
08B2 0300BC02     7412           DW      03h,02BCh
08B6 00000000     7413           DW      00h,00h
08BA 2D0E2D0E     7414           DW      0E2Dh,0E2Dh,00h
08BE 0000        
08C0 00000000     7415           DW      00h,00h
08C4 0300BC02     7416           DW      03h,02BCh
08C8 00000000     7417           DW      00h,00h
08CC 2E0E2E0E     7418           DW      0E2Eh,0E2Eh,00h
08D0 0000        
08D2 00000000     7419           DW      00h,00h
08D6 0300BC02     7420           DW      03h,02BCh
08DA 00000000     7421           DW      00h,00h
08DE 2F0E2F0E     7422           DW      0E2Fh,0E2Fh,00h
08E2 0000        
08E4 00000000     7423           DW      00h,00h
08E8 0300BC02     7424           DW      03h,02BCh
08EC 00000000     7425           DW      00h,00h
08F0 300E300E     7426           DW      0E30h,0E30h,00h
08F4 0000        
08F6 00000000     7427           DW      00h,00h
08FA 0300BC02     7428           DW      03h,02BCh
08FE 00000000     7429           DW      00h,00h
0902 310E310E     7430           DW      0E31h,0E31h,00h
0906 0000        
0908 00000000     7431           DW      00h,00h
090C 0300BC02     7432           DW      03h,02BCh
0910 00000000     7433           DW      00h,00h
0914 320E320E     7434           DW      0E32h,0E32h,00h
0918 0000        
091A 00000000     7435           DW      00h,00h
091E 0300BC02     7436           DW      03h,02BCh
0922 00000000     7437           DW      00h,00h
0926 330E330E     7438           DW      0E33h,0E33h,00h
092A 0000        
092C 00000000     7439           DW      00h,00h
0930 0300BC02     7440           DW      03h,02BCh
                  7441   ; main.c   2070 {
                  7442   ; main.c   2071  NULL, 0xE2B,0xE2B, 0,NULL,3,0x2BC,
                  7443   ; main.c   2072  NULL, 0xE2C,0xE2C, 0,NULL,3,0x2BC,
                  7444   ; main.c   2073  NULL, 0xE2D,0xE2D, 0,NULL,3,0x2BC,
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 141
main

 LOC CODE        LINE   SOURCELINE

                  7445   ; main.c   2074  NULL, 0xE2E,0xE2E, 0,NULL,3,0x2BC,
                  7446   ; main.c   2075  NULL, 0xE2F,0xE2F, 0,NULL,3,0x2BC,
                  7447   ; main.c   2076  NULL, 0xE30,0xE30, 0,NULL,3,0x2BC,
                  7448   ; main.c   2077  NULL, 0xE31,0xE31, 0,NULL,3,0x2BC,
                  7449   ; main.c   2078  NULL, 0xE32,0xE32, 0,NULL,3,0x2BC,
                  7450   ; main.c   2079  NULL, 0xE33,0xE33, 0,NULL,3,0x2BC
                  7451   ; main.c   2080 };
                  7452   ; main.c   2081 
                  7453   ; main.c   2082 static const struct ITEMSHNDL far gotomenu_HNDLS[]=
0934              7454   _gotomenu_HNDLS LABEL   WORD
0934 00000000  R  7455           DSPTR   _goto_top,_goto_line,_goto_percent,_goto_bot,_goto_last_saved
0938 00000000  R 
093C 00000000  R 
0940 00000000  R 
0944 00000000    
0948 00000000  R  7456           DSPTR   _goto_book1,_goto_book2,_goto_book3,_goto_book4
094C 00000000  R 
0950 00000000  R 
0954 00000000    
                  7457   ; main.c   2083 {
                  7458   ; main.c   2084  goto_top,
                  7459   ; main.c   2085  goto_line,
                  7460   ; main.c   2086  goto_percent,
                  7461   ; main.c   2087  goto_bot,
                  7462   ; main.c   2088  goto_last_saved,
                  7463   ; main.c   2089  goto_book1,
                  7464   ; main.c   2090  goto_book2,
                  7465   ; main.c   2091  goto_book3,
                  7466   ; main.c   2092  goto_book4
                  7467   ; main.c   2093 };
                  7468   ; main.c   2094 
                  7469   ; main.c   2095 static const struct MENUHEADER far gotomenu_HDR=
0958              7470   _gotomenu_HDR   LABEL   WORD
0958 00000000     7471           DW      00h,00h,065h,0Ch
095C 65000C00    
0960 B00DE202     7472           DW      0DB0h,02E2h
0964 280EFF7F     7473           DW      0E28h,07FFFh
                  7474   ; main.c   2096 {
                  7475   ; main.c   2097  0x00,0x00,0x65,0x0C,(char far*)0xB88DB0,0xE28,0x7FFF 
                  7476   ; main.c   2098 };
                  7477   ; main.c   2099 
                  7478   ; main.c   2100 static const struct MENUSTRUCT far gotomenu_STRUCT=
0968              7479   _gotomenu_STRUCT        LABEL   WORD
0968 00000000     7480           DW      00h,00h,00h,00h,00h,00h,00h,00h
096C 00000000    
0970 00000000    
0974 00000000    
0978 063CEB02     7481           DW      03C06h,02EBh,03BFCh,02EBh
097C FC3BEB02    
0980 80000000     7482           DW      080h,00h
0984 00000000     7483           DW      00h,00h
0988 00000000  R  7484           DPPTR   _gotomenu_ITEMS,_gotomenu_HNDLS
098C 00000000    
0990 0900         7485           DW      09h
                  7486   ; main.c   2101 {
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 142
main

 LOC CODE        LINE   SOURCELINE

                  7487   ; main.c   2102  NULL,NULL,NULL,NULL,
                  7488   ; main.c   2103  (char far*)0xBAFC06,(char far*)0xBAFBFC,
                  7489   ; main.c   2104  0x80,0x00,
                  7490   ; main.c   2105  NULL,
                  7491   ; main.c   2106  (struct ITEMSDATA far*)&gotomenu_ITEMS,
                  7492   ; main.c   2107  (struct ITEMSHNDL far*)&gotomenu_HNDLS,
                  7493   ; main.c   2108  9
                  7494   ; main.c   2109 };
                  7495   ; main.c   2110 
                  7496   ; main.c   2111 void goto_menu(void)
                  7497   ; main.c   2112 {
                  7498           PUBLIC  _goto_menu
                  7499   MAIN_3_FC       ENDS
                  7500   
                  7501   MAIN_2_PR       SECTION CODE
                  7502   _goto_menu      PROC    FAR
                  7503   ; Locals:
                  7504   ; 
                  7505   ; Statics:
                  7506   ; 
                  7507   ; CSEs:
                  7508   ; 
                  7509   ; main.c   2113  GeneralFunc(1);
28F4 E01C         7510           MOV     R12,#01h
28F6 DA000000  R  7511           CALLS   SEG _GeneralFunc,_GeneralFunc
                  7512   ; main.c   2114  CreateMenu02(menu_full,0,0,
                  7513   ; main.c   2115               (struct MENUSTRUCT far*)&gotomenu_STRUCT,
                  7514   ; main.c   2116               (struct MENUHEADER far*)&gotomenu_HDR,
                  7515   ; main.c   2117               0,0,0,0);
28FA E00C         7516           MOV     R12,#00h
28FC E00D         7517           MOV     R13,#00h
28FE 88D0         7518           MOV     [-R0],R13
2900 88C0         7519           MOV     [-R0],R12
2902 E00E         7520           MOV     R14,#00h
2904 E00F         7521           MOV     R15,#00h
2906 88F0         7522           MOV     [-R0],R15
2908 88E0         7523           MOV     [-R0],R14
290A E001         7524           MOV     R1,#00h
290C E002         7525           MOV     R2,#00h
290E 8820         7526           MOV     [-R0],R2
2910 8810         7527           MOV     [-R0],R1
2912 E003         7528           MOV     R3,#00h
2914 E004         7529           MOV     R4,#00h
2916 8840         7530           MOV     [-R0],R4
2918 8830         7531           MOV     [-R0],R3
291A E6F50000  R  7532           MOV     R5,#POF _gotomenu_HDR
291E E6FA0000  R  7533           MOV     R10,#PAG _gotomenu_HDR
2922 88A0         7534           MOV     [-R0],R10
2924 8850         7535           MOV     [-R0],R5
2926 E6FB0000  R  7536           MOV     R11,#POF _gotomenu_STRUCT
292A E6FC0000  R  7537           MOV     R12,#PAG _gotomenu_STRUCT
292E 88C0         7538           MOV     [-R0],R12
2930 88B0         7539           MOV     [-R0],R11
2932 E00C         7540           MOV     R12,#00h
2934 E00D         7541           MOV     R13,#00h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 143
main

 LOC CODE        LINE   SOURCELINE

2936 E00E         7542           MOV     R14,#00h
2938 DA000000  R  7543           CALLS   SEG _CreateMenu02,_CreateMenu02
293C 06F01800     7544           ADD     R0,#018h
                  7545   ; main.c   2118 }
2940 DB00         7546           RETS
                  7547   _goto_menu      ENDP
                  7548   ; main.c   2119 
                  7549   ; main.c   2120 //===================================================================
                  7550   ; main.c   2121 // Меню Bookmark...
                  7551   ; main.c   2122 //===================================================================
                  7552   ; main.c   2123 void set_book1(void)
                  7553   ; main.c   2124 {
                  7554           PUBLIC  _set_book1
                  7555   _set_book1      PROC    FAR
                  7556   ; Locals:
                  7557   ; 
                  7558   ; Statics:
                  7559   ; 
                  7560   ; CSEs:
                  7561   ; 
                  7562   ; main.c   2125  HISTORY.bookm1=curline;
2942 E6000000  R  7563           MOV     DPP0,#PAG _curline
2946 CC00         7564           NOP
2948 F2FC0000  R  7565           MOV     R12,POF _curline
294C F2FD0000  R  7566           MOV     R13,POF (_curline+2)
2950 E6000000  R  7567           MOV     DPP0,#PAG _HISTORY
2954 CC00         7568           NOP
2956 F6FC0000  R  7569           MOV     POF (_HISTORY+140),R12
295A F6FD0000  R  7570           MOV     POF (_HISTORY+142),R13
                  7571   ; main.c   2126  GeneralFunc(1);
295E E01C         7572           MOV     R12,#01h
2960 FA000000  R  7573           JMPS    SEG _GeneralFunc,_GeneralFunc
                  7574   ; main.c   2127 }
                  7575           RETV
                  7576   _set_book1      ENDP
                  7577   ; main.c   2128 
                  7578   ; main.c   2129 void set_book2(void)
                  7579   ; main.c   2130 {
                  7580           PUBLIC  _set_book2
                  7581   _set_book2      PROC    FAR
                  7582   ; Locals:
                  7583   ; 
                  7584   ; Statics:
                  7585   ; 
                  7586   ; CSEs:
                  7587   ; 
                  7588   ; main.c   2131  HISTORY.bookm2=curline;
2964 E6000000  R  7589           MOV     DPP0,#PAG _curline
2968 CC00         7590           NOP
296A F2FC0000  R  7591           MOV     R12,POF _curline
296E F2FD0000  R  7592           MOV     R13,POF (_curline+2)
2972 E6000000  R  7593           MOV     DPP0,#PAG _HISTORY
2976 CC00         7594           NOP
2978 F6FC0000  R  7595           MOV     POF (_HISTORY+144),R12
297C F6FD0000  R  7596           MOV     POF (_HISTORY+146),R13
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 144
main

 LOC CODE        LINE   SOURCELINE

                  7597   ; main.c   2132  GeneralFunc(1);
2980 E01C         7598           MOV     R12,#01h
2982 FA000000  R  7599           JMPS    SEG _GeneralFunc,_GeneralFunc
                  7600   ; main.c   2133 }
                  7601           RETV
                  7602   _set_book2      ENDP
                  7603   ; main.c   2134 
                  7604   ; main.c   2135 void set_book3(void)
                  7605   ; main.c   2136 {
                  7606           PUBLIC  _set_book3
                  7607   _set_book3      PROC    FAR
                  7608   ; Locals:
                  7609   ; 
                  7610   ; Statics:
                  7611   ; 
                  7612   ; CSEs:
                  7613   ; 
                  7614   ; main.c   2137  HISTORY.bookm3=curline;
2986 E6000000  R  7615           MOV     DPP0,#PAG _curline
298A CC00         7616           NOP
298C F2FC0000  R  7617           MOV     R12,POF _curline
2990 F2FD0000  R  7618           MOV     R13,POF (_curline+2)
2994 E6000000  R  7619           MOV     DPP0,#PAG _HISTORY
2998 CC00         7620           NOP
299A F6FC0000  R  7621           MOV     POF (_HISTORY+148),R12
299E F6FD0000  R  7622           MOV     POF (_HISTORY+150),R13
                  7623   ; main.c   2138  GeneralFunc(1);
29A2 E01C         7624           MOV     R12,#01h
29A4 FA000000  R  7625           JMPS    SEG _GeneralFunc,_GeneralFunc
                  7626   ; main.c   2139 }
                  7627           RETV
                  7628   _set_book3      ENDP
                  7629   ; main.c   2140 
                  7630   ; main.c   2141 void set_book4(void)
                  7631   ; main.c   2142 {
                  7632           PUBLIC  _set_book4
                  7633   _set_book4      PROC    FAR
                  7634   ; Locals:
                  7635   ; 
                  7636   ; Statics:
                  7637   ; 
                  7638   ; CSEs:
                  7639   ; 
                  7640   ; main.c   2143  HISTORY.bookm4=curline;
29A8 E6000000  R  7641           MOV     DPP0,#PAG _curline
29AC CC00         7642           NOP
29AE F2FC0000  R  7643           MOV     R12,POF _curline
29B2 F2FD0000  R  7644           MOV     R13,POF (_curline+2)
29B6 E6000000  R  7645           MOV     DPP0,#PAG _HISTORY
29BA CC00         7646           NOP
29BC F6FC0000  R  7647           MOV     POF (_HISTORY+152),R12
29C0 F6FD0000  R  7648           MOV     POF (_HISTORY+154),R13
                  7649   ; main.c   2144  GeneralFunc(1);
29C4 E01C         7650           MOV     R12,#01h
29C6 FA000000  R  7651           JMPS    SEG _GeneralFunc,_GeneralFunc
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 145
main

 LOC CODE        LINE   SOURCELINE

                  7652   ; main.c   2145 }
                  7653           RETV
                  7654   _set_book4      ENDP
                  7655   ; main.c   2146 
                  7656   ; main.c   2147 static const struct ITEMSDATA far bookmenu_ITEMS[]=
                  7657   MAIN_2_PR       ENDS
                  7658   
                  7659   MAIN_3_FC       SECTION DATA
0992              7660   _bookmenu_ITEMS LABEL   WORD
0992 00000000     7661           DW      00h,00h
0996 300E300E     7662           DW      0E30h,0E30h,00h
099A 0000        
099C 00000000     7663           DW      00h,00h
09A0 0300BC02     7664           DW      03h,02BCh
09A4 00000000     7665           DW      00h,00h
09A8 310E310E     7666           DW      0E31h,0E31h,00h
09AC 0000        
09AE 00000000     7667           DW      00h,00h
09B2 0300BC02     7668           DW      03h,02BCh
09B6 00000000     7669           DW      00h,00h
09BA 320E320E     7670           DW      0E32h,0E32h,00h
09BE 0000        
09C0 00000000     7671           DW      00h,00h
09C4 0300BC02     7672           DW      03h,02BCh
09C8 00000000     7673           DW      00h,00h
09CC 330E330E     7674           DW      0E33h,0E33h,00h
09D0 0000        
09D2 00000000     7675           DW      00h,00h
09D6 0300BC02     7676           DW      03h,02BCh
                  7677   ; main.c   2148 {
                  7678   ; main.c   2149  NULL, 0xE30,0xE30, 0,NULL,3,0x2BC,
                  7679   ; main.c   2150  NULL, 0xE31,0xE31, 0,NULL,3,0x2BC,
                  7680   ; main.c   2151  NULL, 0xE32,0xE32, 0,NULL,3,0x2BC,
                  7681   ; main.c   2152  NULL, 0xE33,0xE33, 0,NULL,3,0x2BC
                  7682   ; main.c   2153 };
                  7683   ; main.c   2154 
                  7684   ; main.c   2155 static const struct ITEMSHNDL far bookmenu_HNDLS[]=
09DA              7685   _bookmenu_HNDLS LABEL   WORD
09DA 00000000  R  7686           DSPTR   _set_book1,_set_book2,_set_book3,_set_book4
09DE 00000000  R 
09E2 00000000  R 
09E6 00000000    
                  7687   ; main.c   2156 {
                  7688   ; main.c   2157  set_book1,
                  7689   ; main.c   2158  set_book2,
                  7690   ; main.c   2159  set_book3,
                  7691   ; main.c   2160  set_book4
                  7692   ; main.c   2161 };
                  7693   ; main.c   2162 
                  7694   ; main.c   2163 static const struct MENUHEADER far bookmenu_HDR=
09EA              7695   _bookmenu_HDR   LABEL   WORD
09EA 00000000     7696           DW      00h,00h,065h,0Ch
09EE 65000C00    
09F2 B00DE202     7697           DW      0DB0h,02E2h
09F6 290EFF7F     7698           DW      0E29h,07FFFh
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 146
main

 LOC CODE        LINE   SOURCELINE

                  7699   ; main.c   2164 {
                  7700   ; main.c   2165  0x00,0x00,0x65,0x0C,(char far*)0xB88DB0,0xE29,0x7FFF 
                  7701   ; main.c   2166 };
                  7702   ; main.c   2167 
                  7703   ; main.c   2168 static const struct MENUSTRUCT far bookmenu_STRUCT=
09FA              7704   _bookmenu_STRUCT        LABEL   WORD
09FA 00000000     7705           DW      00h,00h,00h,00h,00h,00h,00h,00h
09FE 00000000    
0A02 00000000    
0A06 00000000    
0A0A 063CEB02     7706           DW      03C06h,02EBh,03BFCh,02EBh
0A0E FC3BEB02    
0A12 80000000     7707           DW      080h,00h
0A16 00000000     7708           DW      00h,00h
0A1A 00000000  R  7709           DPPTR   _bookmenu_ITEMS,_bookmenu_HNDLS
0A1E 00000000    
0A22 0400         7710           DW      04h
                  7711   ; main.c   2169 {
                  7712   ; main.c   2170  NULL,NULL,NULL,NULL,
                  7713   ; main.c   2171  (char far*)0xBAFC06,(char far*)0xBAFBFC,
                  7714   ; main.c   2172  0x80,0x00,
                  7715   ; main.c   2173  NULL,
                  7716   ; main.c   2174  (struct ITEMSDATA far*)&bookmenu_ITEMS,
                  7717   ; main.c   2175  (struct ITEMSHNDL far*)&bookmenu_HNDLS,
                  7718   ; main.c   2176  4
                  7719   ; main.c   2177 };
                  7720   ; main.c   2178 
                  7721   ; main.c   2179 void bookm_menu(void)
                  7722   ; main.c   2180 {
                  7723           PUBLIC  _bookm_menu
                  7724   MAIN_3_FC       ENDS
                  7725   
                  7726   MAIN_2_PR       SECTION CODE
                  7727   _bookm_menu     PROC    FAR
                  7728   ; Locals:
                  7729   ; 
                  7730   ; Statics:
                  7731   ; 
                  7732   ; CSEs:
                  7733   ; 
                  7734   ; main.c   2181  GeneralFunc(1);
29CA E01C         7735           MOV     R12,#01h
29CC DA000000  R  7736           CALLS   SEG _GeneralFunc,_GeneralFunc
                  7737   ; main.c   2182  CreateMenu02(menu_full,0,0,
                  7738   ; main.c   2183               (struct MENUSTRUCT far*)&bookmenu_STRUCT,
                  7739   ; main.c   2184               (struct MENUHEADER far*)&bookmenu_HDR,
                  7740   ; main.c   2185               0,0,0,0);
29D0 E00C         7741           MOV     R12,#00h
29D2 E00D         7742           MOV     R13,#00h
29D4 88D0         7743           MOV     [-R0],R13
29D6 88C0         7744           MOV     [-R0],R12
29D8 E00E         7745           MOV     R14,#00h
29DA E00F         7746           MOV     R15,#00h
29DC 88F0         7747           MOV     [-R0],R15
29DE 88E0         7748           MOV     [-R0],R14
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 147
main

 LOC CODE        LINE   SOURCELINE

29E0 E001         7749           MOV     R1,#00h
29E2 E002         7750           MOV     R2,#00h
29E4 8820         7751           MOV     [-R0],R2
29E6 8810         7752           MOV     [-R0],R1
29E8 E003         7753           MOV     R3,#00h
29EA E004         7754           MOV     R4,#00h
29EC 8840         7755           MOV     [-R0],R4
29EE 8830         7756           MOV     [-R0],R3
29F0 E6F50000  R  7757           MOV     R5,#POF _bookmenu_HDR
29F4 E6FA0000  R  7758           MOV     R10,#PAG _bookmenu_HDR
29F8 88A0         7759           MOV     [-R0],R10
29FA 8850         7760           MOV     [-R0],R5
29FC E6FB0000  R  7761           MOV     R11,#POF _bookmenu_STRUCT
2A00 E6FC0000  R  7762           MOV     R12,#PAG _bookmenu_STRUCT
2A04 88C0         7763           MOV     [-R0],R12
2A06 88B0         7764           MOV     [-R0],R11
2A08 E00C         7765           MOV     R12,#00h
2A0A E00D         7766           MOV     R13,#00h
2A0C E00E         7767           MOV     R14,#00h
2A0E DA000000  R  7768           CALLS   SEG _CreateMenu02,_CreateMenu02
2A12 06F01800     7769           ADD     R0,#018h
                  7770   ; main.c   2186 }
2A16 DB00         7771           RETS
                  7772   _bookm_menu     ENDP
                  7773   ; main.c   2187 //===================================================================
                  7774   ; main.c   2188 // Меню по левому софту
                  7775   ; main.c   2189 //===================================================================
                  7776   ; main.c   2190 
                  7777   ; main.c   2191 void search_menu(void)
                  7778   ; main.c   2192 {
                  7779           PUBLIC  _search_menu
                  7780   _search_menu    PROC    FAR
                  7781   ; Locals:
                  7782   ; 
                  7783   ; Statics:
                  7784   ; 
                  7785   ; CSEs:
                  7786   ; 
                  7787   ; main.c   2193 }
2A18 DB00         7788           RETS
                  7789   _search_menu    ENDP
                  7790   ; main.c   2194 
                  7791   ; main.c   2195 static const STR softmenu_ExtendedSTR[]=
                  7792   MAIN_2_PR       ENDS
                  7793   
                  7794   MAIN_3_FC       SECTION DATA
0A24              7795   _softmenu_ExtendedSTR   LABEL   WORD
0A24 00000000  R  7796           DPPTR   _802,_803,_804,_805,_806
0A28 00000000  R 
0A2C 00000000  R 
0A30 00000000  R 
0A34 00000000    
0A38 00000000  R  7797           DPPTR   _807,_808,_809,_810,_811
0A3C 00000000  R 
0A40 00000000  R 
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 148
main

 LOC CODE        LINE   SOURCELINE

0A44 00000000  R 
0A48 00000000    
0A4C 00000000  R  7798           DPPTR   _812,_813,_814
0A50 00000000  R 
0A54 00000000    
                  7799   ; main.c   2196 {
                  7800   ; main.c   2197  "TED menu",
                  7801   ; main.c   2198  "Goto...", //8
                  7802   ; main.c   2199  "Set Bookmark...", //9
                  7803   ; main.c   2200  "Search...", //A
                  7804   ; main.c   2201  "Top", //B
                  7805   ; main.c   2202  "Line...", //C
                  7806   ; main.c   2203  "Percent...", //D
                  7807   ; main.c   2204  "Bottom", //E
                  7808   ; main.c   2205  "Last saved", //F
                  7809   ; main.c   2206  "BM1 000000", //30
                  7810   ; main.c   2207  "BM2 000000", //31
                  7811   ; main.c   2208  "BM3 000000", //32
                  7812   ; main.c   2209  "BM4 000000", //33
                  7813   ; main.c   2210 };
                  7814   ; main.c   2211 
                  7815   ; main.c   2212 static const struct ITEMSDATA far softmenu_ITEMS[]=
0A58              7816   _softmenu_ITEMS LABEL   WORD
0A58 00000000     7817           DW      00h,00h
0A5C 280E280E     7818           DW      0E28h,0E28h,00h
0A60 0000        
0A62 00000000     7819           DW      00h,00h
0A66 0300BC02     7820           DW      03h,02BCh
0A6A 00000000     7821           DW      00h,00h
0A6E 290E290E     7822           DW      0E29h,0E29h,00h
0A72 0000        
0A74 00000000     7823           DW      00h,00h
0A78 0300BC02     7824           DW      03h,02BCh
0A7C 00000000     7825           DW      00h,00h
0A80 2A0E2A0E     7826           DW      0E2Ah,0E2Ah,00h
0A84 0000        
0A86 00000000     7827           DW      00h,00h
0A8A 0300BC02     7828           DW      03h,02BCh
                  7829   ; main.c   2213 {
                  7830   ; main.c   2214  NULL, 0xE28,0xE28, 0,NULL,3,0x2BC,
                  7831   ; main.c   2215  NULL, 0xE29,0xE29, 0,NULL,3,0x2BC,
                  7832   ; main.c   2216  NULL, 0xE2A,0xE2A, 0,NULL,3,0x2BC
                  7833   ; main.c   2217 };
                  7834   ; main.c   2218 
                  7835   ; main.c   2219 static const struct ITEMSHNDL far softmenu_HNDLS[]=
0A8E              7836   _softmenu_HNDLS LABEL   WORD
0A8E 00000000  R  7837           DSPTR   _goto_menu,_bookm_menu,_search_menu
0A92 00000000  R 
0A96 00000000    
                  7838   ; main.c   2220 {
                  7839   ; main.c   2221  goto_menu,
                  7840   ; main.c   2222  bookm_menu,
                  7841   ; main.c   2223  search_menu
                  7842   ; main.c   2224 };
                  7843   ; main.c   2225 
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 149
main

 LOC CODE        LINE   SOURCELINE

                  7844   ; main.c   2226 static const struct MENUHEADER far softmenu_HDR=
0A9A              7845   _softmenu_HDR   LABEL   WORD
0A9A 00000000     7846           DW      00h,00h,065h,0Ch
0A9E 65000C00    
0AA2 B00DE202     7847           DW      0DB0h,02E2h
0AA6 270EFF7F     7848           DW      0E27h,07FFFh
                  7849   ; main.c   2227 {
                  7850   ; main.c   2228  0x00,0x00,0x65,0x0C,(char far*)0xB88DB0,0xE27,0x7FFF 
                  7851   ; main.c   2229 };
                  7852   ; main.c   2230 
                  7853   ; main.c   2231 static const struct MENUSTRUCT far softmenu_STRUCT=
0AAA              7854   _softmenu_STRUCT        LABEL   WORD
0AAA 00000000     7855           DW      00h,00h,00h,00h,00h,00h,00h,00h
0AAE 00000000    
0AB2 00000000    
0AB6 00000000    
0ABA 063CEB02     7856           DW      03C06h,02EBh,03BFCh,02EBh
0ABE FC3BEB02    
0AC2 80000000     7857           DW      080h,00h
0AC6 00000000     7858           DW      00h,00h
0ACA 00000000  R  7859           DPPTR   _softmenu_ITEMS,_softmenu_HNDLS
0ACE 00000000    
0AD2 0300         7860           DW      03h
                  7861   ; main.c   2232 {
                  7862   ; main.c   2233  NULL,NULL,NULL,NULL,
                  7863   ; main.c   2234  (char far*)0xBAFC06,(char far*)0xBAFBFC,
                  7864   ; main.c   2235  0x80,0x00,
                  7865   ; main.c   2236  NULL,
                  7866   ; main.c   2237  (struct ITEMSDATA far*)&softmenu_ITEMS,
                  7867   ; main.c   2238  (struct ITEMSHNDL far*)&softmenu_HNDLS,
                  7868   ; main.c   2239  3
                  7869   ; main.c   2240 };
                  7870   ; main.c   2241 
                  7871   ; main.c   2242 void DrawSoftMenu(void)
                  7872   ; main.c   2243 {
                  7873           PUBLIC  _DrawSoftMenu
0AD4              7874   _815    LABEL   BYTE
0AD4 256C7500     7875           DB      025h,06Ch,075h,00h
                  7876   MAIN_3_FC       ENDS
                  7877   
                  7878   MAIN_2_PR       SECTION CODE
                  7879   _DrawSoftMenu   PROC    FAR
                  7880   ; Locals:
                  7881   ; 
                  7882   ; Statics:
                  7883   ;     lfrm = label _815
                  7884   ; 
                  7885   ; CSEs:
                  7886   ; 
                  7887   ; main.c   2244  static const char lfrm[]="%lu";
                  7888   ; main.c   2245  xsprintf((STR)(softmenu_ExtendedSTR[9]+4),(STR)lfrm,HISTORY.bookm1);
2A1A E6000000  R  7889           MOV     DPP0,#PAG _HISTORY
2A1E CC00         7890           NOP
2A20 F2FC0000  R  7891           MOV     R12,POF (_HISTORY+140)
2A24 F2FD0000  R  7892           MOV     R13,POF (_HISTORY+142)
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 150
main

 LOC CODE        LINE   SOURCELINE

2A28 88D0         7893           MOV     [-R0],R13
2A2A 88C0         7894           MOV     [-R0],R12
2A2C E6000000  R  7895           MOV     DPP0,#PAG _softmenu_ExtendedSTR
2A30 E6FE0000  R  7896           MOV     R14,#POF _815
2A34 F2FC0000  R  7897           MOV     R12,POF (_softmenu_ExtendedSTR+36)
2A38 F2FD0000  R  7898           MOV     R13,POF (_softmenu_ExtendedSTR+38)
2A3C 08C4         7899           ADD     R12,#04h
2A3E E6FF0000  R  7900           MOV     R15,#PAG _815
2A42 DA000000  R  7901           CALLS   SEG _xsprintf,_xsprintf
                  7902   ; main.c   2246  xsprintf((STR)(softmenu_ExtendedSTR[10]+4),(STR)lfrm,HISTORY.bookm2);
2A46 E6000000  R  7903           MOV     DPP0,#PAG _HISTORY
2A4A 0804         7904           ADD     R0,#04h
2A4C F2FC0000  R  7905           MOV     R12,POF (_HISTORY+144)
2A50 F2FD0000  R  7906           MOV     R13,POF (_HISTORY+146)
2A54 88D0         7907           MOV     [-R0],R13
2A56 88C0         7908           MOV     [-R0],R12
2A58 E6000000  R  7909           MOV     DPP0,#PAG _softmenu_ExtendedSTR
2A5C E6FE0000  R  7910           MOV     R14,#POF _815
2A60 F2FC0000  R  7911           MOV     R12,POF (_softmenu_ExtendedSTR+40)
2A64 F2FD0000  R  7912           MOV     R13,POF (_softmenu_ExtendedSTR+42)
2A68 08C4         7913           ADD     R12,#04h
2A6A E6FF0000  R  7914           MOV     R15,#PAG _815
2A6E DA000000  R  7915           CALLS   SEG _xsprintf,_xsprintf
                  7916   ; main.c   2247  xsprintf((STR)(softmenu_ExtendedSTR[11]+4),(STR)lfrm,HISTORY.bookm3);
2A72 E6000000  R  7917           MOV     DPP0,#PAG _HISTORY
2A76 0804         7918           ADD     R0,#04h
2A78 F2FC0000  R  7919           MOV     R12,POF (_HISTORY+148)
2A7C F2FD0000  R  7920           MOV     R13,POF (_HISTORY+150)
2A80 88D0         7921           MOV     [-R0],R13
2A82 88C0         7922           MOV     [-R0],R12
2A84 E6000000  R  7923           MOV     DPP0,#PAG _softmenu_ExtendedSTR
2A88 E6FE0000  R  7924           MOV     R14,#POF _815
2A8C F2FC0000  R  7925           MOV     R12,POF (_softmenu_ExtendedSTR+44)
2A90 F2FD0000  R  7926           MOV     R13,POF (_softmenu_ExtendedSTR+46)
2A94 08C4         7927           ADD     R12,#04h
2A96 E6FF0000  R  7928           MOV     R15,#PAG _815
2A9A DA000000  R  7929           CALLS   SEG _xsprintf,_xsprintf
                  7930   ; main.c   2248  xsprintf((STR)(softmenu_ExtendedSTR[12]+4),(STR)lfrm,HISTORY.bookm4);
2A9E E6000000  R  7931           MOV     DPP0,#PAG _HISTORY
2AA2 0804         7932           ADD     R0,#04h
2AA4 F2FC0000  R  7933           MOV     R12,POF (_HISTORY+152)
2AA8 F2FD0000  R  7934           MOV     R13,POF (_HISTORY+154)
2AAC 88D0         7935           MOV     [-R0],R13
2AAE 88C0         7936           MOV     [-R0],R12
2AB0 E6000000  R  7937           MOV     DPP0,#PAG _softmenu_ExtendedSTR
2AB4 E6FE0000  R  7938           MOV     R14,#POF _815
2AB8 F2FC0000  R  7939           MOV     R12,POF (_softmenu_ExtendedSTR+48)
2ABC F2FD0000  R  7940           MOV     R13,POF (_softmenu_ExtendedSTR+50)
2AC0 08C4         7941           ADD     R12,#04h
2AC2 E6FF0000  R  7942           MOV     R15,#PAG _815
2AC6 DA000000  R  7943           CALLS   SEG _xsprintf,_xsprintf
2ACA 0804         7944           ADD     R0,#04h
                  7945   ; main.c   2249  setExtSIDTable(softmenu_ExtendedSTR);
2ACC E6FC0000  R  7946           MOV     R12,#POF _softmenu_ExtendedSTR
2AD0 E6FD0000  R  7947           MOV     R13,#PAG _softmenu_ExtendedSTR
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 151
main

 LOC CODE        LINE   SOURCELINE

2AD4 DA000000  R  7948           CALLS   SEG _setExtSIDTable,_setExtSIDTable
                  7949   ; main.c   2250  CreateMenu02(menu_full,0,0,
                  7950   ; main.c   2251               (struct MENUSTRUCT far*)&softmenu_STRUCT,
                  7951   ; main.c   2252               (struct MENUHEADER far*)&softmenu_HDR,
                  7952   ; main.c   2253               0,0,0,0);
2AD8 E00C         7953           MOV     R12,#00h
2ADA E00D         7954           MOV     R13,#00h
2ADC 88D0         7955           MOV     [-R0],R13
2ADE 88C0         7956           MOV     [-R0],R12
2AE0 E00E         7957           MOV     R14,#00h
2AE2 E00F         7958           MOV     R15,#00h
2AE4 88F0         7959           MOV     [-R0],R15
2AE6 88E0         7960           MOV     [-R0],R14
2AE8 E001         7961           MOV     R1,#00h
2AEA E002         7962           MOV     R2,#00h
2AEC 8820         7963           MOV     [-R0],R2
2AEE 8810         7964           MOV     [-R0],R1
2AF0 E003         7965           MOV     R3,#00h
2AF2 E004         7966           MOV     R4,#00h
2AF4 8840         7967           MOV     [-R0],R4
2AF6 8830         7968           MOV     [-R0],R3
2AF8 E6F50000  R  7969           MOV     R5,#POF _softmenu_HDR
2AFC E6FA0000  R  7970           MOV     R10,#PAG _softmenu_HDR
2B00 88A0         7971           MOV     [-R0],R10
2B02 8850         7972           MOV     [-R0],R5
2B04 E6FB0000  R  7973           MOV     R11,#POF _softmenu_STRUCT
2B08 E6FC0000  R  7974           MOV     R12,#PAG _softmenu_STRUCT
2B0C 88C0         7975           MOV     [-R0],R12
2B0E 88B0         7976           MOV     [-R0],R11
2B10 E00C         7977           MOV     R12,#00h
2B12 E00D         7978           MOV     R13,#00h
2B14 E00E         7979           MOV     R14,#00h
2B16 DA000000  R  7980           CALLS   SEG _CreateMenu02,_CreateMenu02
2B1A 06F01800     7981           ADD     R0,#018h
                  7982   ; main.c   2254 }
2B1E DB00         7983           RETS
                  7984   _DrawSoftMenu   ENDP
                  7985   ; main.c   2255 
                  7986   ; main.c   2256 //======================================================================
                  7987   ; main.c   2257 
                  7988   ; main.c   2258 //Загрузка куска входного файла
                  7989   ; main.c   2259 unsigned int FL_loader(int fin, unsigned int p)
                  7990   ; main.c   2260 {
                  7991           PUBLIC  _FL_loader
                  7992   _FL_loader      PROC    FAR
2B20 8890         7993           MOV     [-R0],R9
2B22 8880         7994           MOV     [-R0],R8
2B24 8860         7995           MOV     [-R0],R6
2B26 F09D         7996           MOV     R9,R13
2B28 F06C         7997           MOV     R6,R12
                  7998   ; Locals:
                  7999   ; 
                  8000   ; Statics:
                  8001   ; 
                  8002   ; CSEs:
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 152
main

 LOC CODE        LINE   SOURCELINE

                  8003   ;     i = R8
                  8004   ;     p = R9
                  8005   ;     fin = R6
                  8006   ; 
                  8007   ; main.c   2261  unsigned int i;
                  8008   ; main.c   2262  if (p==0xFFFF)
2B2A 46F9FFFF     8009           CMP     R9,#0FFFFh
2B2E 3D13         8010           JMPR    cc_NE,_817
                  8011   ; main.c   2263  {
                  8012   ; main.c   2264   //Первая загрузка
                  8013   ; main.c   2265   i=FileRead(fin,dstk,STKSZ);
2B30 F0C6         8014           MOV     R12,R6
2B32 E6FD0000  R  8015           MOV     R13,#POF _dstk
2B36 E6FE0000  R  8016           MOV     R14,#PAG _dstk
2B3A E6FF0040     8017           MOV     R15,#04000h
2B3E DA000000  R  8018           CALLS   SEG _FileRead,_FileRead
2B42 F084         8019           MOV     R8,R4
                  8020   ; main.c   2266   if (i<STKSZ)
2B44 46F80040     8021           CMP     R8,#04000h
2B48 9D05         8022           JMPR    cc_UGE,_816
                  8023   ; main.c   2267   {
                  8024   ; main.c   2268    //Загрузили меньше 16 кб
                  8025   ; main.c   2269    dstk[i]=0; //Маркер конца файла
2B4A E102         8026           MOVB    RL1,#00h
2B4C D7400000  R  8027           EXTP    #PAG _dstk,#01h
2B50 E4280000 1R  8028           MOVB    [R8+#POF _dstk],RL1
                  8029   ; main.c   2270   }
2B54              8030   _816:
                  8031   ; main.c   2271   p=0;
2B54 E009         8032           MOV     R9,#00h
                  8033   ; main.c   2272  }
2B56              8034   _817:
                  8035   ; main.c   2273  if (p>STKSZ50) //Если указатель перешел за границу половины буфера
2B56 46F90020     8036           CMP     R9,#02000h
2B5A FD22         8037           JMPR    cc_ULE,_819
                  8038   ; main.c   2274  {
                  8039   ; main.c   2275   memcpy(dstk,dstk+STKSZ50,STKSZ50); //Копируем конец буфера в начало
2B5C E6F80020     8040           MOV     R8,#02000h
2B60 8880         8041           MOV     [-R0],R8
2B62 E6FC0000  R  8042           MOV     R12,#POF _dstk
2B66 E6FD0000  R  8043           MOV     R13,#PAG _dstk
2B6A E6FE0000  R  8044           MOV     R14,#POF _dstk+8192
2B6E E6FF0000  R  8045           MOV     R15,#PAG _dstk
2B72 DA000000  R  8046           CALLS   SEG _memcpy,_memcpy
2B76 0802         8047           ADD     R0,#02h
                  8048   ; main.c   2276   p-=STKSZ50; //Новый указатель
2B78 26F90020     8049           SUB     R9,#02000h
                  8050   ; main.c   2277   i=FileRead(fin,dstk+STKSZ50,STKSZ50); //Следующие 8 кБ
2B7C F0C6         8051           MOV     R12,R6
2B7E E6FD0000  R  8052           MOV     R13,#POF _dstk+8192
2B82 E6FE0000  R  8053           MOV     R14,#PAG _dstk
2B86 E6FF0020     8054           MOV     R15,#02000h
2B8A DA000000  R  8055           CALLS   SEG _FileRead,_FileRead
2B8E F084         8056           MOV     R8,R4
                  8057   ; main.c   2278   if (i<STKSZ50) dstk[i+STKSZ50]=0; //Меньше 8кБ - маркер конца файла
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 153
main

 LOC CODE        LINE   SOURCELINE

2B90 46F80020     8058           CMP     R8,#02000h
2B94 9D05         8059           JMPR    cc_UGE,_819
2B96 E10C         8060           MOVB    RL6,#00h
2B98 D7400000  R  8061           EXTP    #PAG _dstk,#01h
2B9C E4C80000 1R  8062           MOVB    [R8+#POF _dstk+8192],RL6
                  8063   ; main.c   2279  }
2BA0              8064   _819:
                  8065   ; main.c   2280  return(p);
2BA0 F049         8066           MOV     R4,R9
                  8067   ; main.c   2281 }
2BA2 9860         8068           MOV     R6,[R0+]
2BA4 9880         8069           MOV     R8,[R0+]
2BA6 9890         8070           MOV     R9,[R0+]
2BA8 DB00         8071           RETS
                  8072   _FL_loader      ENDP
                  8073   ; main.c   2282 
                  8074   ; main.c   2283 //Запись верхнего стека при начальной загрузке
                  8075   ; main.c   2284 unsigned int FL_saver(int fs, unsigned int p)
                  8076   ; main.c   2285 {
                  8077           PUBLIC  _FL_saver
                  8078   _FL_saver       PROC    FAR
2BAA 8890         8079           MOV     [-R0],R9
2BAC 8880         8080           MOV     [-R0],R8
2BAE 8860         8081           MOV     [-R0],R6
2BB0 2804         8082           SUB     R0,#04h
2BB2 F08D         8083           MOV     R8,R13
2BB4 F09C         8084           MOV     R9,R12
                  8085   ; Locals:
                  8086   ;     ul = offset 0
                  8087   ; 
                  8088   ; Statics:
                  8089   ; 
                  8090   ; CSEs:
                  8091   ;     p = R8
                  8092   ;     b = RL6
                  8093   ;     fs = R9
                  8094   ; 
                  8095   ; main.c   2286  unsigned char b;
                  8096   ; main.c   2287  long ul;
                  8097   ; main.c   2288  if (p>=STKSZ50)
2BB6 46F80020     8098           CMP     R8,#02000h
2BBA 8D39         8099           JMPR    cc_ULT,_820
                  8100   ; main.c   2289  {
                  8101   ; main.c   2290   b=FindFreeBlock();
2BBC DA008A05  R  8102           CALLS   SEG _FindFreeBlock,_FindFreeBlock
                  8103   ; main.c   2291   ubat[++u_disk]=b;
2BC0 E6000000  R  8104           MOV     DPP0,#PAG _u_disk
2BC4 F1C8         8105           MOVB    RL6,RL4
2BC6 F2FC0000  R  8106           MOV     R12,POF _u_disk
2BCA 08C1         8107           ADD     R12,#01h
2BCC F6FC0000  R  8108           MOV     POF _u_disk,R12
2BD0 D7400000  R  8109           EXTP    #PAG _ubat,#01h
2BD4 E4CC0000 1R  8110           MOVB    [R12+#POF _ubat],RL6
                  8111   ; main.c   2292   FileSeek(fs,_mulu32(STKSZ50,b),0,&ul);
2BD8 F0C0         8112           MOV     R12,R0
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 154
main

 LOC CODE        LINE   SOURCELINE

2BDA 66FCFF3F     8113           AND     R12,#03FFFh
2BDE F2FD02FE     8114           MOV     R13,DPP1
2BE2 88D0         8115           MOV     [-R0],R13
2BE4 88C0         8116           MOV     [-R0],R12
2BE6 E6FD0020     8117           MOV     R13,#02000h
2BEA C0C6         8118           MOVBZ   R6,RL6
2BEC 1BD6         8119           MULU    R13,R6
2BEE F2FE0CFE     8120           MOV     R14,MDH
2BF2 F2FD0EFE     8121           MOV     R13,MDL
2BF6 F0C9         8122           MOV     R12,R9
2BF8 E00F         8123           MOV     R15,#00h
2BFA DA000000  R  8124           CALLS   SEG _FileSeek,_FileSeek
2BFE 0804         8125           ADD     R0,#04h
                  8126   ; main.c   2293   FileWrite(fs,ustk,STKSZ50);
2C00 F0C9         8127           MOV     R12,R9
2C02 E6FD0000  R  8128           MOV     R13,#POF _ustk
2C06 E6FE0000  R  8129           MOV     R14,#PAG _ustk
2C0A E6FF0020     8130           MOV     R15,#02000h
2C0E DA000000  R  8131           CALLS   SEG _FileWrite,_FileWrite
                  8132   ; main.c   2294   p-=STKSZ50;
2C12 26F80020     8133           SUB     R8,#02000h
                  8134   ; main.c   2295   memcpy(ustk,ustk+STKSZ50,p);
2C16 8880         8135           MOV     [-R0],R8
2C18 E6FC0000  R  8136           MOV     R12,#POF _ustk
2C1C E6FD0000  R  8137           MOV     R13,#PAG _ustk
2C20 E6FE0000  R  8138           MOV     R14,#POF _ustk+8192
2C24 E6FF0000  R  8139           MOV     R15,#PAG _ustk
2C28 DA000000  R  8140           CALLS   SEG _memcpy,_memcpy
2C2C 0802         8141           ADD     R0,#02h
                  8142   ; main.c   2296  }
2C2E              8143   _820:
                  8144   ; main.c   2297  return(p);
2C2E F048         8145           MOV     R4,R8
                  8146   ; main.c   2298 }
2C30 0804         8147           ADD     R0,#04h
2C32 9860         8148           MOV     R6,[R0+]
2C34 9880         8149           MOV     R8,[R0+]
2C36 9890         8150           MOV     R9,[R0+]
2C38 DB00         8151           RETS
                  8152   _FL_saver       ENDP
                  8153   ; main.c   2299 
                  8154   ; main.c   2300 //==================================================================
                  8155   ; main.c   2301 // Первая загрузка файла
                  8156   ; main.c   2302 // TODO:
                  8157   ; main.c   2303 // - разбиение на строки с учетом переноса по словам
                  8158   ; main.c   2304 // - юникод
                  8159   ; main.c   2305 //==================================================================
                  8160   ; main.c   2306 void FirstLoadFile(unsigned int fmt)
                  8161   ; main.c   2307 {
                  8162           PUBLIC  _FirstLoadFile
                  8163   _FirstLoadFile  PROC    FAR
2C3A 8890         8164           MOV     [-R0],R9
2C3C 8880         8165           MOV     [-R0],R8
2C3E 8860         8166           MOV     [-R0],R6
                  8167   ; Locals:
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 155
main

 LOC CODE        LINE   SOURCELINE

                  8168   ; 
                  8169   ; Statics:
                  8170   ; 
                  8171   ; CSEs:
                  8172   ;     fmt = R8
                  8173   ;     fs = R9
                  8174   ;     fin = R6
                  8175   ;     fmt & 127 = R12
                  8176   ; 
                  8177   ; main.c   2308  int fin;
                  8178   ; main.c   2309  int fs;
                  8179   ; main.c   2310 
                  8180   ; main.c   2311  u_disk=-1; //Дисковый указатель верхнего стека
2C40 E6000000  R  8181           MOV     DPP0,#PAG _u_disk
2C44 F08C         8182           MOV     R8,R12
2C46 F68F0000  R  8183           MOV     POF _u_disk,ONES
                  8184   ; main.c   2312  d_disk=-1; //Дисковый указатель нижнего стека
2C4A F68F0000  R  8185           MOV     POF _d_disk,ONES
                  8186   ; main.c   2313  memset(ubat,0,sizeof(ubat)); //Прочищаем таблицу блоков верхнего стека
2C4E E6FC0000  R  8187           MOV     R12,#POF _ubat
2C52 E6FD0000  R  8188           MOV     R13,#PAG _ubat
2C56 E00E         8189           MOV     R14,#00h
2C58 E6FF0001     8190           MOV     R15,#0100h
2C5C DA000000  R  8191           CALLS   SEG _memset,_memset
                  8192   ; main.c   2314  memset(dbat,0,sizeof(dbat)); //Прочищаем таблицу блоков нижнего стека
2C60 E6FC0000  R  8193           MOV     R12,#POF _dbat
2C64 E6FD0000  R  8194           MOV     R13,#PAG _dbat
2C68 E00E         8195           MOV     R14,#00h
2C6A E6FF0001     8196           MOV     R15,#0100h
2C6E DA000000  R  8197           CALLS   SEG _memset,_memset
                  8198   ; main.c   2315  memset(bfree,0,sizeof(bfree)); //Прочищаем таблицу занятых блоков
2C72 E6FC0000  R  8199           MOV     R12,#POF _bfree
2C76 E6FD0000  R  8200           MOV     R13,#PAG _bfree
2C7A E00E         8201           MOV     R14,#00h
2C7C E6FF0001     8202           MOV     R15,#0100h
2C80 DA000000  R  8203           CALLS   SEG _memset,_memset
                  8204   ; main.c   2316  usp=0; //Указатель на верхний стек
2C84 E6000000  R  8205           MOV     DPP0,#PAG _usp
2C88 E6F90040     8206           MOV     R9,#04000h
2C8C F68E0000  R  8207           MOV     POF _usp,ZEROS
                  8208   ; main.c   2317  dsp=STKSZ; //Указатель на нижний стек
2C90 F6F90000  R  8209           MOV     POF _dsp,R9
                  8210   ; main.c   2318  viewpos=0;
2C94 F68E0000  R  8211           MOV     POF _viewpos,ZEROS
                  8212   ; main.c   2319  curpos=0;
2C98 F68E0000  R  8213           MOV     POF _curpos,ZEROS
                  8214   ; main.c   2320  curline=0;
2C9C F68E0000  R  8215           MOV     POF _curline,ZEROS
2CA0 F68E0000  R  8216           MOV     POF (_curline+2),ZEROS
                  8217   ; main.c   2321  CSM=0;
2CA4 F68E0000  R  8218           MOV     POF _CSM,ZEROS
                  8219   ; main.c   2322 
                  8220   ; main.c   2323  draw_mode=255;
2CA8 F78F0000  R  8221           MOVB    POF _draw_mode,ONES
                  8222   ; main.c   2324  if (fmt==0xFFFF)
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 156
main

 LOC CODE        LINE   SOURCELINE

2CAC 46F8FFFF     8223           CMP     R8,#0FFFFh
2CB0 EA30542D  R  8224           JMPA    cc_NE,_822
                  8225   ; main.c   2325  {
                  8226   ; main.c   2326   //Ищем историю
                  8227   ; main.c   2327   if (SearchHistory()&0x8000)
2CB4 DA001809  R  8228           CALLS   SEG _SearchHistory,_SearchHistory
2CB8 8AF42CF0     8229           JB      R4.15,_821
                  8230   ; main.c   2328   {
                  8231   ; main.c   2329    font_size=HISTORY.font;
                  8232   ; main.c   2330    fmt=HISTORY.fmt;
                  8233   ; main.c   2331    win_dos_koi=HISTORY.codepage;
                  8234   ; main.c   2332    cursor_off=HISTORY.cursor_off;
                  8235   ; main.c   2333   }
                  8236   ; main.c   2334   else
                  8237   ; main.c   2335   {
                  8238   ; main.c   2336    win_dos_koi=0xFF; //Неизвестный
2CBC E6000000  R  8239           MOV     DPP0,#PAG _win_dos_koi
2CC0 E14C         8240           MOVB    RL6,#04h
2CC2 F78F0000  R  8241           MOVB    POF _win_dos_koi,ONES
                  8242   ; main.c   2337    font_size=4; //Минимальный шрифт
2CC6 F7FC0000  R  8243           MOVB    POF _font_size,RL6
                  8244   ; main.c   2338    memset(&HISTORY.line,0,4*6); //Все на самом верху
2CCA E6FC0000  R  8245           MOV     R12,#POF _HISTORY+132
2CCE E6FD0000  R  8246           MOV     R13,#PAG _HISTORY
2CD2 E00E         8247           MOV     R14,#00h
2CD4 E6FF1800     8248           MOV     R15,#018h
2CD8 DA000000  R  8249           CALLS   SEG _memset,_memset
                  8250   ; main.c   2339    HISTORY.cursor_off=cursor_off=0; //Включить курсор
2CDC E6000000  R  8251           MOV     DPP0,#PAG _cursor_off
2CE0 CC00         8252           NOP
2CE2 F78E0000  R  8253           MOVB    POF _cursor_off,ZEROS
2CE6 E6000000  R  8254           MOV     DPP0,#PAG _HISTORY
2CEA E018         8255           MOV     R8,#01h
2CEC F78E0000  R  8256           MOVB    POF (_HISTORY+131),ZEROS
                  8257   ; main.c   2340    HISTORY.total=1;
2CF0 F6F80000  R  8258           MOV     POF (_HISTORY+136),R8
2CF4 F68E0000  R  8259           MOV     POF (_HISTORY+138),ZEROS
                  8260   ; main.c   2341    HISTORY.fmt=255; //Первый запуск!!!!
2CF8 F78F0000  R  8261           MOVB    POF (_HISTORY+129),ONES
                  8262   ; main.c   2342    DrawLoadMenu(); //Определяем, как грузить через меню
2CFC DA009C24  R  8263           CALLS   SEG _DrawLoadMenu,_DrawLoadMenu
                  8264   ; main.c   2343    SendMessage(pid_MMI,0x85,0); //Перерисовываем
2D00 E6FCE835     8265           MOV     R12,#035E8h
2D04 E0ED         8266           MOV     R13,#0Eh
2D06 E6FE8500     8267           MOV     R14,#085h
2D0A E00F         8268           MOV     R15,#00h
2D0C DA000000  R  8269           CALLS   SEG _SendMessage,_SendMessage
                  8270   ; main.c   2344    return;
2D10 EA001A2F  R  8271           JMPA    cc_UC,_838
2D14              8272   _821:
2D14 E6000000  R  8273           MOV     DPP0,#PAG _HISTORY
2D18 CC00         8274           NOP
2D1A F3FC0000  R  8275           MOVB    RL6,POF (_HISTORY+128)
2D1E E6000000  R  8276           MOV     DPP0,#PAG _font_size
2D22 CC00         8277           NOP
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 157
main

 LOC CODE        LINE   SOURCELINE

2D24 F7FC0000  R  8278           MOVB    POF _font_size,RL6
2D28 E6000000  R  8279           MOV     DPP0,#PAG _HISTORY
2D2C CC00         8280           NOP
2D2E C2F80000  R  8281           MOVBZ   R8,POF (_HISTORY+129)
2D32 F3F20000  R  8282           MOVB    RL1,POF (_HISTORY+130)
2D36 E6000000  R  8283           MOV     DPP0,#PAG _win_dos_koi
2D3A CC00         8284           NOP
2D3C F7F20000  R  8285           MOVB    POF _win_dos_koi,RL1
2D40 E6000000  R  8286           MOV     DPP0,#PAG _HISTORY
2D44 CC00         8287           NOP
2D46 F3F40000  R  8288           MOVB    RL2,POF (_HISTORY+131)
2D4A E6000000  R  8289           MOV     DPP0,#PAG _cursor_off
2D4E CC00         8290           NOP
2D50 F7F40000  R  8291           MOVB    POF _cursor_off,RL2
                  8292   ; main.c   2345   }
                  8293   ; main.c   2346  }
2D54              8294   _822:
                  8295   ; main.c   2347  if ((fmt&0x7F)>2) fmt=0;
2D54 F098         8296           MOV     R9,R8
2D56 66F97F00     8297           AND     R9,#07Fh
2D5A 4892         8298           CMP     R9,#02h
2D5C FD01         8299           JMPR    cc_ULE,_823
2D5E E008         8300           MOV     R8,#00h
2D60              8301   _823:
                  8302   ; main.c   2348  switch(font_size)
2D60 E6000000  R  8303           MOV     DPP0,#PAG _font_size
2D64 CC00         8304           NOP
2D66 F3FC0000  R  8305           MOVB    RL6,POF _font_size
2D6A 49C4         8306           CMPB    RL6,#04h
2D6C 2D0A         8307           JMPR    cc_EQ,_827
2D6E 49C6         8308           CMPB    RL6,#06h
2D70 2D08         8309           JMPR    cc_EQ,_827
2D72 47FC0800     8310           CMPB    RL6,#08h
2D76 2D05         8311           JMPR    cc_EQ,_827
                  8312   ; main.c   2349  {
                  8313   ; main.c   2350   case 4:
                  8314   ; main.c   2351   case 6:
                  8315   ; main.c   2352   case 8:
                  8316   ; main.c   2353    break;
                  8317   ; main.c   2354   default:
2D78              8318   _824:
                  8319   ; main.c   2355    font_size=4;
2D78 E6000000  R  8320           MOV     DPP0,#PAG _font_size
2D7C E14C         8321           MOVB    RL6,#04h
2D7E F7FC0000  R  8322           MOVB    POF _font_size,RL6
                  8323   ; main.c   2356   break;
                  8324   ; main.c   2357  }
2D82              8325   _827:
                  8326   ; main.c   2358  //Загружаем шрифт
                  8327   ; main.c   2359  loadfont(0);
2D82 E00C         8328           MOV     R12,#00h
2D84 DA004822  R  8329           CALLS   SEG _loadfont,_loadfont
                  8330   ; main.c   2360 
                  8331   ; main.c   2361  //Конвертируем все строки в верхний стек
                  8332   ; main.c   2362  fs=FileOpen((STR)stkfile,_O_CREAT+_O_RDWR+_O_BINARY,_S_IREAD); //Файл верхнего стека
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 158
main

 LOC CODE        LINE   SOURCELINE

2D88 E6FC0000  R  8333           MOV     R12,#POF _stkfile
2D8C E6FD0000  R  8334           MOV     R13,#PAG _stkfile
2D90 E6FE0281     8335           MOV     R14,#08102h
2D94 E6FF0001     8336           MOV     R15,#0100h
2D98 DA000000  R  8337           CALLS   SEG _FileOpen,_FileOpen
2D9C F094         8338           MOV     R9,R4
                  8339   ; main.c   2363 
                  8340   ; main.c   2364  if ((fin=FileOpen((STR)filename,_O_RDONLY+_O_BINARY,0))!=-1)
2D9E E6FC0000  R  8341           MOV     R12,#POF _filename
2DA2 E6FD0000  R  8342           MOV     R13,#PAG _filename
2DA6 E6FE0080     8343           MOV     R14,#08000h
2DAA E00F         8344           MOV     R15,#00h
2DAC DA000000  R  8345           CALLS   SEG _FileOpen,_FileOpen
2DB0 F064         8346           MOV     R6,R4
2DB2 46F6FFFF     8347           CMP     R6,#0FFFFh
2DB6 2D29         8348           JMPR    cc_EQ,_833
                  8349   ; main.c   2365  {
                  8350   ; main.c   2366   switch(fmt&0x7F)
2DB8 F0C8         8351           MOV     R12,R8
2DBA 66FC7F00     8352           AND     R12,#07Fh
2DBE 48C1         8353           CMP     R12,#01h
2DC0 2D02         8354           JMPR    cc_EQ,_829
2DC2 48C2         8355           CMP     R12,#02h
2DC4 3D0C         8356           JMPR    cc_NE,_830
                  8357   ; main.c   2367   {
                  8358   ; main.c   2368    case 1:
                  8359   ; main.c   2369    case 2:
2DC6              8360   _829:
                  8361   ; main.c   2370      usp=ConvertFormat(fin,fs,fmt&0x7F);
2DC6 F0DC         8362           MOV     R13,R12
2DC8 F0C6         8363           MOV     R12,R6
2DCA F0ED         8364           MOV     R14,R13
2DCC F0D9         8365           MOV     R13,R9
2DCE DA000000  R  8366           CALLS   SEG _ConvertFormat,_ConvertFormat
2DD2 E6000000  R  8367           MOV     DPP0,#PAG _usp
2DD6 CC00         8368           NOP
2DD8 F6F40000  R  8369           MOV     POF _usp,R4
                  8370   ; main.c   2371      break;
2DDC 0D13         8371           JMPR    cc_UC,_832
                  8372   ; main.c   2372    case 0:
                  8373   ; main.c   2373    default:
2DDE              8374   _830:
                  8375   ; main.c   2374      if (win_dos_koi==0xFF) win_dos_koi=0;
2DDE E6000000  R  8376           MOV     DPP0,#PAG _win_dos_koi
2DE2 CC00         8377           NOP
2DE4 F3F20000  R  8378           MOVB    RL1,POF _win_dos_koi
2DE8 47F2FF00     8379           CMPB    RL1,#0FFh
2DEC 3D02         8380           JMPR    cc_NE,_831
2DEE F78E0000  R  8381           MOVB    POF _win_dos_koi,ZEROS
2DF2              8382   _831:
                  8383   ; main.c   2375      usp=ConvertSimple(fin,fs);
2DF2 F0C6         8384           MOV     R12,R6
2DF4 F0D9         8385           MOV     R13,R9
2DF6 DA000000  R  8386           CALLS   SEG _ConvertSimple,_ConvertSimple
2DFA E6000000  R  8387           MOV     DPP0,#PAG _usp
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 159
main

 LOC CODE        LINE   SOURCELINE

2DFE CC00         8388           NOP
2E00 F6F40000  R  8389           MOV     POF _usp,R4
                  8390   ; main.c   2376          break;
                  8391   ; main.c   2377   }
2E04              8392   _832:
                  8393   ; main.c   2378   FileClose(fin);
2E04 F0C6         8394           MOV     R12,R6
2E06 DA000000  R  8395           CALLS   SEG _FileClose,_FileClose
                  8396   ; main.c   2379  }
2E0A              8397   _833:
                  8398   ; main.c   2380  FileClose(fs);
2E0A F0C9         8399           MOV     R12,R9
2E0C DA000000  R  8400           CALLS   SEG _FileClose,_FileClose
                  8401   ; main.c   2381  total_line=viewline=curline; //Находимся в последней строке
2E10 E6000000  R  8402           MOV     DPP0,#PAG _curline
2E14 CC00         8403           NOP
2E16 F2F90000  R  8404           MOV     R9,POF _curline
2E1A F2F60000  R  8405           MOV     R6,POF (_curline+2)
2E1E F6F90000  R  8406           MOV     POF _viewline,R9
2E22 F6F60000  R  8407           MOV     POF (_viewline+2),R6
2E26 F6F90000  R  8408           MOV     POF _total_line,R9
2E2A F6F60000  R  8409           MOV     POF (_total_line+2),R6
                  8410   ; main.c   2382  HISTORY.font=font_size;
2E2E F3F20000  R  8411           MOVB    RL1,POF _font_size
2E32 E6000000  R  8412           MOV     DPP0,#PAG _HISTORY
2E36 F028         8413           MOV     R2,R8
2E38 F7F20000  R  8414           MOVB    POF (_HISTORY+128),RL1
                  8415   ; main.c   2383  HISTORY.fmt=fmt;
2E3C F7F40000  R  8416           MOVB    POF (_HISTORY+129),RL2
                  8417   ; main.c   2384  memcpy(HISTORY.name,filename,sizeof(HISTORY.name));
2E40 E6F88000     8418           MOV     R8,#080h
2E44 8880         8419           MOV     [-R0],R8
2E46 E6FC0000  R  8420           MOV     R12,#POF _HISTORY
2E4A E6FD0000  R  8421           MOV     R13,#PAG _HISTORY
2E4E E6FE0000  R  8422           MOV     R14,#POF _filename
2E52 E6FF0000  R  8423           MOV     R15,#PAG _filename
2E56 DA000000  R  8424           CALLS   SEG _memcpy,_memcpy
                  8425   ; main.c   2385  //Расчитываем, куда перейти
                  8426   ; main.c   2386  if (HISTORY.total==total_line)
2E5A E6000000  R  8427           MOV     DPP0,#PAG _HISTORY
2E5E 0802         8428           ADD     R0,#02h
2E60 F2F80000  R  8429           MOV     R8,POF (_HISTORY+136)
2E64 F2F90000  R  8430           MOV     R9,POF (_HISTORY+138)
2E68 E6000000  R  8431           MOV     DPP0,#PAG _total_line
2E6C CC00         8432           NOP
2E6E 22F80000  R  8433           SUB     R8,POF _total_line
2E72 32F90000  R  8434           SUBC    R9,POF (_total_line+2)
2E76 3D0F         8435           JMPR    cc_NE,_834
                  8436   ; main.c   2387  {
                  8437   ; main.c   2388   seek_to_line=HISTORY.line; //Прямой переход
2E78 E6000000  R  8438           MOV     DPP0,#PAG _HISTORY
2E7C CC00         8439           NOP
2E7E F2F80000  R  8440           MOV     R8,POF (_HISTORY+132)
2E82 F2F90000  R  8441           MOV     R9,POF (_HISTORY+134)
2E86 E6000000  R  8442           MOV     DPP0,#PAG _seek_to_line
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 160
main

 LOC CODE        LINE   SOURCELINE

2E8A CC00         8443           NOP
2E8C F6F80000  R  8444           MOV     POF _seek_to_line,R8
2E90 F6F90000  R  8445           MOV     POF (_seek_to_line+2),R9
                  8446   ; main.c   2389  }
2E94 0D3B         8447           JMPR    cc_UC,_837
2E96              8448   _834:
                  8449   ; main.c   2390  else
                  8450   ; main.c   2391  {
                  8451   ; main.c   2392   if (HISTORY.total)
2E96 E6000000  R  8452           MOV     DPP0,#PAG _HISTORY
2E9A CC00         8453           NOP
2E9C F2F80000  R  8454           MOV     R8,POF (_HISTORY+138)
2EA0 72F80000  R  8455           OR      R8,POF (_HISTORY+136)
2EA4 2D1E         8456           JMPR    cc_Z,_835
                  8457   ; main.c   2393    seek_to_line=(total_line*HISTORY.line)/HISTORY.total; //По отношению
2EA6 F2F40000  R  8458           MOV     R4,POF (_HISTORY+132)
2EAA F2F50000  R  8459           MOV     R5,POF (_HISTORY+134)
2EAE E6000000  R  8460           MOV     DPP0,#PAG _total_line
2EB2 CC00         8461           NOP
2EB4 F2FA0000  R  8462           MOV     R10,POF _total_line
2EB8 F2FB0000  R  8463           MOV     R11,POF (_total_line+2)
2EBC DA000000  R  8464           CALLS   SEG __mul,__mul
2EC0 E6000000  R  8465           MOV     DPP0,#PAG _HISTORY
2EC4 CC00         8466           NOP
2EC6 F2FA0000  R  8467           MOV     R10,POF (_HISTORY+136)
2ECA F2FB0000  R  8468           MOV     R11,POF (_HISTORY+138)
2ECE DA000000  R  8469           CALLS   SEG __udil,__udil
2ED2 E6000000  R  8470           MOV     DPP0,#PAG _seek_to_line
2ED6 CC00         8471           NOP
2ED8 F6F40000  R  8472           MOV     POF _seek_to_line,R4
2EDC F6F50000  R  8473           MOV     POF (_seek_to_line+2),R5
2EE0 0D07         8474           JMPR    cc_UC,_836
2EE2              8475   _835:
                  8476   ; main.c   2394   else
                  8477   ; main.c   2395    seek_to_line=0;
2EE2 E6000000  R  8478           MOV     DPP0,#PAG _seek_to_line
2EE6 CC00         8479           NOP
2EE8 F68E0000  R  8480           MOV     POF _seek_to_line,ZEROS
2EEC F68E0000  R  8481           MOV     POF (_seek_to_line+2),ZEROS
2EF0              8482   _836:
                  8483   ; main.c   2396    HISTORY.line=seek_to_line;
2EF0 E6000000  R  8484           MOV     DPP0,#PAG _seek_to_line
2EF4 CC00         8485           NOP
2EF6 F2F80000  R  8486           MOV     R8,POF _seek_to_line
2EFA F2F90000  R  8487           MOV     R9,POF (_seek_to_line+2)
2EFE E6000000  R  8488           MOV     DPP0,#PAG _HISTORY
2F02 CC00         8489           NOP
2F04 F6F80000  R  8490           MOV     POF (_HISTORY+132),R8
2F08 F6F90000  R  8491           MOV     POF (_HISTORY+134),R9
                  8492   ; main.c   2397  }
2F0C              8493   _837:
                  8494   ; main.c   2398  draw_mode=2; //Переходим на нужную строку
2F0C E6000000  R  8495           MOV     DPP0,#PAG _draw_mode
2F10 E12C         8496           MOVB    RL6,#02h
2F12 F7FC0000  R  8497           MOVB    POF _draw_mode,RL6
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 161
main

 LOC CODE        LINE   SOURCELINE

                  8498   ; main.c   2399  GotoLine();
2F16 DA005A0B  R  8499           CALLS   SEG _GotoLine,_GotoLine
                  8500   ; main.c   2400 }
2F1A              8501   _838:
2F1A 9860         8502           MOV     R6,[R0+]
2F1C 9880         8503           MOV     R8,[R0+]
2F1E 9890         8504           MOV     R9,[R0+]
2F20 DB00         8505           RETS
                  8506   _FirstLoadFile  ENDP
                  8507   ; main.c   2401 
                  8508   ; main.c   2402 void EraseSnapShoot(void)
                  8509   ; main.c   2403 {
                  8510           PUBLIC  _EraseSnapShoot
                  8511   _EraseSnapShoot PROC    FAR
                  8512   ; Locals:
                  8513   ; 
                  8514   ; Statics:
                  8515   ; 
                  8516   ; CSEs:
                  8517   ; 
                  8518   ; main.c   2404  FileErase((STR)snapshootfile);
2F22 E6FC0000  R  8519           MOV     R12,#POF _snapshootfile
2F26 E6FD0000  R  8520           MOV     R13,#PAG _snapshootfile
2F2A FA000000  R  8521           JMPS    SEG _FileErase,_FileErase
                  8522   ; main.c   2405 }
                  8523           RETV
                  8524   _EraseSnapShoot ENDP
                  8525   ; main.c   2406 
                  8526   ; main.c   2407 void LoadSnapShoot(void)
                  8527   ; main.c   2408 {
                  8528           PUBLIC  _LoadSnapShoot
                  8529   _LoadSnapShoot  PROC    FAR
2F2E 8880         8530           MOV     [-R0],R8
2F30 26F02C00     8531           SUB     R0,#02Ch
                  8532   ; Locals:
                  8533   ;     mmm = offset 0
                  8534   ; 
                  8535   ; Statics:
                  8536   ; 
                  8537   ; CSEs:
                  8538   ;     f = R8
                  8539   ; 
                  8540   ; main.c   2409  char mmm[0x2C];
                  8541   ; main.c   2410  int f;
                  8542   ; main.c   2411  if ((f=FileOpen((STR)snapshootfile,_O_BINARY+_O_RDONLY,0))!=-1)
2F34 E6FC0000  R  8543           MOV     R12,#POF _snapshootfile
2F38 E6FD0000  R  8544           MOV     R13,#PAG _snapshootfile
2F3C E6FE0080     8545           MOV     R14,#08000h
2F40 E00F         8546           MOV     R15,#00h
2F42 DA000000  R  8547           CALLS   SEG _FileOpen,_FileOpen
2F46 F084         8548           MOV     R8,R4
2F48 46F8FFFF     8549           CMP     R8,#0FFFFh
2F4C EA20EE2F  R  8550           JMPA    cc_EQ,_839
                  8551   ; main.c   2412  {
                  8552   ; main.c   2413   FileRead(f,(void far *)0x80000,16384);
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 162
main

 LOC CODE        LINE   SOURCELINE

2F50 F0C8         8553           MOV     R12,R8
2F52 E00D         8554           MOV     R13,#00h
2F54 E6FE2000     8555           MOV     R14,#020h
2F58 E6FF0040     8556           MOV     R15,#04000h
2F5C DA000000  R  8557           CALLS   SEG _FileRead,_FileRead
                  8558   ; main.c   2414   FileRead(f,(void far *)0x84000,16384);
2F60 F0C8         8559           MOV     R12,R8
2F62 E00D         8560           MOV     R13,#00h
2F64 E6FE2100     8561           MOV     R14,#021h
2F68 E6FF0040     8562           MOV     R15,#04000h
2F6C DA000000  R  8563           CALLS   SEG _FileRead,_FileRead
                  8564   ; main.c   2415   FileRead(f,(void far *)0x88000,16384);
2F70 F0C8         8565           MOV     R12,R8
2F72 E00D         8566           MOV     R13,#00h
2F74 E6FE2200     8567           MOV     R14,#022h
2F78 E6FF0040     8568           MOV     R15,#04000h
2F7C DA000000  R  8569           CALLS   SEG _FileRead,_FileRead
                  8570   ; main.c   2416   FileRead(f,(void far *)0x8C000,16384);
2F80 F0C8         8571           MOV     R12,R8
2F82 E00D         8572           MOV     R13,#00h
2F84 E6FE2300     8573           MOV     R14,#023h
2F88 E6FF0040     8574           MOV     R15,#04000h
2F8C DA000000  R  8575           CALLS   SEG _FileRead,_FileRead
                  8576   ; main.c   2417   FileRead(f,(void far *)0x90000,16384);
2F90 F0C8         8577           MOV     R12,R8
2F92 E00D         8578           MOV     R13,#00h
2F94 E6FE2400     8579           MOV     R14,#024h
2F98 E6FF0040     8580           MOV     R15,#04000h
2F9C DA000000  R  8581           CALLS   SEG _FileRead,_FileRead
                  8582   ; main.c   2418   FileClose(f);
2FA0 F0C8         8583           MOV     R12,R8
2FA2 DA000000  R  8584           CALLS   SEG _FileClose,_FileClose
                  8585   ; main.c   2419   EraseSnapShoot();
2FA6 DA00222F  R  8586           CALLS   SEG _EraseSnapShoot,_EraseSnapShoot
                  8587   ; main.c   2420   terminated=2;
2FAA E6000000  R  8588           MOV     DPP0,#PAG _terminated
2FAE E028         8589           MOV     R8,#02h
2FB0 F6F80000  R  8590           MOV     POF _terminated,R8
                  8591   ; main.c   2421   stk_fhandle=-1;
2FB4 F68F0000  R  8592           MOV     POF _stk_fhandle,ONES
                  8593   ; main.c   2422   dia_id=CreateDialogWithSoftKeys(&main_dia,mmm,0); //Создаем основной диалог
2FB8 E00C         8594           MOV     R12,#00h
2FBA 88C0         8595           MOV     [-R0],R12
2FBC E6FC0000  R  8596           MOV     R12,#POF _main_dia
2FC0 E6FD0000  R  8597           MOV     R13,#PAG _main_dia
2FC4 E02E         8598           MOV     R14,#02h
2FC6 00E0         8599           ADD     R14,R0
2FC8 66FEFF3F     8600           AND     R14,#03FFFh
2FCC F2FF02FE     8601           MOV     R15,DPP1
2FD0 DA000000  R  8602           CALLS   SEG _CreateDialogWithSoftKeys,_CreateDialogWithSoftKeys
2FD4 E6000000  R  8603           MOV     DPP0,#PAG _dia_id
2FD8 0802         8604           ADD     R0,#02h
2FDA F6F40000  R  8605           MOV     POF _dia_id,R4
                  8606   ; main.c   2423   SendMessage(pid_MMI,0x85,0); //Перерисовываем
2FDE E6FCE835     8607           MOV     R12,#035E8h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 163
main

 LOC CODE        LINE   SOURCELINE

2FE2 E0ED         8608           MOV     R13,#0Eh
2FE4 E6FE8500     8609           MOV     R14,#085h
2FE8 E00F         8610           MOV     R15,#00h
2FEA DA000000  R  8611           CALLS   SEG _SendMessage,_SendMessage
                  8612   ; main.c   2424  }
2FEE              8613   _839:
                  8614   ; main.c   2425 }
2FEE 06F02C00     8615           ADD     R0,#02Ch
2FF2 9880         8616           MOV     R8,[R0+]
2FF4 DB00         8617           RETS
                  8618   _LoadSnapShoot  ENDP
                  8619   ; main.c   2426 
                  8620   ; main.c   2427 void xmain(STR file_to_load)
                  8621   ; main.c   2428 {
                  8622           PUBLIC  _xmain
                  8623   _xmain  PROC    FAR
2FF6 8890         8624           MOV     [-R0],R9
2FF8 8880         8625           MOV     [-R0],R8
2FFA 26F02C00     8626           SUB     R0,#02Ch
2FFE F09D         8627           MOV     R9,R13
                  8628   ; Locals:
                  8629   ;     mmm = offset 0
                  8630   ; 
                  8631   ; Statics:
                  8632   ; 
                  8633   ; CSEs:
                  8634   ;     file_to_load = R8R9
                  8635   ; 
                  8636   ; main.c   2429  char mmm[0x2C];
                  8637   ; main.c   2430  filename[0]=0;
3000 E6000000  R  8638           MOV     DPP0,#PAG _filename
3004 F08C         8639           MOV     R8,R12
3006 F78E0000  R  8640           MOVB    POF _filename,ZEROS
                  8641   ; main.c   2431  if (*((int far *)0x3B1DC)!=0x3870) goto LOAD_SNAP;
300A E6FCDC31     8642           MOV     R12,#031DCh
300E E0ED         8643           MOV     R13,#0Eh
3010 DC4D         8644           EXTP    R13,#01h
3012 A8CC     1   8645           MOV     R12,[R12]
3014 46FC7038     8646           CMP     R12,#03870h
3018 3D0B         8647           JMPR    cc_NE,_841
                  8648   ; main.c   2432  if (_pag(file_to_load)==0x35)
301A F0C9         8649           MOV     R12,R9
301C 46FC3500     8650           CMP     R12,#035h
3020 3D07         8651           JMPR    cc_NE,_841
                  8652   ; main.c   2433  {
                  8653   ; main.c   2434   if (strlen(file_to_load)<0x7F)
3022 F0C8         8654           MOV     R12,R8
3024 F0D9         8655           MOV     R13,R9
3026 DA000000  R  8656           CALLS   SEG _strlen,_strlen
302A 46F47F00     8657           CMP     R4,#07Fh
302E CD07         8658           JMPR    cc_SLT,_842
                  8659   ; main.c   2435   {
                  8660   ; main.c   2436    strcpy((STR)filename,file_to_load);
                  8661   ; main.c   2437    goto LOAD_TEXT;
                  8662   ; main.c   2438   }
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 164
main

 LOC CODE        LINE   SOURCELINE

                  8663   ; main.c   2439  }
                  8664   ; main.c   2440  LOAD_SNAP:
3030              8665   _841:
                  8666   ; main.c   2441  FilesysICall(LoadSnapShoot);
3030 E6FC0000  R  8667           MOV     R12,#SOF _LoadSnapShoot
3034 E6FD0000  R  8668           MOV     R13,#SEG _LoadSnapShoot
3038 DA000000  R  8669           CALLS   SEG _FilesysICall,_FilesysICall
                  8670   ; main.c   2442  return;
303C 0D3C         8671           JMPR    cc_UC,_843
303E              8672   _842:
303E E6FC0000  R  8673           MOV     R12,#POF _filename
3042 E6FD0000  R  8674           MOV     R13,#PAG _filename
3046 F0E8         8675           MOV     R14,R8
3048 F0F9         8676           MOV     R15,R9
304A DA000000  R  8677           CALLS   SEG _strcpy,_strcpy
                  8678   ; main.c   2443  LOAD_TEXT:
                  8679   ; main.c   2444  FilesysICall(EraseSnapShoot);
304E E6FC0000  R  8680           MOV     R12,#SOF _EraseSnapShoot
3052 E6FD0000  R  8681           MOV     R13,#SEG _EraseSnapShoot
3056 DA000000  R  8682           CALLS   SEG _FilesysICall,_FilesysICall
                  8683   ; main.c   2445  clip_pasted=1;
305A E6000000  R  8684           MOV     DPP0,#PAG _clip_pasted
305E E018         8685           MOV     R8,#01h
3060 F6F80000  R  8686           MOV     POF _clip_pasted,R8
                  8687   ; main.c   2446  draw_mode=255; //Приветствие
3064 F78F0000  R  8688           MOVB    POF _draw_mode,ONES
                  8689   ; main.c   2447  disk_access=FIRSTLOAD;
3068 E112         8690           MOVB    RL1,#01h
306A F7F20000  R  8691           MOVB    POF _disk_access,RL1
                  8692   ; main.c   2448  font_size=4;
306E E144         8693           MOVB    RL2,#04h
3070 F7F40000  R  8694           MOVB    POF _font_size,RL2
                  8695   ; main.c   2449  terminated=0;
3074 F68E0000  R  8696           MOV     POF _terminated,ZEROS
                  8697   ; main.c   2450  editmode=0;
3078 F68E0000  R  8698           MOV     POF _editmode,ZEROS
                  8699   ; main.c   2451  stk_fhandle=-1;
307C F68F0000  R  8700           MOV     POF _stk_fhandle,ONES
                  8701   ; main.c   2452  dia_id=CreateDialogWithSoftKeys(&main_dia,mmm,0); //Создаем основной диалог
3080 E009         8702           MOV     R9,#00h
3082 8890         8703           MOV     [-R0],R9
3084 E6FC0000  R  8704           MOV     R12,#POF _main_dia
3088 E6FD0000  R  8705           MOV     R13,#PAG _main_dia
308C E02E         8706           MOV     R14,#02h
308E 00E0         8707           ADD     R14,R0
3090 66FEFF3F     8708           AND     R14,#03FFFh
3094 F2FF02FE     8709           MOV     R15,DPP1
3098 DA000000  R  8710           CALLS   SEG _CreateDialogWithSoftKeys,_CreateDialogWithSoftKeys
309C E6000000  R  8711           MOV     DPP0,#PAG _dia_id
30A0 0802         8712           ADD     R0,#02h
30A2 F6F40000  R  8713           MOV     POF _dia_id,R4
                  8714   ; main.c   2453  SendMessage(pid_MMI,0x85,0); //Перерисовываем
30A6 E6FCE835     8715           MOV     R12,#035E8h
30AA E0ED         8716           MOV     R13,#0Eh
30AC E6FE8500     8717           MOV     R14,#085h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 165
main

 LOC CODE        LINE   SOURCELINE

30B0 E00F         8718           MOV     R15,#00h
30B2 DA000000  R  8719           CALLS   SEG _SendMessage,_SendMessage
                  8720   ; main.c   2454 }
30B6              8721   _843:
30B6 06F02C00     8722           ADD     R0,#02Ch
30BA 9880         8723           MOV     R8,[R0+]
30BC 9890         8724           MOV     R9,[R0+]
30BE DB00         8725           RETS
                  8726   _xmain  ENDP
                  8727   ; main.c   2455 
                  8728   ; main.c   2456 
                  8729   ; main.c   2457 
                  8730   MAIN_2_PR       ENDS
                  8731   
                  8732   MAIN_7_CO       SECTION DATA
0010 00           8733   _224    DB      00h
0011 476F2074     8734   _748    DB      047h,06Fh,020h,074h,06Fh,020h,06Ch,069h,06Eh,065h
0015 6F206C69    
0019 6E65        
001B 0A6E756D     8735           DB      0Ah,06Eh,075h,06Dh,062h,065h,072h,03Ah,0Ah,00h
001F 6265723A    
0023 0A00        
0025 00000000     8736           DB      00h,00h,00h,00h,00h
0029 00          
002A 45787465     8737   _678    DB      045h,078h,074h,065h,06Eh,064h,020h,06Ch,069h,06Eh
002E 6E64206C    
0032 696E        
0034 657300       8738           DB      065h,073h,00h
0037 44656C65     8739   _443    DB      044h,065h,06Ch,065h,074h,065h,020h,06Ch,069h,06Eh
003B 7465206C    
003F 696E        
0041 6500         8740           DB      065h,00h
0043 436C6561     8741   _449    DB      043h,06Ch,065h,061h,072h,020h,063h,06Ch,069h,070h
0047 7220636C    
004B 6970        
004D 6200         8742           DB      062h,00h
004F 476F746F     8743   _225    DB      047h,06Fh,074h,06Fh,020h,06Ch,069h,06Eh,065h,020h
0053 206C696E    
0057 6520        
0059 256C752E     8744           DB      025h,06Ch,075h,02Eh,02Eh,02Eh,00h
005D 2E2E00      
0060 476F746F     8745   _220    DB      047h,06Fh,074h,06Fh,020h,06Ch,069h,06Eh,065h,020h
0064 206C696E    
0068 6520        
006A 256C752E     8746           DB      025h,06Ch,075h,02Eh,02Eh,02Eh,00h
006E 2E2E00      
0071 496E7365     8747   _442    DB      049h,06Eh,073h,065h,072h,074h,020h,06Ch,069h,06Eh
0075 7274206C    
0079 696E        
007B 6500         8748           DB      065h,00h
007D 4C617374     8749   _810    DB      04Ch,061h,073h,074h,020h,073h,061h,076h,065h,064h
0081 20736176    
0085 6564        
0087 00           8750           DB      00h
0088 4C6F6164     8751   _676    DB      04Ch,06Fh,061h,064h,020h,026h,020h,046h,06Fh,072h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 166
main

 LOC CODE        LINE   SOURCELINE

008C 20262046    
0090 6F72        
0092 6D617400     8752           DB      06Dh,061h,074h,00h
0096 476F2074     8753   _749    DB      047h,06Fh,020h,074h,06Fh,020h,070h,065h,072h,063h
009A 6F207065    
009E 7263        
00A0 656E740A     8754           DB      065h,06Eh,074h,0Ah,00h,00h,00h,00h
00A4 00000000    
00A8 54454420     8755   _802    DB      054h,045h,044h,020h,06Dh,065h,06Eh,075h,00h
00AC 6D656E75    
00B0 00          
00B1 496E7365     8756   _447    DB      049h,06Eh,073h,065h,072h,074h,020h,064h,061h,074h
00B5 72742064    
00B9 6174        
00BB 6500         8757           DB      065h,00h
00BD 53657420     8758   _804    DB      053h,065h,074h,020h,042h,06Fh,06Fh,06Bh,06Dh,061h
00C1 426F6F6B    
00C5 6D61        
00C7 726B2E2E     8759           DB      072h,06Bh,02Eh,02Eh,02Eh,00h
00CB 2E00        
00CD 50657263     8760   _808    DB      050h,065h,072h,063h,065h,06Eh,074h,02Eh,02Eh,02Eh
00D1 656E742E    
00D5 2E2E        
00D7 00           8761           DB      00h
00D8 4C6F6164     8762   _671    DB      04Ch,06Fh,061h,064h,020h,06Fh,070h,074h,069h,06Fh
00DC 206F7074    
00E0 696F        
00E2 6E7300       8763           DB      06Eh,073h,00h
00E5 4C696E65     8764   _807    DB      04Ch,069h,06Eh,065h,02Eh,02Eh,02Eh,00h
00E9 2E2E2E00    
00ED 424D3120     8765   _811    DB      042h,04Dh,031h,020h,030h,030h,030h,030h,030h,030h
00F1 30303030    
00F5 3030        
00F7 00           8766           DB      00h
00F8 424D3220     8767   _812    DB      042h,04Dh,032h,020h,030h,030h,030h,030h,030h,030h
00FC 30303030    
0100 3030        
0102 00           8768           DB      00h
0103 53656172     8769   _805    DB      053h,065h,061h,072h,063h,068h,02Eh,02Eh,02Eh,00h
0107 63682E2E    
010B 2E00        
010D 54657874     8770   _226    DB      054h,065h,078h,074h,020h,076h,069h,065h,077h,065h
0111 20766965    
0115 7765        
0117 722F6564     8771           DB      072h,02Fh,065h,064h,069h,074h,06Fh,072h,0Ah,076h
011B 69746F72    
011F 0A76        
0121 65727369     8772           DB      065h,072h,073h,069h,06Fh,06Eh,020h,032h,02Eh,030h
0125 6F6E2032    
0129 2E30        
012B 0A436F70     8773           DB      0Ah,043h,06Fh,070h,079h,072h,069h,067h,068h,074h
012F 79726967    
0133 6874        
0135 28432932     8774           DB      028h,043h,029h,032h,030h,030h,035h,02Fh,032h,030h
0139 3030352F    
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 167
main

 LOC CODE        LINE   SOURCELINE

013D 3230        
013F 30360A62     8775           DB      030h,036h,0Ah,062h,079h,020h,052h,073h,074h,037h
0143 79205273    
0147 7437        
0149 2F434253     8776           DB      02Fh,043h,042h,053h,049h,045h,00h
014D 494500      
0150 50617374     8777   _448    DB      050h,061h,073h,074h,065h,00h
0154 6500        
0156 44697265     8778   _675    DB      044h,069h,072h,065h,063h,074h,020h,06Ch,06Fh,061h
015A 6374206C    
015E 6F61        
0160 6400         8779           DB      064h,00h
0162 424D3320     8780   _813    DB      042h,04Dh,033h,020h,030h,030h,030h,030h,030h,030h
0166 30303030    
016A 3030        
016C 00           8781           DB      00h
016D 4F6B00       8782   _742    DB      04Fh,06Bh,00h
0170 4A6F696E     8783   _445    DB      04Ah,06Fh,069h,06Eh,020h,06Ch,069h,06Eh,065h,073h
0174 206C696E    
0178 6573        
017A 00           8784           DB      00h
017B 454F4C2D     8785   _677    DB      045h,04Fh,04Ch,02Dh,03Eh,045h,04Fh,04Ch,020h,053h
017F 3E454F4C    
0183 2053        
0185 504300       8786           DB      050h,043h,00h
0188 466F6E74     8787   _674    DB      046h,06Fh,06Eh,074h,020h,073h,069h,07Ah,065h,03Dh
018C 2073697A    
0190 653D        
0192 3800         8788           DB      038h,00h
0194 466F6E74     8789   _673    DB      046h,06Fh,06Eh,074h,020h,073h,069h,07Ah,065h,03Dh
0198 2073697A    
019C 653D        
019E 3600         8790           DB      036h,00h
01A0 53617669     8791   _221    DB      053h,061h,076h,069h,06Eh,067h,02Eh,02Eh,02Eh,00h
01A4 6E672E2E    
01A8 2E00        
01AA 25303264     8792   _440    DB      025h,030h,032h,064h,03Ah,025h,030h,032h,064h,00h
01AE 3A253032    
01B2 6400        
01B4 466F6E74     8793   _672    DB      046h,06Fh,06Eh,074h,020h,073h,069h,07Ah,065h,03Dh
01B8 2073697A    
01BC 653D        
01BE 3400         8794           DB      034h,00h
01C0 53617665     8795   _679    DB      053h,061h,076h,065h,020h,061h,073h,02Eh,02Eh,02Eh
01C4 2061732E    
01C8 2E2E        
01CA 00           8796           DB      00h
01CB 44696769     8797   _740    DB      044h,069h,067h,069h,074h,020h,02Dh,020h,069h,06Eh
01CF 74202D20    
01D3 696E        
01D5 70757400     8798           DB      070h,075h,074h,00h
01D9 54696D65     8799   _219    DB      054h,069h,06Dh,065h,03Ah,0Ah,025h,030h,032h,064h
01DD 3A0A2530    
01E1 3264        
01E3 3A253032     8800           DB      03Ah,025h,030h,032h,064h,0Ah,043h,075h,072h,072h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 168
main

 LOC CODE        LINE   SOURCELINE

01E7 640A4375    
01EB 7272        
01ED 656E7420     8801           DB      065h,06Eh,074h,020h,06Ch,069h,06Eh,065h,020h,025h
01F1 6C696E65    
01F5 2025        
01F7 6C750A54     8802           DB      06Ch,075h,0Ah,054h,06Fh,074h,061h,06Ch,020h,06Ch
01FB 6F74616C    
01FF 206C        
0201 696E6573     8803           DB      069h,06Eh,065h,073h,020h,025h,06Ch,075h,0Ah,0Ah
0205 20256C75    
0209 0A0A        
020B 43757272     8804           DB      043h,075h,072h,072h,065h,06Eh,074h,020h,066h,069h
020F 656E7420    
0213 6669        
0215 6C653A00     8805           DB      06Ch,065h,03Ah,00h
0219 53706C69     8806   _444    DB      053h,070h,06Ch,069h,074h,020h,06Ch,069h,06Eh,065h
021D 74206C69    
0221 6E65        
0223 00           8807           DB      00h
0224 426F7474     8808   _809    DB      042h,06Fh,074h,074h,06Fh,06Dh,00h
0228 6F6D00      
022B 3C3C454F     8809   _223    DB      03Ch,03Ch,045h,04Fh,046h,03Eh,03Eh,00h
022F 463E3E00    
0233 546F7000     8810   _806    DB      054h,06Fh,070h,00h
0237 4C696E65     8811   _222    DB      04Ch,069h,06Eh,065h,020h,025h,06Ch,075h,02Eh,02Eh
023B 20256C75    
023F 2E2E        
0241 2E00         8812           DB      02Eh,00h
0243 25303264     8813   _441    DB      025h,030h,032h,064h,02Dh,025h,030h,032h,064h,02Dh
0247 2D253032    
024B 642D        
024D 25303464     8814           DB      025h,030h,034h,064h,00h
0251 00          
0252 436C6561     8815   _741    DB      043h,06Ch,065h,061h,072h,00h
0256 7200        
0258 496E7365     8816   _446    DB      049h,06Eh,073h,065h,072h,074h,020h,074h,069h,06Dh
025C 72742074    
0260 696D        
0262 6500         8817           DB      065h,00h
0264 31334D48     8818   _228    DB      031h,033h,04Dh,048h,07Ah,00h
0268 7A00        
026A 32364D48     8819   _227    DB      032h,036h,04Dh,048h,07Ah,00h
026E 7A00        
0270 424D3420     8820   _814    DB      042h,04Dh,034h,020h,030h,030h,030h,030h,030h,030h
0274 30303030    
0278 3030        
027A 00           8821           DB      00h
027B 476F746F     8822   _803    DB      047h,06Fh,074h,06Fh,02Eh,02Eh,02Eh,00h
027F 2E2E2E00    
                  8823   MAIN_7_CO       ENDS
                  8824   
                  8825           EXTERN  _drawImage:FAR
                  8826           EXTERN  _MMIMalloc:FAR
                  8827           EXTERN  __year:WORD
                  8828           EXTERN  _CreateMenu02:FAR
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 169
main

 LOC CODE        LINE   SOURCELINE

                  8829           EXTERN  _strlen:FAR
                  8830           EXTERN  _SetInputData:FAR
                  8831           EXTERN  _FillRect:FAR
                  8832           EXTERN  _WSTR_Len:FAR
                  8833           EXTERN  _ClearWideString:FAR
                  8834           EXTERN  __month:WORD
                  8835           EXTERN  _ClearInputData:FAR
                  8836           EXTERN  _FilesysICall_I:FAR
                  8837           EXTERN  _AllocWSTR:FAR
                  8838           EXTERN  _strcmp:FAR
                  8839           EXTERN  _EX_heap_free_with_lock:FAR
                  8840           EXTERN  __day:WORD
                  8841           EXTERN  _setExtSIDTable:FAR
                  8842           EXTERN  _GeneralFunc:FAR
                  8843           EXTERN  __minute:WORD
                  8844           EXTERN  _sub_E70BAC:FAR
                  8845           EXTERN  _FileClose:FAR
                  8846           EXTERN  _bl_ds:FAR
                  8847           EXTERN  _savetext:FAR
                  8848           EXTERN  _AsciizToWSTR:FAR
                  8849           EXTERN  _SetSoftKeyID:FAR
                  8850           EXTERN  _WString_GetChar:FAR
                  8851           EXTERN  _strcpy:FAR
                  8852           EXTERN  _CutWSTR:FAR
                  8853           EXTERN  _SetMenuItemIcon:FAR
                  8854           EXTERN  _OnTimer1:FAR
                  8855           EXTERN  _ConvertSimple:FAR
                  8856           EXTERN  _OnTimer2:FAR
                  8857           EXTERN  _bl_us:FAR
                  8858           EXTERN  _FileSeek:FAR
                  8859           EXTERN  _FilesysICall:FAR
                  8860           EXTERN  _DrawString:FAR
                  8861           EXTERN  _memset:FAR
                  8862           EXTERN  _DisplayMessageBoxV:FAR
                  8863           EXTERN  _FileWrite:FAR
                  8864           EXTERN  _SetInputType:FAR
                  8865           EXTERN  _GetDataPointer_ITEM04:FAR
                  8866           EXTERN  __hour:WORD
                  8867           EXTERN  _AddCharToWSTR:FAR
                  8868           EXTERN  _SendMessage:FAR
                  8869           EXTERN  _ConvertFormat:FAR
                  8870           EXTERN  _move_up:FAR
                  8871           EXTERN  _FilesysICall_UI:FAR
                  8872           EXTERN  _FileRead:FAR
                  8873           EXTERN  _CreateDialogWithSoftKeys:FAR
                  8874           EXTERN  _xsprintf:FAR
                  8875           EXTERN  _Find_Pointer0A_ItemInMenuITEMSQ_by_ID:FAR
                  8876           EXTERN  _FileErase:FAR
                  8877           EXTERN  _CreateInputTextDialog:FAR
                  8878           EXTERN  _EX_heap_malloc_with_lock:FAR
                  8879           EXTERN  _FilesysICall_FP:FAR
                  8880           EXTERN  _pShowDialog:FAR
                  8881           EXTERN  _CloseDialogWithSoftKeys:FAR
                  8882           EXTERN  _FileOpen:FAR
                  8883           EXTERN  _move_dw:FAR
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:45  Page: 170
main

 LOC CODE        LINE   SOURCELINE

                  8884           EXTERN  _doBack0A:FAR
                  8885           EXTERN  _memcpy:FAR
                  8886           EXTERN  _AddInputToWSTR:FAR
                  8887           EXTERN  __udil:FAR
                  8888           EXTERN  __umol:FAR
                  8889           EXTERN  __mul:FAR
                  8890           REGDEF  R0-R15
                  8891           END

total errors: 0, warnings: 0

