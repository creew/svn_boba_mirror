C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:   1
convert_format

 LOC CODE        LINE   SOURCELINE

                     1   ; C166/ST10 C compiler v7.5 r2            SN00123412-435 (c) 2001 TASKING, Inc.
                     2   ; options: -e -Id:\c166\include -xmifp -DCPUTYPE=0x167 -FSC -Ob -znocustack
                     3   ;          -zautobitastruct-4 -zautobita-0 -T256 -s -zvolatile_union -u
                     4   ;          -AcdFiklmpstuVx -OAcdFghjkLnoprSUx -Ml
                     5   $EXTEND
                     6   $NOMOD166
                     7   $STDNAMES(reg.def)
                     8   $SEGMENTED
                     9   $CASE
                    10   $MODEL(LARGE)
                    11           NAME    CONVERT_FORMAT_C
                    12           ASSUME  DPP3:SYSTEM
                    13   ; convert_format.c    1 #include "sl45.h"
                    14   ; convert_format.c    2 
                    15   ; convert_format.c    3 extern unsigned long curline; //Наружная переменная, счетчик строк
                    16   ; convert_format.c    4 extern unsigned int max_x; //Наружная переменная - макс. размер строки
                    17   ; convert_format.c    5 
                    18   ; convert_format.c    6 extern unsigned char far dstk[];
                    19   ; convert_format.c    7 extern unsigned char far ustk[];
                    20   ; convert_format.c    8 
                    21   ; convert_format.c    9 extern unsigned int FL_loader(int fin, unsigned int p);
                    22   ; convert_format.c   10 extern unsigned int FL_saver(int fs, unsigned int p);
                    23   ; convert_format.c   11 
                    24   ; convert_format.c   12 extern char win_dos_koi;
                    25   ; convert_format.c   13 extern char far wintranslation[];
                    26   ; convert_format.c   14 extern char far koi8translation[];
                    27   ; convert_format.c   15 
                    28   ; convert_format.c   16 static const char ctype[128]=
                    29   CONVERT_FORMAT_1_FC     SECTION DATA WORD PUBLIC 'CFARROM'
0000                30   _ctype  LABEL   BYTE
0000 02010101       31           DB      02h,01h,01h,01h,01h
0004 01          
0005 02010102       32           DB      02h,01h,01h,02h,03h
0009 03          
000A 01010101       33           DB      01h,01h,01h,01h,02h
000E 02          
000F 01010101       34           DB      01h,01h,01h,01h,02h
0013 02          
0014 01010101       35           DB      01h,01h,01h,01h,01h
0018 01          
0019 01030203       36           DB      01h,03h,02h,03h,02h
001D 02          
001E 02020201       37           DB      02h,02h,02h,01h,01h
0022 01          
0023 01010201       38           DB      01h,01h,02h,01h,01h
0027 01          
0028 02030101       39           DB      02h,03h,01h,01h,01h
002C 01          
002D 01020100       40           DB      01h,02h,01h,00h,00h
0031 00          
0032 00000000       41           DB      00h,00h,00h,00h,00h
0036 00          
0037 00000000       42           DB      00h,00h,00h,00h,00h
003B 00          
003C 00000000       43           DB      00h,00h,00h,00h,00h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:   2
convert_format

 LOC CODE        LINE   SOURCELINE

0040 00          
0041 00000000       44           DB      00h,00h,00h,00h,00h
0045 00          
0046 00000000       45           DB      00h,00h,00h,00h,00h
004A 00          
004B 00000000       46           DB      00h,00h,00h,00h,00h
004F 00          
0050 00000000       47           DB      00h,00h,00h,00h,00h
0054 00          
0055 00000000       48           DB      00h,00h,00h,00h,00h
0059 00          
005A 00000000       49           DB      00h,00h,00h,00h,00h
005E 00          
005F 00010101       50           DB      00h,01h,01h,01h,02h
0063 02          
0064 01010101       51           DB      01h,01h,01h,01h,01h
0068 01          
0069 01030203       52           DB      01h,03h,02h,03h,02h
006D 02          
006E 02020202       53           DB      02h,02h,02h,02h,02h
0072 02          
0073 02020202       54           DB      02h,02h,02h,02h,02h
0077 02          
0078 00000000       55           DB      00h,00h,00h,00h,00h
007C 00          
007D 000000         56           DB      00h,00h,00h
                    57   ; convert_format.c   17 {
                    58   ; convert_format.c   18  2,1,1,1,1,2,1,1, 2,3,1,1,1,1,2,1,
                    59   ; convert_format.c   19  1,1,1,2,1,1,1,1, 1,1,3,2,3,2,2,2,
                    60   ; convert_format.c   20  2,1,1,1,1,2,1,1, 2,3,1,1,1,1,2,1,
                    61   ; convert_format.c   21  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
                    62   ; convert_format.c   22  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
                    63   ; convert_format.c   23  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
                    64   ; convert_format.c   24  1,1,1,2,1,1,1,1, 1,1,3,2,3,2,2,2,
                    65   ; convert_format.c   25  2,2,2,2,2,2,2,2, 0,0,0,0,0,0,0,0,
                    66   ; convert_format.c   26 };
                    67   ; convert_format.c   27 
                    68   ; convert_format.c   28 int GetCharType_x(char c)
                    69   ; convert_format.c   29 {
                    70           PUBLIC  _GetCharType_x
                    71   CONVERT_FORMAT_1_FC     ENDS
                    72   
                    73   CONVERT_FORMAT_2_PR     SECTION CODE WORD PUBLIC 'CPROGRAM'
                    74   _GetCharType_x  PROC    FAR
0000 F01C           75           MOV     R1,R12
                    76   ; Locals:
                    77   ; 
                    78   ; Statics:
                    79   ; 
                    80   ; CSEs:
                    81   ;     c = RL1
                    82   ; 
                    83   ; convert_format.c   30  if (c==' ') return(4); //Пробел
0002 47F22000       84           CMPB    RL1,#020h
0006 3D02           85           JMPR    cc_NE,_18
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:   3
convert_format

 LOC CODE        LINE   SOURCELINE

0008 E044           86           MOV     R4,#04h
000A DB00           87           RETS
000C                88   _18:
                    89   ; convert_format.c   31  if (c<32) return(5); //Конец строки
000C 47F22000       90           CMPB    RL1,#020h
0010 9D02           91           JMPR    cc_UGE,_19
0012 E054           92           MOV     R4,#05h
0014 DB00           93           RETS
0016                94   _19:
                    95   ; convert_format.c   32  if ((c=='i')||(c=='I')) return 2; //Гласная для украинского ;)
0016 47F26900       96           CMPB    RL1,#069h
001A 2D03           97           JMPR    cc_EQ,_20
001C 47F24900       98           CMPB    RL1,#049h
0020 3D02           99           JMPR    cc_NE,_21
0022               100   _20:
0022 E024          101           MOV     R4,#02h
0024 DB00          102           RETS
0026               103   _21:
                   104   ; convert_format.c   33  if (c<128) return(0); //Не русская буква
0026 C02C          105           MOVBZ   R12,RL1
0028 46FC8000      106           CMP     R12,#080h
002C CD18          107           JMPR    cc_SLT,_26
                   108   ; convert_format.c   34  switch(win_dos_koi)
002E D7400000  R   109           EXTP    #PAG _win_dos_koi,#01h
0032 F3F40000 1R   110           MOVB    RL2,POF _win_dos_koi
0036 4941          111           CMPB    RL2,#01h
0038 2D03          112           JMPR    cc_EQ,_22
003A 4942          113           CMPB    RL2,#02h
003C 2D07          114           JMPR    cc_EQ,_23
003E 0D0B          115           JMPR    cc_UC,_25
                   116   ; convert_format.c   35  {
                   117   ; convert_format.c   36   case 1:
0040               118   _22:
                   119   ; convert_format.c   37    //Win->Dos
                   120   ; convert_format.c   38    c=wintranslation[c-128];
0040 C02C          121           MOVBZ   R12,RL1
0042 D7400000  R   122           EXTP    #PAG _wintranslation,#01h
0046 F42C0000 1R   123           MOVB    RL1,[R12+#POF _wintranslation-128]
                   124   ; convert_format.c   39    break;
004A 0D05          125           JMPR    cc_UC,_25
                   126   ; convert_format.c   40   case 2:
004C               127   _23:
                   128   ; convert_format.c   41    //Koi8->Dos
                   129   ; convert_format.c   42    c=koi8translation[c-128];
004C C02C          130           MOVBZ   R12,RL1
004E D7400000  R   131           EXTP    #PAG _koi8translation,#01h
0052 F42C0000 1R   132           MOVB    RL1,[R12+#POF _koi8translation-128]
                   133   ; convert_format.c   43    break;
                   134   ; convert_format.c   44  }
0056               135   _25:
                   136   ; convert_format.c   45  if (c<128) return(0); //Не русская буква
0056 C02C          137           MOVBZ   R12,RL1
0058 46FC8000      138           CMP     R12,#080h
005C DD02          139           JMPR    cc_SGE,_27
005E               140   _26:
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:   4
convert_format

 LOC CODE        LINE   SOURCELINE

005E E004          141           MOV     R4,#00h
0060 DB00          142           RETS
0062               143   _27:
                   144   ; convert_format.c   46  return(ctype[c-128]);
0062 C02C          145           MOVBZ   R12,RL1
0064 D7400000  R   146           EXTP    #PAG _ctype,#01h
0068 F42C0000 1R   147           MOVB    RL1,[R12+#POF _ctype-128]
006C C024          148           MOVBZ   R4,RL1
                   149   ; convert_format.c   47 }
006E               150   _31:
006E DB00          151           RETS
                   152   _GetCharType_x  ENDP
                   153   ; convert_format.c   48 
                   154   ; convert_format.c   49 unsigned int def_code (void);
                   155   ; convert_format.c   50 
                   156   ; convert_format.c   51 //Процедура форматирования текста
                   157   ; convert_format.c   52 unsigned int ConvertFormat(int fin,int fs,int fmt)
                   158   ; convert_format.c   53 {
                   159           PUBLIC  _ConvertFormat
                   160   _ConvertFormat  PROC    FAR
0070 8890          161           MOV     [-R0],R9
0072 8880          162           MOV     [-R0],R8
0074 8870          163           MOV     [-R0],R7
0076 8860          164           MOV     [-R0],R6
0078 88E0          165           MOV     [-R0],R14
007A 88C0          166           MOV     [-R0],R12
007C 88D0          167           MOV     [-R0],R13
007E 26F00201      168           SUB     R0,#0102h
                   169   ; Locals:
                   170   ;     ct = offset 2
                   171   ; 
                   172   ; Statics:
                   173   ; 
                   174   ; CSEs:
                   175   ;     d = R8
                   176   ;     pm = R15
                   177   ;     c3 = RL6
                   178   ;     c0 = RL7
                   179   ;     s = R9
                   180   ;     c = RL1
                   181   ;     sl = R15
                   182   ;     pp = R2
                   183   ;     c1 = offset 0
                   184   ;     c2 = offset 1
                   185   ;     pg2 = R3
                   186   ;     pg1 = R10
                   187   ;     fs = offset 258
                   188   ;     fin = offset 260
                   189   ;     fmt = offset 262
                   190   ;     &ustk + pp = R12R13
                   191   ; 
                   192   ; convert_format.c   54  unsigned char c0;
                   193   ; convert_format.c   55  unsigned char c1=1; //Начать с пропуска символов
0082 E112          194           MOVB    RL1,#01h
0084 B920          195           MOVB    [R0],RL1
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:   5
convert_format

 LOC CODE        LINE   SOURCELINE

                   196   ; convert_format.c   56  unsigned char c2=1;
0086 E4200100      197           MOVB    [R0+#01H],RL1
                   198   ; convert_format.c   57  unsigned char c3=32; //Начать с абзаца, раз у нас форматирование ;)
008A E7FC2000      199           MOVB    RL6,#020h
                   200   ; convert_format.c   58 
                   201   ; convert_format.c   59  //unsigned int last_space;
                   202   ; convert_format.c   60  
                   203   ; convert_format.c   61  unsigned int sl;
                   204   ; convert_format.c   62 
                   205   ; convert_format.c   63  unsigned int s;
                   206   ; convert_format.c   64  unsigned int d;
                   207   ; convert_format.c   65  char ct[256]; //Массив для описания типа символов
                   208   ; convert_format.c   66 
                   209   ; convert_format.c   67 
                   210   ; convert_format.c   68  d=0;
008E E008          211           MOV     R8,#00h
                   212   ; convert_format.c   69  ustk[d]=0;
0090 D7400000  R   213           EXTP    #PAG _ustk,#01h
0094 F78E0000 1R   214           MOVB    POF _ustk,ZEROS
                   215   ; convert_format.c   70  sl=0;
0098 E00F          216           MOV     R15,#00h
                   217   ; convert_format.c   71  //last_space=0xFFFF;
                   218   ; convert_format.c   72  s=FL_loader(fin,0xFFFF);
009A F07F          219           MOV     R7,R15
009C E6FDFFFF      220           MOV     R13,#0FFFFh
00A0 DA000000  R   221           CALLS   SEG _FL_loader,_FL_loader
00A4 F094          222           MOV     R9,R4
00A6 F0F7          223           MOV     R15,R7
                   224   ; convert_format.c   73 
                   225   ; convert_format.c   74  if (win_dos_koi==0xFF) win_dos_koi=def_code ();
00A8 D7400000  R   226           EXTP    #PAG _win_dos_koi,#01h
00AC F3FE0000 1R   227           MOVB    RL7,POF _win_dos_koi
00B0 47FEFF00      228           CMPB    RL7,#0FFh
00B4 3D08          229           JMPR    cc_NE,_131
00B6 F07F          230           MOV     R7,R15
00B8 DA006204  R   231           CALLS   SEG _def_code,_def_code
00BC D7400000  R   232           EXTP    #PAG _win_dos_koi,#01h
00C0 F7F80000 1R   233           MOVB    POF _win_dos_koi,RL4
00C4 F0F7          234           MOV     R15,R7
00C6               235   _131:
                   236   ; convert_format.c   75 
                   237   ; convert_format.c   76  //Подготавливаем массив ct
                   238   ; convert_format.c   77  c0=0;
00C6 E10E          239           MOVB    RL7,#00h
                   240   ; convert_format.c   78  do
00C8               241   _132:
                   242   ; convert_format.c   79  {
                   243   ; convert_format.c   80   ct[c0]=GetCharType_x(c0);
00C8 88F0          244           MOV     [-R0],R15
00CA C0EC          245           MOVBZ   R12,RL7
00CC DA000000  R   246           CALLS   SEG _GetCharType_x,_GetCharType_x
00D0 C0EC          247           MOVBZ   R12,RL7
00D2 00C0          248           ADD     R12,R0
00D4 E48C0400      249           MOVB    [R12+#04H],RL4
00D8 98F0          250           MOV     R15,[R0+]
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:   6
convert_format

 LOC CODE        LINE   SOURCELINE

                   251   ; convert_format.c   81  }
                   252   ; convert_format.c   82  while(++c0);
00DA 09E1          253           ADDB    RL7,#01h
00DC 3DF5          254           JMPR    cc_NZ,_132
                   255   ; convert_format.c   83 
                   256   ; convert_format.c   84  #define GetCharType(VAR) (ct[VAR])
                   257   ; convert_format.c   85 
                   258   ; convert_format.c   86  for(;;)
00DE               259   _133:
00DE               260   _134:
00DE               261   _135:
00DE               262   _136:
00DE               263   _137:
00DE               264   _138:
                   265   ; convert_format.c   87  {
                   266   ; convert_format.c   88   c0=c1;
00DE A9E0          267           MOVB    RL7,[R0]
                   268   ; convert_format.c   89   c1=c2;
00E0 F4200100      269           MOVB    RL1,[R0+#01H]
00E4 B920          270           MOVB    [R0],RL1
                   271   ; convert_format.c   90   c2=c3;
00E6 E4C00100      272           MOVB    [R0+#01H],RL6
                   273   ; convert_format.c   91   LSKIP1:
00EA               274   _139:
                   275   ; convert_format.c   92   c3=dstk[s++];
00EA F0C9          276           MOV     R12,R9
00EC 0891          277           ADD     R9,#01h
00EE D7400000  R   278           EXTP    #PAG _dstk,#01h
00F2 F4CC0000 1R   279           MOVB    RL6,[R12+#POF _dstk]
                   280   ; convert_format.c   93   if (s>=8192) s=FL_loader(fin,s);
00F6 46F90020      281           CMP     R9,#02000h
00FA 8D08          282           JMPR    cc_ULT,_140
00FC 88F0          283           MOV     [-R0],R15
00FE D4C00601      284           MOV     R12,[R0+#0106H]
0102 F0D9          285           MOV     R13,R9
0104 DA000000  R   286           CALLS   SEG _FL_loader,_FL_loader
0108 F094          287           MOV     R9,R4
010A 98F0          288           MOV     R15,[R0+]
010C               289   _140:
                   290   ; convert_format.c   94   if (c3==9) c3=' '; //Замена табуляции на пробел
010C 47FC0900      291           CMPB    RL6,#09h
0110 3D02          292           JMPR    cc_NE,_141
0112 E7FC2000      293           MOVB    RL6,#020h
0116               294   _141:
                   295   ; convert_format.c   95   if (c3==1) c3=' '; //Замена служ. символов
0116 49C1          296           CMPB    RL6,#01h
0118 3D02          297           JMPR    cc_NE,_142
011A E7FC2000      298           MOVB    RL6,#020h
011E               299   _142:
                   300   ; convert_format.c   96   if ((c3==' ')&&(c2==' ')) goto LSKIP1; //Пропуск пробелов
011E 47FC2000      301           CMPB    RL6,#020h
0122 3D05          302           JMPR    cc_NE,_143
0124 F4200100      303           MOVB    RL1,[R0+#01H]
0128 47F22000      304           CMPB    RL1,#020h
012C 2DDE          305           JMPR    cc_EQ,_139
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:   7
convert_format

 LOC CODE        LINE   SOURCELINE

012E               306   _143:
                   307   ; convert_format.c   97   if ((c3==13)&&(dstk[s]==10)) s++; //0D0A->0D
012E 47FC0D00      308           CMPB    RL6,#0Dh
0132 3D08          309           JMPR    cc_NE,_145
0134 D7400000  R   310           EXTP    #PAG _dstk,#01h
0138 F4290000 1R   311           MOVB    RL1,[R9+#POF _dstk]
013C 47F20A00      312           CMPB    RL1,#0Ah
0140 3D01          313           JMPR    cc_NE,_145
0142 0891          314           ADD     R9,#01h
0144               315   _145:
                   316   ; convert_format.c   98   if ((c3==10)&&(dstk[s]==13)) s++; //0A0D->0A
0144 47FC0A00      317           CMPB    RL6,#0Ah
0148 3D08          318           JMPR    cc_NE,_147
014A D7400000  R   319           EXTP    #PAG _dstk,#01h
014E F4290000 1R   320           MOVB    RL1,[R9+#POF _dstk]
0152 47F20D00      321           CMPB    RL1,#0Dh
0156 3D01          322           JMPR    cc_NE,_147
0158 0891          323           ADD     R9,#01h
015A               324   _147:
                   325   ; convert_format.c   99   if (c3==10) c3=13; //0A->0D
015A 47FC0A00      326           CMPB    RL6,#0Ah
015E 3D01          327           JMPR    cc_NE,_148
0160 E1DC          328           MOVB    RL6,#0Dh
0162               329   _148:
                   330   ; convert_format.c  100   if (c0==0) goto LEOF; //Конец текста
0162 49E0          331           CMPB    RL7,#00h
0164 EA20B403  R   332           JMPA    cc_Z,_178
                   333   ; convert_format.c  101   if (fmt==1)
0168 D4C00601      334           MOV     R12,[R0+#0106H]
016C 48C1          335           CMP     R12,#01h
016E 3D20          336           JMPR    cc_NE,_155
                   337   ; convert_format.c  102   {
                   338   ; convert_format.c  103    if ((c0>' ')&&(c1=='-')&&(c2==13)&&(c3>' '))
0170 47FE2000      339           CMPB    RL7,#020h
0174 FD0D          340           JMPR    cc_ULE,_151
0176 A920          341           MOVB    RL1,[R0]
0178 47F22D00      342           CMPB    RL1,#02Dh
017C 3D09          343           JMPR    cc_NE,_151
017E F4400100      344           MOVB    RL2,[R0+#01H]
0182 47F40D00      345           CMPB    RL2,#0Dh
0186 3D04          346           JMPR    cc_NE,_151
0188 47FC2000      347           CMPB    RL6,#020h
018C EAE00C02  R   348           JMPA    cc_UGT,_156
                   349   ; convert_format.c  104    {
                   350   ; convert_format.c  105     //Удаление переноса
                   351   ; convert_format.c  106     c1=1;
                   352   ; convert_format.c  107     c2=1;
                   353   ; convert_format.c  108     goto LSYM;
                   354   ; convert_format.c  109    }
0190               355   _151:
                   356   ; convert_format.c  110    if ((c0>' ')&&(c1==13)&&(c2>' '))
0190 47FE2000      357           CMPB    RL7,#020h
0194 FD0D          358           JMPR    cc_ULE,_155
0196 A920          359           MOVB    RL1,[R0]
0198 47F20D00      360           CMPB    RL1,#0Dh
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:   8
convert_format

 LOC CODE        LINE   SOURCELINE

019C 3D09          361           JMPR    cc_NE,_155
019E F4400100      362           MOVB    RL2,[R0+#01H]
01A2 47F42000      363           CMPB    RL2,#020h
01A6 FD04          364           JMPR    cc_ULE,_155
                   365   ; convert_format.c  111    {
                   366   ; convert_format.c  112     //Замена перевода строки на пробел между словами
                   367   ; convert_format.c  113     c1=' ';
01A8 E7F62000      368           MOVB    RL3,#020h
01AC B960          369           MOVB    [R0],RL3
                   370   ; convert_format.c  114     goto LSYM;
01AE 0D32          371           JMPR    cc_UC,_158
                   372   ; convert_format.c  115    }
                   373   ; convert_format.c  116   }
01B0               374   _155:
                   375   ; convert_format.c  117   if (c0==13)
01B0 47FE0D00      376           CMPB    RL7,#0Dh
01B4 3D2F          377           JMPR    cc_NE,_158
                   378   ; convert_format.c  118   {
                   379   ; convert_format.c  119     //Во всех других случаях перенос строки - это абзац
                   380   ; convert_format.c  120         //last_space=0xFFFF;
                   381   ; convert_format.c  121         sl=0;
01B6 E00F          382           MOV     R15,#00h
                   383   ; convert_format.c  122         d=FL_saver(fs,d); //Сливаем не слитое
01B8 F07F          384           MOV     R7,R15
01BA D4C00201      385           MOV     R12,[R0+#0102H]
01BE F0D8          386           MOV     R13,R8
01C0 DA000000  R   387           CALLS   SEG _FL_saver,_FL_saver
01C4 F084          388           MOV     R8,R4
01C6 F0F7          389           MOV     R15,R7
                   390   ; convert_format.c  123     ustk[d++]=0; //Конец строки
01C8 E10E          391           MOVB    RL7,#00h
01CA F0C8          392           MOV     R12,R8
01CC 0881          393           ADD     R8,#01h
01CE D7400000  R   394           EXTP    #PAG _ustk,#01h
01D2 E4EC0000 1R   395           MOVB    [R12+#POF _ustk],RL7
                   396   ; convert_format.c  124         curline++;
01D6 D7500000  R   397           EXTP    #PAG _curline,#02h
01DA 248F0000 2R   398           SUB     POF _curline,ONES
01DE 348F0000 1R   399           SUBC    POF (_curline+2),ONES
                   400   ; convert_format.c  125     if ((c1>' ')&&(fmt==2))
01E2 A920          401           MOVB    RL1,[R0]
01E4 47F22000      402           CMPB    RL1,#020h
01E8 EAF0DE00  R   403           JMPA    cc_ULE,_138
01EC D4C00601      404           MOV     R12,[R0+#0106H]
01F0 48C2          405           CMP     R12,#02h
01F2 EA30DE00  R   406           JMPA    cc_NE,_137
                   407   ; convert_format.c  126     {
                   408   ; convert_format.c  127      ustk[d++]=' '; //Если сл. символ - буква, добавляем отступ
01F6 E7F42000      409           MOVB    RL2,#020h
01FA F0D8          410           MOV     R13,R8
01FC 0881          411           ADD     R8,#01h
01FE D7400000  R   412           EXTP    #PAG _ustk,#01h
0202 E44D0000 1R   413           MOVB    [R13+#POF _ustk],RL2
                   414   ; convert_format.c  128      sl++;
0206 E01F          415           MOV     R15,#01h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:   9
convert_format

 LOC CODE        LINE   SOURCELINE

                   416   ; convert_format.c  129     }
                   417   ; convert_format.c  130         continue;
0208 EA00DE00  R   418           JMPA    cc_UC,_136
020C               419   _156:
020C E112          420           MOVB    RL1,#01h
020E B920          421           MOVB    [R0],RL1
0210 E4200100      422           MOVB    [R0+#01H],RL1
                   423   ; convert_format.c  131   }
                   424   ; convert_format.c  132   LSYM:
0214               425   _158:
                   426   ; convert_format.c  133   if (c0!=1)
0214 49E1          427           CMPB    RL7,#01h
0216 EA20DE00  R   428           JMPA    cc_EQ,_135
                   429   ; convert_format.c  134   {
                   430   ; convert_format.c  135    ustk[d]=c0;
021A D7400000  R   431           EXTP    #PAG _ustk,#01h
021E E4E80000 1R   432           MOVB    [R8+#POF _ustk],RL7
                   433   ; convert_format.c  136    //if ((c0==' ')&&sl) last_space=d; //Запоминаем последний пробел
                   434   ; convert_format.c  137    d++;
0222 0881          435           ADD     R8,#01h
                   436   ; convert_format.c  138    sl++;
0224 08F1          437           ADD     R15,#01h
                   438   ; convert_format.c  139    if (sl>max_x)
0226 D7400000  R   439           EXTP    #PAG _max_x,#01h
022A 42FF0000 1R   440           CMP     R15,POF _max_x
022E EAF0DE00  R   441           JMPA    cc_ULE,_134
                   442   ; convert_format.c  140    {
                   443   ; convert_format.c  141     //Слишком длинная строка, ищем, куда вставить перенос
                   444   ; convert_format.c  142     unsigned int pp=d+2; //Начинаем с конца c учетом доп. символов
0232 F028          445           MOV     R2,R8
0234 0822          446           ADD     R2,#02h
                   447   ; convert_format.c  143     unsigned int pg1=0xFFFF;
0236 E6FAFFFF      448           MOV     R10,#0FFFFh
                   449   ; convert_format.c  144     unsigned int pg2=0xFFFF;
                   450   ; convert_format.c  145     char c;
                   451   ; convert_format.c  146     ustk[d]=c1;
023A A920          452           MOVB    RL1,[R0]
023C D7400000  R   453           EXTP    #PAG _ustk,#01h
0240 E4280000 1R   454           MOVB    [R8+#POF _ustk],RL1
                   455   ; convert_format.c  147         ustk[d+1]=c2;
0244 F4200100      456           MOVB    RL1,[R0+#01H]
0248 D7500000  R   457           EXTP    #PAG _ustk,#02h
024C E4280000 2R   458           MOVB    [R8+#POF _ustk+1],RL1
                   459   ; convert_format.c  148         ustk[d+2]=c3;
0250 E4C80000 1R   460           MOVB    [R8+#POF _ustk+2],RL6
                   461   ; convert_format.c  149     for(;;)
0254               462   _159:
                   463   ; convert_format.c  150     {
                   464   ; convert_format.c  151      c=GetCharType(ustk[pp]);
0254 E6FC0000  R   465           MOV     R12,#POF _ustk
0258 E6FD0000  R   466           MOV     R13,#PAG _ustk
025C 00C2          467           ADD     R12,R2
025E DC4D          468           EXTP    R13,#01h
0260 A96C     1    469           MOVB    RL3,[R12]
0262 C06E          470           MOVBZ   R14,RL3
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:  10
convert_format

 LOC CODE        LINE   SOURCELINE

0264 00E0          471           ADD     R14,R0
0266 F42E0200      472           MOVB    RL1,[R14+#02H]
                   473   ; convert_format.c  152          if ((c==5)&&(pp<d))
026A 4925          474           CMPB    RL1,#05h
026C 3D03          475           JMPR    cc_NE,_160
026E 4028          476           CMP     R2,R8
0270 EA807A03  R   477           JMPA    cc_ULT,_176
                   478   ; convert_format.c  153          {
                   479   ; convert_format.c  154           //Нет подходящих пробелов, режем по живому ;)
                   480   ; convert_format.c  155           L_CUT:
                   481   ; convert_format.c  156           d--;
                   482   ; convert_format.c  157           d=FL_saver(fs,d);
                   483   ; convert_format.c  158           ustk[d++]=0;
                   484   ; convert_format.c  159           ustk[d++]=c0;
                   485   ; convert_format.c  160           sl=1;
                   486   ; convert_format.c  161           break;
                   487   ; convert_format.c  162      }
0274               488   _160:
                   489   ; convert_format.c  163      if ((c==4)&&(pp<d))
0274 4924          490           CMPB    RL1,#04h
0276 3D11          491           JMPR    cc_NE,_162
0278 4028          492           CMP     R2,R8
027A 9D0F          493           JMPR    cc_UGE,_162
                   494   ; convert_format.c  164      {
                   495   ; convert_format.c  165           //Режем по пробелу
                   496   ; convert_format.c  166           if (ustk[pp-1]<2) goto L_CUT; //Первый пробел не обрезаем
027C D7400000  R   497           EXTP    #PAG _ustk,#01h
0280 F4220000 1R   498           MOVB    RL1,[R2+#POF _ustk-1]
0284 4922          499           CMPB    RL1,#02h
0286 EA807A03  R   500           JMPA    cc_ULT,_176
                   501   ; convert_format.c  167           ustk[pp]=0; //Обрезаем по пробелу и признак форматирования
028A E10E          502           MOVB    RL7,#00h
028C DC4D          503           EXTP    R13,#01h
028E B9EC     1    504           MOVB    [R12],RL7
                   505   ; convert_format.c  168           sl=(d-pp)-1;
0290 F0F8          506           MOV     R15,R8
0292 20F2          507           SUB     R15,R2
0294 28F1          508           SUB     R15,#01h
                   509   ; convert_format.c  169           d=FL_saver(fs,d); //Сливаем не слитое
0296 EA006203  R   510           JMPA    cc_UC,_167
                   511   ; convert_format.c  170           //last_space=0xFFFF;
                   512   ; convert_format.c  171       break;
                   513   ; convert_format.c  172      }
029A               514   _162:
                   515   ; convert_format.c  173          if ((c<1)||(c>3))
029A 4921          516           CMPB    RL1,#01h
029C 8D02          517           JMPR    cc_ULT,_163
029E 4923          518           CMPB    RL1,#03h
02A0 FD02          519           JMPR    cc_ULE,_164
02A2               520   _163:
                   521   ; convert_format.c  174          {
                   522   ; convert_format.c  175       pg1=0xFFFF; //Новое слово
02A2 E6FAFFFF      523           MOV     R10,#0FFFFh
                   524   ; convert_format.c  176       pg2=0xFFFF;
                   525   ; convert_format.c  177      }
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:  11
convert_format

 LOC CODE        LINE   SOURCELINE

02A6               526   _164:
                   527   ; convert_format.c  178      if (c==2)
02A6 4922          528           CMPB    RL1,#02h
02A8 EA307403  R   529           JMPA    cc_NE,_174
                   530   ; convert_format.c  179      {
                   531   ; convert_format.c  180       pg2=pg1;
02AC F03A          532           MOV     R3,R10
                   533   ; convert_format.c  181       pg1=pp;
02AE F0A2          534           MOV     R10,R2
                   535   ; convert_format.c  182       if (pg2!=0xFFFF)
02B0 46F3FFFF      536           CMP     R3,#0FFFFh
02B4 EA207403  R   537           JMPA    cc_EQ,_174
                   538   ; convert_format.c  183       {
                   539   ; convert_format.c  184        //Нашли 2 гласных
                   540   ; convert_format.c  185        unsigned int pm=(pg2+pg1+1)>>1;
02B8 F0F3          541           MOV     R15,R3
02BA 00F2          542           ADD     R15,R2
02BC 08F1          543           ADD     R15,#01h
02BE 7C1F          544           SHR     R15,#01h
                   545   ; convert_format.c  186        if (GetCharType(ustk[pm])==3) pm++; //Если нельзя отрывать букву
02C0 D7400000  R   546           EXTP    #PAG _ustk,#01h
02C4 F42F0000 1R   547           MOVB    RL1,[R15+#POF _ustk]
02C8 C02C          548           MOVBZ   R12,RL1
02CA 00C0          549           ADD     R12,R0
02CC F42C0200      550           MOVB    RL1,[R12+#02H]
02D0 4923          551           CMPB    RL1,#03h
02D2 3D01          552           JMPR    cc_NE,_165
02D4 08F1          553           ADD     R15,#01h
02D6               554   _165:
                   555   ; convert_format.c  187            c=GetCharType(ustk[pm-2]);
02D6 D7400000  R   556           EXTP    #PAG _ustk,#01h
02DA F48F0000 1R   557           MOVB    RL4,[R15+#POF _ustk-2]
02DE C08C          558           MOVBZ   R12,RL4
02E0 00C0          559           ADD     R12,R0
02E2 F42C0200      560           MOVB    RL1,[R12+#02H]
                   561   ; convert_format.c  188        if ((pm<(d-1))&&(c>0)&&(c<4))
02E6 F0C8          562           MOV     R12,R8
02E8 28C1          563           SUB     R12,#01h
02EA 40CF          564           CMP     R12,R15
02EC EAF07403  R   565           JMPA    cc_ULE,_174
02F0 4920          566           CMPB    RL1,#00h
02F2 EAF07403  R   567           JMPA    cc_ULE,_174
02F6 4924          568           CMPB    RL1,#04h
02F8 EA907403  R   569           JMPA    cc_UGE,_174
                   570   ; convert_format.c  189        {
                   571   ; convert_format.c  190             if (pm==pg2)
02FC 40F3          572           CMP     R15,R3
02FE 3D0C          573           JMPR    cc_NE,_166
                   574   ; convert_format.c  191                 {
                   575   ; convert_format.c  192                  //Если гласная непостредственно справа, проверяем не одна ли она
                   576   ; convert_format.c  193                  c=GetCharType(ustk[pg2+1]);
0300 D7400000  R   577           EXTP    #PAG _ustk,#01h
0304 F4830000 1R   578           MOVB    RL4,[R3+#POF _ustk+1]
0308 C08C          579           MOVBZ   R12,RL4
030A 00C0          580           ADD     R12,R0
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:  12
convert_format

 LOC CODE        LINE   SOURCELINE

030C F42C0200      581           MOVB    RL1,[R12+#02H]
                   582   ; convert_format.c  194                  if ((c<1)||(c>3)) goto L_NOPERE;
0310 4921          583           CMPB    RL1,#01h
0312 8D30          584           JMPR    cc_ULT,_174
0314 4923          585           CMPB    RL1,#03h
0316 ED2E          586           JMPR    cc_UGT,_174
                   587   ; convert_format.c  195         }
0318               588   _166:
                   589   ; convert_format.c  196         memmove(ustk+(pm+2),ustk+pm,d-pm);
0318 F07F          590           MOV     R7,R15
031A F0C8          591           MOV     R12,R8
031C 20C7          592           SUB     R12,R7
031E 88C0          593           MOV     [-R0],R12
0320 E6FC0000  R   594           MOV     R12,#POF _ustk+2
0324 E6FD0000  R   595           MOV     R13,#PAG _ustk
0328 00C7          596           ADD     R12,R7
032A E6FE0000  R   597           MOV     R14,#POF _ustk
032E E6FF0000  R   598           MOV     R15,#PAG _ustk
0332 00E7          599           ADD     R14,R7
0334 DA000000  R   600           CALLS   SEG _memmove,_memmove
0338 0802          601           ADD     R0,#02h
033A F0F7          602           MOV     R15,R7
                   603   ; convert_format.c  197         ustk[pm++]='-';
033C E7FE2D00      604           MOVB    RL7,#02Dh
0340 F0CF          605           MOV     R12,R15
0342 08F1          606           ADD     R15,#01h
0344 D7400000  R   607           EXTP    #PAG _ustk,#01h
0348 E4EC0000 1R   608           MOVB    [R12+#POF _ustk],RL7
                   609   ; convert_format.c  198                 ustk[pm++]=0;
034C E102          610           MOVB    RL1,#00h
034E F0CF          611           MOV     R12,R15
0350 08F1          612           ADD     R15,#01h
0352 D7400000  R   613           EXTP    #PAG _ustk,#01h
0356 E42C0000 1R   614           MOVB    [R12+#POF _ustk],RL1
                   615   ; convert_format.c  199                 d+=2; //Т.к. вставили 2 символа
035A 0882          616           ADD     R8,#02h
                   617   ; convert_format.c  200                 sl=(d-pm);
035C F0C8          618           MOV     R12,R8
035E 20CF          619           SUB     R12,R15
0360 F0FC          620           MOV     R15,R12
                   621   ; convert_format.c  201             d=FL_saver(fs,d); //Сливаем не слитое
0362               622   _167:
0362 F07F          623           MOV     R7,R15
0364 D4C00201      624           MOV     R12,[R0+#0102H]
0368 F0D8          625           MOV     R13,R8
036A DA000000  R   626           CALLS   SEG _FL_saver,_FL_saver
036E F084          627           MOV     R8,R4
0370 F0F7          628           MOV     R15,R7
                   629   ; convert_format.c  202                 break;
0372 0D18          630           JMPR    cc_UC,_177
                   631   ; convert_format.c  203                 L_NOPERE:
                   632   ; convert_format.c  204                 ;
                   633   ; convert_format.c  205        }
                   634   ; convert_format.c  206       }
                   635   ; convert_format.c  207      }
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:  13
convert_format

 LOC CODE        LINE   SOURCELINE

0374               636   _174:
                   637   ; convert_format.c  208      pp--;
0374 2821          638           SUB     R2,#01h
0376 EA005402  R   639           JMPA    cc_UC,_159
037A               640   _176:
037A 2881          641           SUB     R8,#01h
037C D4C00201      642           MOV     R12,[R0+#0102H]
0380 F0D8          643           MOV     R13,R8
0382 DA000000  R   644           CALLS   SEG _FL_saver,_FL_saver
0386 F084          645           MOV     R8,R4
0388 E102          646           MOVB    RL1,#00h
038A F0C8          647           MOV     R12,R8
038C 0881          648           ADD     R8,#01h
038E D7400000  R   649           EXTP    #PAG _ustk,#01h
0392 E42C0000 1R   650           MOVB    [R12+#POF _ustk],RL1
0396 F0C8          651           MOV     R12,R8
0398 0881          652           ADD     R8,#01h
039A D7400000  R   653           EXTP    #PAG _ustk,#01h
039E E4EC0000 1R   654           MOVB    [R12+#POF _ustk],RL7
03A2 E01F          655           MOV     R15,#01h
                   656   ; convert_format.c  209     }
03A4               657   _177:
                   658   ; convert_format.c  210         curline++;
03A4 D7500000  R   659           EXTP    #PAG _curline,#02h
03A8 248F0000 2R   660           SUB     POF _curline,ONES
03AC 348F0000 1R   661           SUBC    POF (_curline+2),ONES
03B0 EA00DE00  R   662           JMPA    cc_UC,_133
                   663   ; convert_format.c  211    }
                   664   ; convert_format.c  212   }
                   665   ; convert_format.c  213  }
                   666   ; convert_format.c  214  LEOF:
03B4               667   _178:
                   668   ; convert_format.c  215  if (sl) //Не записана последняя строка
03B4 48F0          669           CMP     R15,#00h
03B6 2D0D          670           JMPR    cc_Z,_179
                   671   ; convert_format.c  216  {
                   672   ; convert_format.c  217   ustk[d++]=0;
03B8 E10C          673           MOVB    RL6,#00h
03BA F098          674           MOV     R9,R8
03BC 0881          675           ADD     R8,#01h
03BE D7400000  R   676           EXTP    #PAG _ustk,#01h
03C2 E4C90000 1R   677           MOVB    [R9+#POF _ustk],RL6
                   678   ; convert_format.c  218   curline++;
03C6 D7500000  R   679           EXTP    #PAG _curline,#02h
03CA 248F0000 2R   680           SUB     POF _curline,ONES
03CE 348F0000 1R   681           SUBC    POF (_curline+2),ONES
                   682   ; convert_format.c  219  }
03D2               683   _179:
                   684   ; convert_format.c  220  d=FL_saver(fs,d); //Сливаем не слитое
03D2 D4C00201      685           MOV     R12,[R0+#0102H]
03D6 F0D8          686           MOV     R13,R8
03D8 DA000000  R   687           CALLS   SEG _FL_saver,_FL_saver
03DC F084          688           MOV     R8,R4
                   689   ; convert_format.c  221  return(d);
                   690   ; convert_format.c  222 }
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:  14
convert_format

 LOC CODE        LINE   SOURCELINE

03DE 06F00801      691           ADD     R0,#0108h
03E2 9860          692           MOV     R6,[R0+]
03E4 9870          693           MOV     R7,[R0+]
03E6 9880          694           MOV     R8,[R0+]
03E8 9890          695           MOV     R9,[R0+]
03EA DB00          696           RETS
                   697   _ConvertFormat  ENDP
                   698   ; convert_format.c  223 
                   699   ; convert_format.c  224 //-------------------------------------------------------------
                   700   ; convert_format.c  225 // Автоматическое определение кодировки (по первой загрузке)
                   701   ; convert_format.c  226 //-------------------------------------------------------------
                   702   ; convert_format.c  227 /* Таблица сочетаний */
                   703   ; convert_format.c  228 
                   704   ; convert_format.c  229 static const unsigned char table_2s[128]={0xFF,0xFF,0xFF,0xC7,0xFE,0xBE,0xF7,0xFB,
                   705   CONVERT_FORMAT_2_PR     ENDS
                   706   
                   707   CONVERT_FORMAT_1_FC     SECTION DATA
0080               708   _table_2s       LABEL   BYTE
0080 FFFFFFC7      709           DB      0FFh,0FFh,0FFh,0C7h,0FEh
0084 FE          
0085 BEF7FBFD      710           DB      0BEh,0F7h,0FBh,0FDh,0BFh
0089 BF          
008A F7F9FCBE      711           DB      0F7h,0F9h,0FCh,0BEh,0F1h
008E F1          
008F 80FFFFF7      712           DB      080h,0FFh,0FFh,0F7h,0BBh
0093 BB          
0094 FFFFFFCF      713           DB      0FFh,0FFh,0FFh,0CFh,0DEh
0098 DE          
0099 BFD108FF      714           DB      0BFh,0D1h,08h,0FFh,0BFh
009D BF          
009E F1BFFFFF      715           DB      0F1h,0BFh,0FFh,0FFh,0FFh
00A2 FF          
00A3 C71D3F7F      716           DB      0C7h,01Dh,03Fh,07Fh,081h
00A7 81          
00A8 A7B6F282      717           DB      0A7h,0B6h,0F2h,082h,0FFh
00AC FF          
00AD FF75DBFC      718           DB      0FFh,075h,0DBh,0FCh,0BFh
00B1 BF          
00B2 D79DFFAE      719           DB      0D7h,09Dh,0FFh,0AEh,0FBh
00B6 FB          
00B7 DFFFFFFF      720           DB      0DFh,0FFh,0FFh,0FFh,0C7h
00BB C7          
00BC 84B7F39F      721           DB      084h,0B7h,0F3h,09Fh,0FFh
00C0 FF          
00C1 FFFFDBFF      722           DB      0FFh,0FFh,0DBh,0FFh,0BFh
00C5 BF          
00C6 FFFFFDBF      723           DB      0FFh,0FFh,0FDh,0BFh,0FFh
00CA FF          
00CB FFFFFFE7      724           DB      0FFh,0FFh,0FFh,0E7h,0C7h
00CF C7          
00D0 849EF012      725           DB      084h,09Eh,0F0h,012h,0BCh
00D4 BC          
00D5 BFF084A4      726           DB      0BFh,0F0h,084h,0A4h,0BAh
00D9 BA          
00DA 1010A4BE      727           DB      010h,010h,0A4h,0BEh,0B8h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:  15
convert_format

 LOC CODE        LINE   SOURCELINE

00DE B8          
00DF 88ACBFF7      728           DB      088h,0ACh,0BFh,0F7h,0Ah
00E3 0A          
00E4 84869008      729           DB      084h,086h,090h,08h,04h
00E8 04          
00E9 0000037F      730           DB      00h,00h,03h,07Fh,0FDh
00ED FD          
00EE F7C17DAE      731           DB      0F7h,0C1h,07Dh,0AEh,06Fh
00F2 6F          
00F3 CB153DFC      732           DB      0CBh,015h,03Dh,0FCh,00h
00F7 00          
00F8 7F7DE7C2      733           DB      07Fh,07Dh,0E7h,0C2h,07Fh
00FC 7F          
00FD FDF7C3        734           DB      0FDh,0F7h,0C3h
                   735   ; convert_format.c  230  0xFD,0xBF,0xF7,0xF9,0xFC,0xBE,0xF1,0x80,0xFF,0xFF,0xF7,0xBB,0xFF,0xFF,0xFF,
                   736   ; convert_format.c  231  0xCF,0xDE,0xBF,0xD1,0x08,0xFF,0xBF,0xF1,0xBF,0xFF,0xFF,0xFF,0xC7,0x1D,0x3F,
                   737   ; convert_format.c  232  0x7F,0x81,0xA7,0xB6,0xF2,0x82,0xFF,0xFF,0x75,0xDB,0xFC,0xBF,0xD7,0x9D,0xFF,
                   738   ; convert_format.c  233  0xAE,0xFB,0xDF,0xFF,0xFF,0xFF,0xC7,0x84,0xB7,0xF3,0x9F,0xFF,0xFF,0xFF,0xDB,
                   739   ; convert_format.c  234  0xFF,0xBF,0xFF,0xFF,0xFD,0xBF,0xFF,0xFF,0xFF,0xFF,0xE7,0xC7,0x84,0x9E,0xF0,
                   740   ; convert_format.c  235  0x12,0xBC,0xBF,0xF0,0x84,0xA4,0xBA,0x10,0x10,0xA4,0xBE,0xB8,0x88,0xAC,0xBF,
                   741   ; convert_format.c  236  0xF7,0x0A,0x84,0x86,0x90,0x08,0x04,0x00,0x00,0x03,0x7F,0xFD,0xF7,0xC1,0x7D,
                   742   ; convert_format.c  237  0xAE,0x6F,0xCB,0x15,0x3D,0xFC,0x00,0x7F,0x7D,0xE7,0xC2,0x7F,0xFD,0xF7,0xC3};
                   743   ; convert_format.c  238 
                   744   ; convert_format.c  239 /* =========================================================================
                   745   ; convert_format.c  240    Вспомогательная функция alt2num.
                   746   ; convert_format.c  241    Вход: a - код русской буквы в кодировке ALT.
                   747   ; convert_format.c  242    Выход: порядковый номер этой буквы (0-31).
                   748   ; convert_format.c  243  ========================================================================= */
                   749   ; convert_format.c  244 unsigned int alt2num (int a)
                   750   ; convert_format.c  245 {
                   751           PUBLIC  _alt2num
                   752   CONVERT_FORMAT_1_FC     ENDS
                   753   
                   754   CONVERT_FORMAT_2_PR     SECTION CODE
                   755   _alt2num        PROC    FAR
                   756   ; Locals:
                   757   ; 
                   758   ; Statics:
                   759   ; 
                   760   ; CSEs:
                   761   ;     a = R12
                   762   ; 
                   763   ; convert_format.c  246  if (a>=0xE0) a-=0x30;
03EC 46FCE000      764           CMP     R12,#0E0h
03F0 CD02          765           JMPR    cc_SLT,_180
03F2 26FC3000      766           SUB     R12,#030h
03F6               767   _180:
                   768   ; convert_format.c  247  return (a&31);
03F6 F04C          769           MOV     R4,R12
03F8 66F41F00      770           AND     R4,#01Fh
                   771   ; convert_format.c  248 }
03FC DB00          772           RETS
                   773   _alt2num        ENDP
                   774   ; convert_format.c  249 /* =========================================================================
                   775   ; convert_format.c  250    Вспомогательная функция koi2num.
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:  16
convert_format

 LOC CODE        LINE   SOURCELINE

                   776   ; convert_format.c  251    Вход: a - код русской буквы в кодировке KOI.
                   777   ; convert_format.c  252    Выход: порядковый номер этой буквы (0-31).
                   778   ; convert_format.c  253  ========================================================================= */
                   779   ; convert_format.c  254 unsigned int koi2num (int a)
                   780   ; convert_format.c  255 {
                   781           PUBLIC  _koi2num
                   782   CONVERT_FORMAT_2_PR     ENDS
                   783   
                   784   CONVERT_FORMAT_1_FC     SECTION DATA
0100               785   _181    LABEL   BYTE
0100 1E000116      786           DB      01Eh,00h,01h,016h,04h
0104 04          
0105 05140315      787           DB      05h,014h,03h,015h,08h
0109 08          
010A 090A0B0C      788           DB      09h,0Ah,0Bh,0Ch,0Dh
010E 0D          
010F 0E0F1F10      789           DB      0Eh,0Fh,01Fh,010h,011h
0113 11          
0114 12130602      790           DB      012h,013h,06h,02h,01Ch
0118 1C          
0119 1B07181D      791           DB      01Bh,07h,018h,01Dh,019h
011D 19          
011E 171A          792           DB      017h,01Ah
                   793   CONVERT_FORMAT_1_FC     ENDS
                   794   
                   795   CONVERT_FORMAT_2_PR     SECTION CODE
                   796   _koi2num        PROC    FAR
                   797   ; Locals:
                   798   ; 
                   799   ; Statics:
                   800   ;     t = label _181
                   801   ; 
                   802   ; CSEs:
                   803   ;     a = R12
                   804   ; 
                   805   ; convert_format.c  256  static const unsigned char t[32]={30,0,1,22,4,5,20,3,21,8,9,10,11,12,13,14,15,31,
                   806   ; convert_format.c  257   16,17,18,19,6,2,28,27,7,24,29,25,23,26};
                   807   ; convert_format.c  258  return (t[a&31]);
03FE 66FC1F00      808           AND     R12,#01Fh
0402 D7400000  R   809           EXTP    #PAG _181,#01h
0406 F42C0000 1R   810           MOVB    RL1,[R12+#POF _181]
040A C024          811           MOVBZ   R4,RL1
                   812   ; convert_format.c  259 }
040C DB00          813           RETS
                   814   _koi2num        ENDP
                   815   ; convert_format.c  260 
                   816   ; convert_format.c  261 /* =========================================================================
                   817   ; convert_format.c  262    Вспомогательная функция work_2s - обработка двухбуквенного сочетания.
                   818   ; convert_format.c  263    Вход:  с1 - порядковый номер первой буквы (0-31),
                   819   ; convert_format.c  264           c2 - порядковый номер второй буквы (0-31),
                   820   ; convert_format.c  265           check - надо ли проверять, встречалось ли сочетание раньше
                   821   ; convert_format.c  266                   (1 - да, 0 - нет),
                   822   ; convert_format.c  267           buf - адрес массива с информацией о встреченных сочетаниях.
                   823   ; convert_format.c  268    Выход: 0 - указанное сочетание уже встречалось раньше,
                   824   ; convert_format.c  269           1 - сочетание не встречалось раньше и является допустимым,
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:  17
convert_format

 LOC CODE        LINE   SOURCELINE

                   825   ; convert_format.c  270           2 - сочетание не встречалось раньше и является недопустимым.
                   826   ; convert_format.c  271  ========================================================================= */
                   827   ; convert_format.c  272 
                   828   ; convert_format.c  273 unsigned int work_2s (unsigned int c1, unsigned int c2, unsigned int check, unsigne
                         d char buf[128])
                   829   ; convert_format.c  274 {
                   830           PUBLIC  _work_2s
                   831   _work_2s        PROC    FAR
                   832   ; Locals:
                   833   ; 
                   834   ; Statics:
                   835   ; 
                   836   ; CSEs:
                   837   ;     mask = R12
                   838   ;     i = R15
                   839   ;     buf + i = R13R14
                   840   ;     c2 = R13
                   841   ;     check = R14
                   842   ;     c1 = R12
                   843   ;     buf = offset 0
                   844   ; 
                   845   ; convert_format.c  275  unsigned int i=(c1<<2)+(c2>>3); /* Номер байта в массиве. */
040E F0FC          846           MOV     R15,R12
0410 5C2F          847           SHL     R15,#02h
0412 F0CD          848           MOV     R12,R13
0414 7C3C          849           SHR     R12,#03h
0416 00FC          850           ADD     R15,R12
                   851   ; convert_format.c  276  unsigned int mask=0x80>>(c2&7); /* Маска, соответствующая номеру бита в байте. */
0418 68D7          852           AND     R13,#07h
041A E6F18000      853           MOV     R1,#080h
041E 6C1D          854           SHR     R1,R13
0420 F0C1          855           MOV     R12,R1
                   856   ; convert_format.c  277 
                   857   ; convert_format.c  278  /* Если check=1, проверяем: если соответствующий бит массива buf равен 0,
                   858   ; convert_format.c  279     значит, указанное сочетание уже встречалось раньше. Тогда выходим из
                   859   ; convert_format.c  280     функции, возвращая 0. Если же сочетание не встречалось, то помечаем, что
                   860   ; convert_format.c  281     оно встретилось (обнуляем соответствующий бит массива buf). */
                   861   ; convert_format.c  282 
                   862   ; convert_format.c  283  if (check==1)
0422 48E1          863           CMP     R14,#01h
0424 3D13          864           JMPR    cc_NE,_183
                   865   ; convert_format.c  284  {
                   866   ; convert_format.c  285   if ((buf[i]&mask)==0) return (0);
0426 A8D0          867           MOV     R13,[R0]
0428 D4E00200      868           MOV     R14,[R0+#02H]
042C 00DF          869           ADD     R13,R15
042E DC4E          870           EXTP    R14,#01h
0430 A92D     1    871           MOVB    RL1,[R13]
0432 C021          872           MOVBZ   R1,RL1
0434 601C          873           AND     R1,R12
0436 3D02          874           JMPR    cc_NZ,_182
0438 E004          875           MOV     R4,#00h
043A DB00          876           RETS
043C               877   _182:
                   878   ; convert_format.c  286   buf[i]&=~mask;
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:  18
convert_format

 LOC CODE        LINE   SOURCELINE

043C DC4E          879           EXTP    R14,#01h
043E A92D     1    880           MOVB    RL1,[R13]
0440 C021          881           MOVBZ   R1,RL1
0442 F02C          882           MOV     R2,R12
0444 9120          883           CPL     R2
0446 6012          884           AND     R1,R2
0448 DC4E          885           EXTP    R14,#01h
044A B92D     1    886           MOVB    [R13],RL1
                   887   ; convert_format.c  287  }
044C               888   _183:
                   889   ; convert_format.c  288 
                   890   ; convert_format.c  289  /* Проверяем, допустимо сочетание или нет. */
                   891   ; convert_format.c  290 
                   892   ; convert_format.c  291  if ((table_2s[i]&mask)!=0) return (1); /* Допустимо. */
044C D7400000  R   893           EXTP    #PAG _table_2s,#01h
0450 F42F0000 1R   894           MOVB    RL1,[R15+#POF _table_2s]
0454 C02D          895           MOVBZ   R13,RL1
0456 60DC          896           AND     R13,R12
0458 2D02          897           JMPR    cc_Z,_184
045A E014          898           MOV     R4,#01h
045C DB00          899           RETS
045E               900   _184:
                   901   ; convert_format.c  292  return (2);                            /* Недопустимо. */
045E E024          902           MOV     R4,#02h
                   903   ; convert_format.c  293 }
0460               904   _186:
0460 DB00          905           RETS
                   906   _work_2s        ENDP
                   907   ; convert_format.c  294 
                   908   ; convert_format.c  295 /* =========================================================================
                   909   ; convert_format.c  296    Вспомогательная функция def_code - определение кодировки текста. Функции
                   910   ; convert_format.c  297    m_def_code и f_def_code - лишь надстройки над этой функцией.
                   911   ; convert_format.c  298    Вход:  get_char - указатель на функцию, которую надо вызывать для получения
                   912   ; convert_format.c  299                      очередного символа текста. Функция должна возвращать либо
                   913   ; convert_format.c  300                      код символа, либо, при достижении конца текста, -1.
                   914   ; convert_format.c  301           n - количество различных сочетаний русских букв (1-255), которого
                   915   ; convert_format.c  302               достаточно для определения кодировки.
                   916   ; convert_format.c  303    Выход: 0 - текст в кодировке ALT, 1 - WIN, 2 - KOI.
                   917   ; convert_format.c  304  ========================================================================= */
                   918   ; convert_format.c  305 
                   919   ; convert_format.c  306 unsigned int def_code (void)
                   920   ; convert_format.c  307 {
                   921           PUBLIC  _def_code
                   922   _def_code       PROC    FAR
0462 8890          923           MOV     [-R0],R9
0464 8880          924           MOV     [-R0],R8
0466 8870          925           MOV     [-R0],R7
0468 8860          926           MOV     [-R0],R6
046A 26F00801      927           SUB     R0,#0108h
                   928   ; Locals:
                   929   ;     buf_1 = offset 8
                   930   ;     buf_2 = offset 136
                   931   ; 
                   932   ; Statics:
                   933   ; 
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:  19
convert_format

 LOC CODE        LINE   SOURCELINE

                   934   ; CSEs:
                   935   ;     c2 = R8
                   936   ;     c1 = R9
                   937   ;     all_3 = R6
                   938   ;     all_1 = R7
                   939   ;     bad_2 = offset 0
                   940   ;     bad_3 = offset 2
                   941   ;     bad_1 = offset 4
                   942   ;     s = offset 6
                   943   ;     b = R12
                   944   ;     c = R13
                   945   ;     a = R14
                   946   ;     all_3 >> 5 = R12
                   947   ; 
                   948   ; convert_format.c  308  /* В массиве buf_1 хранится информация о том, какие сочетания руских букв
                   949   ; convert_format.c  309     уже встречались в варианте ALT, а в массиве buf_2 - в варианте WIN. */
                   950   ; convert_format.c  310 
                   951   ; convert_format.c  311  unsigned char buf_1 [128];
                   952   ; convert_format.c  312  unsigned char buf_2 [128];
                   953   ; convert_format.c  313 
                   954   ; convert_format.c  314 
                   955   ; convert_format.c  315  unsigned int s=0;
046E E00C          956           MOV     R12,#00h
0470 C4C00600      957           MOV     [R0+#06H],R12
                   958   ; convert_format.c  316 
                   959   ; convert_format.c  317  unsigned int bad_1=0;
0474 C4C00400      960           MOV     [R0+#04H],R12
                   961   ; convert_format.c  318  unsigned int bad_2=0;
0478 B8C0          962           MOV     [R0],R12
                   963   ; convert_format.c  319  unsigned int bad_3=0;
047A C4C00200      964           MOV     [R0+#02H],R12
                   965   ; convert_format.c  320  unsigned int all_1=0;
047E F07C          966           MOV     R7,R12
                   967   ; convert_format.c  321  unsigned int all_3=0;  /* all_2=all_3 */
0480 F06C          968           MOV     R6,R12
                   969   ; convert_format.c  322 
                   970   ; convert_format.c  323  unsigned int c1;
                   971   ; convert_format.c  324  unsigned int c2=0; /* Символы текущего обрабатываемого сочетания. */
0482 F08C          972           MOV     R8,R12
                   973   ; convert_format.c  325 
                   974   ; convert_format.c  326  /* Инициализация buf_1 и buf_2. */
                   975   ; convert_format.c  327 
                   976   ; convert_format.c  328  memset(buf_1,0xFF,sizeof(buf_1));
0484 E08C          977           MOV     R12,#08h
0486 00C0          978           ADD     R12,R0
0488 66FCFF3F      979           AND     R12,#03FFFh
048C F2FD02FE      980           MOV     R13,DPP1
0490 E6FEFF00      981           MOV     R14,#0FFh
0494 E6FF8000      982           MOV     R15,#080h
0498 DA000000  R   983           CALLS   SEG _memset,_memset
                   984   ; convert_format.c  329  memset(buf_2,0xFF,sizeof(buf_2));
049C E6FC8800      985           MOV     R12,#088h
04A0 00C0          986           ADD     R12,R0
04A2 66FCFF3F      987           AND     R12,#03FFFh
04A6 F2FD02FE      988           MOV     R13,DPP1
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:  20
convert_format

 LOC CODE        LINE   SOURCELINE

04AA E6FEFF00      989           MOV     R14,#0FFh
04AE E6FF8000      990           MOV     R15,#080h
04B2 DA000000  R   991           CALLS   SEG _memset,_memset
                   992   ; convert_format.c  330 
                   993   ; convert_format.c  331  /* Главный цикл - обработка сочетаний для каждого из трёх вариантов. Цикл
                   994   ; convert_format.c  332     выполняется, пока не кончится текст или в каком-либо из вариантов не
                   995   ; convert_format.c  333     встретится n сочетаний. */
                   996   ; convert_format.c  334 
                   997   ; convert_format.c  335  while ((s<16384)&&(all_1<255)&&(all_3<255))
04B6 EA00BA05  R   998           JMPA    cc_UC,_206
04BA               999   _187:
                  1000   ; convert_format.c  336  {
                  1001   ; convert_format.c  337   c1=c2;
04BA F098         1002           MOV     R9,R8
                  1003   ; convert_format.c  338   if ((c2=dstk[s])==0) break;
04BC D4C00600     1004           MOV     R12,[R0+#06H]
04C0 D7400000  R  1005           EXTP    #PAG _dstk,#01h
04C4 F42C0000 1R  1006           MOVB    RL1,[R12+#POF _dstk]
04C8 C028         1007           MOVBZ   R8,RL1
04CA EA20D205  R  1008           JMPA    cc_Z,_209
                  1009   ; convert_format.c  339   s++;
04CE 08C1         1010           ADD     R12,#01h
04D0 C4C00600     1011           MOV     [R0+#06H],R12
                  1012   ; convert_format.c  340   /* Вариант ALT. Вначале проверяем, являются ли символы текущего сочетания
                  1013   ; convert_format.c  341      кодами русских букв в кодировке ALT. */
                  1014   ; convert_format.c  342 
                  1015   ; convert_format.c  343   if ((((c1>=0x80)&&(c1<0xB0))||((c1>=0xE0)&&(c1<0xF0)))&&
                  1016   ; convert_format.c  344       (((c2>=0x80)&&(c2<0xB0))||((c2>=0xE0)&&(c2<0xF0))))
04D4 46F98000     1017           CMP     R9,#080h
04D8 8D03         1018           JMPR    cc_ULT,_188
04DA 46F9B000     1019           CMP     R9,#0B0h
04DE 8D06         1020           JMPR    cc_ULT,_189
04E0              1021   _188:
04E0 46F9E000     1022           CMP     R9,#0E0h
04E4 8D2F         1023           JMPR    cc_ULT,_198
04E6 46F9F000     1024           CMP     R9,#0F0h
04EA 9D2C         1025           JMPR    cc_UGE,_198
04EC              1026   _189:
04EC 46F88000     1027           CMP     R8,#080h
04F0 8D03         1028           JMPR    cc_ULT,_190
04F2 46F8B000     1029           CMP     R8,#0B0h
04F6 8D06         1030           JMPR    cc_ULT,_191
04F8              1031   _190:
04F8 46F8E000     1032           CMP     R8,#0E0h
04FC 8D23         1033           JMPR    cc_ULT,_198
04FE 46F8F000     1034           CMP     R8,#0F0h
0502 9D20         1035           JMPR    cc_UGE,_198
0504              1036   _191:
                  1037   ; convert_format.c  345   {
                  1038   ; convert_format.c  346    switch (work_2s(alt2num(c1),alt2num(c2),1,buf_1)) /* Обработали. */
0504 E08C         1039           MOV     R12,#08h
0506 00C0         1040           ADD     R12,R0
0508 66FCFF3F     1041           AND     R12,#03FFFh
050C F2FD02FE     1042           MOV     R13,DPP1
0510 88D0         1043           MOV     [-R0],R13
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:  21
convert_format

 LOC CODE        LINE   SOURCELINE

0512 88C0         1044           MOV     [-R0],R12
0514 F0C8         1045           MOV     R12,R8
0516 DA00EC03  R  1046           CALLS   SEG _alt2num,_alt2num
051A 8840         1047           MOV     [-R0],R4
051C F0C9         1048           MOV     R12,R9
051E DA00EC03  R  1049           CALLS   SEG _alt2num,_alt2num
0522 F0C4         1050           MOV     R12,R4
0524 E01E         1051           MOV     R14,#01h
0526 98D0         1052           MOV     R13,[R0+]
0528 DA000E04  R  1053           CALLS   SEG _work_2s,_work_2s
052C 0804         1054           ADD     R0,#04h
052E 4842         1055           CMP     R4,#02h
0530 2D03         1056           JMPR    cc_EQ,_192
0532 4841         1057           CMP     R4,#01h
0534 2D06         1058           JMPR    cc_EQ,_193
0536 0D06         1059           JMPR    cc_UC,_198
                  1060   ; convert_format.c  347    {
                  1061   ; convert_format.c  348     case 2: bad_1++;
0538              1062   _192:
0538 D4C00400     1063           MOV     R12,[R0+#04H]
053C 08C1         1064           ADD     R12,#01h
053E C4C00400     1065           MOV     [R0+#04H],R12
                  1066   ; convert_format.c  349     case 1: all_1++;
0542              1067   _193:
0542 0871         1068           ADD     R7,#01h
                  1069   ; convert_format.c  350    }
                  1070   ; convert_format.c  351   }
0544              1071   _198:
                  1072   ; convert_format.c  352   /* Варианты WIN и KOI. Вначале проверяем, являются ли символы текущего
                  1073   ; convert_format.c  353      сочетания кодами русских букв в этих кодировках (в обеих кодировках
                  1074   ; convert_format.c  354      диапазоны кодов русских букв совпадают). */
                  1075   ; convert_format.c  355 
                  1076   ; convert_format.c  356   if ((c1&c2)>=0xC0) /* Эквивалентно условию (c1>=0xC0)&&(c2>=0xC0). */
0544 F0C9         1077           MOV     R12,R9
0546 60C8         1078           AND     R12,R8
0548 46FCC000     1079           CMP     R12,#0C0h
054C 8D36         1080           JMPR    cc_ULT,_206
                  1081   ; convert_format.c  357   {
                  1082   ; convert_format.c  358    switch (work_2s(c1&31,c2&31,1,buf_2)) /* Обработали. */
054E E6FC8800     1083           MOV     R12,#088h
0552 00C0         1084           ADD     R12,R0
0554 66FCFF3F     1085           AND     R12,#03FFFh
0558 F2FD02FE     1086           MOV     R13,DPP1
055C 88D0         1087           MOV     [-R0],R13
055E 88C0         1088           MOV     [-R0],R12
0560 F0C9         1089           MOV     R12,R9
0562 66FC1F00     1090           AND     R12,#01Fh
0566 F0D8         1091           MOV     R13,R8
0568 66FD1F00     1092           AND     R13,#01Fh
056C E01E         1093           MOV     R14,#01h
056E DA000E04  R  1094           CALLS   SEG _work_2s,_work_2s
0572 0804         1095           ADD     R0,#04h
0574 4840         1096           CMP     R4,#00h
0576 2D21         1097           JMPR    cc_EQ,_206
0578 4842         1098           CMP     R4,#02h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:  22
convert_format

 LOC CODE        LINE   SOURCELINE

057A 3D03         1099           JMPR    cc_NE,_200
                  1100   ; convert_format.c  359    {
                  1101   ; convert_format.c  360     case 0: continue; /* Если сочетание букв уже встречалось в варианте WIN,
                  1102   ; convert_format.c  361                          то оно уже встречалось и в варианте KOI, так что
                  1103   ; convert_format.c  362                          пропускаем обработку варианта KOI и переходим
                  1104   ; convert_format.c  363                          к следующей итерации главного цикла. */
                  1105   ; convert_format.c  364     case 2: bad_2++;
057C              1106   _199:
057C A8C0         1107           MOV     R12,[R0]
057E 08C1         1108           ADD     R12,#01h
0580 B8C0         1109           MOV     [R0],R12
                  1110   ; convert_format.c  365    }
0582              1111   _200:
                  1112   ; convert_format.c  366 
                  1113   ; convert_format.c  367   /* Если сочетание букв ещё не встречалось в варианте WIN, то оно заведомо
                  1114   ; convert_format.c  368      не встречалось и в варианте KOI, поэтому специально проверять это не
                  1115   ; convert_format.c  369      надо - значит, функцию work_2s вызываем с параметром check, равным 0. */
                  1116   ; convert_format.c  370 
                  1117   ; convert_format.c  371    switch (work_2s(koi2num(c1),koi2num(c2),0,NULL)) /* Обработали. */
0582 E00C         1118           MOV     R12,#00h
0584 E00D         1119           MOV     R13,#00h
0586 88D0         1120           MOV     [-R0],R13
0588 88C0         1121           MOV     [-R0],R12
058A F0C8         1122           MOV     R12,R8
058C DA00FE03  R  1123           CALLS   SEG _koi2num,_koi2num
0590 8840         1124           MOV     [-R0],R4
0592 F0C9         1125           MOV     R12,R9
0594 DA00FE03  R  1126           CALLS   SEG _koi2num,_koi2num
0598 F0C4         1127           MOV     R12,R4
059A E00E         1128           MOV     R14,#00h
059C 98D0         1129           MOV     R13,[R0+]
059E DA000E04  R  1130           CALLS   SEG _work_2s,_work_2s
05A2 0804         1131           ADD     R0,#04h
05A4 4842         1132           CMP     R4,#02h
05A6 2D03         1133           JMPR    cc_EQ,_201
05A8 4841         1134           CMP     R4,#01h
05AA 2D06         1135           JMPR    cc_EQ,_202
05AC 0D06         1136           JMPR    cc_UC,_206
                  1137   ; convert_format.c  372    {
                  1138   ; convert_format.c  373     case 2: bad_3++;
05AE              1139   _201:
05AE D4900200     1140           MOV     R9,[R0+#02H]
05B2 0891         1141           ADD     R9,#01h
05B4 C4900200     1142           MOV     [R0+#02H],R9
                  1143   ; convert_format.c  374     case 1: all_3++;
05B8              1144   _202:
05B8 0861         1145           ADD     R6,#01h
05BA              1146   _206:
05BA D4900600     1147           MOV     R9,[R0+#06H]
05BE 46F90040     1148           CMP     R9,#04000h
05C2 9D07         1149           JMPR    cc_UGE,_209
05C4 46F7FF00     1150           CMP     R7,#0FFh
05C8 9D04         1151           JMPR    cc_UGE,_209
05CA 46F6FF00     1152           CMP     R6,#0FFh
05CE EA80BA04  R  1153           JMPA    cc_ULT,_187
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:  23
convert_format

 LOC CODE        LINE   SOURCELINE

                  1154   ; convert_format.c  375    }
                  1155   ; convert_format.c  376   }
                  1156   ; convert_format.c  377  }
05D2              1157   _209:
                  1158   ; convert_format.c  378 
                  1159   ; convert_format.c  379  /* Данные собраны. Теперь, если в каком-либо из вариантов недопустимых
                  1160   ; convert_format.c  380     сочетаний не больше 1/32 от общего их числа, то считаем, что их и не
                  1161   ; convert_format.c  381     было. */
                  1162   ; convert_format.c  382 
                  1163   ; convert_format.c  383  if (bad_1<=(all_1>>5)) bad_1=0;
05D2 F087         1164           MOV     R8,R7
05D4 7C58         1165           SHR     R8,#05h
05D6 D4900400     1166           MOV     R9,[R0+#04H]
05DA 4089         1167           CMP     R8,R9
05DC 8D03         1168           JMPR    cc_ULT,_210
05DE E008         1169           MOV     R8,#00h
05E0 C4800400     1170           MOV     [R0+#04H],R8
05E4              1171   _210:
                  1172   ; convert_format.c  384  if (bad_2<=(all_3>>5)) bad_2=0;
05E4 F0C6         1173           MOV     R12,R6
05E6 7C5C         1174           SHR     R12,#05h
05E8 A880         1175           MOV     R8,[R0]
05EA 40C8         1176           CMP     R12,R8
05EC 8D02         1177           JMPR    cc_ULT,_211
05EE E009         1178           MOV     R9,#00h
05F0 B890         1179           MOV     [R0],R9
05F2              1180   _211:
                  1181   ; convert_format.c  385  if (bad_3<=(all_3>>5)) bad_3=0;
05F2 D4800200     1182           MOV     R8,[R0+#02H]
05F6 40C8         1183           CMP     R12,R8
05F8 8D03         1184           JMPR    cc_ULT,_212
05FA E009         1185           MOV     R9,#00h
05FC C4900200     1186           MOV     [R0+#02H],R9
0600              1187   _212:
                  1188   ; convert_format.c  386 
                  1189   ; convert_format.c  387  /* Получаем результат. */
                  1190   ; convert_format.c  388 
                  1191   ; convert_format.c  389  {
                  1192   ; convert_format.c  390   unsigned int a=((255-bad_1)<<8)+all_1;
0600 D4800400     1193           MOV     R8,[R0+#04H]
0604 E6FEFF00     1194           MOV     R14,#0FFh
0608 20E8         1195           SUB     R14,R8
060A 5C8E         1196           SHL     R14,#08h
060C 00E7         1197           ADD     R14,R7
                  1198   ; convert_format.c  391   unsigned int b=((255-bad_2)<<8)+all_3;
060E A890         1199           MOV     R9,[R0]
0610 E6FCFF00     1200           MOV     R12,#0FFh
0614 20C9         1201           SUB     R12,R9
0616 5C8C         1202           SHL     R12,#08h
0618 00C6         1203           ADD     R12,R6
                  1204   ; convert_format.c  392   unsigned int c=((255-bad_3)<<8)+all_3;
061A D4700200     1205           MOV     R7,[R0+#02H]
061E E6FDFF00     1206           MOV     R13,#0FFh
0622 20D7         1207           SUB     R13,R7
0624 5C8D         1208           SHL     R13,#08h
C166/ST10 assembler v7.5 r2 SN00123412-223 (c) 2001 TASKING, Inc.                       Date: Apr  6 2006  Time: 11:55:46  Page:  24
convert_format

 LOC CODE        LINE   SOURCELINE

0626 00D6         1209           ADD     R13,R6
                  1210   ; convert_format.c  393 
                  1211   ; convert_format.c  394   if ((a>=b)&&(a>=c)) return (0);
0628 40EC         1212           CMP     R14,R12
062A 8D04         1213           JMPR    cc_ULT,_214
062C 40ED         1214           CMP     R14,R13
062E 8D02         1215           JMPR    cc_ULT,_214
0630 E004         1216           MOV     R4,#00h
0632 0D05         1217           JMPR    cc_UC,_217
0634              1218   _214:
                  1219   ; convert_format.c  395   if (b>=c) return (1); else return (2);
0634 40CD         1220           CMP     R12,R13
0636 8D02         1221           JMPR    cc_ULT,_215
0638 E014         1222           MOV     R4,#01h
063A 0D01         1223           JMPR    cc_UC,_217
063C              1224   _215:
063C E024         1225           MOV     R4,#02h
                  1226   ; convert_format.c  396  }
                  1227   ; convert_format.c  397 }
063E              1228   _217:
063E 06F00801     1229           ADD     R0,#0108h
0642 9860         1230           MOV     R6,[R0+]
0644 9870         1231           MOV     R7,[R0+]
0646 9880         1232           MOV     R8,[R0+]
0648 9890         1233           MOV     R9,[R0+]
064A DB00         1234           RETS
                  1235   _def_code       ENDP
                  1236   CONVERT_FORMAT_2_PR     ENDS
                  1237   
                  1238           EXTERN  _FL_loader:FAR
                  1239           EXTERN  _memmove:FAR
                  1240           EXTERN  _koi8translation:BYTE
                  1241           EXTERN  _curline:WORD
                  1242           EXTERN  _max_x:WORD
                  1243           EXTERN  _win_dos_koi:BYTE
                  1244           EXTERN  _memset:FAR
                  1245           EXTERN  _FL_saver:FAR
                  1246           EXTERN  _wintranslation:BYTE
                  1247           EXTERN  _dstk:BYTE
                  1248           EXTERN  _ustk:BYTE
                  1249           REGDEF  R0-R15
                  1250           END

total errors: 0, warnings: 0

