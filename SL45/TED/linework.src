; C166/ST10 C compiler v7.5 r2            SN00123412-435 (c) 2001 TASKING, Inc.
; options: -e -Id:\c166\include -xmifp -DCPUTYPE=0x167 -FSC -Ob -znocustack
;          -zautobitastruct-4 -zautobita-0 -T256 -s -zvolatile_union -u
;          -AcdFiklmpstuVx -OAcdFghjkLnoprSUx -Ml
$EXTEND
$NOMOD166
$STDNAMES(reg.def)
$SEGMENTED
$CASE
$MODEL(LARGE)
	NAME	LINEWORK_C
	ASSUME	DPP3:SYSTEM
; linework.c    1	#include "sl45.h"
; linework.c    2	
; linework.c    3	#define STKSZ (16384)
; linework.c    4	
; linework.c    5	extern unsigned int far usp; //Указатель на верхний стек
; linework.c    6	extern unsigned int far dsp; //Указатель на нижний стек
; linework.c    7	extern unsigned char far dstk[];
; linework.c    8	extern unsigned char far ustk[];
; linework.c    9	
; linework.c   10	unsigned int bl_us(unsigned int p)
; linework.c   11	{
	PUBLIC	_bl_us
LINEWORK_1_PR	SECTION	CODE WORD PUBLIC 'CPROGRAM'
_bl_us	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
;     p = R12
; 
; linework.c   12	 if (!p) return(p);
	CMP	R12,#00h
	JMPR	cc_Z,_9
; linework.c   13	 do
_7:
; linework.c   14	 {
; linework.c   15	  if (!(--p)) break;
	SUB	R12,#01h
	JMPR	cc_Z,_9
; linework.c   16	 }
; linework.c   17	 while(ustk[p-1]);
	EXTP	#PAG _ustk,#01h
	MOVB	RL1,[R12+#POF _ustk-1]
	JMPR	cc_NZ,_7
_9:
; linework.c   18	 return(p);
	MOV	R4,R12
; linework.c   19	}
	RETS
_bl_us	ENDP
; linework.c   20	
; linework.c   21	unsigned int bl_ds(unsigned int p)
; linework.c   22	{
	PUBLIC	_bl_ds
_bl_ds	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
;     p = R12
; 
; linework.c   23	 if (p==STKSZ) return(p);
	CMP	R12,#04000h
	JMPR	cc_EQ,_14
; linework.c   24	 do
_13:
; linework.c   25	 {
; linework.c   26	  p++;
	ADD	R12,#01h
; linework.c   27	 }
; linework.c   28	 while(dstk[p-1]);
	EXTP	#PAG _dstk,#01h
	MOVB	RL1,[R12+#POF _dstk-1]
	JMPR	cc_NZ,_13
; linework.c   29	 return(p);
_14:
	MOV	R4,R12
; linework.c   30	}
	RETS
_bl_ds	ENDP
; linework.c   31	
; linework.c   32	//Перенос из верхнего стека в нижний (на строку вверх)
; linework.c   33	void move_up(void)
; linework.c   34	{
	PUBLIC	_move_up
_move_up	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
;     s = R12
;     d = R13
;     c = RL1
; 
; linework.c   35	 unsigned int s=usp;
	EXTP	#PAG _usp,#01h
	MOV	R12,POF _usp
; linework.c   36	 unsigned int d=dsp;
	EXTP	#PAG _dsp,#01h
	MOV	R13,POF _dsp
; linework.c   37	 unsigned char c;
; linework.c   38	 if (!s) return;
	CMP	R12,#00h
	JMPR	cc_Z,_30
; linework.c   39	 dstk[--d]=ustk[--s]; //Переносим 0
	SUB	R12,#01h
	EXTP	#PAG _ustk,#01h
	MOVB	RL1,[R12+#POF _ustk]
	SUB	R13,#01h
	EXTP	#PAG _dstk,#01h
	MOVB	[R13+#POF _dstk],RL1
; linework.c   40	 if (s>256)
	CMP	R12,#0100h
	JMPR	cc_ULE,_25
; linework.c   41	 {
; linework.c   42	  while((c=ustk[--s])) dstk[--d]=c;
	JMPR	cc_UC,_24
_23:
	SUB	R13,#01h
	EXTP	#PAG _dstk,#01h
	MOVB	[R13+#POF _dstk],RL1
_24:
	SUB	R12,#01h
	EXTP	#PAG _ustk,#01h
	MOVB	RL1,[R12+#POF _ustk]
	JMPR	cc_NZ,_23
; linework.c   43	  s++;
	ADD	R12,#01h
; linework.c   44	 }
	JMPR	cc_UC,_29
; linework.c   45	 else
; linework.c   46	 {
; linework.c   47	  while(s)
_25:
	JMPR	cc_UC,_27
_26:
; linework.c   48	  {
; linework.c   49	   if (!(c=ustk[s-1])) break;
	EXTP	#PAG _ustk,#01h
	MOVB	RL1,[R12+#POF _ustk-1]
	JMPR	cc_Z,_29
; linework.c   50	   s--;
	SUB	R12,#01h
; linework.c   51	   dstk[--d]=c;
	SUB	R13,#01h
	EXTP	#PAG _dstk,#01h
	MOVB	[R13+#POF _dstk],RL1
_27:
	CMP	R12,#00h
	JMPR	cc_NZ,_26
; linework.c   52	  }
; linework.c   53	 }
_29:
; linework.c   54	 usp=s;
	EXTP	#PAG _usp,#01h
	MOV	POF _usp,R12
; linework.c   55	 dsp=d;
	EXTP	#PAG _dsp,#01h
	MOV	POF _dsp,R13
; linework.c   56	}
_30:
	RETS
_move_up	ENDP
; linework.c   57	
; linework.c   58	//Перенос из нижнего стека в верхний (на строку вниз)
; linework.c   59	void move_dw(void)
; linework.c   60	{
	PUBLIC	_move_dw
_move_dw	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
;     s = R12
;     d = R13
; 
; linework.c   61	 unsigned int s=dsp;
	EXTP	#PAG _dsp,#01h
	MOV	R12,POF _dsp
; linework.c   62	 unsigned int d=usp;
	EXTP	#PAG _usp,#01h
	MOV	R13,POF _usp
; linework.c   63	 if (s==STKSZ) return;
	CMP	R12,#04000h
	JMPR	cc_NE,_35
	RETS
; linework.c   64	 while((ustk[d]=dstk[s]))
_35:
	JMPR	cc_UC,_37
_36:
; linework.c   65	 {
; linework.c   66	  d++;
	ADD	R13,#01h
; linework.c   67	  s++;
	ADD	R12,#01h
_37:
	EXTP	#PAG _dstk,#01h
	MOVB	RL1,[R12+#POF _dstk]
	EXTP	#PAG _ustk,#01h
	MOVB	[R13+#POF _ustk],RL1
	CMPB	RL1,#00h
	JMPR	cc_NZ,_36
; linework.c   68	 }
; linework.c   69	 d++;
	ADD	R13,#01h
; linework.c   70	 s++;
	ADD	R12,#01h
; linework.c   71	 dsp=s;
	EXTP	#PAG _dsp,#01h
	MOV	POF _dsp,R12
; linework.c   72	 usp=d;
	EXTP	#PAG _usp,#01h
	MOV	POF _usp,R13
; linework.c   73	}
_38:
	RETS
_move_dw	ENDP
LINEWORK_1_PR	ENDS

	EXTERN	_dsp:WORD
	EXTERN	_usp:WORD
	EXTERN	_dstk:BYTE
	EXTERN	_ustk:BYTE
	REGDEF	R0-R15
	END
