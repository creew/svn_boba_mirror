; C166/ST10 C compiler v7.5 r2            SN00123412-435 (c) 2001 TASKING, Inc.
; options: -e -Id:\c166\include -xmifp -DCPUTYPE=0x167 -FSC -Ob -znocustack
;          -zautobitastruct-4 -zautobita-0 -T256 -s -zvolatile_union -u
;          -AcdFiklmpstuVx -OAcdFghjkLnoprSUx -Ml
$EXTEND
$NOMOD166
$STDNAMES(reg.def)
$SEGMENTED
$CASE
$MODEL(LARGE)
	NAME	MAIN_C
	ASSUME	DPP3:SYSTEM
; main.c      1	#include "sl45.h"
; main.c      2	#include "reg167.h"
; main.c      3	
; main.c      4	/*unsigned long far tmr1;
; main.c      5	
; main.c      6	void dummy_timer(void)
; main.c      7	{
; main.c      8	 static const STR estr[]=
; main.c      9	 {
; main.c     10	  "See you later!"
; main.c     11	 };
; main.c     12	 SendMessage((void far *)0x3B5E8,0x90,0);
; main.c     13	 //SendMessage((void far *)0x3B5E8,0x88,0);
; main.c     14	 setExtSIDTable(estr);
; main.c     15	 DisplayMessageBoxV(1,0xE27);
; main.c     16	 DisableTimerX(&tmr1);
; main.c     17	}*/
; main.c     18	
; main.c     19	unsigned int far terminated; //Признак закрытия диалога
MAIN_1_FB	SECTION	DATA WORD PUBLIC 'CFAR'
MAIN_1_FB_ENTRY	LABEL	BYTE
_terminated	LABEL	WORD
	DS	2
	PUBLIC	_terminated
; main.c     20	int far dia_id;
_dia_id	LABEL	WORD
	DS	2
	PUBLIC	_dia_id
; main.c     21	unsigned int far editmode;
_editmode	LABEL	WORD
	DS	2
	PUBLIC	_editmode
; main.c     22	
; main.c     23	void sd_oncreate(void){doBack0A();}
	PUBLIC	_sd_oncreate
MAIN_1_FB	ENDS

MAIN_2_PR	SECTION	CODE WORD PUBLIC 'CPROGRAM'
_sd_oncreate	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
	JMPS	SEG _doBack0A,_doBack0A
	RETV
_sd_oncreate	ENDP
; main.c     24	void sd_onkey(void){}
	PUBLIC	_sd_onkey
_sd_onkey	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
	RETS
_sd_onkey	ENDP
; main.c     25	void sd_oninit(void){}
	PUBLIC	_sd_oninit
_sd_oninit	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
	RETS
_sd_oninit	ENDP
; main.c     26	void sd_onexit1(void){}
	PUBLIC	_sd_onexit1
_sd_onexit1	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
	RETS
_sd_onexit1	ENDP
; main.c     27	void sd_onexit2(void){}
	PUBLIC	_sd_onexit2
_sd_onexit2	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
	RETS
_sd_onexit2	ENDP
; main.c     28	static const struct DIALOG sdialog={sd_onkey,sd_oninit,sd_onexit1,sd_onexit2,sd_oncreate,0x10,0xc4};
MAIN_2_PR	ENDS

MAIN_3_FC	SECTION	DATA WORD PUBLIC 'CFARROM'
_sdialog	LABEL	WORD
	DSPTR	_sd_onkey,_sd_oninit,_sd_onexit1,_sd_onexit2,_sd_oncreate
	DW	010h,0C4h
; main.c     29	
; main.c     30	volatile int far stk_fhandle;
MAIN_3_FC	ENDS

MAIN_1_FB	SECTION	DATA
_stk_fhandle	LABEL	WORD
	DS	2
	PUBLIC	_stk_fhandle
; main.c     31	
; main.c     32	//Флаг необходимости перерисовать экран
; main.c     33	volatile unsigned char far draw_mode;
_draw_mode	LABEL	BYTE
	DS	1
	PUBLIC	_draw_mode
; main.c     34	volatile unsigned char far font_size;
_font_size	LABEL	BYTE
	DS	1
	PUBLIC	_font_size
; main.c     35	
; main.c     36	volatile unsigned int far clip_pasted;
_clip_pasted	LABEL	WORD
	DS	2
	PUBLIC	_clip_pasted
; main.c     37	
; main.c     38	void md_onCreate(void)
; main.c     39	{
	PUBLIC	_md_onCreate
MAIN_1_FB	ENDS

MAIN_2_PR	SECTION	CODE
_md_onCreate	PROC	FAR
	SUB	R0,#010h
; Locals:
;     mmm = offset 0
; 
; Statics:
; 
; CSEs:
; 
; main.c     40	 char mmm[0x10];
; main.c     41	 void DrawScreen(void);
; main.c     42	 void FirstLoadFile(unsigned int fmt);
; main.c     43	
; main.c     44	 pShowDialog(&sdialog,mmm); //Псевдо-диалог
	MOV	R12,#POF _sdialog
	MOV	R13,#PAG _sdialog
	MOV	R14,R0
	AND	R14,#03FFFh
	MOV	R15,DPP1
	CALLS	SEG _pShowDialog,_pShowDialog
; main.c     45	 //Запрещаем IDLE таймер
; main.c     46	 OnTimer1();
	CALLS	SEG _OnTimer1,_OnTimer1
; main.c     47	 OnTimer2();
	CALLS	SEG _OnTimer2,_OnTimer2
; main.c     48	 DrawScreen();
	CALLS	SEG _DrawScreen,_DrawScreen
; main.c     49	 if (terminated==2)
	MOV	DPP0,#PAG _terminated
	NOP
	MOV	R12,POF _terminated
	CMP	R12,#02h
	JMPR	cc_NE,_3
; main.c     50	 {
; main.c     51	  terminated=0;
	MOV	POF _terminated,ZEROS
; main.c     52	  draw_mode=1;
	MOVB	RL1,#01h
	MOVB	POF _draw_mode,RL1
; main.c     53	 }
	JMPR	cc_UC,_4
_3:
; main.c     54	 else
; main.c     55	 {
; main.c     56	  FilesysICall_UI(FirstLoadFile,0xFFFF); //С поиском в истории и вызовом меню, если нет
	MOV	R12,#SOF _FirstLoadFile
	MOV	R13,#SEG _FirstLoadFile
	MOV	R14,#0FFFFh
	CALLS	SEG _FilesysICall_UI,_FilesysICall_UI
; main.c     57	 }
_4:
; main.c     58	}
	ADD	R0,#010h
	RETS
_md_onCreate	ENDP
; main.c     59	
; main.c     60	void md_onClose(void)
; main.c     61	{
	PUBLIC	_md_onClose
_md_onClose	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c     62	 void SaveHistory(void);
; main.c     63	 editmode=0;
	MOV	DPP0,#PAG _editmode
	MOV	R12,#01h
	MOV	POF _editmode,ZEROS
; main.c     64	 terminated=1;
	MOV	POF _terminated,R12
; main.c     65	 FilesysICall(SaveHistory);
	MOV	R12,#SOF _SaveHistory
	MOV	R13,#SEG _SaveHistory
	JMPS	SEG _FilesysICall,_FilesysICall
; main.c     66	 //StartTimer2(&tmr1,100,dummy_timer);
; main.c     67	}
	RETV
_md_onClose	ENDP
; main.c     68	
; main.c     69	int md_onKey(void far *data, struct MSG far *Msg);
; main.c     70	
; main.c     71	static const unsigned int md_tab[]={0xFFF5};
MAIN_2_PR	ENDS

MAIN_3_FC	SECTION	DATA
_md_tab	LABEL	WORD
	DW	0FFF5h
; main.c     72	
; main.c     73	static const struct DIALOG_WSK main_dia=
_main_dia	LABEL	WORD
	DSPTR	_md_onKey,_md_onCreate,_md_onClose
	DW	02Ch,01h
	DPPTR	_md_tab
; main.c     74	{
; main.c     75	 md_onKey,
; main.c     76	 md_onCreate,
; main.c     77	 md_onClose,
; main.c     78	 0x2C,
; main.c     79	 sizeof(md_tab)/sizeof(unsigned int),
; main.c     80	 md_tab
; main.c     81	};
; main.c     82	
; main.c     83	static const char bmpDiskAccess[8]={0xFC,0x86,0xB3,0xA9,0xB1,0xA9,0x81,0xFF};
_bmpDiskAccess	LABEL	BYTE
	DB	0FCh,086h,0B3h,0A9h,0B1h
	DB	0A9h,081h,0FFh
; main.c     84	static const struct ImageHdr far imgDiskAccess = {8,8,0x1,bmpDiskAccess};
_imgDiskAccess	LABEL	WORD
	DB	08h,08h
	DW	01h
	DPPTR	_bmpDiskAccess
; main.c     85	
; main.c     86	//Указатель блока в верхнем стеке
; main.c     87	int far u_disk; //Дисковый указатель верхнего стека (в блоках по STKSZ50)
MAIN_3_FC	ENDS

MAIN_1_FB	SECTION	DATA
_u_disk	LABEL	WORD
	DS	2
	PUBLIC	_u_disk
; main.c     88	//Указатель блока в нижнем стеке
; main.c     89	int far d_disk; //Дисковый указатель нижнего стека (в блоках по STKSZ50)
_d_disk	LABEL	WORD
	DS	2
	PUBLIC	_d_disk
; main.c     90	
; main.c     91	unsigned int far usp; //Указатель на верхний стек
_usp	LABEL	WORD
	DS	2
	PUBLIC	_usp
; main.c     92	unsigned int far dsp; //Указатель на нижний стек
_dsp	LABEL	WORD
	DS	2
	PUBLIC	_dsp
; main.c     93	
; main.c     94	//Флаг работы с диском
; main.c     95	#define FIRSTLOAD 1
; main.c     96	#define LOAD_UP 2
; main.c     97	#define LOAD_DOWN 4
; main.c     98	#define SAVE_UP 8
; main.c     99	#define SAVE_DOWN 16
; main.c    100	#define SAVE_FILE 32
; main.c    101	
; main.c    102	unsigned char far disk_access;
_disk_access	LABEL	BYTE
	DS	1
	PUBLIC	_disk_access
; main.c    103	
; main.c    104	volatile unsigned char far cursor_cnt;
_cursor_cnt	LABEL	BYTE
	DS	1
	PUBLIC	_cursor_cnt
; main.c    105	volatile unsigned char far disable_exit;
_disable_exit	LABEL	BYTE
	DS	1
	PUBLIC	_disable_exit
; main.c    106	
; main.c    107	volatile unsigned char far win_dos_koi;
_win_dos_koi	LABEL	BYTE
	DS	1
	PUBLIC	_win_dos_koi
; main.c    108	unsigned char far cursor_off;
_cursor_off	LABEL	BYTE
	DS	1
	PUBLIC	_cursor_off
; main.c    109	
; main.c    110	const unsigned char clipfile[64]="A:\\Trash\\TED.clipb";
MAIN_1_FB	ENDS

MAIN_3_FC	SECTION	DATA
_clipfile	LABEL	BYTE
	DB	041h,03Ah,05Ch,054h,072h
	DB	061h,073h,068h,05Ch,054h
	DB	045h,044h,02Eh,063h,06Ch
	DB	069h,070h,062h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h
	PUBLIC	_clipfile
; main.c    111	const unsigned char stkfile[64]="A:\\Trash\\TED.tmp";
_stkfile	LABEL	BYTE
	DB	041h,03Ah,05Ch,054h,072h
	DB	061h,073h,068h,05Ch,054h
	DB	045h,044h,02Eh,074h,06Dh
	DB	070h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h
	PUBLIC	_stkfile
; main.c    112	const unsigned char snapshootfile[64]="A:\\Trash\\TED.snapshoot";
_snapshootfile	LABEL	BYTE
	DB	041h,03Ah,05Ch,054h,072h
	DB	061h,073h,068h,05Ch,054h
	DB	045h,044h,02Eh,073h,06Eh
	DB	061h,070h,073h,068h,06Fh
	DB	06Fh,074h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h
	PUBLIC	_snapshootfile
; main.c    113	const unsigned char historyfile[64]="A:\\TED\\history";
_historyfile	LABEL	BYTE
	DB	041h,03Ah,05Ch,054h,045h
	DB	044h,05Ch,068h,069h,073h
	DB	074h,06Fh,072h,079h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h
	PUBLIC	_historyfile
; main.c    114	const unsigned char fntfilename[64]="A:\\TED\\%d.fnt";
_fntfilename	LABEL	BYTE
	DB	041h,03Ah,05Ch,054h,045h
	DB	044h,05Ch,025h,064h,02Eh
	DB	066h,06Eh,074h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h,00h
	DB	00h,00h,00h,00h
	PUBLIC	_fntfilename
; main.c    115	
; main.c    116	//Строка, на которую надо установить позицию в самом начале
; main.c    117	unsigned long far seek_to_line;
MAIN_3_FC	ENDS

MAIN_1_FB	SECTION	DATA
	EVEN
_seek_to_line	LABEL	WORD
	DS	4
	PUBLIC	_seek_to_line
; main.c    118	//Общее количество строк
; main.c    119	unsigned long far total_line;
_total_line	LABEL	WORD
	DS	4
	PUBLIC	_total_line
; main.c    120	//Номер текущей строки (курсор)
; main.c    121	unsigned long far curline;
_curline	LABEL	WORD
	DS	4
	PUBLIC	_curline
; main.c    122	//Текущий символ для редактирования (курсор)
; main.c    123	unsigned int far curpos;
_curpos	LABEL	WORD
	DS	2
	PUBLIC	_curpos
; main.c    124	//Номер верхней отображаемой строки
; main.c    125	unsigned long far viewline;
_viewline	LABEL	WORD
	DS	4
	PUBLIC	_viewline
; main.c    126	//Номер самого левого отображаемого символа
; main.c    127	unsigned int far viewpos;
_viewpos	LABEL	WORD
	DS	2
	PUBLIC	_viewpos
; main.c    128	
; main.c    129	unsigned int far max_y;
_max_y	LABEL	WORD
	DS	2
	PUBLIC	_max_y
; main.c    130	unsigned int far max_x;
_max_x	LABEL	WORD
	DS	2
	PUBLIC	_max_x
; main.c    131	
; main.c    132	//---------------------------------
; main.c    133	// Состояние конвертора
; main.c    134	//---------------------------------
; main.c    135	unsigned int far CSM;
_CSM	LABEL	WORD
	DS	2
	PUBLIC	_CSM
; main.c    136	//Символ конца строки в конверторе
; main.c    137	unsigned int far eolsymb;
_eolsymb	LABEL	WORD
	DS	2
	PUBLIC	_eolsymb
; main.c    138	
; main.c    139	//Прототипы конверторов
; main.c    140	unsigned int ConvertFormat(int fin,int fs,int fmt);
; main.c    141	unsigned int ConvertSimple(int fin,int fs);
; main.c    142	
; main.c    143	//Размер стеков
; main.c    144	#define STKSZ (16384)
; main.c    145	//Размер, при котором происходит запись во временный файл
; main.c    146	#define STKMAX (16384-3000)
; main.c    147	//Размер, при котором происходит чтение из временного файла
; main.c    148	#define STKMIN (3000)
; main.c    149	//Размер блока во временном файле
; main.c    150	#define STKSZ50 (8192)
; main.c    151	
; main.c    152	#pragma class fb=CFAR1
; main.c    153	unsigned char ustk[STKSZ]; //верхний стек строк
MAIN_1_FB	ENDS

MAIN_4_FB	SECTION	DATA WORD PUBLIC 'CFAR1'
MAIN_4_FB_ENTRY	LABEL	BYTE
_ustk	LABEL	BYTE
	DS	16384
	PUBLIC	_ustk
; main.c    154	unsigned char dstk[STKSZ]; //нижний стек строк, строки хранятся в обратном порядке
MAIN_4_FB	ENDS

MAIN_5_FB	SECTION	DATA WORD PUBLIC 'CFAR1'
MAIN_5_FB_ENTRY	LABEL	BYTE
_dstk	LABEL	BYTE
	DS	16384
	PUBLIC	_dstk
; main.c    155	unsigned char far dbat[256]; //Таблица распределения блоков нижнего стека во временном файле
MAIN_5_FB	ENDS

MAIN_6_FB	SECTION	DATA WORD PUBLIC 'CFAR1'
MAIN_6_FB_ENTRY	LABEL	BYTE
_dbat	LABEL	BYTE
	DS	256
	PUBLIC	_dbat
; main.c    156	unsigned char far ubat[256]; //Таблица распределения блоков верхнего стека во временном файлe
_ubat	LABEL	BYTE
	DS	256
	PUBLIC	_ubat
; main.c    157	unsigned char far bfree[256]; //Таблица занятости блоков (0 - свободен)
_bfree	LABEL	BYTE
	DS	256
	PUBLIC	_bfree
; main.c    158	unsigned char far font[2048]; //Буфер для шрифта
_font	LABEL	BYTE
	DS	2048
	PUBLIC	_font
; main.c    159	unsigned char far editline[256]; //Буфер для редактирования строки
_editline	LABEL	BYTE
	DS	256
	PUBLIC	_editline
; main.c    160	unsigned char far filename[128];
_filename	LABEL	BYTE
	DS	128
	PUBLIC	_filename
; main.c    161	struct 
; main.c    162	{
; main.c    163	 unsigned char name[128]; //Имя файла
; main.c    164	 unsigned char font; //Размер шрифта
; main.c    165	 unsigned char fmt; //Тип форматера
; main.c    166	 unsigned char codepage; //Кодировка
; main.c    167	 unsigned char cursor_off; //Если 1 - выключен курсор при просмотре
; main.c    168	 unsigned long line; //Номер строки для перехода
; main.c    169	 unsigned long total; //Общее количество. Если не совпадает, переход по отношению
; main.c    170	 unsigned long bookm1;
; main.c    171	 unsigned long bookm2;
; main.c    172	 unsigned long bookm3;
; main.c    173	 unsigned long bookm4;
; main.c    174	} far HISTORY;
_HISTORY	LABEL	WORD
	DS	156
	PUBLIC	_HISTORY
; main.c    175	void huge * far estr_methods[9];
_estr_methods	LABEL	WORD
	DS	36
	PUBLIC	_estr_methods
; main.c    176	
; main.c    177	unsigned char far myscr[13*80];
_myscr	LABEL	BYTE
	DS	1040
	PUBLIC	_myscr
; main.c    178	
; main.c    179	//typedef huge void p_redraw(void far *data);
; main.c    180	//p_redraw * far old_estr_redraw;
; main.c    181	
; main.c    182	#pragma default_attributes
; main.c    183	
; main.c    184	static const struct ImageHdr far MyScrHdr = {101,80,0x1,myscr};
MAIN_6_FB	ENDS

MAIN_3_FC	SECTION	DATA
_MyScrHdr	LABEL	WORD
	DB	065h,050h
	DW	01h
	DPPTR	_myscr
; main.c    185	
; main.c    186	const far char wintranslation[128]=
_wintranslation	LABEL	BYTE
	DB	05Fh,05Fh,027h,05Fh,022h
	DB	03Ah,0C5h,0D8h,05Fh,025h
	DB	05Fh,03Ch,05Fh,05Fh,05Fh
	DB	05Fh,05Fh,027h,027h,022h
	DB	022h,07h,02Dh,02Dh,05Fh
	DB	054h,05Fh,03Eh,05Fh,05Fh
	DB	05Fh,05Fh,0FFh,0F6h,0F7h
	DB	05Fh,0FDh,083h,0B3h,015h
	DB	0F0h,063h,0F2h,03Ch,0BFh
	DB	02Dh,052h,0F4h,0F8h,02Bh
	DB	049h,069h,0A3h,0E7h,014h
	DB	0FAh,0F1h,0FCh,0F3h,03Eh
	DB	05Fh,05Fh,05Fh,0F5h,080h
	DB	081h,082h,083h,084h,085h
	DB	086h,087h,088h,089h,08Ah
	DB	08Bh,08Ch,08Dh,08Eh,08Fh
	DB	090h,091h,092h,093h,094h
	DB	095h,096h,097h,098h,099h
	DB	09Ah,09Bh,09Ch,09Dh,09Eh
	DB	09Fh,0A0h,0A1h,0A2h,0A3h
	DB	0A4h,0A5h,0A6h,0A7h,0A8h
	DB	0A9h,0AAh,0ABh,0ACh,0ADh
	DB	0AEh,0AFh,0E0h,0E1h,0E2h
	DB	0E3h,0E4h,0E5h,0E6h,0E7h
	DB	0E8h,0E9h,0EAh,0EBh,0ECh
	DB	0EDh,0EEh,0EFh
	PUBLIC	_wintranslation
; main.c    187	{
; main.c    188	 0x5F,0x5F,0x27,0x5F,0x22,0x3A,0xC5,0xD8,0x5F,0x25,0x5F,0x3C,0x5F,0x5F,0x5F,0x5F,
; main.c    189	 0x5F,0x27,0x27,0x22,0x22,0x07,0x2D,0x2D,0x5F,0x54,0x5F,0x3E,0x5F,0x5F,0x5F,0x5F,
; main.c    190	 0xFF,0xF6,0xF7,0x5F,0xFD,0x83,0xB3,0x15,0xF0,0x63,0xF2,0x3C,0xBF,0x2D,0x52,0xF4,
; main.c    191	 0xF8,0x2B,'I' ,'i' ,0xA3,0xE7,0x14,0xFA,0xF1,0xFC,0xF3,0x3E,0x5F,0x5F,0x5F,0xF5,
; main.c    192	 0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,
; main.c    193	 0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,
; main.c    194	 0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,
; main.c    195	 0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF
; main.c    196	};
; main.c    197	
; main.c    198	const far char koi8translation[128]=
_koi8translation	LABEL	BYTE
	DB	05Fh,05Fh,027h,05Fh,022h
	DB	03Ah,0C5h,0D8h,05Fh,025h
	DB	05Fh,03Ch,05Fh,05Fh,05Fh
	DB	05Fh,05Fh,027h,027h,022h
	DB	022h,07h,02Dh,02Dh,05Fh
	DB	054h,05Fh,03Eh,05Fh,05Fh
	DB	05Fh,05Fh,0FFh,0F6h,0F7h
	DB	0F1h,0F3h,05Fh,069h,0F5h
	DB	0F0h,063h,0F2h,03Ch,0BFh
	DB	0A3h,052h,0F4h,0F8h,02Bh
	DB	05Fh,0F0h,0F2h,0E7h,049h
	DB	0F4h,0F1h,0FCh,0F3h,03Eh
	DB	05Fh,083h,05Fh,0F5h,0EEh
	DB	0A0h,0A1h,0E6h,0A4h,0A5h
	DB	0E4h,0A3h,0E5h,0A8h,0A9h
	DB	0AAh,0ABh,0ACh,0ADh,0AEh
	DB	0AFh,0EFh,0E0h,0E1h,0E2h
	DB	0E3h,0A6h,0A2h,0ECh,0EBh
	DB	0A7h,0E8h,0EDh,0E9h,0E7h
	DB	0EAh,09Eh,080h,081h,096h
	DB	084h,085h,094h,083h,095h
	DB	088h,089h,08Ah,08Bh,08Ch
	DB	08Dh,08Eh,08Fh,09Fh,090h
	DB	091h,092h,093h,086h,082h
	DB	09Ch,09Bh,087h,098h,09Dh
	DB	099h,097h,09Ah
	PUBLIC	_koi8translation
; main.c    199	{
; main.c    200	 0x5F,0x5F,0x27,0x5F,0x22,0x3A,0xC5,0xD8,0x5F,0x25,0x5F,0x3C,0x5F,0x5F,0x5F,0x5F,
; main.c    201	 0x5F,0x27,0x27,0x22,0x22,0x07,0x2D,0x2D,0x5F,0x54,0x5F,0x3E,0x5F,0x5F,0x5F,0x5F,
; main.c    202	 0xFF,0xF6,0xF7,0xF1,0xF3,0x5F,'i' ,0xF5,0xF0,0x63,0xF2,0x3C,0xBF,0xA3,0x52,0xF4,
; main.c    203	 0xF8,0x2B,0x5F,0xF0,0xF2,0xE7,'I' ,0xF4,0xF1,0xFC,0xF3,0x3E,0x5F,0x83,0x5F,0xF5,
; main.c    204	
; main.c    205	 0xEE,0xA0,0xA1,0xE6,0xA4,0xA5,0xE4,0xA3,0xE5,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,
; main.c    206	 0xAF,0xEF,0xE0,0xE1,0xE2,0xE3,0xA6,0xA2,0xEC,0xEB,0xA7,0xE8,0xED,0xE9,0xE7,0xEA,
; main.c    207	 0x9E,0x80,0x81,0x96,0x84,0x85,0x94,0x83,0x95,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,
; main.c    208	 0x8F,0x9F,0x90,0x91,0x92,0x93,0x86,0x82,0x9C,0x9B,0x87,0x98,0x9D,0x99,0x97,0x9A
; main.c    209	};
; main.c    210	
; main.c    211	const far unsigned int dos2unicode[128]=
_dos2unicode	LABEL	WORD
	DW	0410h,0411h,0412h,0413h,0414h
	DW	0415h,0416h,0417h,0418h,0419h
	DW	041Ah,041Bh,041Ch,041Dh,041Eh
	DW	041Fh,0420h,0421h,0422h,0423h
	DW	0424h,0425h,0426h,0427h,0428h
	DW	0429h,042Ah,042Bh,042Ch,042Dh
	DW	042Eh,042Fh,0430h,0431h,0432h
	DW	0433h,0434h,0435h,0436h,0437h
	DW	0438h,0439h,043Ah,043Bh,043Ch
	DW	043Dh,043Eh,043Fh,02Dh,02Dh
	DW	02Dh,0A6h,02Bh,0A6h,0A6h
	DW	0ACh,0ACh,0A6h,0A6h,0ACh
	DW	02Dh,02Dh,02Dh,0ACh,04Ch
	DW	02Bh,054h,02Bh,02Dh,02Bh
	DW	0A6h,0A6h,04Ch,0433h,0A6h
	DW	054h,0A6h,03Dh,02Bh,0A6h
	DW	0A6h,054h,054h,04Ch,04Ch
	DW	02Dh,0433h,02Bh,02Bh,02Dh
	DW	02Dh,02Dh,02Dh,0A6h,0A6h
	DW	02Dh,0440h,0441h,0442h,0443h
	DW	0444h,0445h,0446h,0447h,0448h
	DW	0449h,044Ah,044Bh,044Ch,044Dh
	DW	044Eh,044Fh,0401h,0451h,0404h
	DW	0454h,0407h,0457h,040Eh,045Eh
	DW	0B0h,02022h,0B7h,076h,02116h
	DW	0A4h,0A6h,0A0h
	PUBLIC	_dos2unicode
; main.c    212	{
; main.c    213	 0x0410,0x0411,0x0412,0x0413,0x0414,0x0415,0x0416,0x0417,
; main.c    214	 0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,0x041F,
; main.c    215	 0x0420,0x0421,0x0422,0x0423,0x0424,0x0425,0x0426,0x0427,
; main.c    216	 0x0428,0x0429,0x042A,0x042B,0x042C,0x042D,0x042E,0x042F,
; main.c    217	 0x0430,0x0431,0x0432,0x0433,0x0434,0x0435,0x0436,0x0437,
; main.c    218	 0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,0x043F,
; main.c    219	 0x002D,0x002D,0x002D,0x00A6,0x002B,0x00A6,0x00A6,0x00AC,
; main.c    220	 0x00AC,0x00A6,0x00A6,0x00AC,0x002D,0x002D,0x002D,0x00AC,
; main.c    221	 0x004C,0x002B,0x0054,0x002B,0x002D,0x002B,0x00A6,0x00A6,
; main.c    222	 0x004C,0x0433,0x00A6,0x0054,0x00A6,0x003D,0x002B,0x00A6,
; main.c    223	 0x00A6,0x0054,0x0054,0x004C,0x004C,0x002D,0x0433,0x002B,
; main.c    224	 0x002B,0x002D,0x002D,0x002D,0x002D,0x00A6,0x00A6,0x002D,
; main.c    225	 0x0440,0x0441,0x0442,0x0443,0x0444,0x0445,0x0446,0x0447,
; main.c    226	 0x0448,0x0449,0x044A,0x044B,0x044C,0x044D,0x044E,0x044F,
; main.c    227	 0x0401,0x0451,0x0404,0x0454,0x0407,0x0457,0x040E,0x045E,
; main.c    228	 0x00B0,0x2022,0x00B7,0x0076,0x2116,0x00A4,0x00A6,0x00A0
; main.c    229	};
; main.c    230	
; main.c    231	unsigned int char8to16(char c)
; main.c    232	{
	PUBLIC	_char8to16
MAIN_3_FC	ENDS

MAIN_2_PR	SECTION	CODE
_char8to16	PROC	FAR
	MOV	R1,R12
; Locals:
; 
; Statics:
; 
; CSEs:
;     c = RL1
; 
; main.c    233	 if (c<32) return('_');
	CMPB	RL1,#020h
	JMPR	cc_UGE,_5
	MOV	R4,#05Fh
	RETS
_5:
; main.c    234	 if (c>=128)
	MOVBZ	R12,RL1
	CMP	R12,#080h
	JMPR	cc_SLT,_10
; main.c    235	 {
; main.c    236	  switch(win_dos_koi)
	MOV	DPP0,#PAG _win_dos_koi
	NOP
	MOVB	RL2,POF _win_dos_koi
	CMPB	RL2,#01h
	JMPR	cc_EQ,_6
	CMPB	RL2,#02h
	JMPR	cc_EQ,_7
	JMPR	cc_UC,_9
; main.c    237	  {
; main.c    238	   case 1:
_6:
; main.c    239	    //Win->Dos
; main.c    240	    c=wintranslation[c-128];
	MOVBZ	R12,RL1
	EXTP	#PAG _wintranslation,#01h
	MOVB	RL1,[R12+#POF _wintranslation-128]
; main.c    241	    break;
	JMPR	cc_UC,_9
; main.c    242	   case 2:
_7:
; main.c    243	    //Koi8->Dos
; main.c    244	    c=koi8translation[c-128];
	MOVBZ	R12,RL1
	EXTP	#PAG _koi8translation,#01h
	MOVB	RL1,[R12+#POF _koi8translation-128]
; main.c    245	    break;
; main.c    246	  }
_9:
; main.c    247	  return(dos2unicode[c-128]);
	MOVBZ	R12,RL1
	SHL	R12,#01h
	EXTP	#PAG _dos2unicode,#01h
	MOV	R4,[R12+#POF _dos2unicode-256]
	RETS
; main.c    248	 }
_10:
; main.c    249	 return(c);
	MOVBZ	R4,RL1
; main.c    250	}
_12:
	RETS
_char8to16	ENDP
; main.c    251	
; main.c    252	// RECODING TABLE
; main.c    253	//utf16,cp866,cp1251,koi8
; main.c    254	//const far unsigned int unicode2char[]=
; main.c    255	typedef struct
; main.c    256	{
; main.c    257	 unsigned int u;
; main.c    258	 unsigned char dos;
; main.c    259	 unsigned char win;
; main.c    260	 unsigned char koi8;
; main.c    261	} TUNICODE2CHAR;
; main.c    262	
; main.c    263	const far TUNICODE2CHAR unicode2char[]=
MAIN_2_PR	ENDS

MAIN_3_FC	SECTION	DATA
_unicode2char	LABEL	WORD
	DW	0410h
	DB	080h,0C0h,0E1h,00h
	DW	0411h
	DB	081h,0C1h,0E2h,00h
	DW	0412h
	DB	082h,0C2h,0F7h,00h
	DW	0413h
	DB	083h,0C3h,0E7h,00h
	DW	0414h
	DB	084h,0C4h,0E4h,00h
	DW	0415h
	DB	085h,0C5h,0E5h,00h
	DW	0416h
	DB	086h,0C6h,0F6h,00h
	DW	0417h
	DB	087h,0C7h,0FAh,00h
	DW	0418h
	DB	088h,0C8h,0E9h,00h
	DW	0419h
	DB	089h,0C9h,0EAh,00h
	DW	041Ah
	DB	08Ah,0CAh,0EBh,00h
	DW	041Bh
	DB	08Bh,0CBh,0ECh,00h
	DW	041Ch
	DB	08Ch,0CCh,0EDh,00h
	DW	041Dh
	DB	08Dh,0CDh,0EEh,00h
	DW	041Eh
	DB	08Eh,0CEh,0EFh,00h
	DW	041Fh
	DB	08Fh,0CFh,0F0h,00h
	DW	0420h
	DB	090h,0D0h,0F2h,00h
	DW	0421h
	DB	091h,0D1h,0F3h,00h
	DW	0422h
	DB	092h,0D2h,0F4h,00h
	DW	0423h
	DB	093h,0D3h,0F5h,00h
	DW	0424h
	DB	094h,0D4h,0E6h,00h
	DW	0425h
	DB	095h,0D5h,0E8h,00h
	DW	0426h
	DB	096h,0D6h,0E3h,00h
	DW	0427h
	DB	097h,0D7h,0FEh,00h
	DW	0428h
	DB	098h,0D8h,0FBh,00h
	DW	0429h
	DB	099h,0D9h,0FDh,00h
	DW	042Ah
	DB	09Ah,0DAh,0FFh,00h
	DW	042Bh
	DB	09Bh,0DBh,0F9h,00h
	DW	042Ch
	DB	09Ch,0DCh,0F8h,00h
	DW	042Dh
	DB	09Dh,0DDh,0FCh,00h
	DW	042Eh
	DB	09Eh,0DEh,0E0h,00h
	DW	042Fh
	DB	09Fh,0DFh,0F1h,00h
	DW	0402h
	DB	05Fh,080h,05Fh,00h
	DW	0403h
	DB	05Fh,081h,05Fh,00h
	DW	0409h
	DB	05Fh,08Ah,05Fh,00h
	DW	040Ah
	DB	05Fh,08Ch,05Fh,00h
	DW	040Ch
	DB	05Fh,08Dh,05Fh,00h
	DW	040Bh
	DB	05Fh,08Eh,05Fh,00h
	DW	040Fh
	DB	05Fh,08Fh,05Fh,00h
	DW	040Eh
	DB	0F6h,0A1h,05Fh,00h
	DW	0408h
	DB	04Ah,0A3h,04Ah,00h
	DW	0409h
	DB	083h,0A5h,0BDh,00h
	DW	0401h
	DB	0F0h,0A8h,0B3h,00h
	DW	0404h
	DB	0F2h,0AAh,0B4h,00h
	DW	0407h
	DB	0F4h,0AFh,0B7h,00h
	DW	0406h
	DB	049h,0B2h,0B6h,00h
	DW	0405h
	DB	053h,0BDh,053h,00h
	DW	0430h
	DB	0A0h,0E0h,0C1h,00h
	DW	0431h
	DB	0A1h,0E1h,0C2h,00h
	DW	0432h
	DB	0A2h,0E2h,0D7h,00h
	DW	0433h
	DB	0A3h,0E3h,0C7h,00h
	DW	0434h
	DB	0A4h,0E4h,0C4h,00h
	DW	0435h
	DB	0A5h,0E5h,0C5h,00h
	DW	0436h
	DB	0A6h,0E6h,0D6h,00h
	DW	0437h
	DB	0A7h,0E7h,0DAh,00h
	DW	0438h
	DB	0A8h,0E8h,0C9h,00h
	DW	0439h
	DB	0A9h,0E9h,0CAh,00h
	DW	043Ah
	DB	0AAh,0EAh,0CBh,00h
	DW	043Bh
	DB	0ABh,0EBh,0CCh,00h
	DW	043Ch
	DB	0ACh,0ECh,0CDh,00h
	DW	043Dh
	DB	0ADh,0EDh,0CEh,00h
	DW	043Eh
	DB	0AEh,0EEh,0CFh,00h
	DW	043Fh
	DB	0AFh,0EFh,0D0h,00h
	DW	0440h
	DB	0E0h,0F0h,0D2h,00h
	DW	0441h
	DB	0E1h,0F1h,0D3h,00h
	DW	0442h
	DB	0E2h,0F2h,0D4h,00h
	DW	0443h
	DB	0E3h,0F3h,0D5h,00h
	DW	0444h
	DB	0E4h,0F4h,0C6h,00h
	DW	0445h
	DB	0E5h,0F5h,0C8h,00h
	DW	0446h
	DB	0E6h,0F6h,0C3h,00h
	DW	0447h
	DB	0E7h,0F7h,0DEh,00h
	DW	0448h
	DB	0E8h,0F8h,0DBh,00h
	DW	0449h
	DB	0E9h,0F9h,0DDh,00h
	DW	044Ah
	DB	0EAh,0FAh,0DFh,00h
	DW	044Bh
	DB	0EBh,0FBh,0D9h,00h
	DW	044Ch
	DB	0ECh,0FCh,0D8h,00h
	DW	044Dh
	DB	0EDh,0FDh,0DCh,00h
	DW	044Eh
	DB	0EEh,0FEh,0C0h,00h
	DW	044Fh
	DB	0EFh,0FFh,0D1h,00h
	DW	0452h
	DB	05Fh,090h,05Fh,00h
	DW	0453h
	DB	05Fh,083h,05Fh,00h
	DW	0459h
	DB	05Fh,09Ah,05Fh,00h
	DW	045Ah
	DB	05Fh,09Ch,05Fh,00h
	DW	045Ch
	DB	05Fh,09Dh,05Fh,00h
	DW	045Bh
	DB	05Fh,09Eh,05Fh,00h
	DW	045Fh
	DB	05Fh,09Fh,05Fh,00h
	DW	045Eh
	DB	0F7h,0A2h,05Fh,00h
	DW	0458h
	DB	06Ah,0BCh,06Ah,00h
	DW	0491h
	DB	0A3h,0B4h,0ADh,00h
	DW	0451h
	DB	0F1h,0B8h,0A3h,00h
	DW	0454h
	DB	0F3h,0BAh,0A4h,00h
	DW	0457h
	DB	0F5h,0BFh,0A7h,00h
	DW	0456h
	DB	069h,0B3h,0A6h,00h
	DW	0455h
	DB	073h,0BEh,073h,00h
	DW	0A0h
	DB	05Fh,0A0h,020h,00h
	DW	0A4h
	DB	05Fh,0A4h,0FDh,00h
	DW	0A6h
	DB	05Fh,0A6h,05Fh,00h
	DW	0B0h
	DB	0F8h,0B0h,09Ch,00h
	DW	0B7h
	DB	0FAh,0B7h,09Eh,00h
	DW	00h
	DB	00h,00h,00h,00h
	PUBLIC	_unicode2char
; main.c    264	{
; main.c    265	// CAPITAL Cyrillic letters (base)
; main.c    266	0x410,0x80,0xC0,0xE1, // А
; main.c    267	0x411,0x81,0xC1,0xE2, // Б
; main.c    268	0x412,0x82,0xC2,0xF7, // В
; main.c    269	0x413,0x83,0xC3,0xE7, // Г
; main.c    270	0x414,0x84,0xC4,0xE4, // Д
; main.c    271	0x415,0x85,0xC5,0xE5, // Е
; main.c    272	0x416,0x86,0xC6,0xF6, // Ж
; main.c    273	0x417,0x87,0xC7,0xFA, // З
; main.c    274	0x418,0x88,0xC8,0xE9, // И
; main.c    275	0x419,0x89,0xC9,0xEA, // Й
; main.c    276	0x41A,0x8A,0xCA,0xEB, // К
; main.c    277	0x41B,0x8B,0xCB,0xEC, // Л
; main.c    278	0x41C,0x8C,0xCC,0xED, // М
; main.c    279	0x41D,0x8D,0xCD,0xEE, // Н
; main.c    280	0x41E,0x8E,0xCE,0xEF, // О
; main.c    281	0x41F,0x8F,0xCF,0xF0, // П
; main.c    282	0x420,0x90,0xD0,0xF2, // Р
; main.c    283	0x421,0x91,0xD1,0xF3, // С
; main.c    284	0x422,0x92,0xD2,0xF4, // Т
; main.c    285	0x423,0x93,0xD3,0xF5, // У
; main.c    286	0x424,0x94,0xD4,0xE6, // Ф
; main.c    287	0x425,0x95,0xD5,0xE8, // Х
; main.c    288	0x426,0x96,0xD6,0xE3, // Ц
; main.c    289	0x427,0x97,0xD7,0xFE, // Ч
; main.c    290	0x428,0x98,0xD8,0xFB, // Ш
; main.c    291	0x429,0x99,0xD9,0xFD, // Щ
; main.c    292	0x42A,0x9A,0xDA,0xFF, // Ъ
; main.c    293	0x42B,0x9B,0xDB,0xF9, // Ы
; main.c    294	0x42C,0x9C,0xDC,0xF8, // Ь
; main.c    295	0x42D,0x9D,0xDD,0xFC, // Э
; main.c    296	0x42E,0x9E,0xDE,0xE0, // Ю
; main.c    297	0x42F,0x9F,0xDF,0xF1, // Я
; main.c    298	// CAPITAL Cyrillic letters (additional)
; main.c    299	0x402,'_',0x80,'_', // _ .*.*
; main.c    300	0x403,'_',0x81,'_', // _ .*.*
; main.c    301	0x409,'_',0x8A,'_', // _ .*.*
; main.c    302	0x40A,'_',0x8C,'_', // _ .*.*
; main.c    303	0x40C,'_',0x8D,'_', // _ .*.*
; main.c    304	0x40B,'_',0x8E,'_', // _ .*.*
; main.c    305	0x40F,'_',0x8F,'_', // _ .*.*
; main.c    306	0x40E,0xF6,0xA1,'_', // Ў ...*
; main.c    307	0x408,0x4A,0xA3,0x4A, // _ .*.*
; main.c    308	0x409,0x83,0xA5,0xBD, // _ .*..
; main.c    309	0x401,0xF0,0xA8,0xB3, // Ё
; main.c    310	0x404,0xF2,0xAA,0xB4, // Є
; main.c    311	0x407,0xF4,0xAF,0xB7, // Ї
; main.c    312	0x406,0x49,0xB2,0xB6, // _ .*..
; main.c    313	0x405,0x53,0xBD,0x53, // _ .*.*
; main.c    314	// SMALL Cyrillic letters (base)
; main.c    315	0x430,0xA0,0xE0,0xC1, // а
; main.c    316	0x431,0xA1,0xE1,0xC2, // б
; main.c    317	0x432,0xA2,0xE2,0xD7, // в
; main.c    318	0x433,0xA3,0xE3,0xC7, // г
; main.c    319	0x434,0xA4,0xE4,0xC4, // д
; main.c    320	0x435,0xA5,0xE5,0xC5, // е
; main.c    321	0x436,0xA6,0xE6,0xD6, // ж
; main.c    322	0x437,0xA7,0xE7,0xDA, // з
; main.c    323	0x438,0xA8,0xE8,0xC9, // и
; main.c    324	0x439,0xA9,0xE9,0xCA, // й
; main.c    325	0x43A,0xAA,0xEA,0xCB, // к
; main.c    326	0x43B,0xAB,0xEB,0xCC, // л
; main.c    327	0x43C,0xAC,0xEC,0xCD, // м
; main.c    328	0x43D,0xAD,0xED,0xCE, // н
; main.c    329	0x43E,0xAE,0xEE,0xCF, // о
; main.c    330	0x43F,0xAF,0xEF,0xD0, // п
; main.c    331	0x440,0xE0,0xF0,0xD2, // р
; main.c    332	0x441,0xE1,0xF1,0xD3, // с
; main.c    333	0x442,0xE2,0xF2,0xD4, // т
; main.c    334	0x443,0xE3,0xF3,0xD5, // у
; main.c    335	0x444,0xE4,0xF4,0xC6, // ф
; main.c    336	0x445,0xE5,0xF5,0xC8, // х
; main.c    337	0x446,0xE6,0xF6,0xC3, // ц
; main.c    338	0x447,0xE7,0xF7,0xDE, // ч
; main.c    339	0x448,0xE8,0xF8,0xDB, // ш
; main.c    340	0x449,0xE9,0xF9,0xDD, // щ
; main.c    341	0x44A,0xEA,0xFA,0xDF, // ъ
; main.c    342	0x44B,0xEB,0xFB,0xD9, // ы
; main.c    343	0x44C,0xEC,0xFC,0xD8, // ь
; main.c    344	0x44D,0xED,0xFD,0xDC, // э
; main.c    345	0x44E,0xEE,0xFE,0xC0, // ю
; main.c    346	0x44F,0xEF,0xFF,0xD1, // я
; main.c    347	// SMALL Cyrillic letters (additional)
; main.c    348	0x452,'_',0x90,'_', // _ .*.*
; main.c    349	0x453,'_',0x83,'_', // _ .*.*
; main.c    350	0x459,'_',0x9A,'_', // _ .*.*
; main.c    351	0x45A,'_',0x9C,'_', // _ .*.*
; main.c    352	0x45C,'_',0x9D,'_', // _ .*.*
; main.c    353	0x45B,'_',0x9E,'_', // _ .*.*
; main.c    354	0x45F,'_',0x9F,'_', // _ .*.*
; main.c    355	0x45E,0xF7,0xA2,'_', // ў ...*
; main.c    356	0x458,0x6A,0xBC,0x6A, // _ .*.*
; main.c    357	0x491,0xA3,0xB4,0xAD, // _ .*..
; main.c    358	0x451,0xF1,0xB8,0xA3, // ё
; main.c    359	0x454,0xF3,0xBA,0xA4, // є
; main.c    360	0x457,0xF5,0xBF,0xA7, // ї
; main.c    361	0x456,0x69,0xB3,0xA6, // _ .*..
; main.c    362	0x455,0x73,0xBE,0x73, // _ .*.*
; main.c    363	0x0A0,'_',0xA0,0x20, // space .*..
; main.c    364	0x0A4,'_',0xA4,0xFD, // ¤   .*..
; main.c    365	0x0A6,'_',0xA6,'_', // ¦   .*.*
; main.c    366	0x0B0,0xF8,0xB0,0x9C, // °
; main.c    367	0x0B7,0xFA,0xB7,0x9E, // ·
; main.c    368	// 0x2022,,0x95,0x95, //    .*..
; main.c    369	// 0x2116,0xFC,0xB9,0x23, // №   ...*
; main.c    370	// 0x2219,,0xF9,0x9E, //    .*..
; main.c    371	// 0x221A,0xFB,,0x96, // v   ..*.
; main.c    372	// 0x25A0,0xFE,,0x94, // ¦
; main.c    373	0x0000,0,0,0
; main.c    374	};
; main.c    375	
; main.c    376	unsigned char char16to8(unsigned int c)
; main.c    377	{
	PUBLIC	_char16to8
MAIN_3_FC	ENDS

MAIN_2_PR	SECTION	CODE
_char16to8	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
;     c = R12
;     p = R13R14
;     i = R15
; 
; main.c    378	 const TUNICODE2CHAR far *p=unicode2char;
	MOV	R13,#POF _unicode2char
	MOV	R14,#PAG _unicode2char
; main.c    379	 unsigned int i;
; main.c    380	 if (c<32) return(' ');
	CMP	R12,#020h
	JMPR	cc_ULT,_48
; main.c    381	 if (c<128) return(c);
	CMP	R12,#080h
	JMPR	cc_ULT,_50
; main.c    382	 while((i=p->u))
_41:
	JMPR	cc_UC,_47
_42:
; main.c    383	 {
; main.c    384	  if (c==i)
	CMP	R12,R15
	JMPR	cc_NE,_46
; main.c    385	  {
; main.c    386	   switch(win_dos_koi)
	MOV	DPP0,#PAG _win_dos_koi
	NOP
	MOVB	RL1,POF _win_dos_koi
	CMPB	RL1,#01h
	JMPR	cc_EQ,_43
	CMPB	RL1,#02h
	JMPR	cc_EQ,_44
	JMPR	cc_UC,_45
; main.c    387	   {
; main.c    388	   case 1:
_43:
; main.c    389	    //Win
; main.c    390	    return(p->win);
	EXTP	R14,#01h
	MOVB	RL4,[R13+#03H]
	RETS
; main.c    391	   case 2:
_44:
; main.c    392	    //Koi8
; main.c    393		return(p->koi8);
	EXTP	R14,#01h
	MOVB	RL4,[R13+#04H]
	RETS
; main.c    394	   }
_45:
; main.c    395	   return(p->dos);
	EXTP	R14,#01h
	MOVB	RL4,[R13+#02H]
	RETS
; main.c    396	  }
_46:
; main.c    397	  p++;
	ADD	R13,#06h
_47:
	EXTP	R14,#01h
	MOV	R15,[R13]
	JMPR	cc_NZ,_42
; main.c    398	 }
; main.c    399	 c&=0xFF;
	AND	R12,#0FFh
; main.c    400	 if (c<32) return(' ');
	CMP	R12,#020h
	JMPR	cc_UGE,_50
_48:
	MOVB	RL4,#020h
	RETS
_50:
; main.c    401	 return(c);
	MOV	R4,R12
; main.c    402	}
_54:
	RETS
_char16to8	ENDP
; main.c    403	
; main.c    404	//static const struct ImageHdr far imgScreen = {96,80,0x1,&screen};
; main.c    405	//--------------------------------------------------------------------------
; main.c    406	//Печать символа
; main.c    407	void DrawChar(char c,int x,int y)
; main.c    408	{
	PUBLIC	_DrawChar
_DrawChar	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	[-R0],R6
	MOV	R1,R12
	MOV	R9,R13
	MOV	R6,R14
; Locals:
; 
; Statics:
; 
; CSEs:
;     d = R12
;     i = R13
;     s = R8
;     c = RL1
;     x = R9
;     ms = RL1
;     md = RL2
;     y = R6
; 
; main.c    409	 unsigned int d; //Куда рисуем
; main.c    410	 unsigned int s; //Откуда рисуем
; main.c    411	 int i;
; main.c    412	 char ms;
; main.c    413	 char md;
; main.c    414	 if (c>=128)
	MOVBZ	R12,RL1
	CMP	R12,#080h
	JMPR	cc_SLT,_59
; main.c    415	 switch(win_dos_koi)
	MOV	DPP0,#PAG _win_dos_koi
	NOP
	MOVB	RL2,POF _win_dos_koi
	CMPB	RL2,#01h
	JMPR	cc_EQ,_55
	CMPB	RL2,#02h
	JMPR	cc_EQ,_56
	JMPR	cc_UC,_59
; main.c    416	 {
; main.c    417	  case 1:
_55:
; main.c    418	   //Win->Dos
; main.c    419	   c=wintranslation[c-128];
	MOVBZ	R12,RL1
	EXTP	#PAG _wintranslation,#01h
	MOVB	RL1,[R12+#POF _wintranslation-128]
; main.c    420	   break;
	JMPR	cc_UC,_59
; main.c    421	  case 2:
_56:
; main.c    422	   //Koi8->Dos
; main.c    423	   c=koi8translation[c-128];
	MOVBZ	R12,RL1
	EXTP	#PAG _koi8translation,#01h
	MOVB	RL1,[R12+#POF _koi8translation-128]
; main.c    424	   break;
; main.c    425	 }
_59:
; main.c    426	 #pragma asm
	PUSH	DPP2
; @w1 = R8
; @w2 = R12
; @b3 = RL6
; @b4 = RL1
; @w5 = R13
; main.c    428	 #pragma endasm
; main.c    429	 switch(font_size)
	MOV	DPP0,#PAG _font_size
	NOP
	MOVB	RL2,POF _font_size
	CMPB	RL2,#04h
	JMPA	cc_EQ,_66
	CMPB	RL2,#06h
	JMPR	cc_EQ,_60
	CMPB	RL2,#08h
	JMPA	cc_EQ,_65
	JMPA	cc_UC,_74
; main.c    430	 {
; main.c    431	  case 4:
; main.c    432	   //Обрабатываем фонт размером 4
; main.c    433	   s=_pof(font)+(c<<3);
; main.c    434	   d=y*(8*13)+(x>>1)+0x8000; //0E:160C - Основной экран
; main.c    435	   i=8;
; main.c    436	   ms=0xF0;
; main.c    437	   md=0x0F;
; main.c    438	   if (x&1) {ms=0x0F;md=0xF0;}
; main.c    439	   //Печать в тетраде
; main.c    440	   #pragma asm(@w1=s, @w2=d, @b3, @b4, @w5=i, @b6=ms, @b7=md )
; main.c    441	    ADD		@w2,#POF _myscr
; main.c    442		MOV		DPP2,#PAG _myscr ;//0E:160C - Основной экран
; main.c    443		MOV		DPP0,#PAG _font
; main.c    444		_x_x_loop1:	    
; main.c    445		MOVB	@b3,[@w2]
; main.c    446		ANDB	@b3,@b7
; main.c    447		MOVB	@b4,[@w1]
; main.c    448		ANDB	@b4,@b6
; main.c    449		ORB		@b3,@b4
; main.c    450		MOVB	[@w2],@b3
; main.c    451		ADD		@w2,#0Dh
; main.c    452		ADD		@w1,#01h
; main.c    453		SUB		@w5,#01h
; main.c    454		JMPR	cc_NZ,_x_x_loop1
; main.c    455	   #pragma endasm()
; main.c    456	   break;
; main.c    457	  case 6:
_60:
; main.c    458	   //Обрабатываем фонт размером 6
; main.c    459	   s=_pof(font)+(c<<3);
	MOV	R12,#POF _font
	MOV	R13,#PAG _font
	MOV	R8,R12
	MOVBZ	R12,RL1
	SHL	R12,#03h
	ADD	R8,R12
; main.c    460	   d=y*(8*13)+((x>>2)*3)+0x8000; //0E:160C - Основной экран
	MOV	R13,#068h
	MUL	R6,R13
	MOV	R12,MDL
	MOV	R14,R9
	ASHR	R14,#02h
	MOV	R15,R14
	SHL	R15,#02h
	SUB	R15,R14
	ADD	R12,R15
	ADD	R12,#08000h
; main.c    461	   i=8;
	MOV	R13,#08h
; main.c    462	   switch(x&3)
	AND	R9,#03h
	JMPR	cc_EQ,_61
	CMP	R9,#01h
	JMPA	cc_EQ,_62
	CMP	R9,#02h
	JMPA	cc_EQ,_63
	CMP	R9,#03h
	JMPA	cc_EQ,_64
	JMPA	cc_UC,_74
; main.c    463	   {
; main.c    464		case 0:
_61:
; main.c    465	     #pragma asm(@w1=s, @w2=d, @b3, @b4, @w5=i)
    ADD		R12,#POF _myscr
	 	MOV		DPP2,#PAG _myscr ;//0E:160C - Основной экран
		MOV		DPP0,#PAG _font
		_x_x_loop2:	    
		MOVB	RL6,[R12]
		ANDB	RL6,#003h
		MOVB	RL1,[R8]
		ORB		RL6,RL1
		MOVB	[R12],RL6
		ADD		R12,#0Dh
		ADD		R8,#01h
		SUB		R13,#01h
		JMPR	cc_NZ,_x_x_loop2
; @w1 = R8
; @w2 = R12
; @b3 = RL6
; @w5 = R13
; main.c    479	     #pragma endasm()
; main.c    480		 break;
	JMPA	cc_UC,_74
; main.c    481		case 1:
_62:
; main.c    482	     #pragma asm(@w1=s, @w2=d, @b3, @w5=i)
    ADD		R12,#POF _myscr
	 	MOV		DPP2,#PAG _myscr ;//0E:160C - Основной экран
		MOV		DPP0,#PAG _font
		_x_x_loop3:	    
		MOVB	RL6,[R12]
		ANDB	RL6,#0FCh
		MOVB	RL1,[R8]
		MOVB	RH1,#0
		SHR		R1,#6
		ORB		RL6,RL1
		MOVB	[R12],RL6
		ADD		R12,#1
		MOVB	RL6,[R12]
		ANDB	RL6,#00Fh
		MOVB	RL1,[R8]
		SHL		R1,#2
		ORB		RL6,RL1
		MOVB	[R12],RL6
		ADD		R12,#0Ch
		ADD		R8,#01h
		SUB		R13,#01h
		JMPR	cc_NZ,_x_x_loop3
; @w1 = R8
; @w2 = R12
; @b3 = RL6
; @w5 = R13
; main.c    505	     #pragma endasm()
; main.c    506		 break;
	JMPA	cc_UC,_74
; main.c    507		case 2:
_63:
; main.c    508		 d++;
	ADD	R12,#01h
; main.c    509	     #pragma asm(@w1=s, @w2=d, @b3, @w5=i)
    ADD		R12,#POF _myscr
	 	MOV		DPP2,#PAG _myscr;//0E:160C - Основной экран
		MOV		DPP0,#PAG _font
		_x_x_loop4:	    
		MOVB	RL6,[R12]
		ANDB	RL6,#0F0h
		MOVB	RL1,[R8]
		MOVB	RH1,#0
		SHR		R1,#4
		ORB		RL6,RL1
		MOVB	[R12],RL6
		ADD		R12,#1
		MOVB	RL6,[R12]
		ANDB	RL6,#03Fh
		MOVB	RL1,[R8]
		SHL		R1,#4
		ORB		RL6,RL1
		MOVB	[R12],RL6
		ADD		R12,#0Ch
		ADD		R8,#01h
		SUB		R13,#01h
		JMPR	cc_NZ,_x_x_loop4
; @w1 = R8
; @w2 = R12
; @b3 = RL6
; @w5 = R13
; main.c    532	     #pragma endasm()
; main.c    533		 break;
	JMPA	cc_UC,_74
; main.c    534		case 3:
_64:
; main.c    535		 d+=2;
	ADD	R12,#02h
; main.c    536	     #pragma asm(@w1=s, @w2=d, @b3,@w5=i)
    ADD		R12,#POF _myscr
	 	MOV		DPP2,#PAG _myscr ;//0E:160C - Основной экран
		MOV		DPP0,#PAG _font
		_x_x_loop5:	    
		MOVB	RL6,[R12]
		ANDB	RL6,#0C0h
		MOVB	RL1,[R8]
		MOVB	RH1,#0
		SHR		R1,#2
		ORB		RL6,RL1
		MOVB	[R12],RL6
		ADD		R12,#0Dh
		ADD		R8,#01h
		SUB		R13,#01h
		JMPR	cc_NZ,_x_x_loop5
; @w1 = R8
; @w2 = R12
; @b3 = RL6
; @w5 = R13
; main.c    552	     #pragma endasm()
; main.c    553		 break;
; main.c    554	   }
; main.c    555	   break;
	JMPA	cc_UC,_74
; main.c    556	  case 8:
_65:
; main.c    557	   //Обрабатываем фонт размером 8
; main.c    558	   s=_pof(font)+(c<<3);
	MOV	R12,#POF _font
	MOV	R13,#PAG _font
	MOV	R8,R12
	MOVBZ	R12,RL1
	SHL	R12,#03h
	ADD	R8,R12
; main.c    559	   d=y*(8*13)+x+0x8000; //0E:160C - Основной экран
	MOV	R13,#068h
	MUL	R6,R13
	MOV	R12,MDL
	ADD	R12,R9
	ADD	R12,#08000h
; main.c    560	   i=8;
	MOV	R13,#08h
; main.c    561	   #pragma asm(@w1=s, @w2=d, @b3, @w5=i )
    ADD		R12,#POF _myscr
	MOV		DPP0,#PAG _font
	MOV		DPP2,#PAG _myscr ;//0E:160C - Основной экран
	NOP
	_x_x_loop6:	   
	MOVB	RL6,[R8]
	MOVB	[R12],RL6
	ADD		R12,#0Dh
	ADD		R8,#01h
	SUB		R13,#01h
	JMPR	cc_NZ,_x_x_loop6
; @w1 = R8
; @w2 = R12
; @b3 = RL6
; @b4 = RL3
; @w5 = R13
; @b6 = RL1
; @b7 = RL2
; main.c    573	   #pragma endasm()
; main.c    574	   break;
	JMPA	cc_UC,_74
_66:
	MOV	R12,#POF _font
	MOV	R13,#PAG _font
	MOV	R8,R12
	MOVBZ	R12,RL1
	SHL	R12,#03h
	ADD	R8,R12
	MOV	R13,#068h
	MUL	R6,R13
	MOV	R12,MDL
	MOV	R14,R9
	ASHR	R14,#01h
	ADD	R12,R14
	ADD	R12,#08000h
	MOV	R13,#08h
	MOVB	RL1,#0F0h
	MOVB	RL2,#0Fh
	JNB	R9.0,_67
	MOVB	RL1,RL2
	MOVB	RL2,#0F0h
_67:
    ADD		R12,#POF _myscr
	MOV		DPP2,#PAG _myscr ;//0E:160C - Основной экран
	MOV		DPP0,#PAG _font
	_x_x_loop1:	    
	MOVB	RL6,[R12]
	ANDB	RL6,RL2
	MOVB	RL3,[R8]
	ANDB	RL3,RL1
	ORB		RL6,RL3
	MOVB	[R12],RL6
	ADD		R12,#0Dh
	ADD		R8,#01h
	SUB		R13,#01h
	JMPR	cc_NZ,_x_x_loop1
; main.c    577	 }
_74:
; main.c    578	 #pragma asm
	POP		DPP2
; main.c    580	 #pragma endasm
; main.c    581	}
	MOV	R6,[R0+]
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_DrawChar	ENDP
; main.c    582	
; main.c    583	//Печать строки из буфера текста
; main.c    584	void drawStkStr(unsigned char *p, unsigned int y, unsigned int vp, int ep)
; main.c    585	{
	PUBLIC	_drawStkStr
_drawStkStr	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	[-R0],R7
	MOV	[-R0],R6
	SUB	R0,#02h
	MOV	R6,R13
	MOV	R9,R12
	MOV	R7,R15
	MOV	R8,[R0+#0AH]
; Locals:
; 
; Statics:
; 
; CSEs:
;     i = offset 0
;     ep = R8
;     c = RL1
;     p = R9R6
;     vp = R7
;     y = R14
; 
; main.c    586	 unsigned int i=0;
	MOV	R12,#00h
	MOV	[R0],R12
; main.c    587	 unsigned char c;
; main.c    588	 do
_75:
; main.c    589	 {
; main.c    590	  c=*p;
	EXTP	R6,#01h
	MOVB	RL1,[R9]
; main.c    591	  if (c)
	JMPR	cc_Z,_78
; main.c    592	  {
; main.c    593	   if (ep>=0) editline[ep++]=c;
	CMP	R8,#00h
	JMPR	cc_SLT,_76
	MOV	R12,R8
	ADD	R8,#01h
	EXTP	#PAG _editline,#01h
	MOVB	[R12+#POF _editline],RL1
_76:
; main.c    594	   p++;
	ADD	R9,#01h
; main.c    595	   if (vp!=0) vp--; else DrawChar(c,i++,y);
	CMP	R7,#00h
	JMPR	cc_Z,_77
	SUB	R7,#01h
	JMPR	cc_UC,_80
_77:
	MOV	[-R0],R1
	MOV	[-R0],R14
	MOVBZ	R12,RL1
	MOV	R13,[R0+#04H]
	MOV	R15,[R0+#04H]
	ADD	R15,#01h
	MOV	[R0+#04H],R15
	CALLS	SEG _DrawChar,_DrawChar
	MOV	R14,[R0+]
	ADD	R0,#02h
; main.c    596	  }
	JMPR	cc_UC,_80
_78:
; main.c    597	  else
; main.c    598	  {
; main.c    599	   DrawChar(' ',i++,y);
	MOV	[-R0],R14
	MOV	R12,#020h
	MOV	R13,[R0+#02H]
	MOV	R15,[R0+#02H]
	ADD	R15,#01h
	MOV	[R0+#02H],R15
	CALLS	SEG _DrawChar,_DrawChar
	MOV	R14,[R0+]
; main.c    600	  }
_80:
; main.c    601	 }
; main.c    602	 while(i<max_x);
	MOV	DPP0,#PAG _max_x
	MOV	R12,[R0]
	CMP	R12,POF _max_x
	JMPR	cc_ULT,_75
; main.c    603	 if (ep>=0) while((c=*p++)) editline[ep++]=c; //Добиваем остаток строки
	CMP	R8,#00h
	JMPR	cc_SLT,_83
	JMPR	cc_UC,_82
_81:
	MOV	R7,R8
	ADD	R8,#01h
	EXTP	#PAG _editline,#01h
	MOVB	[R7+#POF _editline],RL1
_82:
	EXTP	R6,#01h
	MOVB	RL1,[R9+]
	JMPR	cc_NZ,_81
_83:
; main.c    604	}
	ADD	R0,#02h
	MOV	R6,[R0+]
	MOV	R7,[R0+]
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_drawStkStr	ENDP
; main.c    605	
; main.c    606	void drawFrmStkStr(unsigned char *p, unsigned int y, unsigned int vp, int ep)
; main.c    607	{
	PUBLIC	_drawFrmStkStr
_drawFrmStkStr	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	[-R0],R7
	MOV	[-R0],R6
	SUB	R0,#06h
	MOV	R9,R13
	MOV	R8,R12
	MOV	R7,[R0+#0EH]
; Locals:
; 
; Statics:
; 
; CSEs:
;     i = offset 0
;     c = RL6
;     p = R8R9
;     ep = R7
;     spcsum = R12R13
;     vp = R15
;     spcs = R1
;     spcadd = offset 2
;     y = R14
;     i << 16 = R12R13
; 
; main.c    608	 unsigned int i=0;
; main.c    609	 unsigned char c;
; main.c    610	 unsigned long spcsum;
; main.c    611	 unsigned long spcadd;
; main.c    612	 unsigned int spcs=0;
	MOV	R1,#00h
; main.c    613	
; main.c    614	 //Надо посчитать пробелы
; main.c    615	 i=0;
	MOV	R12,#00h
	MOV	[R0],R12
; main.c    616	 if (*p)
	EXTP	R9,#01h
	MOVB	RL2,[R8]
	JMPR	cc_Z,_110
; main.c    617	 {
; main.c    618	  i=1; //Считаем со второго символа
	MOV	R13,#01h
	MOV	[R0],R13
; main.c    619	  while((c=p[i])) //Пока не конец строки
	JMPR	cc_UC,_109
_107:
; main.c    620	  {
; main.c    621	   if (c==' ') spcs++; //Считаем пробелы
	CMPB	RL6,#020h
	JMPR	cc_NE,_108
	ADD	R1,#01h
_108:
; main.c    622	   i++;
	MOV	R6,[R0]
	ADD	R6,#01h
	MOV	[R0],R6
_109:
	MOV	R12,[R0]
	MOV	R13,R8
	MOV	R2,R9
	ADD	R13,R12
	EXTP	R2,#01h
	MOVB	RL6,[R13]
	JMPR	cc_NZ,_107
; main.c    623	  }
; main.c    624	 }
_110:
; main.c    625	 if (i>max_x)
	MOV	DPP0,#PAG _max_x
	MOV	R6,[R0]
	CMP	R6,POF _max_x
	JMPR	cc_ULE,_111
; main.c    626	  i=0; //Не добавляем пробелы, строка длиннее, чем экран
	MOV	R12,#00h
	MOV	[R0],R12
	JMPR	cc_UC,_112
_111:
; main.c    627	 else
; main.c    628	  i=max_x-i; //Теперь в i - общее количество добавляемых пробелов
	MOV	DPP0,#PAG _max_x
	MOV	R12,[R0]
	MOV	R6,POF _max_x
	SUB	R6,R12
	MOV	[R0],R6
_112:
; main.c    629	 spcadd=0;
	MOV	R6,#00h
	MOV	R12,#00h
	MOV	[R0+#02H],R6
	MOV	[R0+#04H],R12
; main.c    630	 spcsum=0;
	MOV	R13,R12
; main.c    631	 if (spcs)
	CMP	R1,#00h
	JMPR	cc_Z,_113
; main.c    632	 {
; main.c    633	  spcadd=((unsigned long)i<<16)/spcs;
	MOV	R13,[R0]
	MOV	R12,ZEROS
	MOV	R4,R12
	MOV	R5,R13
	MOV	R10,R1
	MOV	R11,#00h
	CALLS	SEG __udil,__udil
	MOV	[R0+#02H],R4
	MOV	[R0+#04H],R5
; main.c    634	  spcsum=((unsigned long)i<<16)%spcs;
	MOV	R4,R12
	MOV	R5,R13
	MOV	R10,R1
	MOV	R11,#00h
	CALLS	SEG __umol,__umol
	MOV	R12,R4
	MOV	R13,R5
; main.c    635	 }
_113:
; main.c    636	 spcsum+=spcadd; //Начальное значение
	MOV	R6,[R0+#02H]
	MOV	R1,[R0+#04H]
	ADD	R12,R6
	ADDC	R13,R1
; main.c    637	
; main.c    638	 i=0;
	MOV	R2,#00h
	MOV	[R0],R2
; main.c    639	 c=*p;
	EXTP	R9,#01h
	MOVB	RL6,[R8]
; main.c    640	 if (c)
	JMPA	cc_Z,_124
; main.c    641	 {
; main.c    642	  if (ep>=0) editline[ep++]=c;
	CMP	R7,#00h
	JMPR	cc_SLT,_114
	MOV	R3,R7
	ADD	R7,#01h
	EXTP	#PAG _editline,#01h
	MOVB	[R3+#POF _editline],RL6
_114:
; main.c    643	  if (vp!=0) vp--; else DrawChar(c,i++,y);
	CMP	R15,#00h
	JMPR	cc_Z,_115
	SUB	R15,#01h
	JMPR	cc_UC,_116
_115:
	MOV	R1,#01h
	MOV	[R0],R1
	MOV	[-R0],R14
	MOV	[-R0],R12
	MOV	[-R0],R13
	MOV	[-R0],R15
	MOVBZ	R12,RL6
	MOV	R13,#00h
	CALLS	SEG _DrawChar,_DrawChar
	MOV	R15,[R0+]
	MOV	R13,[R0+]
	MOV	R12,[R0+]
	MOV	R14,[R0+]
_116:
; main.c    644	  p++;
	ADD	R8,#01h
; main.c    645	 }
; main.c    646	 else goto L2;
; main.c    647	 do
_117:
; main.c    648	 {
; main.c    649	  c=*p;
	EXTP	R9,#01h
	MOVB	RL6,[R8]
; main.c    650	  if (c)
	JMPR	cc_Z,_124
; main.c    651	  {
; main.c    652	   if (ep>=0) editline[ep++]=c;
	CMP	R7,#00h
	JMPR	cc_SLT,_118
	MOV	R1,R7
	ADD	R7,#01h
	EXTP	#PAG _editline,#01h
	MOVB	[R1+#POF _editline],RL6
_118:
; main.c    653	   if (vp!=0) vp--; else DrawChar(c,i++,y);
	CMP	R15,#00h
	JMPR	cc_Z,_119
	SUB	R15,#01h
	JMPR	cc_UC,_120
_119:
	MOV	[-R0],R14
	MOV	[-R0],R12
	MOV	[-R0],R13
	MOV	[-R0],R15
	MOVBZ	R12,RL6
	MOV	R13,[R0+#08H]
	MOV	R1,[R0+#08H]
	ADD	R1,#01h
	MOV	[R0+#08H],R1
	CALLS	SEG _DrawChar,_DrawChar
	MOV	R15,[R0+]
	MOV	R13,[R0+]
	MOV	R12,[R0+]
	MOV	R14,[R0+]
_120:
; main.c    654	   if (c==' ')
	CMPB	RL6,#020h
	JMPR	cc_NE,_122
; main.c    655	   {
; main.c    656	      //Добавляем пробелы
; main.c    657	      if (spcsum>=65536)
	MOV	R6,R12
	MOV	R1,R13
	SUB	R6,#00h
	SUBC	R1,#01h
	JMPR	cc_ULT,_121
; main.c    658	      {
; main.c    659	       spcsum-=65536;
	SUB	R12,#00h
	SUBC	R13,#01h
; main.c    660		   continue;
	JMPR	cc_UC,_126
; main.c    661	      }
_121:
; main.c    662	      spcsum+=spcadd;
	MOV	R6,[R0+#02H]
	MOV	R1,[R0+#04H]
	ADD	R12,R6
	ADDC	R13,R1
; main.c    663	   }
_122:
; main.c    664	   p++;
	ADD	R8,#01h
; main.c    665	  }
	JMPR	cc_UC,_126
; main.c    666	  else
; main.c    667	  {
; main.c    668	   L2:
_124:
; main.c    669	   DrawChar(' ',i++,y);
	MOV	R6,R14
	MOV	[-R0],R15
	MOV	[-R0],R12
	MOV	[-R0],R13
	MOV	R12,#020h
	MOV	R13,[R0+#06H]
	MOV	R14,[R0+#06H]
	ADD	R14,#01h
	MOV	[R0+#06H],R14
	MOV	R14,R6
	CALLS	SEG _DrawChar,_DrawChar
	MOV	R13,[R0+]
	MOV	R12,[R0+]
	MOV	R15,[R0+]
	MOV	R14,R6
; main.c    670	  }
; main.c    671	 }
; main.c    672	 while(i<max_x);
_126:
	MOV	DPP0,#PAG _max_x
	MOV	R6,[R0]
	CMP	R6,POF _max_x
	JMPR	cc_ULT,_117
; main.c    673	 if (ep>=0) while((c=*p++)) editline[ep++]=c; //Добиваем остаток строки
	CMP	R7,#00h
	JMPR	cc_SLT,_129
	JMPR	cc_UC,_128
_127:
	MOV	R12,R7
	ADD	R7,#01h
	EXTP	#PAG _editline,#01h
	MOVB	[R12+#POF _editline],RL6
_128:
	EXTP	R9,#01h
	MOVB	RL6,[R8+]
	JMPR	cc_NZ,_127
_129:
; main.c    674	}
	ADD	R0,#06h
	MOV	R6,[R0+]
	MOV	R7,[R0+]
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_drawFrmStkStr	ENDP
; main.c    675	
; main.c    676	//Поиск начала строки в верхнем стеке
; main.c    677	extern unsigned int bl_us(unsigned int pos);
; main.c    678	extern unsigned int bl_ds(unsigned int pos);
; main.c    679	
; main.c    680	//Перенос из верхнего стека в нижний (на строку вверх)
; main.c    681	extern void move_up(void);
; main.c    682	//Перенос из нижнего стека в верхний (на строку вниз)
; main.c    683	extern void move_dw(void);
; main.c    684	//---------------------------------------
; main.c    685	// Работа с таблицей блоков
; main.c    686	//---------------------------------------
; main.c    687	//Поиск первого свободного блока
; main.c    688	unsigned char FindFreeBlock(void)
; main.c    689	{
	PUBLIC	_FindFreeBlock
_FindFreeBlock	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
;     i = RL1
;     &bfree + (unsigned int) i = R12R13
; 
; main.c    690	 unsigned char i=0;
	MOVB	RL1,#00h
; main.c    691	 do
_130:
; main.c    692	 {
; main.c    693	  if (!bfree[i])
	MOV	R12,#POF _bfree
	MOV	R13,#PAG _bfree
	MOVBZ	R14,RL1
	ADD	R12,R14
	EXTP	R13,#01h
	MOVB	RL2,[R12]
	JMPR	cc_NZ,_131
; main.c    694	  {
; main.c    695	   bfree[i]=1;
	MOVB	RL2,#01h
	EXTP	R13,#01h
	MOVB	[R12],RL2
; main.c    696	   break;
	JMPR	cc_UC,_132
; main.c    697	  }
_131:
; main.c    698	 }
; main.c    699	 while(++i);
	ADDB	RL1,#01h
	JMPR	cc_NZ,_130
_132:
; main.c    700	 return(i);
	MOVB	RL4,RL1
; main.c    701	}
	RETS
_FindFreeBlock	ENDP
; main.c    702	
; main.c    703	//---------------------------------------
; main.c    704	// Загрузка с диска нового фрагмента
; main.c    705	//---------------------------------------
; main.c    706	void DoDiskAccess(unsigned int flag)
; main.c    707	{
	PUBLIC	_DoDiskAccess
_DoDiskAccess	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	[-R0],R6
	SUB	R0,#04h
; Locals:
;     ul = offset 0
; 
; Statics:
; 
; CSEs:
;     b = RL6
;     f = R8
;     flag = R9
; 
; main.c    708	 int f;
; main.c    709	 unsigned char b;
; main.c    710	 long ul;
; main.c    711	
; main.c    712	 if ((f=stk_fhandle)==-1)
	MOV	DPP0,#PAG _stk_fhandle
	MOV	R9,R12
	MOV	R8,POF _stk_fhandle
	CMP	R8,#0FFFFh
	JMPR	cc_NE,_133
; main.c    713	 {
; main.c    714	  stk_fhandle=f=FileOpen((STR)stkfile,_O_RDWR+_O_BINARY,_S_IREAD); //Файл верхнего стека
	MOV	R12,#POF _stkfile
	MOV	R13,#PAG _stkfile
	MOV	R14,#08002h
	MOV	R15,#0100h
	CALLS	SEG _FileOpen,_FileOpen
	MOV	DPP0,#PAG _stk_fhandle
	MOV	R8,R4
	MOV	POF _stk_fhandle,R8
; main.c    715	 }
_133:
; main.c    716	 if (disk_access&LOAD_UP)
	MOV	DPP0,#PAG _disk_access
	NOP
	MOVB	RL6,POF _disk_access
	JNB	R6.1,_134
; main.c    717	 {
; main.c    718	  memcpy(ustk+STKSZ50,ustk,usp);
	MOV	R12,POF _usp
	MOV	[-R0],R12
	MOV	R12,#POF _ustk+8192
	MOV	R13,#PAG _ustk
	MOV	R14,#POF _ustk
	MOV	R15,#PAG _ustk
	CALLS	SEG _memcpy,_memcpy
; main.c    719	  b=ubat[u_disk--];
	MOV	DPP0,#PAG _u_disk
	ADD	R0,#02h
	MOV	R12,POF _u_disk
	MOV	R13,POF _u_disk
	SUB	R13,#01h
	MOV	POF _u_disk,R13
	EXTP	#PAG _ubat,#01h
	MOVB	RL6,[R12+#POF _ubat]
; main.c    720	  bfree[b]=0;
	MOVB	RL1,#00h
	MOVBZ	R12,RL6
	EXTP	#PAG _bfree,#01h
	MOVB	[R12+#POF _bfree],RL1
; main.c    721	  FileSeek(f,_mulu32(STKSZ50,b),0,&ul);
	MOV	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	[-R0],R13
	MOV	[-R0],R12
	MOV	R13,#02000h
	MOVBZ	R6,RL6
	MULU	R13,R6
	MOV	R14,MDH
	MOV	R13,MDL
	MOV	R12,R8
	MOV	R15,#00h
	CALLS	SEG _FileSeek,_FileSeek
	ADD	R0,#04h
; main.c    722	  FileRead(f,ustk,STKSZ50);
	MOV	R12,R8
	MOV	R13,#POF _ustk
	MOV	R14,#PAG _ustk
	MOV	R15,#02000h
	CALLS	SEG _FileRead,_FileRead
; main.c    723	  usp+=STKSZ50;
	MOV	DPP0,#PAG _usp
	NOP
	MOV	R6,POF _usp
	ADD	R6,#02000h
	MOV	POF _usp,R6
; main.c    724	 }
_134:
; main.c    725	 if (disk_access&LOAD_DOWN)
	MOV	DPP0,#PAG _disk_access
	NOP
	MOVB	RL6,POF _disk_access
	JNB	R6.2,_135
; main.c    726	 {
; main.c    727	  memcpy(dstk+(dsp-STKSZ50),dstk+dsp,STKSZ-dsp);
	MOV	R12,#04000h
	SUB	R12,POF _dsp
	MOV	[-R0],R12
	MOV	R12,#POF _dstk-8192
	MOV	R13,#PAG _dstk
	ADD	R12,POF _dsp
	MOV	R14,#POF _dstk
	MOV	R15,#PAG _dstk
	ADD	R14,POF _dsp
	CALLS	SEG _memcpy,_memcpy
; main.c    728	  b=dbat[d_disk--];
	MOV	DPP0,#PAG _d_disk
	ADD	R0,#02h
	MOV	R12,POF _d_disk
	MOV	R13,POF _d_disk
	SUB	R13,#01h
	MOV	POF _d_disk,R13
	EXTP	#PAG _dbat,#01h
	MOVB	RL6,[R12+#POF _dbat]
; main.c    729	  bfree[b]=0;
	MOVB	RL1,#00h
	MOVBZ	R12,RL6
	EXTP	#PAG _bfree,#01h
	MOVB	[R12+#POF _bfree],RL1
; main.c    730	  FileSeek(f,_mulu32(STKSZ50,b),0,&ul);
	MOV	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	[-R0],R13
	MOV	[-R0],R12
	MOV	R13,#02000h
	MOVBZ	R6,RL6
	MULU	R13,R6
	MOV	R14,MDH
	MOV	R13,MDL
	MOV	R12,R8
	MOV	R15,#00h
	CALLS	SEG _FileSeek,_FileSeek
	ADD	R0,#04h
; main.c    731	  FileRead(f,dstk+STKSZ50,STKSZ50);
	MOV	R12,R8
	MOV	R13,#POF _dstk+8192
	MOV	R14,#PAG _dstk
	MOV	R15,#02000h
	CALLS	SEG _FileRead,_FileRead
; main.c    732	  dsp-=STKSZ50;
	MOV	DPP0,#PAG _dsp
	NOP
	MOV	R6,POF _dsp
	SUB	R6,#02000h
	MOV	POF _dsp,R6
; main.c    733	 }
_135:
; main.c    734	 if (disk_access&SAVE_UP)
	MOV	DPP0,#PAG _disk_access
	NOP
	MOVB	RL6,POF _disk_access
	JNB	R6.3,_136
; main.c    735	 {
; main.c    736	  b=FindFreeBlock();
	CALLS	SEG _FindFreeBlock,_FindFreeBlock
; main.c    737	  ubat[++u_disk]=b;
	MOV	DPP0,#PAG _u_disk
	MOVB	RL6,RL4
	MOV	R12,POF _u_disk
	ADD	R12,#01h
	MOV	POF _u_disk,R12
	EXTP	#PAG _ubat,#01h
	MOVB	[R12+#POF _ubat],RL6
; main.c    738	  FileSeek(f,_mulu32(STKSZ50,b),0,&ul);
	MOV	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	[-R0],R13
	MOV	[-R0],R12
	MOV	R13,#02000h
	MOVBZ	R6,RL6
	MULU	R13,R6
	MOV	R14,MDH
	MOV	R13,MDL
	MOV	R12,R8
	MOV	R15,#00h
	CALLS	SEG _FileSeek,_FileSeek
	ADD	R0,#04h
; main.c    739	  FileWrite(f,ustk,STKSZ50);
	MOV	R12,R8
	MOV	R13,#POF _ustk
	MOV	R14,#PAG _ustk
	MOV	R15,#02000h
	CALLS	SEG _FileWrite,_FileWrite
; main.c    740	  memcpy(ustk,ustk+STKSZ50,usp-=STKSZ50);
	MOV	DPP0,#PAG _usp
	MOV	R12,#POF _ustk
	MOV	R6,POF _usp
	SUB	R6,#02000h
	MOV	POF _usp,R6
	MOV	[-R0],R6
	MOV	R13,#PAG _ustk
	MOV	R14,#POF _ustk+8192
	MOV	R15,#PAG _ustk
	CALLS	SEG _memcpy,_memcpy
	ADD	R0,#02h
; main.c    741	 }
_136:
; main.c    742	 if (disk_access&SAVE_DOWN)
	MOV	DPP0,#PAG _disk_access
	NOP
	MOVB	RL6,POF _disk_access
	JNB	R6.4,_137
; main.c    743	 {
; main.c    744	  b=FindFreeBlock();
	CALLS	SEG _FindFreeBlock,_FindFreeBlock
; main.c    745	  dbat[++d_disk]=b;
	MOV	DPP0,#PAG _d_disk
	MOVB	RL6,RL4
	MOV	R12,POF _d_disk
	ADD	R12,#01h
	MOV	POF _d_disk,R12
	EXTP	#PAG _dbat,#01h
	MOVB	[R12+#POF _dbat],RL6
; main.c    746	  FileSeek(f,_mulu32(STKSZ50,b),0,&ul);
	MOV	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	[-R0],R13
	MOV	[-R0],R12
	MOV	R13,#02000h
	MOVBZ	R6,RL6
	MULU	R13,R6
	MOV	R14,MDH
	MOV	R13,MDL
	MOV	R12,R8
	MOV	R15,#00h
	CALLS	SEG _FileSeek,_FileSeek
	ADD	R0,#04h
; main.c    747	  FileWrite(f,dstk+STKSZ50,STKSZ50);
	MOV	R12,R8
	MOV	R13,#POF _dstk+8192
	MOV	R14,#PAG _dstk
	MOV	R15,#02000h
	CALLS	SEG _FileWrite,_FileWrite
; main.c    748	  memcpy(dstk+(dsp+STKSZ50),dstk+dsp,STKSZ50-dsp);
	MOV	DPP0,#PAG _dsp
	MOV	R6,#02000h
	SUB	R6,POF _dsp
	MOV	[-R0],R6
	MOV	R12,#POF _dstk+8192
	MOV	R13,#PAG _dstk
	ADD	R12,POF _dsp
	MOV	R14,#POF _dstk
	MOV	R15,#PAG _dstk
	ADD	R14,POF _dsp
	CALLS	SEG _memcpy,_memcpy
; main.c    749	  dsp+=STKSZ50;
	MOV	DPP0,#PAG _dsp
	ADD	R0,#02h
	MOV	R6,POF _dsp
	ADD	R6,#02000h
	MOV	POF _dsp,R6
; main.c    750	 }
_137:
; main.c    751	 disk_access=0;
	MOV	DPP0,#PAG _disk_access
	NOP
	MOVB	POF _disk_access,ZEROS
; main.c    752	 if (flag)
	CMP	R9,#00h
	JMPR	cc_Z,_138
; main.c    753	 {
; main.c    754	  FileClose(f);
	MOV	R12,R8
	CALLS	SEG _FileClose,_FileClose
; main.c    755	  stk_fhandle=-1;
	MOV	DPP0,#PAG _stk_fhandle
	NOP
	MOV	POF _stk_fhandle,ONES
; main.c    756	 }
_138:
; main.c    757	 if ((!terminated)&&flag) SendMessage((void far *)0x3B5E8,0xF8,dia_id);
	MOV	DPP0,#PAG _terminated
	NOP
	MOV	R8,POF _terminated
	JMPR	cc_NZ,_140
	CMP	R9,#00h
	JMPR	cc_Z,_140
	MOV	R12,#035E8h
	MOV	R13,#0Eh
	MOV	R14,#0F8h
	MOV	R15,POF _dia_id
	CALLS	SEG _SendMessage,_SendMessage
; main.c    758	 return;
; main.c    759	}
_140:
	ADD	R0,#04h
	MOV	R6,[R0+]
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_DoDiskAccess	ENDP
; main.c    760	
; main.c    761	//------------------------------------------
; main.c    762	// Проверка необходимости чтения/записи с диска/на диск
; main.c    763	//------------------------------------------
; main.c    764	void CheckDiskAccess(void)
; main.c    765	{
	PUBLIC	_CheckDiskAccess
_CheckDiskAccess	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c    766	 if ((usp<STKMIN)&&(u_disk>=0)) disk_access|=LOAD_UP;
	MOV	DPP0,#PAG _usp
	NOP
	MOV	R12,POF _usp
	CMP	R12,#0BB8h
	JMPR	cc_UGE,_142
	MOV	R13,POF _u_disk
	CMP	R13,#00h
	JMPR	cc_SLT,_142
	MOVB	RL1,POF _disk_access
	BSET	R1.1
	MOVB	POF _disk_access,RL1
_142:
; main.c    767	 if ((dsp>STKMAX)&&(d_disk>=0)) disk_access|=LOAD_DOWN;
	MOV	DPP0,#PAG _dsp
	NOP
	MOV	R12,POF _dsp
	CMP	R12,#03448h
	JMPR	cc_ULE,_144
	MOV	R13,POF _d_disk
	CMP	R13,#00h
	JMPR	cc_SLT,_144
	MOVB	RL1,POF _disk_access
	BSET	R1.2
	MOVB	POF _disk_access,RL1
_144:
; main.c    768	 if (usp>STKMAX) disk_access|=SAVE_UP;
	MOV	DPP0,#PAG _usp
	NOP
	MOV	R12,POF _usp
	CMP	R12,#03448h
	JMPR	cc_ULE,_145
	MOVB	RL1,POF _disk_access
	BSET	R1.3
	MOVB	POF _disk_access,RL1
_145:
; main.c    769	 if (dsp<STKMIN) disk_access|=SAVE_DOWN;
	MOV	DPP0,#PAG _dsp
	NOP
	MOV	R12,POF _dsp
	CMP	R12,#0BB8h
	JMPR	cc_UGE,_146
	MOVB	RL1,POF _disk_access
	BSET	R1.4
	MOVB	POF _disk_access,RL1
_146:
; main.c    770	}
	RETS
_CheckDiskAccess	ENDP
; main.c    771	
; main.c    772	//-------------------------------------------------------
; main.c    773	// Работа с историей
; main.c    774	//-------------------------------------------------------
; main.c    775	unsigned int SearchHistory(void)
; main.c    776	{
	PUBLIC	_SearchHistory
_SearchHistory	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
; Locals:
; 
; Statics:
; 
; CSEs:
;     history_pos = R8
;     fin = R9
;     i = R12
; 
; main.c    777	 unsigned int history_pos=0;
	MOV	R8,#00h
; main.c    778	 int fin;
; main.c    779	 int i;
; main.c    780	 if ((fin=FileOpen((STR)historyfile,_O_RDONLY+_O_BINARY,0))!=-1)
	MOV	R12,#POF _historyfile
	MOV	R13,#PAG _historyfile
	MOV	R14,#08000h
	MOV	R15,#00h
	CALLS	SEG _FileOpen,_FileOpen
	MOV	R9,R4
	CMP	R9,#0FFFFh
	JMPR	cc_EQ,_150
; main.c    781	 {
; main.c    782	  for(;;)
_147:
; main.c    783	  {
; main.c    784	   i=FileRead(fin,&HISTORY,sizeof(HISTORY));
	MOV	R12,R9
	MOV	R13,#POF _HISTORY
	MOV	R14,#PAG _HISTORY
	MOV	R15,#09Ch
	CALLS	SEG _FileRead,_FileRead
	MOV	R12,R4
; main.c    785	   if (i<sizeof(HISTORY)) goto L_NO_HISTORY;
	CMP	R12,#09Ch
	JMPR	cc_ULT,_149
; main.c    786	   if (!strcmp(HISTORY.name,filename))
	MOV	R12,#POF _HISTORY
	MOV	R13,#PAG _HISTORY
	MOV	R14,#POF _filename
	MOV	R15,#PAG _filename
	CALLS	SEG _strcmp,_strcmp
	CMP	R4,#00h
	JMPR	cc_Z,_148
; main.c    787	   {
; main.c    788	   	history_pos|=0x8000;
; main.c    789	    break; //Нашли
; main.c    790	   }
; main.c    791	   history_pos++;
	ADD	R8,#01h
	JMPR	cc_UC,_147
_148:
	BSET	R8.15
; main.c    792	  }
; main.c    793	  L_NO_HISTORY:
_149:
; main.c    794	  FileClose(fin);
	MOV	R12,R9
	CALLS	SEG _FileClose,_FileClose
; main.c    795	 }
_150:
; main.c    796	 return(history_pos);
	MOV	R4,R8
; main.c    797	}
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_SearchHistory	ENDP
; main.c    798	
; main.c    799	//Записать историю, вызывается в контексте MMC_Filesystem
; main.c    800	void SaveHistory(void)
; main.c    801	{
	PUBLIC	_SaveHistory
_SaveHistory	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	SUB	R0,#0A0h
; Locals:
;     ss = offset 0
;     ul = offset 156
; 
; Statics:
; 
; CSEs:
;     f = R8
;     history_pos = R9
; 
; main.c    802	 int f;
; main.c    803	 long ul;
; main.c    804	 char ss[sizeof(HISTORY)];
; main.c    805	 unsigned int history_pos;
; main.c    806	
; main.c    807	 memcpy(ss,&HISTORY,sizeof(HISTORY));
	MOV	R12,#09Ch
	MOV	[-R0],R12
	MOV	R12,#02h
	ADD	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	R14,#POF _HISTORY
	MOV	R15,#PAG _HISTORY
	CALLS	SEG _memcpy,_memcpy
	ADD	R0,#02h
; main.c    808	 history_pos=SearchHistory()&0x7FFF;
	CALLS	SEG _SearchHistory,_SearchHistory
	MOV	R9,R4
	BCLR	R9.15
; main.c    809	 memcpy(&HISTORY,ss,sizeof(HISTORY));
	MOV	R8,#09Ch
	MOV	[-R0],R8
	MOV	R12,#POF _HISTORY
	MOV	R13,#PAG _HISTORY
	MOV	R14,#02h
	ADD	R14,R0
	AND	R14,#03FFFh
	MOV	R15,DPP1
	CALLS	SEG _memcpy,_memcpy
; main.c    810	 memcpy(HISTORY.name,filename,128);
	MOV	R8,#080h
	MOV	[R0],R8
	MOV	R12,#POF _HISTORY
	MOV	R13,#PAG _HISTORY
	MOV	R14,#POF _filename
	MOV	R15,#PAG _filename
	CALLS	SEG _memcpy,_memcpy
; main.c    811	 HISTORY.font=font_size;
	MOV	DPP0,#PAG _font_size
	ADD	R0,#02h
	MOVB	RL1,POF _font_size
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOVB	POF (_HISTORY+128),RL1
; main.c    812	 HISTORY.line=curline;
	MOV	DPP0,#PAG _curline
	NOP
	MOV	R8,POF _curline
	MOV	R12,POF (_curline+2)
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOV	POF (_HISTORY+132),R8
	MOV	POF (_HISTORY+134),R12
; main.c    813	 HISTORY.total=total_line;
	MOV	DPP0,#PAG _total_line
	NOP
	MOV	R13,POF _total_line
	MOV	R14,POF (_total_line+2)
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOV	POF (_HISTORY+136),R13
	MOV	POF (_HISTORY+138),R14
; main.c    814	 HISTORY.codepage=win_dos_koi;
	MOV	DPP0,#PAG _win_dos_koi
	NOP
	MOVB	RL2,POF _win_dos_koi
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOVB	POF (_HISTORY+130),RL2
; main.c    815	 HISTORY.cursor_off=cursor_off;
	MOV	DPP0,#PAG _cursor_off
	NOP
	MOVB	RL3,POF _cursor_off
	MOV	DPP0,#PAG _HISTORY
	MOV	R12,#POF _historyfile
	MOVB	POF (_HISTORY+131),RL3
; main.c    816	 if ((f=FileOpen((STR)historyfile,_O_RDWR+_O_BINARY,_S_IREAD))==-1)
	MOV	R13,#PAG _historyfile
	MOV	R14,#08002h
	MOV	R15,#0100h
	CALLS	SEG _FileOpen,_FileOpen
	MOV	R8,R4
	CMP	R8,#0FFFFh
	JMPR	cc_NE,_151
; main.c    817	  f=FileOpen((STR)historyfile,_O_RDWR+_O_BINARY+_O_CREAT,_S_IREAD);
	MOV	R12,#POF _historyfile
	MOV	R13,#PAG _historyfile
	MOV	R14,#08102h
	MOV	R15,#0100h
	CALLS	SEG _FileOpen,_FileOpen
	MOV	R8,R4
_151:
; main.c    818	 if (f!=-1)
	CMP	R8,#0FFFFh
	JMPR	cc_EQ,_152
; main.c    819	 {
; main.c    820	  FileSeek(f,sizeof(HISTORY)*history_pos,0,&ul);
	MOV	R12,#09Ch
	ADD	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	[-R0],R13
	MOV	[-R0],R12
	MOV	R12,R8
	MOV	R14,#09Ch
	MULU	R9,R14
	MOV	R9,MDL
	MOV	R13,R9
	MOV	R14,#00h
	MOV	R15,#00h
	CALLS	SEG _FileSeek,_FileSeek
	ADD	R0,#04h
; main.c    821	  FileWrite(f,&HISTORY,sizeof(HISTORY));
	MOV	R12,R8
	MOV	R13,#POF _HISTORY
	MOV	R14,#PAG _HISTORY
	MOV	R15,#09Ch
	CALLS	SEG _FileWrite,_FileWrite
; main.c    822	  FileClose(f);
	MOV	R12,R8
	CALLS	SEG _FileClose,_FileClose
; main.c    823	 }
_152:
; main.c    824	 if (terminated)
	MOV	DPP0,#PAG _terminated
	NOP
	MOV	R8,POF _terminated
	JMPR	cc_Z,_154
; main.c    825	 {
; main.c    826	  //Записываем snap-shoot
; main.c    827	  if ((f=FileOpen((STR)snapshootfile,_O_BINARY+_O_CREAT+_O_RDWR,_S_IEXEC))!=-1)
	MOV	R12,#POF _snapshootfile
	MOV	R13,#PAG _snapshootfile
	MOV	R14,#08102h
	MOV	R15,#040h
	CALLS	SEG _FileOpen,_FileOpen
	MOV	R8,R4
	CMP	R8,#0FFFFh
	JMPR	cc_EQ,_154
; main.c    828	  {
; main.c    829	   FileWrite(f,(void far *)0x80000,16384);
	MOV	R12,R8
	MOV	R13,#00h
	MOV	R14,#020h
	MOV	R15,#04000h
	CALLS	SEG _FileWrite,_FileWrite
; main.c    830	   FileWrite(f,(void far *)0x84000,16384);
	MOV	R12,R8
	MOV	R13,#00h
	MOV	R14,#021h
	MOV	R15,#04000h
	CALLS	SEG _FileWrite,_FileWrite
; main.c    831	   FileWrite(f,(void far *)0x88000,16384);
	MOV	R12,R8
	MOV	R13,#00h
	MOV	R14,#022h
	MOV	R15,#04000h
	CALLS	SEG _FileWrite,_FileWrite
; main.c    832	   FileWrite(f,(void far *)0x8C000,16384);
	MOV	R12,R8
	MOV	R13,#00h
	MOV	R14,#023h
	MOV	R15,#04000h
	CALLS	SEG _FileWrite,_FileWrite
; main.c    833	   FileWrite(f,(void far *)0x90000,16384);
	MOV	R12,R8
	MOV	R13,#00h
	MOV	R14,#024h
	MOV	R15,#04000h
	CALLS	SEG _FileWrite,_FileWrite
; main.c    834	   FileClose(f);
	MOV	R12,R8
	CALLS	SEG _FileClose,_FileClose
; main.c    835	  }
; main.c    836	 }
_154:
; main.c    837	}
	ADD	R0,#0A0h
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_SaveHistory	ENDP
; main.c    838	//------------------------------------------
; main.c    839	// Собственно редактор
; main.c    840	//------------------------------------------
; main.c    841	void GotoLine(void) //Переход на строку seek_to_line, вызывается в контексте MMC_Filesystem
; main.c    842	{
	PUBLIC	_GotoLine
_GotoLine	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c    843	// unsigned int l;
; main.c    844	// unsigned int p;
; main.c    845	 for(;;)
_155:
_156:
; main.c    846	 {
; main.c    847	  disk_access=0; //Закончили дисковые операции
	MOV	DPP0,#PAG _disk_access
	NOP
	MOVB	POF _disk_access,ZEROS
; main.c    848	  CheckDiskAccess();
	CALLS	SEG _CheckDiskAccess,_CheckDiskAccess
; main.c    849	  if (disk_access) DoDiskAccess(0);
	MOV	DPP0,#PAG _disk_access
	NOP
	MOVB	RL1,POF _disk_access
	JMPR	cc_Z,_157
	MOV	R12,#00h
	CALLS	SEG _DoDiskAccess,_DoDiskAccess
_157:
; main.c    850	  if (seek_to_line==curline) break; //Пришли
	MOV	DPP0,#PAG _seek_to_line
	NOP
	MOV	R12,POF _seek_to_line
	MOV	R13,POF (_seek_to_line+2)
	SUB	R12,POF _curline
	SUBC	R13,POF (_curline+2)
	JMPA	cc_EQ,_163
; main.c    851	  if (seek_to_line<curline)
	MOV	R12,POF _seek_to_line
	MOV	R13,POF (_seek_to_line+2)
	SUB	R12,POF _curline
	SUBC	R13,POF (_curline+2)
	JMPR	cc_UGE,_159
; main.c    852	  {
; main.c    853	   //Пытаемся идти вверх
; main.c    854	   if (!curline) break; //начало!
	MOV	R12,POF (_curline+2)
	OR	R12,POF _curline
	JMPR	cc_Z,_163
; main.c    855	   if (curline==viewline) viewline--; //Если первая строка экрана
	MOV	R12,POF _curline
	MOV	R13,POF (_curline+2)
	SUB	R12,POF _viewline
	SUBC	R13,POF (_viewline+2)
	JMPR	cc_NE,_158
	MOV	R12,#01h
	SUB	POF _viewline,R12
	SUBC	POF (_viewline+2),ZEROS
_158:
; main.c    856	   curline--;
	MOV	DPP0,#PAG _curline
	MOV	R12,#01h
	SUB	POF _curline,R12
	SUBC	POF (_curline+2),ZEROS
; main.c    857	   move_up();
	CALLS	SEG _move_up,_move_up
; main.c    858	  }
	JMPR	cc_UC,_156
_159:
; main.c    859	  else
; main.c    860	  {
; main.c    861	    //Пытаемся идти вниз
; main.c    862	   if (dsp==STKSZ) break; //Конец текста
	MOV	DPP0,#PAG _dsp
	NOP
	MOV	R12,POF _dsp
	CMP	R12,#04000h
	JMPR	cc_EQ,_163
; main.c    863	   curline++;
	MOV	R13,#01h
	ADD	POF _curline,R13
	ADDC	POF (_curline+2),ZEROS
; main.c    864	   if ((curline-viewline)==max_y)
	MOV	R14,POF _curline
	MOV	R15,POF (_curline+2)
	SUB	R14,POF _viewline
	SUBC	R15,POF (_viewline+2)
	MOV	R1,POF _max_y
	MOV	R2,#00h
	SUB	R14,R1
	SUBC	R15,R2
	JMPR	cc_NE,_160
; main.c    865	   {
; main.c    866	    viewline++;
	ADD	POF _viewline,R13
	ADDC	POF (_viewline+2),ZEROS
; main.c    867	   }
_160:
; main.c    868	   move_dw();
	CALLS	SEG _move_dw,_move_dw
	JMPR	cc_UC,_155
; main.c    869	  }
; main.c    870	 }
_163:
; main.c    871	 if (stk_fhandle!=-1)
	MOV	DPP0,#PAG _stk_fhandle
	NOP
	MOV	R12,POF _stk_fhandle
	CMP	R12,#0FFFFh
	JMPR	cc_EQ,_164
; main.c    872	 {
; main.c    873	  FileClose(stk_fhandle);
	MOV	R12,POF _stk_fhandle
	CALLS	SEG _FileClose,_FileClose
; main.c    874	  stk_fhandle=-1;
	MOV	DPP0,#PAG _stk_fhandle
	NOP
	MOV	POF _stk_fhandle,ONES
; main.c    875	 }
_164:
; main.c    876	 draw_mode=1; //Перерисовываем
	MOV	DPP0,#PAG _draw_mode
	MOVB	RL1,#01h
	MOVB	POF _draw_mode,RL1
; main.c    877	 if (!terminated) SendMessage((void far *)0x3B5E8,0xF8,dia_id);
	MOV	R12,POF _terminated
	JMPR	cc_NZ,_165
	MOV	R12,#035E8h
	MOV	R13,#0Eh
	MOV	R14,#0F8h
	MOV	R15,POF _dia_id
	CALLS	SEG _SendMessage,_SendMessage
_165:
; main.c    878	}
	RETS
_GotoLine	ENDP
; main.c    879	
; main.c    880	void LineUp(void)
; main.c    881	{
	PUBLIC	_LineUp
_LineUp	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c    882	// unsigned int l;
; main.c    883	// unsigned int p;
; main.c    884	 if (curline) //Не начало!
	MOV	DPP0,#PAG _curline
	NOP
	MOV	R12,POF (_curline+2)
	OR	R12,POF _curline
	JMPR	cc_Z,_167
; main.c    885	 {
; main.c    886	  if (curline==viewline) viewline--; //Если первая строка экрана
	MOV	R12,POF _curline
	MOV	R13,POF (_curline+2)
	SUB	R12,POF _viewline
	SUBC	R13,POF (_viewline+2)
	JMPR	cc_NE,_166
	MOV	R12,#01h
	SUB	POF _viewline,R12
	SUBC	POF (_viewline+2),ZEROS
_166:
; main.c    887	  curline--;
	MOV	DPP0,#PAG _curline
	MOV	R12,#01h
	SUB	POF _curline,R12
	SUBC	POF (_curline+2),ZEROS
; main.c    888	  move_up();
	CALLS	SEG _move_up,_move_up
; main.c    889	 }
_167:
; main.c    890	}
	RETS
_LineUp	ENDP
; main.c    891	
; main.c    892	void LineDw(void)
; main.c    893	{
	PUBLIC	_LineDw
_LineDw	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c    894	// unsigned int l;
; main.c    895	// unsigned int p;
; main.c    896	 if (dsp==STKSZ) return; //Конец текста
	MOV	DPP0,#PAG _dsp
	NOP
	MOV	R12,POF _dsp
	CMP	R12,#04000h
	JMPR	cc_EQ,_169
; main.c    897	 curline++;
	MOV	R13,#01h
	ADD	POF _curline,R13
	ADDC	POF (_curline+2),ZEROS
; main.c    898	 if ((curline-viewline)==max_y)
	MOV	R14,POF _curline
	MOV	R15,POF (_curline+2)
	SUB	R14,POF _viewline
	SUBC	R15,POF (_viewline+2)
	MOV	R1,POF _max_y
	MOV	R2,#00h
	SUB	R14,R1
	SUBC	R15,R2
	JMPR	cc_NE,_168
; main.c    899	 {
; main.c    900	  viewline++;
	ADD	POF _viewline,R13
	ADDC	POF (_viewline+2),ZEROS
; main.c    901	 }
_168:
; main.c    902	 move_dw();
	CALLS	SEG _move_dw,_move_dw
; main.c    903	}
_169:
	RETS
_LineDw	ENDP
; main.c    904	
; main.c    905	void PageUp(unsigned int lines)
; main.c    906	{
	PUBLIC	_PageUp
_PageUp	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
;     lines = R12
;     i = R13
; 
; main.c    907	 unsigned int i;
; main.c    908	// unsigned int l;
; main.c    909	// unsigned int p;
; main.c    910	 if (curline<lines)
	MOV	DPP0,#PAG _curline
	MOV	R15,R12
	MOV	R13,POF _curline
	MOV	R14,POF (_curline+2)
	MOV	R1,#00h
	SUB	R13,R15
	SUBC	R14,R1
	JMPR	cc_UGE,_177
; main.c    911	 {
; main.c    912	  i=curline;
	MOV	R13,POF _curline
; main.c    913	  viewline=0;
	MOV	POF _viewline,ZEROS
	MOV	POF (_viewline+2),ZEROS
; main.c    914	  curline=0;
	MOV	POF _curline,ZEROS
	MOV	POF (_curline+2),ZEROS
; main.c    915	 }
	JMPR	cc_UC,_180
_177:
; main.c    916	 else
; main.c    917	 {
; main.c    918	  i=lines;
	MOV	R13,R12
; main.c    919	  curline-=i;
	MOV	R14,R12
	MOV	DPP0,#PAG _curline
	MOV	R15,#00h
	SUB	POF _curline,R14
	SUBC	POF (_curline+2),R15
; main.c    920	  if (viewline>i) viewline-=i; else viewline=0;
	MOV	R14,POF _viewline
	MOV	R1,POF (_viewline+2)
	MOV	R2,R12
	MOV	R3,#00h
	SUB	R14,R2
	SUBC	R1,R3
	JMPR	cc_ULE,_178
	MOV	R14,#00h
	SUB	POF _viewline,R12
	SUBC	POF (_viewline+2),R14
	JMPR	cc_UC,_180
_178:
	MOV	DPP0,#PAG _viewline
	NOP
	MOV	POF _viewline,ZEROS
	MOV	POF (_viewline+2),ZEROS
; main.c    921	 }
; main.c    922	 while(i)
_180:
	JMPR	cc_UC,_182
_181:
; main.c    923	 {
; main.c    924	  move_up();
	MOV	[-R0],R13
	CALLS	SEG _move_up,_move_up
	MOV	R13,[R0+]
; main.c    925	  i--;
	SUB	R13,#01h
_182:
	CMP	R13,#00h
	JMPR	cc_NZ,_181
; main.c    926	 }
; main.c    927	}
	RETS
_PageUp	ENDP
; main.c    928	
; main.c    929	void PageDw(unsigned int lines)
; main.c    930	{
	PUBLIC	_PageDw
_PageDw	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
;     i = R12
;     lines = R12
; 
; main.c    931	 unsigned int i;
; main.c    932	// unsigned int l;
; main.c    933	// unsigned int p;
; main.c    934	 i=lines;
	MOV	R13,R12
; main.c    935	 do
_183:
; main.c    936	 {
; main.c    937	  if (dsp==STKSZ) break; //Конец текста
	MOV	DPP0,#PAG _dsp
	NOP
	MOV	R13,POF _dsp
	CMP	R13,#04000h
	JMPR	cc_EQ,_184
; main.c    938	  viewline++;
	MOV	R14,#01h
	ADD	POF _viewline,R14
	ADDC	POF (_viewline+2),ZEROS
; main.c    939	  curline++;
	ADD	POF _curline,R14
	ADDC	POF (_curline+2),ZEROS
; main.c    940	  move_dw();
	MOV	[-R0],R12
	CALLS	SEG _move_dw,_move_dw
	MOV	R12,[R0+]
; main.c    941	 }
; main.c    942	 while(--i);
	SUB	R12,#01h
	JMPR	cc_NZ,_183
_184:
; main.c    943	}
	RETS
_PageDw	ENDP
; main.c    944	
; main.c    945	void ToEOL(void)
; main.c    946	{
	PUBLIC	_ToEOL
_ToEOL	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
;     i = R12
; 
; main.c    947	 unsigned int i=strlen(editline);
	MOV	R12,#POF _editline
	MOV	R13,#PAG _editline
	CALLS	SEG _strlen,_strlen
	MOV	R12,R4
; main.c    948	 if (i>255) curpos=0; else curpos=i;
	CMP	R12,#0FFh
	JMPR	cc_ULE,_185
	MOV	DPP0,#PAG _curpos
	NOP
	MOV	POF _curpos,ZEROS
	JMPR	cc_UC,_186
_185:
	MOV	DPP0,#PAG _curpos
	NOP
	MOV	POF _curpos,R12
_186:
; main.c    949	 if (curpos>=max_x) viewpos=curpos-max_x+1; else viewpos=0;
	MOV	DPP0,#PAG _curpos
	NOP
	MOV	R12,POF _curpos
	CMP	R12,POF _max_x
	JMPR	cc_ULT,_187
	SUB	R12,POF _max_x
	ADD	R12,#01h
	MOV	POF _viewpos,R12
	RETS
_187:
	MOV	DPP0,#PAG _viewpos
	NOP
	MOV	POF _viewpos,ZEROS
_188:
; main.c    950	}
	RETS
_ToEOL	ENDP
; main.c    951	
; main.c    952	void ToBOL(void)
; main.c    953	{
	PUBLIC	_ToBOL
_ToBOL	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c    954	 curpos=0;
	MOV	DPP0,#PAG _curpos
	NOP
	MOV	POF _curpos,ZEROS
; main.c    955	 viewpos=0;
	MOV	POF _viewpos,ZEROS
; main.c    956	}
	RETS
_ToBOL	ENDP
; main.c    957	
; main.c    958	void WordLeft(void)
; main.c    959	{
	PUBLIC	_WordLeft
_WordLeft	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c    960	 if (curpos==0) return;
	MOV	DPP0,#PAG _curpos
	NOP
	MOV	R12,POF _curpos
	JMPR	cc_Z,_205
; main.c    961	 for(;;)
_198:
_199:
; main.c    962	 {
; main.c    963	  if ((--curpos)==0) break;
	MOV	DPP0,#PAG _curpos
	NOP
	MOV	R12,POF _curpos
	SUB	R12,#01h
	MOV	POF _curpos,R12
	CMP	R12,#00h
	JMPR	cc_Z,_200
; main.c    964	  if ((editline[curpos-1]==' ')&&(editline[curpos]!=' ')) break;
	EXTP	#PAG _editline,#01h
	MOVB	RL1,[R12+#POF _editline-1]
	CMPB	RL1,#020h
	JMPR	cc_NE,_199
	EXTP	#PAG _editline,#01h
	MOVB	RL1,[R12+#POF _editline]
	CMPB	RL1,#020h
	JMPR	cc_EQ,_198
; main.c    965	 }
; main.c    966	 while(curpos<viewpos)
_200:
	JMPR	cc_UC,_204
_201:
; main.c    967	 {
; main.c    968	  if (viewpos>8) viewpos-=8; else viewpos=0;
	MOV	DPP0,#PAG _viewpos
	NOP
	MOV	R12,POF _viewpos
	CMP	R12,#08h
	JMPR	cc_ULE,_202
	SUB	R12,#08h
	MOV	POF _viewpos,R12
	JMPR	cc_UC,_204
_202:
	MOV	DPP0,#PAG _viewpos
	NOP
	MOV	POF _viewpos,ZEROS
_204:
	MOV	DPP0,#PAG _curpos
	NOP
	MOV	R12,POF _curpos
	CMP	R12,POF _viewpos
	JMPR	cc_ULT,_201
; main.c    969	 }
; main.c    970	}
_205:
	RETS
_WordLeft	ENDP
; main.c    971	
; main.c    972	void WordRight(void)
; main.c    973	{
	PUBLIC	_WordRight
_WordRight	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
;     &editline + curpos = R12R13
; 
; main.c    974	 if (!editline[curpos]) return;
	MOV	DPP0,#PAG _curpos
	NOP
	MOV	R12,POF _curpos
	EXTP	#PAG _editline,#01h
	MOVB	RL1,[R12+#POF _editline]
	JMPR	cc_Z,_218
; main.c    975	 for(;;)
_213:
_214:
; main.c    976	 {
; main.c    977	  curpos++;
	MOV	DPP0,#PAG _curpos
	MOV	R13,#PAG _editline
	MOV	R12,POF _curpos
	ADD	R12,#01h
	MOV	POF _curpos,R12
; main.c    978	  if (!editline[curpos]) break;
	MOV	R12,#POF _editline
	ADD	R12,POF _curpos
	EXTP	R13,#01h
	MOVB	RL1,[R12]
	JMPR	cc_Z,_215
; main.c    979	  if ((editline[curpos-1]==' ')&&(editline[curpos]!=' ')) break;
	MOV	R14,POF _curpos
	EXTP	#PAG _editline,#01h
	MOVB	RL1,[R14+#POF _editline-1]
	CMPB	RL1,#020h
	JMPR	cc_NE,_214
	EXTP	R13,#01h
	MOVB	RL1,[R12]
	CMPB	RL1,#020h
	JMPR	cc_EQ,_213
; main.c    980	 }
; main.c    981	 while((curpos-viewpos)>=max_x)
_215:
	JMPR	cc_UC,_217
_216:
; main.c    982	 {
; main.c    983	  viewpos+=8;
	MOV	DPP0,#PAG _viewpos
	NOP
	MOV	R12,POF _viewpos
	ADD	R12,#08h
	MOV	POF _viewpos,R12
_217:
	MOV	DPP0,#PAG _curpos
	NOP
	MOV	R12,POF _curpos
	SUB	R12,POF _viewpos
	CMP	R12,POF _max_x
	JMPR	cc_UGE,_216
; main.c    984	 }
; main.c    985	}
_218:
	RETS
_WordRight	ENDP
; main.c    986	
; main.c    987	void DrawInfo(void)
; main.c    988	{
	PUBLIC	_DrawInfo
_DrawInfo	PROC	FAR
	SUB	R0,#0100h
; Locals:
;     s = offset 0
; 
; Statics:
; 
; CSEs:
; 
; main.c    989	 char s[256];
; main.c    990	 FillRect(0,0,101,80,0);
	MOV	R12,#00h
	MOV	[-R0],R12
	MOV	R13,#00h
	MOV	R14,#065h
	MOV	R15,#050h
	CALLS	SEG _FillRect,_FillRect
; main.c    991	 xsprintf(s,(STR)"Time:\n%02d:%02d\n"
; main.c    992	 "Current line %lu\nTotal lines %lu\n\nCurrent file:",
; main.c    993	 _hour,_minute,curline,total_line);
	MOV	DPP0,#PAG _total_line
	ADD	R0,#02h
	MOV	R12,POF _total_line
	MOV	R13,POF (_total_line+2)
	MOV	[-R0],R13
	MOV	[-R0],R12
	MOV	R14,POF _curline
	MOV	R15,POF (_curline+2)
	MOV	[-R0],R15
	MOV	[-R0],R14
	EXTP	#PAG __minute,#01h
	MOV	R1,POF __minute
	MOV	[-R0],R1
	EXTP	#PAG __hour,#01h
	MOV	R2,POF __hour
	MOV	[-R0],R2
	MOV	R12,#0Ch
	ADD	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	R14,#POF _219
	MOV	R15,#PAG _219
	CALLS	SEG _xsprintf,_xsprintf
	ADD	R0,#0Ch
; main.c    994	 DrawString(0,0,101,56,(STR)s,0);
	MOV	R12,#00h
	MOV	[-R0],R12
	MOV	R13,#02h
	ADD	R13,R0
	AND	R13,#03FFFh
	MOV	R14,DPP1
	MOV	[-R0],R14
	MOV	[-R0],R13
	MOV	R13,#00h
	MOV	R14,#065h
	MOV	R15,#038h
	CALLS	SEG _DrawString,_DrawString
	ADD	R0,#06h
; main.c    995	 DrawString(0,56,101,24,filename,0);
	MOV	R12,#00h
	MOV	[-R0],R12
	MOV	R13,#POF _filename
	MOV	R14,#PAG _filename
	MOV	[-R0],R14
	MOV	[-R0],R13
	MOV	R13,#038h
	MOV	R14,#065h
	MOV	R15,#018h
	CALLS	SEG _DrawString,_DrawString
	ADD	R0,#0106h
; main.c    996	}
	RETS
_DrawInfo	ENDP
; main.c    997	
; main.c    998	//=============================================================================
; main.c    999	//Вывод на экран
; main.c   1000	//=============================================================================
; main.c   1001	void DrawScreen(void)
; main.c   1002	{
	PUBLIC	_DrawScreen
_DrawScreen	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	[-R0],R7
	MOV	[-R0],R6
; Locals:
;     s = offset 2
; 
; Statics:
; 
; CSEs:
;     y = offset 0
;     p = R8
;     my = R9
;     c = RL6
;     d = R9R6
;     y = R12
;     p1 = R7
;     f = R12
;     x = R13
; 
; main.c   1003	 unsigned int y;
; main.c   1004	 unsigned int p;
; main.c   1005	 unsigned char c;
; main.c   1006	 int f;
; main.c   1007	 char s[32];
; main.c   1008	 unsigned int my;
; main.c   1009	 if (disk_access)
	MOV	DPP0,#PAG _disk_access
	SUB	R0,#022h
	MOVB	RL1,POF _disk_access
	JMPA	cc_Z,_342
; main.c   1010	 {
; main.c   1011	  drawImage(0,0,8,8,&imgDiskAccess);
	MOV	R12,#POF _imgDiskAccess
	MOV	R13,#PAG _imgDiskAccess
	MOV	[-R0],R13
	MOV	[-R0],R12
	MOV	R12,#00h
	MOV	R13,#00h
	MOV	R14,#08h
	MOV	R15,#08h
	CALLS	SEG _drawImage,_drawImage
; main.c   1012	  if (draw_mode==2)
	MOV	DPP0,#PAG _draw_mode
	ADD	R0,#04h
	MOVB	RL6,POF _draw_mode
	CMPB	RL6,#02h
	JMPR	cc_NE,_337
; main.c   1013	  {
; main.c   1014	   xsprintf(s,(STR)"Goto line %lu...",curline);
	MOV	R8,POF _curline
	MOV	R9,POF (_curline+2)
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	R12,#06h
	ADD	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	R14,#POF _220
	MOV	R15,#PAG _220
	CALLS	SEG _xsprintf,_xsprintf
	ADD	R0,#04h
; main.c   1015	   FillRect(8,0,101-8,8,0);
	JMPR	cc_UC,_340
; main.c   1016	   DrawString(8,0,101-8,8,(STR)s,0);
; main.c   1017	   goto L_WELLCOME2;
; main.c   1018	  }
_337:
; main.c   1019	  if (disk_access==SAVE_FILE)
	MOV	DPP0,#PAG _disk_access
	NOP
	MOVB	RL6,POF _disk_access
	CMPB	RL6,#020h
	JMPR	cc_NE,_338
; main.c   1020	  {
; main.c   1021	   xsprintf(s,(STR)"Saving...");
	MOV	R12,#02h
	ADD	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	R14,#POF _221
	MOV	R15,#PAG _221
	CALLS	SEG _xsprintf,_xsprintf
; main.c   1022	   goto L_W1;
	JMPR	cc_UC,_340
; main.c   1023	  }
_338:
; main.c   1024	  if (disk_access==FIRSTLOAD)
	MOV	DPP0,#PAG _disk_access
	NOP
	MOVB	RL6,POF _disk_access
	CMPB	RL6,#01h
	JMPR	cc_NE,_341
; main.c   1025	  {
; main.c   1026	   xsprintf(s,(STR)"Line %lu...",curline);
	MOV	R8,POF _curline
	MOV	R9,POF (_curline+2)
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	R12,#06h
	ADD	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	R14,#POF _222
	MOV	R15,#PAG _222
	CALLS	SEG _xsprintf,_xsprintf
	ADD	R0,#04h
; main.c   1027	   L_W1:
_340:
; main.c   1028	   FillRect(8,0,101-8,8,0);
	MOV	R8,#00h
	MOV	[-R0],R8
	MOV	R12,#08h
	MOV	R13,R8
	MOV	R14,#05Dh
	MOV	R15,#08h
	CALLS	SEG _FillRect,_FillRect
; main.c   1029	   DrawString(8,0,101-8,8,(STR)s,0);
	MOV	R8,#00h
	MOV	[R0],R8
	MOV	R9,#04h
	ADD	R9,R0
	AND	R9,#03FFFh
	MOV	R6,DPP1
	MOV	[-R0],R6
	MOV	[-R0],R9
	MOV	R12,#08h
	MOV	R13,R8
	MOV	R14,#05Dh
	MOV	R15,#08h
	CALLS	SEG _DrawString,_DrawString
	ADD	R0,#06h
; main.c   1030	   goto L_WELLCOME2;
	JMPA	cc_UC,_376
; main.c   1031	  }
_341:
; main.c   1032	  if (draw_mode==255) goto L_WELLCOME;
	MOV	DPP0,#PAG _draw_mode
	NOP
	MOVBZ	R8,POF _draw_mode
	CMP	R8,#0FFh
	JMPA	cc_NE,_389
	JMPA	cc_UC,_374
; main.c   1033	 }
_342:
; main.c   1034	 else
; main.c   1035	 {
; main.c   1036	  switch(draw_mode)
	MOV	DPP0,#PAG _draw_mode
	NOP
	MOVB	RL6,POF _draw_mode
	CMPB	RL6,#01h
	JMPR	cc_EQ,_343
	CMPB	RL6,#02h
	JMPA	cc_EQ,_371
	CMPB	RL6,#04h
	JMPA	cc_EQ,_372
	CMPB	RL6,#0FFh
	JMPA	cc_EQ,_374
	CMPB	RL6,#00h
	JMPA	cc_EQ,_377
	JMPA	cc_UC,_386
; main.c   1037	  {
; main.c   1038	   case 1:
_343:
; main.c   1039	    my=max_y;
	MOV	DPP0,#PAG _max_y
	NOP
	MOV	R9,POF _max_y
; main.c   1040	    if (editmode) my-=4;
	MOV	R8,POF _editmode
	JMPR	cc_Z,_344
	SUB	R9,#04h
_344:
; main.c   1041	    memset(editline,0,256);
	MOV	R12,#POF _editline
	MOV	R13,#PAG _editline
	MOV	R14,#00h
	MOV	R15,#0100h
	CALLS	SEG _memset,_memset
; main.c   1042	    //Перерисовываем весь экран
; main.c   1043		y=curline-viewline;
	MOV	DPP0,#PAG _curline
	NOP
	MOV	R8,POF _curline
	SUB	R8,POF _viewline
	MOV	[R0],R8
; main.c   1044		p=usp;
	MOV	R8,POF _usp
; main.c   1045		if (dsp!=STKSZ) c=dstk[dsp]; else c=0; //Первый символ текущей строки - если буква - форматируем
	MOV	R6,POF _dsp
	CMP	R6,#04000h
	JMPR	cc_EQ,_345
	MOV	R7,R6
	EXTP	#PAG _dstk,#01h
	MOVB	RL6,[R7+#POF _dstk]
	JMPR	cc_UC,_346
_345:
	MOVB	RL6,#00h
; main.c   1046		while(y)
_346:
	JMPA	cc_UC,_352
_347:
; main.c   1047		{
; main.c   1048		 //Есть строки выше текущей
; main.c   1049	     p=bl_us(p);
	MOV	R12,R8
	CALLS	SEG _bl_us,_bl_us
	MOV	R8,R4
; main.c   1050	     if ((c>' ')&&(!(HISTORY.fmt&0x80))&&(cursor_off))
	CMPB	RL6,#020h
	JMPR	cc_ULE,_350
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOVB	RL6,POF (_HISTORY+129)
	JB	R6.7,_350
	MOV	DPP0,#PAG _cursor_off
	NOP
	MOVB	RL7,POF _cursor_off
	JMPR	cc_Z,_350
; main.c   1051		 drawFrmStkStr(ustk+p,--y,viewpos,-1);
	MOV	R12,#0FFFFh
	MOV	[-R0],R12
	MOV	R12,#POF _ustk
	MOV	R13,#PAG _ustk
	ADD	R12,R8
	MOV	R14,[R0+#02H]
	SUB	R14,#01h
	MOV	[R0+#02H],R14
	MOV	R15,POF _viewpos
	CALLS	SEG _drawFrmStkStr,_drawFrmStkStr
	ADD	R0,#02h
	JMPR	cc_UC,_351
_350:
; main.c   1052	     else
; main.c   1053	     drawStkStr(ustk+p,--y,viewpos,-1);
	MOV	R6,#0FFFFh
	MOV	[-R0],R6
	MOV	R12,#POF _ustk
	MOV	R13,#PAG _ustk
	ADD	R12,R8
	MOV	R7,[R0+#02H]
	SUB	R7,#01h
	MOV	[R0+#02H],R7
	MOV	DPP0,#PAG _viewpos
	MOV	R14,R7
	MOV	R15,POF _viewpos
	CALLS	SEG _drawStkStr,_drawStkStr
	ADD	R0,#02h
_351:
; main.c   1054		 c=ustk[p];
	EXTP	#PAG _ustk,#01h
	MOVB	RL6,[R8+#POF _ustk]
_352:
	MOV	R7,[R0]
	JMPR	cc_NZ,_347
; main.c   1055	    }
; main.c   1056	    y=curline-viewline;
	MOV	DPP0,#PAG _curline
	MOV	R12,#00h
	MOV	R8,POF _curline
	SUB	R8,POF _viewline
	MOV	[R0],R8
; main.c   1057		//Теперь печатаем от текущей вниз
; main.c   1058		p=dsp;
	MOV	R8,POF _dsp
; main.c   1059		f=0;
; main.c   1060		while(y!=(my))
	JMPA	cc_UC,_363
_353:
; main.c   1061		{
; main.c   1062	     if (p==STKSZ)
	CMP	R8,#04000h
	JMPR	cc_NE,_356
; main.c   1063		 {
; main.c   1064		  drawStkStr((STR)"<<EOF>>",y++,0,-1);
	MOV	R8,#0FFFFh
	MOV	[-R0],R8
	MOV	R12,#POF _223
	MOV	R13,#PAG _223
	MOV	R14,[R0+#02H]
	MOV	R6,[R0+#02H]
	ADD	R6,#01h
	MOV	[R0+#02H],R6
	MOV	R15,#00h
	CALLS	SEG _drawStkStr,_drawStkStr
	ADD	R0,#02h
; main.c   1065	      while(y!=my) drawStkStr("",y++,viewpos,-1);
	JMPR	cc_UC,_355
_354:
	MOV	R8,#0FFFFh
	MOV	[-R0],R8
	MOV	R12,#POF _224
	MOV	R14,[R0+#02H]
	MOV	R6,[R0+#02H]
	ADD	R6,#01h
	MOV	[R0+#02H],R6
	MOV	DPP0,#PAG _viewpos
	MOV	R13,#PAG _224
	MOV	R15,POF _viewpos
	CALLS	SEG _drawStkStr,_drawStkStr
	ADD	R0,#02h
_355:
	MOV	R8,[R0]
	CMP	R8,R9
	JMPR	cc_NE,_354
; main.c   1066	      break;
	JMPA	cc_UC,_364
; main.c   1067		 }
_356:
; main.c   1068		 else
; main.c   1069		 {
; main.c   1070		  unsigned int p1;
; main.c   1071	      p1=bl_ds(p);
	MOV	R6,R12
	MOV	R12,R8
	CALLS	SEG _bl_ds,_bl_ds
	MOV	R7,R4
	MOV	R12,R6
; main.c   1072		  if (p1!=STKSZ) c=dstk[p1]; else c=0; //Посл. строка не расширяется
	CMP	R7,#04000h
	JMPR	cc_EQ,_357
	EXTP	#PAG _dstk,#01h
	MOVB	RL6,[R7+#POF _dstk]
	JMPR	cc_UC,_358
_357:
	MOVB	RL6,#00h
_358:
; main.c   1073	      if ((c>' ')&&(!(HISTORY.fmt&0x80))&&(cursor_off))
	CMPB	RL6,#020h
	JMPR	cc_ULE,_361
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOVB	RL6,POF (_HISTORY+129)
	JB	R6.7,_361
	MOV	DPP0,#PAG _cursor_off
	NOP
	MOVB	RL1,POF _cursor_off
	JMPR	cc_Z,_361
; main.c   1074	 	  drawFrmStkStr(dstk+p,y++,viewpos,f);
	MOV	[-R0],R12
	MOV	R12,#POF _dstk
	MOV	R13,#PAG _dstk
	ADD	R12,R8
	MOV	R14,[R0+#02H]
	MOV	R8,[R0+#02H]
	ADD	R8,#01h
	MOV	[R0+#02H],R8
	MOV	R15,POF _viewpos
	CALLS	SEG _drawFrmStkStr,_drawFrmStkStr
	ADD	R0,#02h
	JMPR	cc_UC,_362
_361:
; main.c   1075		  else
; main.c   1076		  drawStkStr(dstk+p,y++,viewpos,f);
	MOV	[-R0],R12
	MOV	R12,#POF _dstk
	ADD	R12,R8
	MOV	R14,[R0+#02H]
	MOV	R8,[R0+#02H]
	ADD	R8,#01h
	MOV	[R0+#02H],R8
	MOV	DPP0,#PAG _viewpos
	MOV	R13,#PAG _dstk
	MOV	R15,POF _viewpos
	CALLS	SEG _drawStkStr,_drawStkStr
	ADD	R0,#02h
_362:
; main.c   1077		  p=p1;
	MOV	R8,R7
; main.c   1078		  f=-1;
	MOV	R12,#0FFFFh
_363:
	MOV	R6,[R0]
	CMP	R6,R9
	JMPA	cc_NE,_353
; main.c   1079		 }
; main.c   1080	    }
_364:
; main.c   1081	    //DrawCursor(curpos-viewpos,curline-viewline);
; main.c   1082		{
; main.c   1083		 //Рисуем скролл-бар
; main.c   1084		 char far *d=myscr+12; //Последний байт
	MOV	R9,#POF _myscr+12
; main.c   1085		 if (total_line)
	MOV	DPP0,#PAG _total_line
	MOV	R6,#PAG _myscr
	MOV	R8,POF (_total_line+2)
	OR	R8,POF _total_line
	JMPR	cc_Z,_365
; main.c   1086		 {
; main.c   1087	      y=((editmode?40:72)*curline)/total_line;
	MOV	R8,POF _editmode
	JMPR	cc_Z,_390
_391:
	MOV	R8,#028h
	JMPR	cc_UC,_392
_390:
	MOV	R8,#048h
_392:
	MOV	R4,R8
	MOV	R5,R4
	MOV	DPP0,#PAG _curline
	ASHR	R5,#0Fh
	MOV	R10,POF _curline
	MOV	R11,POF (_curline+2)
	CALLS	SEG __mul,__mul
	MOV	DPP0,#PAG _total_line
	NOP
	MOV	R10,POF _total_line
	MOV	R11,POF (_total_line+2)
	CALLS	SEG __udil,__udil
	MOV	[R0],R4
; main.c   1088		 }
	JMPR	cc_UC,_366
_365:
; main.c   1089		 else
; main.c   1090		 {
; main.c   1091		  y=0;
	MOV	R8,#00h
	MOV	[R0],R8
; main.c   1092		 }
_366:
; main.c   1093		 p=0;
	MOV	R8,#00h
; main.c   1094		 do
_367:
; main.c   1095		 {
; main.c   1096		  if ((p<y)||(p>(y+7)))
	MOV	R7,[R0]
	CMP	R8,R7
	JMPR	cc_ULT,_368
	ADD	R7,#07h
	CMP	R7,R8
	JMPR	cc_UGE,_369
_368:
; main.c   1097		  {
; main.c   1098		   *d=p&1?0x50:0x28;
	JNB	R8.0,_393
_394:
	MOVB	RL7,#050h
	JMPR	cc_UC,_395
_393:
	MOVB	RL7,#028h
_395:
	EXTP	R6,#01h
	MOVB	[R9],RL7
; main.c   1099	      }
	JMPR	cc_UC,_370
_369:
; main.c   1100		  else
; main.c   1101		  {
; main.c   1102		   *d=0x78;
	MOVB	RL7,#078h
	EXTP	R6,#01h
	MOVB	[R9],RL7
; main.c   1103	      }
_370:
; main.c   1104		  d+=13;
	ADD	R9,#0Dh
; main.c   1105		  p++;
	ADD	R8,#01h
; main.c   1106	     }
; main.c   1107		 while(p<80);
	CMP	R8,#050h
	JMPR	cc_ULT,_367
; main.c   1108	    }
; main.c   1109		if (editmode)
	MOV	DPP0,#PAG _editmode
	NOP
	MOV	R8,POF _editmode
	JMPA	cc_Z,_378
; main.c   1110		 drawImage(0,16,101,48,&MyScrHdr);
	MOV	R9,#POF _MyScrHdr
	MOV	R6,#PAG _MyScrHdr
	MOV	[-R0],R6
	MOV	[-R0],R9
	MOV	R12,#00h
	MOV	R13,#010h
	MOV	R14,#065h
	MOV	R15,#030h
	CALLS	SEG _drawImage,_drawImage
	ADD	R0,#04h
	JMPA	cc_UC,_379
; main.c   1111		else
; main.c   1112		 drawImage(0,0,101,80,&MyScrHdr);
; main.c   1113		cursor_cnt=3;
; main.c   1114		goto L_CURSOR;
; main.c   1115	   case 2:
_371:
; main.c   1116	    //Процесс перехода на строку
; main.c   1117	    {
; main.c   1118	     FillRect(0,0,101,8,0);
	MOV	R8,#00h
	MOV	[-R0],R8
	MOV	R12,R8
	MOV	R13,R8
	MOV	R14,#065h
	MOV	R15,#08h
	CALLS	SEG _FillRect,_FillRect
; main.c   1119	     xsprintf(s,(STR)"Goto line %lu...",curline);
	MOV	DPP0,#PAG _curline
	ADD	R0,#02h
	MOV	R8,POF _curline
	MOV	R9,POF (_curline+2)
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	R12,#06h
	ADD	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	R14,#POF _225
	MOV	R15,#PAG _225
	CALLS	SEG _xsprintf,_xsprintf
	ADD	R0,#04h
; main.c   1120	     DrawString(0,0,101,8,(STR)s,0);
	MOV	R8,#00h
	MOV	[-R0],R8
	MOV	R9,#04h
	ADD	R9,R0
	AND	R9,#03FFFh
	MOV	R6,DPP1
	MOV	[-R0],R6
	MOV	[-R0],R9
	MOV	R12,R8
	MOV	R13,R8
	MOV	R14,#065h
	MOV	R15,#08h
	CALLS	SEG _DrawString,_DrawString
	ADD	R0,#06h
; main.c   1121		 goto L_WELLCOME2;
	JMPR	cc_UC,_376
; main.c   1122	    }
; main.c   1123	    //return;
; main.c   1124	   case 4:
_372:
; main.c   1125	    //Экран информации
; main.c   1126		DrawInfo();
	CALLS	SEG _DrawInfo,_DrawInfo
; main.c   1127		return;
	JMPA	cc_UC,_389
; main.c   1128	   case 255:
; main.c   1129	    //Экран приветствия
; main.c   1130		L_WELLCOME:
_374:
; main.c   1131	    FillRect(0,0,101,8,0);
	MOV	R8,#00h
	MOV	[-R0],R8
	MOV	R12,R8
	MOV	R13,R8
	MOV	R14,#065h
	MOV	R15,#08h
	CALLS	SEG _FillRect,_FillRect
; main.c   1132		draw_mode=0;
	MOV	DPP0,#PAG _draw_mode
	ADD	R0,#02h
	MOVB	POF _draw_mode,ZEROS
; main.c   1133		L_WELLCOME2:
_376:
; main.c   1134		FillRect(0,8,101,80-8,0);
	MOV	R8,#00h
	MOV	[-R0],R8
	MOV	R12,R8
	MOV	R13,#08h
	MOV	R14,#065h
	MOV	R15,#048h
	CALLS	SEG _FillRect,_FillRect
; main.c   1135		DrawString(0,16,101,48,(STR)"Text viewer/editor\nversion 2.0\nCopyright(C)2005/2006\nby Rst7/CBSIE",0);
	MOV	R8,#00h
	MOV	[R0],R8
	MOV	R9,#POF _226
	MOV	R6,#PAG _226
	MOV	[-R0],R6
	MOV	[-R0],R9
	MOV	R12,R8
	MOV	R13,#010h
	MOV	R14,#065h
	MOV	R15,#030h
	CALLS	SEG _DrawString,_DrawString
	ADD	R0,#06h
; main.c   1136		DrawString(0,48,101,8,*(char far *)(0x3B960)==1?(STR)"26MHz":(STR)"13MHz",0);
	MOV	R8,#00h
	MOV	[-R0],R8
	MOV	R9,#03960h
	MOV	R6,#0Eh
	EXTP	R6,#01h
	MOVB	RL6,[R9]
	CMPB	RL6,#01h
	JMPR	cc_NE,_396
_397:
	MOV	R8,#POF _227
	MOV	R9,#PAG _227
	JMPR	cc_UC,_398
_396:
	MOV	R8,#POF _228
	MOV	R9,#PAG _228
_398:
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	R12,#00h
	MOV	R13,#030h
	MOV	R14,#065h
	MOV	R15,#08h
	CALLS	SEG _DrawString,_DrawString
	ADD	R0,#06h
; main.c   1137		{
; main.c   1138		 DrawString(0,56,101,24,filename,0);
	MOV	R8,#00h
	MOV	[-R0],R8
	MOV	R9,#POF _filename
	MOV	R6,#PAG _filename
	MOV	[-R0],R6
	MOV	[-R0],R9
	MOV	R12,R8
	MOV	R13,#038h
	MOV	R14,#065h
	MOV	R15,#018h
	CALLS	SEG _DrawString,_DrawString
	ADD	R0,#06h
; main.c   1139	    }
; main.c   1140		return;
	JMPA	cc_UC,_389
; main.c   1141	   case 0:
_377:
; main.c   1142	    //Курсор
; main.c   1143		if (cursor_cnt)
	MOV	DPP0,#PAG _cursor_cnt
	NOP
	MOVB	RL6,POF _cursor_cnt
	CMPB	RL6,#00h
	JMPR	cc_Z,_380
; main.c   1144		{
; main.c   1145		 cursor_cnt--;
	MOVB	RL6,POF _cursor_cnt
	SUBB	RL6,#01h
	MOVB	POF _cursor_cnt,RL6
; main.c   1146		 break;
	JMPA	cc_UC,_386
_378:
	MOV	R8,#POF _MyScrHdr
	MOV	R9,#PAG _MyScrHdr
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	R12,#00h
	MOV	R13,#00h
	MOV	R14,#065h
	MOV	R15,#050h
	CALLS	SEG _drawImage,_drawImage
	ADD	R0,#04h
_379:
	MOV	DPP0,#PAG _cursor_cnt
	MOVB	RL6,#03h
	MOVB	POF _cursor_cnt,RL6
; main.c   1147	    }
; main.c   1148		L_CURSOR:
_380:
; main.c   1149	    {
; main.c   1150	     unsigned int x=curpos-viewpos;
	MOV	DPP0,#PAG _curpos
	NOP
	MOV	R13,POF _curpos
	SUB	R13,POF _viewpos
; main.c   1151	     unsigned int y=curline-viewline;
	MOV	R12,POF _curline
	SUB	R12,POF _viewline
; main.c   1152		 my=max_y;
	MOV	R9,POF _max_y
; main.c   1153		 if (editmode)
	MOV	R8,POF _editmode
	JMPR	cc_Z,_381
; main.c   1154		 {
; main.c   1155		  my-=2;
	SUB	R9,#02h
; main.c   1156		  y+=2;
	ADD	R12,#02h
; main.c   1157		 }
_381:
; main.c   1158	     if ((x<max_x)&&(y<my)&&(!cursor_off))
	MOV	DPP0,#PAG _max_x
	NOP
	CMP	R13,POF _max_x
	JMPR	cc_UGE,_386
	CMP	R12,R9
	JMPR	cc_UGE,_386
	MOVB	RL6,POF _cursor_off
	JMPR	cc_NZ,_386
; main.c   1159	     {
; main.c   1160	      FillRect(x*font_size,y*8,font_size,8,1);
	MOV	R8,#01h
	MOV	[-R0],R8
	MOVBZ	R9,POF _font_size
	MULU	R13,R9
	MOV	R9,R12
	MOV	R12,MDL
	MOV	R13,R9
	SHL	R13,#03h
	MOVBZ	R14,POF _font_size
	MOV	R15,#08h
	CALLS	SEG _FillRect,_FillRect
	ADD	R0,#02h
; main.c   1161	     }
; main.c   1162		}
; main.c   1163		break;
; main.c   1164	  }
_386:
; main.c   1165	  draw_mode=0;
	MOV	DPP0,#PAG _draw_mode
	NOP
	MOVB	POF _draw_mode,ZEROS
; main.c   1166	 } 
; main.c   1167	 return;
; main.c   1168	}
_389:
	ADD	R0,#022h
	MOV	R6,[R0+]
	MOV	R7,[R0+]
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_DrawScreen	ENDP
; main.c   1169	
; main.c   1170	void DrawLoadMenu(void);
; main.c   1171	void DrawSoftMenu(void);
; main.c   1172	
; main.c   1173	
; main.c   1174	unsigned int IsFocus(void far *data)
; main.c   1175	{
	PUBLIC	_IsFocus
_IsFocus	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
;     data = R12R13
;     id = R14
; 
; main.c   1176	 int id;
; main.c   1177	 if (((int far *)data)[0x10]) return 0; //Есть меню поверх
	EXTP	R13,#01h
	MOV	R14,[R12+#020H]
	JMPR	cc_NZ,_406
; main.c   1178	 if (((int far *)data)[0x0A]) return 0; //Есть модальное окно поверх
	EXTP	R13,#01h
	MOV	R14,[R12+#014H]
	JMPR	cc_NZ,_406
; main.c   1179	 id=(*((int far * far *)(0x37*0x4000L+0x327A)))[6];
	MOV	R15,#0327Ah
	MOV	R1,#037h
	EXTP	R1,#02h
	MOV	R2,[R15+]
	MOV	R3,[R15]
	EXTP	R3,#01h
	MOV	R14,[R2+#0CH]
; main.c   1180	 if (((int far *)data)[6]!=id) return 0; //Есть диалог поверх
	EXTP	R13,#01h
	MOV	R15,[R12+#0CH]
	CMP	R15,R14
	JMPR	cc_EQ,_407
_406:
	MOV	R4,#00h
	RETS
_407:
; main.c   1181	 //if (((int far *)data)[6]!=GetBotDialogWSK_ID()) return 0; //Есть диалог поверх
; main.c   1182	 return(1);
	MOV	R4,#01h
; main.c   1183	}
_408:
	RETS
_IsFocus	ENDP
; main.c   1184	
; main.c   1185	void doCurRight(void)
; main.c   1186	{
	PUBLIC	_doCurRight
_doCurRight	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   1187	    if (cursor_off)
	MOV	DPP0,#PAG _cursor_off
	NOP
	MOVB	RL1,POF _cursor_off
	JMPR	cc_Z,_414
; main.c   1188		{
; main.c   1189		 if (curpos>=(256-8)) return;
	MOV	R12,POF _curpos
	CMP	R12,#0F8h
	JMPR	cc_UGE,_418
; main.c   1190		 curpos+=8;
	ADD	R12,#08h
	MOV	POF _curpos,R12
; main.c   1191		 viewpos+=8;
	JMPR	cc_UC,_415
; main.c   1192		 draw_mode=1;
; main.c   1193		 return;
; main.c   1194	    }
_414:
; main.c   1195	    if (curpos>=256) return;
	MOV	DPP0,#PAG _curpos
	NOP
	MOV	R12,POF _curpos
	CMP	R12,#0100h
	JMPR	cc_UGE,_418
; main.c   1196	    curpos++;
	ADD	R12,#01h
	MOV	POF _curpos,R12
; main.c   1197	    if ((curpos-viewpos)>=max_x)
	SUB	R12,POF _viewpos
	CMP	R12,POF _max_x
	JMPR	cc_ULT,_416
; main.c   1198	    {
; main.c   1199	     viewpos+=8;
_415:
	MOV	DPP0,#PAG _viewpos
	NOP
	MOV	R12,POF _viewpos
	ADD	R12,#08h
	MOV	POF _viewpos,R12
; main.c   1200	    }
_416:
; main.c   1201	    draw_mode=1;
	MOV	DPP0,#PAG _draw_mode
	MOVB	RL1,#01h
	MOVB	POF _draw_mode,RL1
; main.c   1202	}
_418:
	RETS
_doCurRight	ENDP
; main.c   1203	
; main.c   1204	void doCurLeft(void)
; main.c   1205	{
	PUBLIC	_doCurLeft
_doCurLeft	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   1206	    if (cursor_off)
	MOV	DPP0,#PAG _cursor_off
	NOP
	MOVB	RL1,POF _cursor_off
	JMPR	cc_Z,_423
; main.c   1207		{
; main.c   1208		 if (curpos<8)
	MOV	R12,POF _curpos
	CMP	R12,#08h
	JMPR	cc_UGE,_419
; main.c   1209		  curpos=0;
	MOV	POF _curpos,ZEROS
	JMPR	cc_UC,_420
_419:
; main.c   1210		 else
; main.c   1211		  curpos-=8;
	MOV	DPP0,#PAG _curpos
	NOP
	MOV	R12,POF _curpos
	SUB	R12,#08h
	MOV	POF _curpos,R12
_420:
; main.c   1212		 if (viewpos<8)
	MOV	DPP0,#PAG _viewpos
	NOP
	MOV	R12,POF _viewpos
	CMP	R12,#08h
	JMPR	cc_UGE,_421
; main.c   1213		  viewpos=0;
	MOV	POF _viewpos,ZEROS
	JMPR	cc_UC,_422
_421:
; main.c   1214		 else
; main.c   1215		  viewpos-=8;
	MOV	DPP0,#PAG _viewpos
	NOP
	MOV	R12,POF _viewpos
	SUB	R12,#08h
	MOV	POF _viewpos,R12
_422:
; main.c   1216		 draw_mode=1;
	MOV	DPP0,#PAG _draw_mode
	MOVB	RL1,#01h
	MOVB	POF _draw_mode,RL1
; main.c   1217		 return;
	RETS
; main.c   1218	    }
_423:
; main.c   1219	    if (curpos==0) return;
	MOV	DPP0,#PAG _curpos
	NOP
	MOV	R12,POF _curpos
	JMPR	cc_Z,_428
; main.c   1220	    draw_mode=1;
	MOVB	RL1,#01h
	MOVB	POF _draw_mode,RL1
; main.c   1221	    curpos--;
	SUB	R12,#01h
	MOV	POF _curpos,R12
; main.c   1222	    if (curpos>=viewpos) return;
	CMP	R12,POF _viewpos
	JMPR	cc_UGE,_428
; main.c   1223	    if (viewpos>8) viewpos-=8; else viewpos=0;
	MOV	R13,POF _viewpos
	CMP	R13,#08h
	JMPR	cc_ULE,_424
	SUB	R13,#08h
	MOV	POF _viewpos,R13
	RETS
_424:
	MOV	DPP0,#PAG _viewpos
	NOP
	MOV	POF _viewpos,ZEROS
; main.c   1224	}
_428:
	RETS
_doCurLeft	ENDP
; main.c   1225	
; main.c   1226	void insline(void)
; main.c   1227	{
	PUBLIC	_insline
_insline	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   1228	 dstk[--dsp]=0;
	MOV	DPP0,#PAG _dsp
	MOVB	RL1,#00h
	MOV	R12,POF _dsp
	SUB	R12,#01h
	MOV	POF _dsp,R12
	EXTP	#PAG _dstk,#01h
	MOVB	[R12+#POF _dstk],RL1
; main.c   1229	 total_line++;
	MOV	DPP0,#PAG _total_line
	MOV	R12,#01h
	ADD	POF _total_line,R12
	ADDC	POF (_total_line+2),ZEROS
; main.c   1230	 GeneralFunc(1);
	JMPS	SEG _GeneralFunc,_GeneralFunc
; main.c   1231	}
	RETV
_insline	ENDP
; main.c   1232	
; main.c   1233	void delline(void)
; main.c   1234	{
	PUBLIC	_delline
_delline	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   1235	 if (dsp!=STKSZ)
	MOV	DPP0,#PAG _dsp
	NOP
	MOV	R12,POF _dsp
	CMP	R12,#04000h
	JMPR	cc_EQ,_429
; main.c   1236	 {
; main.c   1237	  dsp=bl_ds(dsp);
	CALLS	SEG _bl_ds,_bl_ds
	MOV	DPP0,#PAG _dsp
	MOV	R12,#01h
	MOV	POF _dsp,R4
; main.c   1238	  total_line--;
	SUB	POF _total_line,R12
	SUBC	POF (_total_line+2),ZEROS
; main.c   1239	 }
_429:
; main.c   1240	 GeneralFunc(1);
	MOV	R12,#01h
	JMPS	SEG _GeneralFunc,_GeneralFunc
; main.c   1241	}
	RETV
_delline	ENDP
; main.c   1242	
; main.c   1243	void splitline(void)
; main.c   1244	{
	PUBLIC	_splitline
_splitline	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   1245	 if ((curpos<=strlen(dstk+dsp))&&(dsp!=STKSZ))
	MOV	R12,#POF _dstk
	MOV	DPP0,#PAG _dsp
	MOV	R13,#PAG _dstk
	ADD	R12,POF _dsp
	CALLS	SEG _strlen,_strlen
	MOV	DPP0,#PAG _curpos
	NOP
	CMP	R4,POF _curpos
	JMPA	cc_ULT,_433
	MOV	R12,POF _dsp
	CMP	R12,#04000h
	JMPA	cc_EQ,_433
; main.c   1246	 {
; main.c   1247	  while(curpos)
	JMPR	cc_UC,_431
_430:
; main.c   1248	  {
; main.c   1249	   ustk[usp++]=dstk[dsp++];
	MOV	DPP0,#PAG _dsp
	NOP
	MOV	R12,POF _dsp
	MOV	R13,POF _dsp
	ADD	R13,#01h
	MOV	POF _dsp,R13
	EXTP	#PAG _dstk,#01h
	MOVB	RL1,[R12+#POF _dstk]
	MOV	R12,POF _usp
	MOV	R14,POF _usp
	ADD	R14,#01h
	MOV	POF _usp,R14
	EXTP	#PAG _ustk,#01h
	MOVB	[R12+#POF _ustk],RL1
; main.c   1250	   curpos--;
	MOV	DPP0,#PAG _curpos
	NOP
	MOV	R12,POF _curpos
	SUB	R12,#01h
	MOV	POF _curpos,R12
_431:
	MOV	DPP0,#PAG _curpos
	NOP
	MOV	R12,POF _curpos
	JMPR	cc_NZ,_430
; main.c   1251	  }
; main.c   1252	  viewpos=0;
	MOV	POF _viewpos,ZEROS
; main.c   1253	  ustk[usp++]=0;
	MOVB	RL1,#00h
	MOV	R13,POF _usp
	MOV	R14,POF _usp
	ADD	R14,#01h
	MOV	POF _usp,R14
	EXTP	#PAG _ustk,#01h
	MOVB	[R13+#POF _ustk],RL1
; main.c   1254	  total_line++;
	MOV	DPP0,#PAG _total_line
	MOV	R12,#01h
	ADD	POF _total_line,R12
	ADDC	POF (_total_line+2),ZEROS
; main.c   1255	  curline++;
	ADD	POF _curline,R12
	ADDC	POF (_curline+2),ZEROS
; main.c   1256	 }
_433:
; main.c   1257	 GeneralFunc(1);
	MOV	R12,#01h
	JMPS	SEG _GeneralFunc,_GeneralFunc
; main.c   1258	}
	RETV
_splitline	ENDP
; main.c   1259	
; main.c   1260	void joinlines(void)
; main.c   1261	{
	PUBLIC	_joinlines
_joinlines	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
;     p = R12
; 
; main.c   1262	 unsigned int p=bl_ds(dsp);
	MOV	DPP0,#PAG _dsp
	NOP
	MOV	R12,POF _dsp
	CALLS	SEG _bl_ds,_bl_ds
	MOV	R12,R4
; main.c   1263	 if (p!=STKSZ)
	CMP	R12,#04000h
	JMPR	cc_EQ,_439
; main.c   1264	 {
; main.c   1265	  p--;
	JMPR	cc_UC,_438
; main.c   1266	  while(p!=dsp)
_437:
; main.c   1267	  {
; main.c   1268	   dstk[p]=dstk[p-1];
	EXTP	#PAG _dstk,#02h
	MOVB	RL1,[R12+#POF _dstk-1]
	MOVB	[R12+#POF _dstk],RL1
; main.c   1269	   p--;
_438:
	MOV	DPP0,#PAG _dsp
	SUB	R12,#01h
	CMP	R12,POF _dsp
	JMPR	cc_NE,_437
; main.c   1270	  }
; main.c   1271	  dsp++;
	MOV	R12,POF _dsp
	ADD	R12,#01h
	MOV	POF _dsp,R12
; main.c   1272	  total_line--;
	MOV	R13,#01h
	SUB	POF _total_line,R13
	SUBC	POF (_total_line+2),ZEROS
; main.c   1273	 }
_439:
; main.c   1274	 GeneralFunc(1);
	MOV	R12,#01h
	JMPS	SEG _GeneralFunc,_GeneralFunc
; main.c   1275	}
	RETV
_joinlines	ENDP
; main.c   1276	
; main.c   1277	void instime(void)
; main.c   1278	{
	PUBLIC	_instime
_instime	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   1279	 usp+=xsprintf(ustk+usp,"%02d:%02d",_hour,_minute)+1;
	EXTP	#PAG __minute,#01h
	MOV	R12,POF __minute
	MOV	[-R0],R12
	EXTP	#PAG __hour,#01h
	MOV	R13,POF __hour
	MOV	[-R0],R13
	MOV	R12,#POF _ustk
	MOV	DPP0,#PAG _usp
	MOV	R13,#PAG _ustk
	ADD	R12,POF _usp
	MOV	R14,#POF _440
	MOV	R15,#PAG _440
	CALLS	SEG _xsprintf,_xsprintf
	ADD	R0,#04h
	MOV	DPP0,#PAG _usp
	ADD	R4,#01h
	MOV	R12,POF _usp
	ADD	R12,R4
	MOV	POF _usp,R12
; main.c   1280	 curline++;
	MOV	R13,#01h
	ADD	POF _curline,R13
	ADDC	POF (_curline+2),ZEROS
; main.c   1281	 total_line++;
	ADD	POF _total_line,R13
	ADDC	POF (_total_line+2),ZEROS
; main.c   1282	 GeneralFunc(1);
	MOV	R12,R13
	JMPS	SEG _GeneralFunc,_GeneralFunc
; main.c   1283	}
	RETV
_instime	ENDP
; main.c   1284	
; main.c   1285	void insdate(void)
; main.c   1286	{
	PUBLIC	_insdate
_insdate	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   1287	 usp+=xsprintf(ustk+usp,"%02d-%02d-%04d",_day,_month,_year)+1;
	EXTP	#PAG __year,#01h
	MOV	R12,POF __year
	MOV	[-R0],R12
	EXTP	#PAG __month,#01h
	MOV	R13,POF __month
	MOV	[-R0],R13
	EXTP	#PAG __day,#01h
	MOV	R14,POF __day
	MOV	[-R0],R14
	MOV	R12,#POF _ustk
	MOV	DPP0,#PAG _usp
	MOV	R13,#PAG _ustk
	ADD	R12,POF _usp
	MOV	R14,#POF _441
	MOV	R15,#PAG _441
	CALLS	SEG _xsprintf,_xsprintf
	ADD	R0,#06h
	MOV	DPP0,#PAG _usp
	ADD	R4,#01h
	MOV	R12,POF _usp
	ADD	R12,R4
	MOV	POF _usp,R12
; main.c   1288	 curline++;
	MOV	R13,#01h
	ADD	POF _curline,R13
	ADDC	POF (_curline+2),ZEROS
; main.c   1289	 total_line++;
	ADD	POF _total_line,R13
	ADDC	POF (_total_line+2),ZEROS
; main.c   1290	 GeneralFunc(1);
	MOV	R12,R13
	JMPS	SEG _GeneralFunc,_GeneralFunc
; main.c   1291	}
	RETV
_insdate	ENDP
; main.c   1292	
; main.c   1293	void paste(void)
; main.c   1294	{
	PUBLIC	_paste
_paste	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   1295	 clip_pasted=1;
	MOV	DPP0,#PAG _clip_pasted
	MOV	R12,#01h
	MOV	POF _clip_pasted,R12
; main.c   1296	 GeneralFunc(1);
	JMPS	SEG _GeneralFunc,_GeneralFunc
; main.c   1297	}
	RETV
_paste	ENDP
; main.c   1298	
; main.c   1299	//void cliperase(void)
; main.c   1300	//{
; main.c   1301	// FileErase((STR)clipfile);
; main.c   1302	//}
; main.c   1303	
; main.c   1304	void clearclipb(void)
; main.c   1305	{
	PUBLIC	_clearclipb
_clearclipb	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   1306	// FilesysICall(cliperase);
; main.c   1307	 clip_pasted=1;
	MOV	DPP0,#PAG _clip_pasted
	MOV	R12,#01h
	MOV	POF _clip_pasted,R12
; main.c   1308	 GeneralFunc(1);
	JMPS	SEG _GeneralFunc,_GeneralFunc
; main.c   1309	}
	RETV
_clearclipb	ENDP
; main.c   1310	
; main.c   1311	static const STR emenu_ExtendedSTR[]=
MAIN_2_PR	ENDS

MAIN_3_FC	SECTION	DATA
_emenu_ExtendedSTR	LABEL	WORD
	DPPTR	_442,_443,_444,_445,_446
	DPPTR	_447,_448,_449
; main.c   1312	{
; main.c   1313	 "Insert line",
; main.c   1314	 "Delete line",
; main.c   1315	 "Split line",
; main.c   1316	 "Join lines",
; main.c   1317	 "Insert time",
; main.c   1318	 "Insert date",
; main.c   1319	 "Paste",
; main.c   1320	 "Clear clipb"
; main.c   1321	};
; main.c   1322	
; main.c   1323	static const struct ITEMSDATA far emenu_ITEMS[]=
_emenu_ITEMS	LABEL	WORD
	DW	00h,00h
	DW	0E27h,0E27h,00h
	DW	03C06h,02EBh
	DW	03h,0D0h
	DW	00h,00h
	DW	0E28h,0E28h,00h
	DW	03C06h,02EBh
	DW	03h,0D0h
	DW	00h,00h
	DW	0E29h,0E29h,00h
	DW	03C06h,02EBh
	DW	03h,0D0h
	DW	00h,00h
	DW	0E2Ah,0E2Ah,00h
	DW	03C06h,02EBh
	DW	03h,0D0h
	DW	00h,00h
	DW	0E2Bh,0E2Bh,00h
	DW	03C06h,02EBh
	DW	03h,0D0h
	DW	00h,00h
	DW	0E2Ch,0E2Ch,00h
	DW	03C06h,02EBh
	DW	03h,0D0h
	DW	00h,00h
	DW	0E2Dh,0E2Dh,00h
	DW	03C06h,02EBh
	DW	03h,0D0h
	DW	00h,00h
	DW	0E2Eh,0E2Eh,00h
	DW	03C06h,02EBh
	DW	03h,0D0h
; main.c   1324	{
; main.c   1325	 NULL,0xE27,0xE27,0,(void far *)0xBAFC06,3,0xD0,
; main.c   1326	 NULL,0xE28,0xE28,0,(void far *)0xBAFC06,3,0xD0,
; main.c   1327	 NULL,0xE29,0xE29,0,(void far *)0xBAFC06,3,0xD0,
; main.c   1328	 NULL,0xE2A,0xE2A,0,(void far *)0xBAFC06,3,0xD0,
; main.c   1329	 NULL,0xE2B,0xE2B,0,(void far *)0xBAFC06,3,0xD0,
; main.c   1330	 NULL,0xE2C,0xE2C,0,(void far *)0xBAFC06,3,0xD0,
; main.c   1331	 NULL,0xE2D,0xE2D,0,(void far *)0xBAFC06,3,0xD0,
; main.c   1332	 NULL,0xE2E,0xE2E,0,(void far *)0xBAFC06,3,0xD0
; main.c   1333	};
; main.c   1334	
; main.c   1335	static const struct ITEMSHNDL far emenu_HNDLS[]=
_emenu_HNDLS	LABEL	WORD
	DSPTR	_insline,_delline,_splitline,_joinlines,_instime
	DSPTR	_insdate,_paste,_clearclipb
; main.c   1336	{
; main.c   1337	 insline,
; main.c   1338	 delline,
; main.c   1339	 splitline,
; main.c   1340	 joinlines,
; main.c   1341	 instime,
; main.c   1342	 insdate,
; main.c   1343	 paste,
; main.c   1344	 clearclipb
; main.c   1345	};
; main.c   1346	
; main.c   1347	static const struct MENUHEADER far emenu_HDR=
_emenu_HDR	LABEL	WORD
	DW	05h,09h,05Fh,015h
	DW	00h,00h
	DW	02F5h,07FFFh
; main.c   1348	{
; main.c   1349	 5,9,95,21,NULL,0x2F5,0x7FFF 
; main.c   1350	};
; main.c   1351	
; main.c   1352	static const struct MENUSTRUCT far emenu_STRUCT=
_emenu_STRUCT	LABEL	WORD
	DW	00h,00h,00h,00h,00h,00h,00h,00h
	DW	03C02h,02EBh,03BFCh,02EBh
	DW	048h,00h
	DW	00h,00h
	DPPTR	_emenu_ITEMS,_emenu_HNDLS
	DW	08h
; main.c   1353	{
; main.c   1354	 NULL,NULL,NULL,NULL,
; main.c   1355	 (char far*)0xBAFC02,(char far*)0xBAFBFC,
; main.c   1356	 0x48,0x00,
; main.c   1357	 NULL,
; main.c   1358	 (struct ITEMSDATA far*)&emenu_ITEMS,
; main.c   1359	 (struct ITEMSHNDL far*)&emenu_HNDLS,
; main.c   1360	 8
; main.c   1361	};
; main.c   1362	
; main.c   1363	int e_OnKey2(void far *data, int far *msg)
; main.c   1364	{
	PUBLIC	_e_OnKey2
MAIN_3_FC	ENDS

MAIN_2_PR	SECTION	CODE
_e_OnKey2	PROC	FAR
	MOV	[-R0],R8
; Locals:
; 
; Statics:
; 
; CSEs:
;     p = R8
;     msg = R14R15
; 
; main.c   1365	 int p=msg[1];
	EXTP	R15,#01h
	MOV	R8,[R14+#02H]
; main.c   1366	 if (p==0x2F)
	CMP	R8,#02Fh
	JMPR	cc_NE,_450
; main.c   1367	 {
; main.c   1368	  //Создаем меню редактора
; main.c   1369	  setExtSIDTable(emenu_ExtendedSTR);
	MOV	R12,#POF _emenu_ExtendedSTR
	MOV	R13,#PAG _emenu_ExtendedSTR
	CALLS	SEG _setExtSIDTable,_setExtSIDTable
; main.c   1370	  CreateMenu02(menu_options,0,0,
; main.c   1371	               (struct MENUSTRUCT far*)&emenu_STRUCT,
; main.c   1372	               (struct MENUHEADER far*)&emenu_HDR,
; main.c   1373	               0,0,0,0);
	MOV	R12,#00h
	MOV	R13,#00h
	MOV	[-R0],R13
	MOV	[-R0],R12
	MOV	R14,#00h
	MOV	R15,#00h
	MOV	[-R0],R15
	MOV	[-R0],R14
	MOV	R1,#00h
	MOV	R2,#00h
	MOV	[-R0],R2
	MOV	[-R0],R1
	MOV	R3,#00h
	MOV	R4,#00h
	MOV	[-R0],R4
	MOV	[-R0],R3
	MOV	R5,#POF _emenu_HDR
	MOV	R10,#PAG _emenu_HDR
	MOV	[-R0],R10
	MOV	[-R0],R5
	MOV	R11,#POF _emenu_STRUCT
	MOV	R12,#PAG _emenu_STRUCT
	MOV	[-R0],R12
	MOV	[-R0],R11
	MOV	R12,#01h
	MOV	R13,#00h
	MOV	R14,#00h
	CALLS	SEG _CreateMenu02,_CreateMenu02
	ADD	R0,#018h
; main.c   1374	 }
_450:
; main.c   1375	 if ((p==0x21)||(p==0x20)||(p==0x25)||(p==0x24)||(p==0x0E)||(p==0x0D)||(p==0x2F))
	CMP	R8,#021h
	JMPR	cc_EQ,_456
	CMP	R8,#020h
	JMPR	cc_EQ,_456
	CMP	R8,#025h
	JMPR	cc_EQ,_456
	CMP	R8,#024h
	JMPR	cc_EQ,_456
	CMP	R8,#0Eh
	JMPR	cc_EQ,_456
	CMP	R8,#0Dh
	JMPR	cc_EQ,_456
	CMP	R8,#02Fh
	JMPR	cc_NE,_457
_456:
; main.c   1376	 {
; main.c   1377	  editmode=p;
	MOV	DPP0,#PAG _editmode
	MOV	R4,#01h
	MOV	POF _editmode,R8
; main.c   1378	  return(1);
	JMPR	cc_UC,_458
; main.c   1379	 }
_457:
; main.c   1380	 data=data;
; main.c   1381	 return(0);
	MOV	R4,#00h
; main.c   1382	}
_458:
	MOV	R8,[R0+]
	RETS
_e_OnKey2	ENDP
; main.c   1383	
; main.c   1384	void e_redraw(void far *data)
; main.c   1385	{
	PUBLIC	_e_redraw
_e_redraw	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	[-R0],R7
	MOV	[-R0],R6
	MOV	R6,R13
; Locals:
; 
; Statics:
; 
; CSEs:
;     p = R8
;     sz = R9
;     ecp = R8
;     es = R6R7
;     data = R9R6
;     wc = R12
; 
; main.c   1386	 WS_HDR far *es;
; main.c   1387	 unsigned int sz;
; main.c   1388	 unsigned int p;
; main.c   1389	 int ecp;
; main.c   1390	
; main.c   1391	 if (editmode==1)
	MOV	DPP0,#PAG _editmode
	MOV	R9,R12
	MOV	R12,POF _editmode
	CMP	R12,#01h
	JMPR	cc_NE,_459
; main.c   1392	 {
; main.c   1393	  ((int far *)data)[20]=curpos+1;
	MOV	R13,POF _curpos
	ADD	R13,#01h
	EXTP	R6,#01h
	MOV	[R9+#028H],R13
; main.c   1394	  editmode=2;
	MOV	DPP0,#PAG _editmode
	MOV	R8,#02h
	MOV	POF _editmode,R8
; main.c   1395	 }
_459:
; main.c   1396	 ecp=((int far *)data)[20];
	EXTP	R6,#01h
	MOV	R8,[R9+#028H]
; main.c   1397	 ecp--;
	SUB	R8,#01h
; main.c   1398	 while(ecp>curpos) doCurRight();
	JMPR	cc_UC,_461
_460:
	CALLS	SEG _doCurRight,_doCurRight
_461:
	MOV	DPP0,#PAG _curpos
	NOP
	CMP	R8,POF _curpos
	JMPR	cc_UGT,_460
; main.c   1399	 while(ecp<curpos) doCurLeft();
	JMPR	cc_UC,_463
_462:
	CALLS	SEG _doCurLeft,_doCurLeft
_463:
	MOV	DPP0,#PAG _curpos
	NOP
	CMP	R8,POF _curpos
	JMPR	cc_ULT,_462
; main.c   1400	
; main.c   1401	 es=((void far * far *)data)[8];
	MOV	R8,R6
	EXTP	R8,#02h
	MOV	R6,[R9+#020H]
	MOV	R7,[R9+#022H]
; main.c   1402	 sz=WSTR_Len(es)-11;
	MOV	R12,R6
	MOV	R13,R7
	CALLS	SEG _WSTR_Len,_WSTR_Len
	MOV	R9,R4
	SUB	R9,#0Bh
; main.c   1403	 p=0;
	MOV	R8,#00h
; main.c   1404	 while((p<255)&&(p<sz))
	JMPR	cc_UC,_465
_464:
; main.c   1405	 {
; main.c   1406	  int wc=WString_GetChar(es,p+12);
	MOV	R12,R6
	MOV	R13,R7
	MOV	R14,R8
	ADD	R14,#0Ch
	CALLS	SEG _WString_GetChar,_WString_GetChar
	MOV	R12,R4
; main.c   1407	  editline[p]=char16to8(wc);
	CALLS	SEG _char16to8,_char16to8
	EXTP	#PAG _editline,#01h
	MOVB	[R8+#POF _editline],RL4
; main.c   1408	  p++;
	ADD	R8,#01h
_465:
	CMP	R8,#0FFh
	JMPR	cc_UGE,_466
	CMP	R8,R9
	JMPR	cc_ULT,_464
_466:
; main.c   1409	 }
; main.c   1410	 editline[p]=0;
	MOVB	RL6,#00h
	EXTP	#PAG _editline,#01h
	MOVB	[R8+#POF _editline],RL6
; main.c   1411	 if ((sz=dsp)==STKSZ) total_line++;
	MOV	DPP0,#PAG _dsp
	NOP
	MOV	R9,POF _dsp
	CMP	R9,#04000h
	JMPR	cc_NE,_467
	MOV	R7,#01h
	ADD	POF _total_line,R7
	ADDC	POF (_total_line+2),ZEROS
_467:
; main.c   1412	 sz=bl_ds(sz); //Ищем начало сл. строки
	MOV	R12,R9
	CALLS	SEG _bl_ds,_bl_ds
	MOV	R9,R4
; main.c   1413	 sz-=p+1; //Вновь добавляемая строка
	ADD	R8,#01h
	SUB	R9,R8
; main.c   1414	 strcpy(dstk+(dsp=sz),editline); //Добавляем
	MOV	R12,#POF _dstk
	MOV	DPP0,#PAG _dsp
	MOV	R13,#PAG _dstk
	MOV	POF _dsp,R9
	ADD	R12,R9
	MOV	R14,#POF _editline
	MOV	R15,#PAG _editline
	CALLS	SEG _strcpy,_strcpy
; main.c   1415	 draw_mode=1;
	MOV	DPP0,#PAG _draw_mode
	MOVB	RL6,#01h
	MOVB	POF _draw_mode,RL6
; main.c   1416	 DrawScreen();
	CALLS	SEG _DrawScreen,_DrawScreen
; main.c   1417	}
	MOV	R6,[R0+]
	MOV	R7,[R0+]
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_e_redraw	ENDP
; main.c   1418	
; main.c   1419	void e_OnKey(void far* data, int param)
; main.c   1420	{
	PUBLIC	_e_OnKey
_e_OnKey	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	[-R0],R7
	MOV	[-R0],R6
	MOV	[-R0],R14
	MOV	R6,R12
	MOV	R7,R13
; Locals:
; 
; Statics:
; 
; CSEs:
;     mp = R8R9
;     data = R6R7
;     param = offset 0
; 
; main.c   1421	 void far * far *mp;
; main.c   1422	 mp=Find_Pointer0A_ItemInMenuITEMSQ_by_ID(data,4);
	MOV	R14,#04h
	CALLS	SEG _Find_Pointer0A_ItemInMenuITEMSQ_by_ID,_Find_Pointer0A_ItemInMenuITEMSQ_by_ID
	MOV	R8,R4
	MOV	R9,R5
; main.c   1423	 memcpy(estr_methods,(void far *)(0xE06944),sizeof(estr_methods));
	MOV	R12,#024h
	MOV	[-R0],R12
	MOV	R12,#POF _estr_methods
	MOV	R13,#PAG _estr_methods
	MOV	R14,#02944h
	MOV	R15,#0381h
	CALLS	SEG _memcpy,_memcpy
	ADD	R0,#02h
; main.c   1424	 estr_methods[0]=e_redraw;
	MOV	R12,#SOF _e_redraw
	MOV	DPP0,#PAG _estr_methods
	MOV	R13,#SEG _e_redraw
	MOV	POF _estr_methods,R12
	MOV	POF (_estr_methods+2),R13
; main.c   1425	 mp[1]=estr_methods;
	MOV	R14,#POF _estr_methods
	MOV	R15,#PAG _estr_methods
	EXTP	R9,#02h
	MOV	[R8+#04H],R14
	MOV	[R8+#06H],R15
; main.c   1426	 if (param==7)
	MOV	R8,[R0]
	CMP	R8,#07h
	JMPR	cc_NE,_468
; main.c   1427	 {
; main.c   1428	  SetSoftKeyID(data,0,1);
	MOV	R12,R6
	MOV	R13,R7
	MOV	R14,#00h
	MOV	R15,#01h
	CALLS	SEG _SetSoftKeyID,_SetSoftKeyID
; main.c   1429	 }
_468:
; main.c   1430	} 
	ADD	R0,#02h
	MOV	R6,[R0+]
	MOV	R7,[R0+]
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_e_OnKey	ENDP
; main.c   1431	
; main.c   1432	void e_OnKey3(void){}
	PUBLIC	_e_OnKey3
_e_OnKey3	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
	RETS
_e_OnKey3	ENDP
; main.c   1433	
; main.c   1434	static const DIALOG_HEADER e_header = { 0, 0, 101, 12, (char far*)0xBAFB8A, 0x2A3, 0x7FFF };
MAIN_2_PR	ENDS

MAIN_3_FC	SECTION	DATA
_e_header	LABEL	WORD
	DW	00h,00h,065h,0Ch
	DW	03B8Ah,02EBh
	DW	02A3h,07FFFh
; main.c   1435	static const INPUTDIA_HDNL e_hndl = { 
_e_hndl	LABEL	WORD
	DW	01h,00h
	DSPTR	_e_OnKey2,_e_OnKey,_e_OnKey3
	DW	00h,00h,0F84h,02E3h
	DW	00h,010h,065h,020h,00h
	DW	02h,00h,00h,00h,00h
	DW	00h,00h
; main.c   1436	 1, 0,
; main.c   1437	 e_OnKey2, //InputDiaOn2, //OnKeyUp????
; main.c   1438	 e_OnKey,
; main.c   1439	 e_OnKey3,
; main.c   1440	 NULL,
; main.c   1441	 (char far*)0xB8CF84,		//0xBAFBFC,
; main.c   1442	 0, 16, 101, 32,
; main.c   1443	 0, //Шрифт
; main.c   1444	 2, //Количество строк
; main.c   1445	 0, 0, 0, 0, 0, 0
; main.c   1446	};
; main.c   1447	
; main.c   1448	void CreateEditDialog(void)
; main.c   1449	{
	PUBLIC	_CreateEditDialog
MAIN_3_FC	ENDS

MAIN_2_PR	SECTION	CODE
_CreateEditDialog	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	[-R0],R6
	SUB	R0,#016h
; Locals:
;     data = offset 0
; 
; Statics:
; 
; CSEs:
;     ws_hdr2 = R8R9
;     p = R6
;     c = RL1
; 
; main.c   1450	 INPUT_DATA data;
; main.c   1451	 WS_HDR far* ws_hdr2;
; main.c   1452	 unsigned int p;
; main.c   1453	 char c;
; main.c   1454	
; main.c   1455	 ws_hdr2=AllocWSTR(256+11,MMIMalloc);
	MOV	R12,#010Bh
	MOV	R13,#SOF _MMIMalloc
	MOV	R14,#SEG _MMIMalloc
	CALLS	SEG _AllocWSTR,_AllocWSTR
	MOV	R8,R4
	MOV	R9,R5
; main.c   1456	 CutWSTR(ws_hdr2,0);
	MOV	R12,R8
	MOV	R13,R9
	MOV	R14,#00h
	CALLS	SEG _CutWSTR,_CutWSTR
; main.c   1457	 ClearInputData(&data);
	MOV	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	CALLS	SEG _ClearInputData,_ClearInputData
; main.c   1458	 SetInputData(&data,NULL,256);
	MOV	R6,#0100h
	MOV	[-R0],R6
	MOV	R12,#02h
	ADD	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	R14,#00h
	MOV	R15,#00h
	CALLS	SEG _SetInputData,_SetInputData
	ADD	R0,#02h
; main.c   1459	 SetInputType(&data,3);
	MOV	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	R14,#03h
	CALLS	SEG _SetInputType,_SetInputType
; main.c   1460	 AddInputToWSTR(ws_hdr2,&data);
	MOV	R12,R8
	MOV	R13,R9
	MOV	R14,R0
	AND	R14,#03FFFh
	MOV	R15,DPP1
	CALLS	SEG _AddInputToWSTR,_AddInputToWSTR
; main.c   1461	 if ((p=dsp)!=STKSZ)
	MOV	DPP0,#PAG _dsp
	NOP
	MOV	R6,POF _dsp
	CMP	R6,#04000h
	JMPR	cc_EQ,_471
; main.c   1462	 {
; main.c   1463	  while((c=dstk[p]))
	JMPR	cc_UC,_470
_469:
; main.c   1464	  {
; main.c   1465	   AddCharToWSTR(ws_hdr2,char8to16(c));
	MOV	R1,R1
	MOVBZ	R12,RL1
	CALLS	SEG _char8to16,_char8to16
	MOV	R14,R4
	MOV	R12,R8
	MOV	R13,R9
	CALLS	SEG _AddCharToWSTR,_AddCharToWSTR
; main.c   1466	   p++;
	ADD	R6,#01h
_470:
	EXTP	#PAG _dstk,#01h
	MOVB	RL1,[R6+#POF _dstk]
	JMPR	cc_NZ,_469
; main.c   1467	  }
; main.c   1468	 }
_471:
; main.c   1469	 if ((curline-viewline)>2)
	MOV	DPP0,#PAG _curline
	NOP
	MOV	R6,POF _curline
	MOV	R12,POF (_curline+2)
	SUB	R6,POF _viewline
	SUBC	R12,POF (_viewline+2)
	SUB	R6,#02h
	SUBC	R12,#00h
	JMPR	cc_ULE,_472
; main.c   1470	 {
; main.c   1471	  *(int far *)(&e_hndl.y)=16;
	MOV	DPP0,#PAG _e_hndl
	MOV	R6,#010h
	MOV	POF (_e_hndl+26),R6
; main.c   1472	  *(int far *)(&e_hndl.h)=32;
	MOV	R12,#020h
	MOV	POF (_e_hndl+30),R12
; main.c   1473	 }
	JMPR	cc_UC,_473
_472:
; main.c   1474	 else
; main.c   1475	 {
; main.c   1476	  *(int far *)(&e_hndl.y)=48;
	MOV	DPP0,#PAG _e_hndl
	MOV	R6,#030h
	MOV	POF (_e_hndl+26),R6
; main.c   1477	  *(int far *)(&e_hndl.h)=64;
	MOV	R12,#040h
	MOV	POF (_e_hndl+30),R12
; main.c   1478	 }
_473:
; main.c   1479	 CreateInputTextDialog((INPUTDIA_HDNL far*)&e_hndl, (DIALOG_HEADER far*)&e_header, ws_hdr2, 1);
	MOV	R6,#01h
	MOV	[-R0],R6
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	R12,#POF _e_hndl
	MOV	R13,#PAG _e_hndl
	MOV	R14,#POF _e_header
	MOV	R15,#PAG _e_header
	CALLS	SEG _CreateInputTextDialog,_CreateInputTextDialog
	ADD	R0,#01Ch
; main.c   1480	}
	MOV	R6,[R0+]
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_CreateEditDialog	ENDP
; main.c   1481	
; main.c   1482	void add_to_clip(unsigned char far *s)
; main.c   1483	{
	PUBLIC	_add_to_clip
_add_to_clip	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	[-R0],R6
	MOV	R6,R13
	MOV	R9,R12
; Locals:
; 
; Statics:
; 
; CSEs:
;     f = R8
;     s = R9R6
; 
; main.c   1484	 int f=FileOpen((STR)clipfile,
; main.c   1485	 clip_pasted?_O_CREAT+_O_RDWR+_O_TRUNC:_O_CREAT+_O_RDWR+_O_APPEND
; main.c   1486	 ,_S_IREAD);
	MOV	R12,#POF _clipfile
	MOV	DPP0,#PAG _clip_pasted
	MOV	R13,#PAG _clipfile
	MOV	R14,POF _clip_pasted
	CMP	R14,#00h
	JMPR	cc_Z,_475
_476:
	MOV	R14,#0302h
	JMPR	cc_UC,_477
_475:
	MOV	R14,#010Ah
_477:
	MOV	R15,#0100h
	CALLS	SEG _FileOpen,_FileOpen
	MOV	R8,R4
; main.c   1487	 if (f!=-1)
	CMP	R8,#0FFFFh
	JMPR	cc_EQ,_474
; main.c   1488	 {
; main.c   1489	  FileWrite(f,s,strlen(s));
	MOV	R12,R9
	MOV	R13,R6
	CALLS	SEG _strlen,_strlen
	MOV	R15,R4
	MOV	R12,R8
	MOV	R13,R9
	MOV	R14,R6
	CALLS	SEG _FileWrite,_FileWrite
; main.c   1490	  FileClose(f);
	MOV	R12,R8
	CALLS	SEG _FileClose,_FileClose
; main.c   1491	 }
_474:
; main.c   1492	 EX_heap_free_with_lock(s);
	MOV	R12,R9
	MOV	R13,R6
	CALLS	SEG _EX_heap_free_with_lock,_EX_heap_free_with_lock
; main.c   1493	 clip_pasted=0;
	MOV	DPP0,#PAG _clip_pasted
	MOV	R6,[R0+]
	MOV	POF _clip_pasted,ZEROS
; main.c   1494	}
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_add_to_clip	ENDP
; main.c   1495	
; main.c   1496	//------------------------------------------------------------------------------
; main.c   1497	// Осн. диалог
; main.c   1498	//------------------------------------------------------------------------------
; main.c   1499	int md_onKey(void far *data, struct MSG far *Msg)
; main.c   1500	{
	PUBLIC	_md_onKey
_md_onKey	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	[-R0],R6
; Locals:
; 
; Statics:
; 
; CSEs:
;     Msg + 4 = R8R9
;     s = R8R9
;     i = R6
;     data = R12R13
;     Msg = R14R15
; 
; main.c   1501	 if ((Msg->Msg==0xF8)&&(Msg->Param[0]==dia_id))
	MOV	R8,R14
	MOV	R9,R15
	ADD	R8,#04h
	EXTP	R9,#01h
	MOV	R1,[R8]
	CMP	R1,#0F8h
	JMPR	cc_NE,_570
	EXTP	R15,#01h
	MOV	R1,[R14+#06H]
	MOV	DPP0,#PAG _dia_id
	NOP
	CMP	R1,POF _dia_id
	JMPR	cc_NE,_570
; main.c   1502	 {
; main.c   1503	  if (IsFocus(data))
	CALLS	SEG _IsFocus,_IsFocus
	CMP	R4,#00h
	JMPA	cc_Z,_649
; main.c   1504	  {
; main.c   1505	   if (editmode>2) goto L_EDIT; //Перестартуем редактор
	MOV	DPP0,#PAG _editmode
	NOP
	MOV	R8,POF _editmode
	CMP	R8,#02h
	JMPA	cc_UGT,_594
; main.c   1506	   DrawScreen();
	JMPA	cc_UC,_642
; main.c   1507	  }
; main.c   1508	  return(0);
; main.c   1509	 }
_570:
; main.c   1510	 if (!IsFocus(data)) return(1);
	MOV	R6,R14
	MOV	[-R0],R15
	MOV	[-R0],R12
	MOV	[-R0],R13
	CALLS	SEG _IsFocus,_IsFocus
	MOV	R13,[R0+]
	MOV	R12,[R0+]
	MOV	R15,[R0+]
	MOV	R14,R6
	CMP	R4,#00h
	JMPA	cc_Z,_655
; main.c   1511	 if ((Msg->Msg==0x90)||(Msg->Msg==0x88))
	EXTP	R9,#01h
	MOV	R6,[R8]
	CMP	R6,#090h
	JMPR	cc_EQ,_571
	EXTP	R9,#01h
	MOV	R6,[R8]
	CMP	R6,#088h
	JMPA	cc_NE,_584
_571:
; main.c   1512	 {
; main.c   1513	  if (editmode>2)
	MOV	DPP0,#PAG _editmode
	NOP
	MOV	R8,POF _editmode
	CMP	R8,#02h
	JMPR	cc_ULE,_582
; main.c   1514	  {
; main.c   1515	   //Вышли из редактора стрелками вверх/вниз, выполняем	переход
; main.c   1516	   switch(editmode)
	CMP	R8,#0Eh
	JMPR	cc_EQ,_577
	CMP	R8,#021h
	JMPR	cc_EQ,_573
	CMP	R8,#025h
	JMPR	cc_EQ,_573
	CMP	R8,#0Dh
	JMPR	cc_EQ,_574
	CMP	R8,#020h
	JMPR	cc_EQ,_576
	CMP	R8,#024h
	JMPR	cc_EQ,_576
	JMPR	cc_UC,_581
; main.c   1517	   {
; main.c   1518	    case 0x0E:
; main.c   1519		 PageUp(6);
; main.c   1520		 break;
; main.c   1521	    case 0x21:
; main.c   1522		case 0x25:
_573:
; main.c   1523		 //Стрелка вверх
; main.c   1524		 LineUp();
	CALLS	SEG _LineUp,_LineUp
; main.c   1525		 break;
	JMPR	cc_UC,_581
; main.c   1526		case 0x0D:
_574:
; main.c   1527		 PageDw(6);
	MOV	R12,#06h
	CALLS	SEG _PageDw,_PageDw
; main.c   1528		 break;
	JMPR	cc_UC,_581
; main.c   1529		case 0x20:
; main.c   1530		case 0x24:
_576:
; main.c   1531		 //Стрелка вниз
; main.c   1532		 LineDw();
	CALLS	SEG _LineDw,_LineDw
; main.c   1533		 break;
	JMPR	cc_UC,_581
_577:
	MOV	R12,#06h
	CALLS	SEG _PageUp,_PageUp
; main.c   1534		case 0x2F:
; main.c   1535		 //Создано меню
; main.c   1536		 break;
; main.c   1537	   }
_581:
; main.c   1538	   CheckDiskAccess();
	CALLS	SEG _CheckDiskAccess,_CheckDiskAccess
; main.c   1539	   if (disk_access) 
	MOV	DPP0,#PAG _disk_access
	NOP
	MOVB	RL6,POF _disk_access
	JMPA	cc_Z,_594
; main.c   1540	   {
; main.c   1541	    FilesysICall_UI(DoDiskAccess,1);
	MOV	R12,#SOF _DoDiskAccess
	MOV	R13,#SEG _DoDiskAccess
	MOV	R14,#01h
	CALLS	SEG _FilesysICall_UI,_FilesysICall_UI
; main.c   1542		return(0);
	JMPA	cc_UC,_649
; main.c   1543	   }
; main.c   1544	   goto L_EDIT;
; main.c   1545	  }
_582:
; main.c   1546	  editmode=0; //Выключаем редактор
	MOV	DPP0,#PAG _editmode
	NOP
	MOV	POF _editmode,ZEROS
; main.c   1547	  //Если вышли из меню не выбрав пункт загрузки
; main.c   1548	  if (HISTORY.fmt==255)
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOVBZ	R8,POF (_HISTORY+129)
	CMP	R8,#0FFh
	JMPR	cc_NE,_583
; main.c   1549	  {
; main.c   1550	   if (disable_exit) //Если выбирали шрифт
	MOV	DPP0,#PAG _disable_exit
	NOP
	MOVB	RL6,POF _disable_exit
	CMPB	RL6,#00h
	JMPA	cc_Z,_591
; main.c   1551	   {
; main.c   1552		disable_exit=0; //Не выходим
; main.c   1553		return(1);
	JMPA	cc_UC,_650
; main.c   1554	   }
; main.c   1555	   goto L_EXIT;
; main.c   1556	  }
_583:
; main.c   1557	  //Перерисовывание после меню, если ничего не изменили
; main.c   1558	  if (!draw_mode) draw_mode=1;
	MOV	DPP0,#PAG _draw_mode
	NOP
	MOVB	RL6,POF _draw_mode
	CMPB	RL6,#00h
	JMPA	cc_NZ,_642
	JMPR	cc_UC,_587
; main.c   1559	  DrawScreen();
; main.c   1560	  return(0); //Обработали сообщение 0x90
; main.c   1561	 }
_584:
; main.c   1562	 //if (Msg->Msg==0xB7) return(0); //Убить скроллер имени
; main.c   1563	 if (Msg->Msg==0xB8)
	EXTP	R9,#01h
	MOV	R6,[R8]
	CMP	R6,#0B8h
	JMPR	cc_NE,_585
; main.c   1564	 {
; main.c   1565	  DrawScreen(); //Перерисовываем по таймеру
	CALLS	SEG _DrawScreen,_DrawScreen
; main.c   1566	  return(1);
	JMPA	cc_UC,_655
; main.c   1567	 }
_585:
; main.c   1568	 if (disk_access) return(1); //Если дисковые операции
	MOV	DPP0,#PAG _disk_access
	NOP
	MOVB	RL6,POF _disk_access
	JMPA	cc_NZ,_655
; main.c   1569	 if (draw_mode&&(draw_mode!=4)) return(1); //Если еще рисуем
	MOVB	RL1,POF _draw_mode
	CMPB	RL1,#00h
	JMPR	cc_Z,_586
	MOVB	RL1,POF _draw_mode
	CMPB	RL1,#04h
	JMPA	cc_NE,_655
_586:
; main.c   1570	 if (Msg->Msg==KEY_UP)
	EXTP	R9,#01h
	MOV	R6,[R8]
	CMP	R6,#0EAh
	JMPR	cc_NE,_588
; main.c   1571	 {
; main.c   1572	  if (draw_mode==4)
	MOV	DPP0,#PAG _draw_mode
	NOP
	MOVB	RL6,POF _draw_mode
	CMPB	RL6,#04h
	JMPA	cc_NE,_649
; main.c   1573	  {
; main.c   1574	   draw_mode=1;
_587:
	MOV	DPP0,#PAG _draw_mode
	MOVB	RL6,#01h
	MOVB	POF _draw_mode,RL6
; main.c   1575	   DrawScreen();
	JMPA	cc_UC,_642
; main.c   1576	  }
; main.c   1577	  return(0);
; main.c   1578	 }
_588:
; main.c   1579	 if ((Msg->Msg==KEY_DOWN)||(Msg->Msg==LONG_PRESS)) 
	EXTP	R9,#01h
	MOV	R6,[R8]
	CMP	R6,#0E9h
	JMPR	cc_EQ,_589
	EXTP	R9,#01h
	MOV	R6,[R8]
	CMP	R6,#0EBh
	JMPA	cc_NE,_655
_589:
; main.c   1580	 {
; main.c   1581	  switch(Msg->Param[0])
	EXTP	R15,#01h
	MOV	R6,[R14+#06H]
	CMP	R6,#0Ch
	JMPA	cc_EQ,_591
	CMP	R6,#0Bh
	JMPA	cc_EQ,_594
	CMP	R6,#04h
	JMPA	cc_EQ,_597
	CMP	R6,#01h
	JMPA	cc_EQ,_598
	CMP	R6,#03Bh
	JMPA	cc_EQ,_599
	CMP	R6,#06h
	JMPA	cc_EQ,_600
	CMP	R6,#03Ch
	JMPA	cc_EQ,_602
	CMP	R6,#0Dh
	JMPA	cc_EQ,_605
	CMP	R6,#032h
	JMPA	cc_EQ,_605
	CMP	R6,#0Eh
	JMPA	cc_EQ,_607
	CMP	R6,#038h
	JMPA	cc_EQ,_607
	CMP	R6,#035h
	JMPA	cc_EQ,_608
	CMP	R6,#03Dh
	JMPA	cc_EQ,_609
	CMP	R6,#034h
	JMPA	cc_EQ,_611
	CMP	R6,#03Eh
	JMPA	cc_EQ,_612
	CMP	R6,#036h
	JMPA	cc_EQ,_614
	CMP	R6,#039h
	JMPA	cc_EQ,_615
	CMP	R6,#037h
	JMPA	cc_EQ,_616
	CMP	R6,#030h
	JMPA	cc_EQ,_620
	CMP	R6,#023h
	JMPA	cc_EQ,_621
	JMPA	cc_UC,_638
; main.c   1582	  {
; main.c   1583	   case RED_BUTTON:
; main.c   1584	    L_EXIT:
_591:
; main.c   1585	    CloseDialogWithSoftKeys(((int far *)data)[6]);
	MOV	R8,R12
	EXTP	R13,#01h
	MOV	R12,[R8+#0CH]
	CALLS	SEG _CloseDialogWithSoftKeys,_CloseDialogWithSoftKeys
; main.c   1586		//((unsigned int far *)data)[7]=0xFFFD;
; main.c   1587		//((unsigned int far *)data)[8]=0x0000;
; main.c   1588	    return(0);
	JMPA	cc_UC,_649
; main.c   1589	   case GREEN_BUTTON:
; main.c   1590	    L_EDIT:
_594:
; main.c   1591	    editmode=1;
	MOV	DPP0,#PAG _editmode
	MOV	R8,#01h
	MOV	POF _editmode,R8
; main.c   1592		cursor_off=0;
	MOVB	POF _cursor_off,ZEROS
; main.c   1593		while ((curline-viewline)>=6) viewline++; //Если ниже чем 6 строк - перемещаемся
	JMPR	cc_UC,_596
_595:
	MOV	DPP0,#PAG _viewline
	MOV	R8,#01h
	ADD	POF _viewline,R8
	ADDC	POF (_viewline+2),ZEROS
_596:
	MOV	DPP0,#PAG _curline
	NOP
	MOV	R8,POF _curline
	MOV	R9,POF (_curline+2)
	SUB	R8,POF _viewline
	SUBC	R9,POF (_viewline+2)
	SUB	R8,#06h
	SUBC	R9,#00h
	JMPR	cc_UGE,_595
; main.c   1594		CreateEditDialog();
	CALLS	SEG _CreateEditDialog,_CreateEditDialog
; main.c   1595		return(0);
	JMPA	cc_UC,_649
; main.c   1596	   case RIGHT_SOFT:
_597:
; main.c   1597	    FilesysICall(SaveHistory);
	MOV	R12,#SOF _SaveHistory
	MOV	R13,#SEG _SaveHistory
	CALLS	SEG _FilesysICall,_FilesysICall
; main.c   1598	    DrawLoadMenu();
	CALLS	SEG _DrawLoadMenu,_DrawLoadMenu
; main.c   1599	    return(0);
	JMPA	cc_UC,_649
; main.c   1600	   case LEFT_SOFT:
_598:
; main.c   1601	    DrawSoftMenu();
	CALLS	SEG _DrawSoftMenu,_DrawSoftMenu
; main.c   1602		return(0);
	JMPA	cc_UC,_649
; main.c   1603	   case UP_BUTTON:
_599:
; main.c   1604	    if (cursor_off)
	MOV	DPP0,#PAG _cursor_off
	NOP
	MOVB	RL6,POF _cursor_off
	JMPA	cc_Z,_623
; main.c   1605		 PageUp(1);
	MOV	R12,#01h
	CALLS	SEG _PageUp,_PageUp
	JMPA	cc_UC,_632
; main.c   1606		 else
; main.c   1607	     LineUp();
; main.c   1608	    draw_mode=1;
; main.c   1609	    break;
; main.c   1610	   case RECORD_BUTTON:
_600:
; main.c   1611	    if (cursor_off||(dsp==STKSZ)) break;
	MOV	DPP0,#PAG _cursor_off
	NOP
	MOVB	RL6,POF _cursor_off
	JMPA	cc_NZ,_638
	MOV	R8,POF _dsp
	CMP	R8,#04000h
	JMPA	cc_EQ,_638
; main.c   1612		else
; main.c   1613		{
; main.c   1614		 unsigned int i=strlen(dstk+dsp); //Длина тек. строки
	MOV	R12,#POF _dstk
	MOV	R13,#PAG _dstk
	ADD	R12,R8
	CALLS	SEG _strlen,_strlen
	MOV	R6,R4
; main.c   1615		 unsigned char far *s;
; main.c   1616		 s=EX_heap_malloc_with_lock(i+2); //Т.к. добавляем 0 и 0d
	MOV	R12,R6
	ADD	R12,#02h
	CALLS	SEG _EX_heap_malloc_with_lock,_EX_heap_malloc_with_lock
	MOV	R8,R4
	MOV	R9,R5
; main.c   1617		 if (s)
	MOV	R12,R9
	OR	R12,R8
	JMPR	cc_Z,_602
; main.c   1618		 {
; main.c   1619		  strcpy(s,dstk+dsp);
	MOV	R12,R8
	MOV	R13,R9
	MOV	R14,#POF _dstk
	MOV	DPP0,#PAG _dsp
	MOV	R15,#PAG _dstk
	ADD	R14,POF _dsp
	CALLS	SEG _strcpy,_strcpy
; main.c   1620		  s[i]=0x0D;
	MOVB	RL1,#0Dh
	MOV	R12,R8
	MOV	R13,R9
	ADD	R12,R6
	EXTP	R13,#01h
	MOVB	[R12],RL1
; main.c   1621		  s[i+1]=0x00;
	MOVB	RL2,#00h
	MOV	R12,R8
	MOV	R13,R9
	ADD	R12,#01h
	ADD	R12,R6
	EXTP	R13,#01h
	MOVB	[R12],RL2
; main.c   1622		  FilesysICall_FP(add_to_clip,s);
	MOV	R12,#SOF _add_to_clip
	MOV	R13,#SEG _add_to_clip
	MOV	R14,R8
	MOV	R15,R9
	CALLS	SEG _FilesysICall_FP,_FilesysICall_FP
; main.c   1623	     }
; main.c   1624		}
; main.c   1625	   case DOWN_BUTTON:
_602:
; main.c   1626	    if (cursor_off)
	MOV	DPP0,#PAG _cursor_off
	NOP
	MOVB	RL6,POF _cursor_off
	JMPR	cc_Z,_603
; main.c   1627		 PageDw(1);
	MOV	R12,#01h
	CALLS	SEG _PageDw,_PageDw
	JMPA	cc_UC,_632
_603:
; main.c   1628		 else
; main.c   1629	     LineDw();
	CALLS	SEG _LineDw,_LineDw
; main.c   1630	    draw_mode=1;
	JMPA	cc_UC,_632
; main.c   1631	    break;
; main.c   1632	   case VOL_UP_BUTTON:
; main.c   1633	   case '2':
_605:
; main.c   1634	    PageUp(max_y);
	MOV	DPP0,#PAG _max_y
	NOP
	MOV	R12,POF _max_y
	CALLS	SEG _PageUp,_PageUp
; main.c   1635	    draw_mode=1;
	JMPA	cc_UC,_632
; main.c   1636	    break;
; main.c   1637	   case VOL_DOWN_BUTTON:
; main.c   1638	   case '8':
_607:
; main.c   1639	    PageDw(max_y);
	MOV	DPP0,#PAG _max_y
	NOP
	MOV	R12,POF _max_y
	CALLS	SEG _PageDw,_PageDw
; main.c   1640	    draw_mode=1;
	JMPA	cc_UC,_632
; main.c   1641	    break;
; main.c   1642	   case '5':
_608:
; main.c   1643	    cursor_off^=1;
	MOV	DPP0,#PAG _cursor_off
	NOP
	MOVB	RL6,POF _cursor_off
	XORB	RL6,#01h
	MOVB	POF _cursor_off,RL6
; main.c   1644		draw_mode=1;
	JMPA	cc_UC,_632
; main.c   1645		break;
; main.c   1646	   case LEFT_BUTTON:
_609:
; main.c   1647	    if (Msg->Msg!=LONG_PRESS)
	EXTP	R9,#01h
	MOV	R8,[R8]
	CMP	R8,#0EBh
	JMPR	cc_EQ,_611
; main.c   1648		{
; main.c   1649	     doCurLeft();
	CALLS	SEG _doCurLeft,_doCurLeft
; main.c   1650	     break;
	JMPA	cc_UC,_638
; main.c   1651		}
; main.c   1652	   case '4':
_611:
; main.c   1653	    //На слово влево
; main.c   1654	    WordLeft();
	CALLS	SEG _WordLeft,_WordLeft
; main.c   1655		cursor_off&=0xFE;
	JMPR	cc_UC,_619
; main.c   1656		draw_mode=1;
; main.c   1657	    break;
; main.c   1658	   case RIGHT_BUTTON:
_612:
; main.c   1659	    if (Msg->Msg!=LONG_PRESS)
	EXTP	R9,#01h
	MOV	R8,[R8]
	CMP	R8,#0EBh
	JMPR	cc_EQ,_614
; main.c   1660		{
; main.c   1661	     doCurRight();
	CALLS	SEG _doCurRight,_doCurRight
; main.c   1662	     break;
	JMPR	cc_UC,_638
; main.c   1663		}
; main.c   1664	   case '6':
_614:
; main.c   1665	    //На слово вправо
; main.c   1666	    WordRight();
	CALLS	SEG _WordRight,_WordRight
; main.c   1667		cursor_off&=0xFE;
	JMPR	cc_UC,_619
; main.c   1668		draw_mode=1;
; main.c   1669	    break;
; main.c   1670	   case '9':
_615:
; main.c   1671	    ToEOL();
	CALLS	SEG _ToEOL,_ToEOL
; main.c   1672		cursor_off&=0xFE;
	JMPR	cc_UC,_619
; main.c   1673		draw_mode=1;
; main.c   1674		break;
; main.c   1675	   case '7':
_616:
; main.c   1676	    ToBOL();
	CALLS	SEG _ToBOL,_ToBOL
; main.c   1677		cursor_off&=0xFE;
_619:
	MOV	DPP0,#PAG _cursor_off
	NOP
	MOVB	RL6,POF _cursor_off
	BCLR	R6.0
	MOVB	POF _cursor_off,RL6
; main.c   1678		draw_mode=1;
	JMPR	cc_UC,_632
; main.c   1679		break;
; main.c   1680	   case '0':
_620:
; main.c   1681	    draw_mode=4;
	MOV	DPP0,#PAG _draw_mode
	MOVB	RL6,#04h
	MOVB	POF _draw_mode,RL6
; main.c   1682		break;
	JMPR	cc_UC,_638
; main.c   1683	   case '#':
_621:
; main.c   1684	    if (win_dos_koi>1) win_dos_koi=0; else win_dos_koi++;
	MOV	DPP0,#PAG _win_dos_koi
	NOP
	MOVB	RL6,POF _win_dos_koi
	CMPB	RL6,#01h
	JMPR	cc_ULE,_622
	MOVB	POF _win_dos_koi,ZEROS
	JMPR	cc_UC,_632
_622:
	MOV	DPP0,#PAG _win_dos_koi
	NOP
	MOVB	RL6,POF _win_dos_koi
	ADDB	RL6,#01h
	MOVB	POF _win_dos_koi,RL6
; main.c   1685	    draw_mode=1;
	JMPR	cc_UC,_632
_623:
	CALLS	SEG _LineUp,_LineUp
_632:
	MOV	DPP0,#PAG _draw_mode
	MOVB	RL6,#01h
	MOVB	POF _draw_mode,RL6
; main.c   1686	    break;
; main.c   1687	   default:          
; main.c   1688	    break;
; main.c   1689	  }
_638:
; main.c   1690	  CheckDiskAccess();
	CALLS	SEG _CheckDiskAccess,_CheckDiskAccess
; main.c   1691	  if (disk_access) FilesysICall_UI(DoDiskAccess,1);
	MOV	DPP0,#PAG _disk_access
	NOP
	MOVB	RL6,POF _disk_access
	JMPR	cc_Z,_642
	MOV	R12,#SOF _DoDiskAccess
	MOV	R13,#SEG _DoDiskAccess
	MOV	R14,#01h
	CALLS	SEG _FilesysICall_UI,_FilesysICall_UI
_642:
; main.c   1692	  DrawScreen();
	CALLS	SEG _DrawScreen,_DrawScreen
; main.c   1693	  return(0);
_649:
	MOV	R4,#00h
	JMPR	cc_UC,_656
_650:
	MOV	DPP0,#PAG _disable_exit
	NOP
	MOVB	POF _disable_exit,ZEROS
; main.c   1694	 }
_655:
; main.c   1695	 return(1); //Оставить для остальных
	MOV	R4,#01h
; main.c   1696	}
_656:
	MOV	R6,[R0+]
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_md_onKey	ENDP
; main.c   1697	
; main.c   1698	//===================================================================
; main.c   1699	// Меню загрузки файла
; main.c   1700	//===================================================================
; main.c   1701	void sf_OnKey(char far* data, int param)
; main.c   1702	{
	PUBLIC	_sf_OnKey
_sf_OnKey	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	[-R0],R6
; Locals:
; 
; Statics:
; 
; CSEs:
;     p = R12
;     wc = R13
;     ESTR = R8R9
;     data = R12R13
;     sz = R6
;     param = R14
; 
; main.c   1703	 WS_HDR far* ESTR;
; main.c   1704	 unsigned int p=0;
; main.c   1705	 unsigned int sz;
; main.c   1706	
; main.c   1707	 extern void savetext(void);
; main.c   1708	
; main.c   1709	 if (param!=0xB) return;
	CMP	R14,#0Bh
	JMPA	cc_NE,_670
; main.c   1710	 if (sub_E70BAC(data)) return;
	MOV	R9,R13
	MOV	R8,R12
	CALLS	SEG _sub_E70BAC,_sub_E70BAC
	MOV	R13,R9
	MOV	R12,R8
	CMP	R4,#00h
	JMPA	cc_NZ,_670
; main.c   1711	 ESTR=GetDataPointer_ITEM04(data);
	CALLS	SEG _GetDataPointer_ITEM04,_GetDataPointer_ITEM04
	MOV	R8,R4
	MOV	R9,R5
; main.c   1712	 sz=WSTR_Len(ESTR)-11;
	MOV	R12,R8
	MOV	R13,R9
	CALLS	SEG _WSTR_Len,_WSTR_Len
	MOV	R6,R4
	SUB	R6,#0Bh
; main.c   1713	 p=0;
	MOV	R12,#00h
; main.c   1714	 while((p<255)&&(p<sz))
	JMPR	cc_UC,_667
_664:
; main.c   1715	 {
; main.c   1716	  int wc=WString_GetChar(ESTR,p+12);
	MOV	[-R0],R12
	MOV	R12,R8
	MOV	R13,R9
	MOV	R14,[R0]
	ADD	R14,#0Ch
	CALLS	SEG _WString_GetChar,_WString_GetChar
	MOV	R13,R4
	MOV	R12,[R0+]
; main.c   1717	  if ((wc>=0x410)&&(wc<0x450)) wc-=0x350;
	CMP	R13,#0410h
	JMPR	cc_SLT,_666
	CMP	R13,#0450h
	JMPR	cc_SGE,_666
	SUB	R13,#0350h
_666:
; main.c   1718	  filename[p]=wc;
	MOV	R1,R13
	EXTP	#PAG _filename,#01h
	MOVB	[R12+#POF _filename],RL1
; main.c   1719	  p++;
	ADD	R12,#01h
_667:
	CMP	R12,#0FFh
	JMPR	cc_UGE,_668
	CMP	R12,R6
	JMPR	cc_ULT,_664
_668:
; main.c   1720	 }
; main.c   1721	 filename[p]=0;
	MOVB	RL6,#00h
	EXTP	#PAG _filename,#01h
	MOVB	[R12+#POF _filename],RL6
; main.c   1722	 HISTORY.fmt=0; //Грузим его теперь как DirectLoad
	MOV	DPP0,#PAG _HISTORY
	MOVB	RL1,#020h
	MOVB	POF (_HISTORY+129),ZEROS
; main.c   1723	 disk_access=SAVE_FILE;
	MOV	DPP0,#PAG _disk_access
	MOV	R12,#SOF _savetext
	MOVB	POF _disk_access,RL1
; main.c   1724	 FilesysICall(savetext);
	MOV	R13,#SEG _savetext
	CALLS	SEG _FilesysICall,_FilesysICall
; main.c   1725	 //memcpy(HISTORY.name,filename,sizeof(HISTORY.name));
; main.c   1726	}
_670:
	MOV	R6,[R0+]
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_sf_OnKey	ENDP
; main.c   1727	
; main.c   1728	static const DIALOG_HEADER sf_header = { 0, 0, 101, 12, (char far*)0xBAFB8A, 0xE2F, 0x7FFF };
MAIN_2_PR	ENDS

MAIN_3_FC	SECTION	DATA
_sf_header	LABEL	WORD
	DW	00h,00h,065h,0Ch
	DW	03B8Ah,02EBh
	DW	0E2Fh,07FFFh
; main.c   1729	static const INPUTDIA_HDNL sf_hndl = { 
_sf_hndl	LABEL	WORD
	DW	01h,00h
	DW	00h,00h
	DSPTR	_sf_OnKey
	DW	00h,00h
	DW	00h,00h,03BFCh,02EBh
	DW	00h,010h,065h,040h,03h
	DW	02h,00h,00h,00h,00h
	DW	00h,00h
; main.c   1730	 1, 0,
; main.c   1731	 NULL, //InputDiaOn2, //OnKeyUp????
; main.c   1732	 sf_OnKey,
; main.c   1733	 NULL,
; main.c   1734	 NULL,
; main.c   1735	 (char far*)0xBAFBFC,
; main.c   1736	 0, 16, 101, 64,
; main.c   1737	 3, //Шрифт
; main.c   1738	 2, //Количество строк
; main.c   1739	 0, 0, 0, 0, 0, 0
; main.c   1740	};
; main.c   1741	
; main.c   1742	void CreateSaveAsDialog(void)
; main.c   1743	{
	PUBLIC	_CreateSaveAsDialog
MAIN_3_FC	ENDS

MAIN_2_PR	SECTION	CODE
_CreateSaveAsDialog	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	SUB	R0,#011Eh
; Locals:
;     ws_hdr1 = offset 0
;     data = offset 8
;     wstr = offset 30
; 
; Statics:
; 
; CSEs:
;     ws_hdr2 = R8R9
; 
; main.c   1744	 unsigned int wstr[128];
; main.c   1745	 WS_HDR ws_hdr1;
; main.c   1746	 INPUT_DATA data;
; main.c   1747	 WS_HDR far* ws_hdr2;
; main.c   1748	 ClearWideString(&ws_hdr1,(unsigned int far*)&wstr,128);
	MOV	R12,#080h
	MOV	[-R0],R12
	MOV	R12,#02h
	ADD	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	R14,#020h
	ADD	R14,R0
	AND	R14,#03FFFh
	MOV	R15,DPP1
	CALLS	SEG _ClearWideString,_ClearWideString
	ADD	R0,#02h
; main.c   1749	 CutWSTR(&ws_hdr1,0);
	MOV	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	R14,#00h
	CALLS	SEG _CutWSTR,_CutWSTR
; main.c   1750	 ws_hdr2=AllocWSTR(128+11,MMIMalloc);
	MOV	R12,#08Bh
	MOV	R13,#SOF _MMIMalloc
	MOV	R14,#SEG _MMIMalloc
	CALLS	SEG _AllocWSTR,_AllocWSTR
	MOV	R8,R4
	MOV	R9,R5
; main.c   1751	 CutWSTR(ws_hdr2,0);
	MOV	R12,R8
	MOV	R13,R9
	MOV	R14,#00h
	CALLS	SEG _CutWSTR,_CutWSTR
; main.c   1752	 ClearInputData(&data);
	MOV	R12,#08h
	ADD	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	CALLS	SEG _ClearInputData,_ClearInputData
; main.c   1753	 SetInputData(&data,&ws_hdr1,127);
	MOV	R12,#07Fh
	MOV	[-R0],R12
	MOV	R12,#0Ah
	ADD	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	R14,#02h
	ADD	R14,R0
	AND	R14,#03FFFh
	MOV	R15,DPP1
	CALLS	SEG _SetInputData,_SetInputData
	ADD	R0,#02h
; main.c   1754	 SetInputType(&data,3);
	MOV	R12,#08h
	ADD	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	R14,#03h
	CALLS	SEG _SetInputType,_SetInputType
; main.c   1755	 AsciizToWSTR(&ws_hdr1,filename);
	MOV	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	R14,#POF _filename
	MOV	R15,#PAG _filename
	CALLS	SEG _AsciizToWSTR,_AsciizToWSTR
; main.c   1756	 AddInputToWSTR(ws_hdr2,&data);
	MOV	R12,R8
	MOV	R13,R9
	MOV	R14,#08h
	ADD	R14,R0
	AND	R14,#03FFFh
	MOV	R15,DPP1
	CALLS	SEG _AddInputToWSTR,_AddInputToWSTR
; main.c   1757	 CreateInputTextDialog((INPUTDIA_HDNL far*)&sf_hndl, (DIALOG_HEADER far*)&sf_header, ws_hdr2, 1);
	MOV	R12,#01h
	MOV	[-R0],R12
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	R12,#POF _sf_hndl
	MOV	R13,#PAG _sf_hndl
	MOV	R14,#POF _sf_header
	MOV	R15,#PAG _sf_header
	CALLS	SEG _CreateInputTextDialog,_CreateInputTextDialog
	ADD	R0,#0124h
; main.c   1758	}
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_CreateSaveAsDialog	ENDP
; main.c   1759	
; main.c   1760	static const STR loadmenu_ExtendedSTR[]=
MAIN_2_PR	ENDS

MAIN_3_FC	SECTION	DATA
_loadmenu_ExtendedSTR	LABEL	WORD
	DPPTR	_671,_672,_673,_674,_675
	DPPTR	_676,_677,_678,_679
; main.c   1761	{
; main.c   1762	 "Load options",
; main.c   1763	 "Font size=4",
; main.c   1764	 "Font size=6",
; main.c   1765	 "Font size=8",
; main.c   1766	 "Direct load",
; main.c   1767	 "Load & Format",
; main.c   1768	 "EOL->EOL SPC",
; main.c   1769	 "Extend lines",
; main.c   1770	 "Save as..."
; main.c   1771	};
; main.c   1772	
; main.c   1773	static const struct ITEMSDATA far loadmenu_ITEMS[]=
_loadmenu_ITEMS	LABEL	WORD
	DW	03C22h,02EBh
	DW	0E28h,0E28h,00h
	DW	00h,00h
	DW	03h,053Ah
	DW	03C22h,02EBh
	DW	0E29h,0E29h,00h
	DW	00h,00h
	DW	03h,053Ah
	DW	03C22h,02EBh
	DW	0E2Ah,0E2Ah,00h
	DW	00h,00h
	DW	03h,053Ah
	DW	03C22h,02EBh
	DW	0E2Bh,0E2Bh,00h
	DW	00h,00h
	DW	03h,053Ah
	DW	03C22h,02EBh
	DW	0E2Ch,0E2Ch,00h
	DW	00h,00h
	DW	03h,053Ah
	DW	03C22h,02EBh
	DW	0E2Dh,0E2Dh,00h
	DW	00h,00h
	DW	03h,053Ah
	DW	03C22h,02EBh
	DW	0E2Eh,0E2Eh,00h
	DW	00h,00h
	DW	03h,053Ah
	DW	03C22h,02EBh
	DW	0E2Fh,0E2Fh,00h
	DW	00h,00h
	DW	03h,053Ah
; main.c   1774	{//0xB867CE
; main.c   1775	 (char far*)0xBAFC22, 0xE28,0xE28, 0,NULL,3,0x53A,
; main.c   1776	 (char far*)0xBAFC22, 0xE29,0xE29, 0,NULL,3,0x53A,
; main.c   1777	 (char far*)0xBAFC22, 0xE2A,0xE2A, 0,NULL,3,0x53A,
; main.c   1778	 (char far*)0xBAFC22, 0xE2B,0xE2B, 0,NULL,3,0x53A,
; main.c   1779	 (char far*)0xBAFC22, 0xE2C,0xE2C, 0,NULL,3,0x53A,
; main.c   1780	 (char far*)0xBAFC22, 0xE2D,0xE2D, 0,NULL,3,0x53A,
; main.c   1781	 (char far*)0xBAFC22, 0xE2E,0xE2E, 0,NULL,3,0x53A,
; main.c   1782	 (char far*)0xBAFC22, 0xE2F,0xE2F, 0,NULL,3,0x53A
; main.c   1783	};
; main.c   1784	
; main.c   1785	
; main.c   1786	void loadfont(int flag)
; main.c   1787	{
	PUBLIC	_loadfont
MAIN_3_FC	ENDS

MAIN_2_PR	SECTION	CODE
_loadfont	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	SUB	R0,#020h
; Locals:
;     fn_font = offset 0
; 
; Statics:
; 
; CSEs:
;     fin = R8
;     flag = R9
; 
; main.c   1788	 char fn_font[32];
; main.c   1789	 int fin;
; main.c   1790	 xsprintf(fn_font,(STR)fntfilename,font_size);
	MOV	DPP0,#PAG _font_size
	MOV	R9,R12
	MOVBZ	R12,POF _font_size
	MOV	[-R0],R12
	MOV	R12,#02h
	ADD	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	R14,#POF _fntfilename
	MOV	R15,#PAG _fntfilename
	CALLS	SEG _xsprintf,_xsprintf
	ADD	R0,#02h
; main.c   1791	 if ((fin=FileOpen(fn_font,_O_RDONLY+_O_BINARY,0))!=-1)
	MOV	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	R14,#08000h
	MOV	R15,#00h
	CALLS	SEG _FileOpen,_FileOpen
	MOV	R8,R4
	CMP	R8,#0FFFFh
	JMPR	cc_EQ,_680
; main.c   1792	 {
; main.c   1793	  FileRead(fin,font,sizeof(font));
	MOV	R12,R8
	MOV	R13,#POF _font
	MOV	R14,#PAG _font
	MOV	R15,#0800h
	CALLS	SEG _FileRead,_FileRead
; main.c   1794	  FileClose(fin);
	MOV	R12,R8
	CALLS	SEG _FileClose,_FileClose
; main.c   1795	 }
_680:
; main.c   1796	 max_x=96/font_size;
	MOV	DPP0,#PAG _font_size
	NOP
	MOVBZ	R8,POF _font_size
	MOV	MDL,#060h
	DIV	R8
	MOV	POF _max_x,MDL
	MOV	R12,MDL
; main.c   1797	 max_y=80/8;
	MOV	R8,#0Ah
	MOV	POF _max_y,R8
; main.c   1798	 if(flag)
	CMP	R9,#00h
	JMPR	cc_Z,_682
; main.c   1799	 {
; main.c   1800	  disk_access=0;
	MOVB	POF _disk_access,ZEROS
; main.c   1801	  draw_mode=1;
	MOVB	RL1,#01h
	MOVB	POF _draw_mode,RL1
; main.c   1802	  if (!terminated) SendMessage((void far *)0x3B5E8,0xF8,dia_id); //Перерисовываем
	MOV	R9,POF _terminated
	JMPR	cc_NZ,_682
	MOV	R12,#035E8h
	MOV	R13,#0Eh
	MOV	R14,#0F8h
	MOV	R15,POF _dia_id
	CALLS	SEG _SendMessage,_SendMessage
; main.c   1803	 }
_682:
; main.c   1804	}
	ADD	R0,#020h
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_loadfont	ENDP
; main.c   1805	
; main.c   1806	void setfont(char sz)
; main.c   1807	{
	PUBLIC	_setfont
_setfont	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
;     sz = R12
; 
; main.c   1808	 font_size=sz;
	MOV	DPP0,#PAG _font_size
	MOV	R1,R12
	MOVB	POF _font_size,RL1
; main.c   1809	 if (disk_access==FIRSTLOAD) //Пришли из первой загрузки
	MOVB	RL1,POF _disk_access
	CMPB	RL1,#01h
	JMPR	cc_NE,_683
; main.c   1810	 {
; main.c   1811	  disable_exit=1;
	MOVB	RL2,#01h
	MOVB	POF _disable_exit,RL2
; main.c   1812	  DisplayMessageBoxV(1,0x55A);
	MOV	R12,#01h
	MOV	R13,#055Ah
	JMPS	SEG _DisplayMessageBoxV,_DisplayMessageBoxV
; main.c   1813	  return;
	RETV
; main.c   1814	 }
_683:
; main.c   1815	 disk_access=FIRSTLOAD;
	MOV	DPP0,#PAG _disk_access
	MOVB	RL1,#01h
	MOVB	POF _disk_access,RL1
; main.c   1816	 draw_mode=255; //Экран приветствия
	MOVB	POF _draw_mode,ONES
; main.c   1817	 FilesysICall_I(loadfont,1);
	MOV	R12,#SOF _loadfont
	MOV	R13,#SEG _loadfont
	MOV	R14,#01h
	CALLS	SEG _FilesysICall_I,_FilesysICall_I
; main.c   1818	 GeneralFunc(1);
	MOV	R12,#01h
	CALLS	SEG _GeneralFunc,_GeneralFunc
; main.c   1819	}
_684:
	RETS
_setfont	ENDP
; main.c   1820	
; main.c   1821	void load_setfont4(void){setfont(4);}
	PUBLIC	_load_setfont4
_load_setfont4	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
	MOV	R12,#04h
	JMPS	SEG _setfont,_setfont
	RETV
_load_setfont4	ENDP
; main.c   1822	void load_setfont6(void){setfont(6);}
	PUBLIC	_load_setfont6
_load_setfont6	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
	MOV	R12,#06h
	JMPS	SEG _setfont,_setfont
	RETV
_load_setfont6	ENDP
; main.c   1823	void load_setfont8(void){setfont(8);}
	PUBLIC	_load_setfont8
_load_setfont8	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
	MOV	R12,#08h
	JMPS	SEG _setfont,_setfont
	RETV
_load_setfont8	ENDP
; main.c   1824	
; main.c   1825	void FirstLoadFile(unsigned int fmt);
; main.c   1826	
; main.c   1827	void load_direct(void)
; main.c   1828	{
	PUBLIC	_load_direct
_load_direct	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   1829	 draw_mode=255;
	MOV	DPP0,#PAG _draw_mode
	MOVB	RL1,#01h
	MOVB	POF _draw_mode,ONES
; main.c   1830	 disk_access=FIRSTLOAD;
	MOVB	POF _disk_access,RL1
; main.c   1831	 HISTORY.fmt=0;
	MOV	DPP0,#PAG _HISTORY
	MOV	R12,#01h
	MOVB	POF (_HISTORY+129),ZEROS
; main.c   1832	 GeneralFunc(1);
	CALLS	SEG _GeneralFunc,_GeneralFunc
; main.c   1833	 FilesysICall_UI(FirstLoadFile,0);
	MOV	R12,#SOF _FirstLoadFile
	MOV	R13,#SEG _FirstLoadFile
	MOV	R14,#00h
	JMPS	SEG _FilesysICall_UI,_FilesysICall_UI
; main.c   1834	}
	RETV
_load_direct	ENDP
; main.c   1835	
; main.c   1836	void load_format(void)
; main.c   1837	{
	PUBLIC	_load_format
_load_format	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   1838	 draw_mode=255;
	MOV	DPP0,#PAG _draw_mode
	MOVB	RL1,#01h
	MOVB	POF _draw_mode,ONES
; main.c   1839	 disk_access=FIRSTLOAD;
	MOVB	POF _disk_access,RL1
; main.c   1840	 HISTORY.fmt=1;
	MOV	DPP0,#PAG _HISTORY
	MOV	R12,#01h
	MOVB	POF (_HISTORY+129),RL1
; main.c   1841	 GeneralFunc(1);
	CALLS	SEG _GeneralFunc,_GeneralFunc
; main.c   1842	 FilesysICall_UI(FirstLoadFile,1);
	MOV	R12,#SOF _FirstLoadFile
	MOV	R13,#SEG _FirstLoadFile
	MOV	R14,#01h
	JMPS	SEG _FilesysICall_UI,_FilesysICall_UI
; main.c   1843	}
	RETV
_load_format	ENDP
; main.c   1844	
; main.c   1845	void load_eolspc(void)
; main.c   1846	{
	PUBLIC	_load_eolspc
_load_eolspc	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   1847	 draw_mode=255;
	MOV	DPP0,#PAG _draw_mode
	MOVB	RL1,#01h
	MOVB	POF _draw_mode,ONES
; main.c   1848	 disk_access=FIRSTLOAD;
	MOVB	POF _disk_access,RL1
; main.c   1849	 HISTORY.fmt=2;
	MOV	DPP0,#PAG _HISTORY
	MOVB	RL2,#02h
	MOVB	POF (_HISTORY+129),RL2
; main.c   1850	 GeneralFunc(1);
	MOV	R12,#01h
	CALLS	SEG _GeneralFunc,_GeneralFunc
; main.c   1851	 FilesysICall_UI(FirstLoadFile,2);
	MOV	R12,#SOF _FirstLoadFile
	MOV	R13,#SEG _FirstLoadFile
	MOV	R14,#02h
	JMPS	SEG _FilesysICall_UI,_FilesysICall_UI
; main.c   1852	}
	RETV
_load_eolspc	ENDP
; main.c   1853	
; main.c   1854	void load_pad(void)
; main.c   1855	{
	PUBLIC	_load_pad
_load_pad	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   1856	 HISTORY.fmt^=0x80;
	MOV	DPP0,#PAG _HISTORY
	MOV	R12,#01h
	MOVB	RL1,POF (_HISTORY+129)
	XORB	RL1,#080h
	MOVB	POF (_HISTORY+129),RL1
; main.c   1857	 GeneralFunc(1);
	JMPS	SEG _GeneralFunc,_GeneralFunc
; main.c   1858	}
	RETV
_load_pad	ENDP
; main.c   1859	
; main.c   1860	void loadmenu_ITEMPROC(char far* Unk1, int Curr, int Unk2)
; main.c   1861	{
	PUBLIC	_loadmenu_ITEMPROC
_loadmenu_ITEMPROC	PROC	FAR
MAIN_2_PR	ENDS

MAIN_7_CO	SECTION	DATA WORD PUBLIC 'CROM'
__swtable739	LABEL	WORD
	DW	SOF _715
	DW	SOF _716
	DW	SOF _717
	DW	SOF _718
	DW	SOF _719
	DW	SOF _720
	DW	SOF _726
	DW	SOF _734
MAIN_7_CO	ENDS

MAIN_2_PR	SECTION	CODE
; Locals:
; 
; Statics:
; 
; CSEs:
;     i = R1
;     Curr = R14
;     Unk1 = R12R13
;     Unk2 = R15
; 
; main.c   1862	 int i=0;
	MOV	R1,#00h
; main.c   1863	 switch(Curr)
	MOV	R2,R14
	CMP	R2,#07h
	JMPA	cc_UGT,_738
	SHL	R2,#01h
	ADD	R2,#POF __swtable739
	EXTP	#PAG __swtable739,#01h
	MOV	R2,[R2]
	JMPI	cc_UC,[R2]
; main.c   1864	 {
; main.c   1865	  case 0: if (font_size==4) i=1; else i=0; break;
_715:
	MOV	DPP0,#PAG _font_size
	NOP
	MOVB	RL1,POF _font_size
	CMPB	RL1,#04h
	JMPR	cc_NE,_725
	JMPA	cc_UC,_732
; main.c   1866	  case 1: if (font_size==6) i=1; else i=0; break;
_716:
	MOV	DPP0,#PAG _font_size
	NOP
	MOVB	RL1,POF _font_size
	CMPB	RL1,#06h
	JMPR	cc_NE,_725
	JMPR	cc_UC,_732
; main.c   1867	  case 2: if (font_size==8) i=1; else i=0; break;
_717:
	MOV	DPP0,#PAG _font_size
	NOP
	MOVB	RL1,POF _font_size
	CMPB	RL1,#08h
	JMPR	cc_NE,_725
	JMPR	cc_UC,_732
; main.c   1868	  case 3: if ((HISTORY.fmt&0x7F)==0) i=1; else i=0; break;
_718:
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOVB	RL1,POF (_HISTORY+129)
	AND	R1,#07Fh
	JMPR	cc_NZ,_725
	JMPR	cc_UC,_732
; main.c   1869	  case 4: if ((HISTORY.fmt&0x7F)==1) i=1; else i=0; break;
_719:
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOVB	RL1,POF (_HISTORY+129)
	AND	R1,#07Fh
	CMP	R1,#01h
	JMPR	cc_NE,_725
	JMPR	cc_UC,_732
; main.c   1870	  case 5: if ((HISTORY.fmt&0x7F)==2) i=1; else i=0; break;
_720:
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOVB	RL1,POF (_HISTORY+129)
	AND	R1,#07Fh
	CMP	R1,#02h
	JMPR	cc_EQ,_732
_725:
	MOV	R1,#00h
	JMPR	cc_UC,_738
; main.c   1871	  case 6: if (!(HISTORY.fmt&0x80)) i=1; else i=2; break;
_726:
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOVB	RL1,POF (_HISTORY+129)
	JB	R1.7,_733
_732:
	MOV	R1,#01h
	JMPR	cc_UC,_738
_733:
	MOV	R1,#02h
	JMPR	cc_UC,_738
; main.c   1872	  case 7: i=4; break;
_734:
	MOV	R1,#04h
; main.c   1873	 }
_738:
; main.c   1874	 SetMenuItemIcon(Unk1,Curr,Unk2,i);
	MOV	R1,R1
	MOV	[-R0],R1
	CALLS	SEG _SetMenuItemIcon,_SetMenuItemIcon
	ADD	R0,#02h
; main.c   1875	}
	RETS
_loadmenu_ITEMPROC	ENDP
; main.c   1876	
; main.c   1877	void load_save(void)
; main.c   1878	{
	PUBLIC	_load_save
_load_save	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   1879	 GeneralFunc(1);
	MOV	R12,#01h
	CALLS	SEG _GeneralFunc,_GeneralFunc
; main.c   1880	 CreateSaveAsDialog();
	JMPS	SEG _CreateSaveAsDialog,_CreateSaveAsDialog
; main.c   1881	}
	RETV
_load_save	ENDP
; main.c   1882	
; main.c   1883	static const struct ITEMSHNDL far loadmenu_HNDLS[]=
MAIN_2_PR	ENDS

MAIN_3_FC	SECTION	DATA
_loadmenu_HNDLS	LABEL	WORD
	DSPTR	_load_setfont4,_load_setfont6,_load_setfont8,_load_direct,_load_format
	DSPTR	_load_eolspc,_load_pad,_load_save
; main.c   1884	{
; main.c   1885	 load_setfont4,
; main.c   1886	 load_setfont6,
; main.c   1887	 load_setfont8,
; main.c   1888	 load_direct,
; main.c   1889	 load_format,
; main.c   1890	 load_eolspc,
; main.c   1891	 load_pad,
; main.c   1892	 load_save
; main.c   1893	};
; main.c   1894	
; main.c   1895	static const struct MENUHEADER far loadmenu_HDR=
_loadmenu_HDR	LABEL	WORD
	DW	00h,00h,065h,0Ch
	DW	0DB0h,02E2h
	DW	0E27h,07FFFh
; main.c   1896	{
; main.c   1897	 0x00,0x00,0x65,0x0C,(char far*)0xB88DB0,0xE27,0x7FFF 
; main.c   1898	};
; main.c   1899	
; main.c   1900	static const struct MENUSTRUCT far loadmenu_STRUCT=
_loadmenu_STRUCT	LABEL	WORD
	DW	00h,00h,00h,00h,00h,00h,00h,00h
	DW	03C06h,02EBh,03BFCh,02EBh
	DW	01h,00h
	DSPTR	_loadmenu_ITEMPROC
	DPPTR	_loadmenu_ITEMS,_loadmenu_HNDLS
	DW	08h
; main.c   1901	{
; main.c   1902	 NULL,NULL,NULL,NULL,
; main.c   1903	 (char far*)0xBAFC06,(char far*)0xBAFBFC,
; main.c   1904	 0x01,0x00,
; main.c   1905	 loadmenu_ITEMPROC,
; main.c   1906	 (struct ITEMSDATA far*)&loadmenu_ITEMS,
; main.c   1907	 (struct ITEMSHNDL far*)&loadmenu_HNDLS,
; main.c   1908	 8
; main.c   1909	};
; main.c   1910	
; main.c   1911	void DrawLoadMenu(void)
; main.c   1912	{
	PUBLIC	_DrawLoadMenu
MAIN_3_FC	ENDS

MAIN_2_PR	SECTION	CODE
_DrawLoadMenu	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   1913	 setExtSIDTable(loadmenu_ExtendedSTR);
	MOV	R12,#POF _loadmenu_ExtendedSTR
	MOV	R13,#PAG _loadmenu_ExtendedSTR
	CALLS	SEG _setExtSIDTable,_setExtSIDTable
; main.c   1914	 CreateMenu02(menu_full,0,0,
; main.c   1915	              (struct MENUSTRUCT far*)&loadmenu_STRUCT,
; main.c   1916	              (struct MENUHEADER far*)&loadmenu_HDR,
; main.c   1917	              0,0,0,0);
	MOV	R12,#00h
	MOV	R13,#00h
	MOV	[-R0],R13
	MOV	[-R0],R12
	MOV	R14,#00h
	MOV	R15,#00h
	MOV	[-R0],R15
	MOV	[-R0],R14
	MOV	R1,#00h
	MOV	R2,#00h
	MOV	[-R0],R2
	MOV	[-R0],R1
	MOV	R3,#00h
	MOV	R4,#00h
	MOV	[-R0],R4
	MOV	[-R0],R3
	MOV	R5,#POF _loadmenu_HDR
	MOV	R10,#PAG _loadmenu_HDR
	MOV	[-R0],R10
	MOV	[-R0],R5
	MOV	R11,#POF _loadmenu_STRUCT
	MOV	R12,#PAG _loadmenu_STRUCT
	MOV	[-R0],R12
	MOV	[-R0],R11
	MOV	R12,#00h
	MOV	R13,#00h
	MOV	R14,#00h
	CALLS	SEG _CreateMenu02,_CreateMenu02
	ADD	R0,#018h
; main.c   1918	}
	RETS
_DrawLoadMenu	ENDP
; main.c   1919	
; main.c   1920	//-------------------------------------------------------------------
; main.c   1921	//===================================================================
; main.c   1922	// Ввод строки
; main.c   1923	//===================================================================
; main.c   1924	void InDigitStrProcess(STR s, char key, unsigned int protect_len, unsigned int edit_len)
; main.c   1925	{
	PUBLIC	_InDigitStrProcess
_InDigitStrProcess	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	[-R0],R6
	MOV	R9,R13
	MOV	R8,R12
	MOV	R6,R14
; Locals:
; 
; Statics:
; 
; CSEs:
;     l = R12
;     s = R8R9
;     key = RL6
;     l1 = R13
;     protect_len = R15
;     edit_len = offset 6
; 
; main.c   1926	 unsigned int l=strlen(s);
	MOV	[-R0],R15
	MOV	R12,R8
	MOV	R13,R9
	CALLS	SEG _strlen,_strlen
	MOV	R12,R4
	MOV	R15,[R0+]
; main.c   1927	 unsigned int l1=l-protect_len;
	MOV	R13,R12
	SUB	R13,R15
; main.c   1928	 if ((key>='0')&&(key<='9')&&(l1<edit_len))
	CMPB	RL6,#030h
	JMPR	cc_ULT,_745
	CMPB	RL6,#039h
	JMPR	cc_UGT,_745
	MOV	R14,[R0+#06H]
	CMP	R13,R14
	JMPR	cc_UGE,_745
; main.c   1929	 {
; main.c   1930	  s[l]=key; s[l+1]=0;
	MOV	R15,R8
	MOV	R1,R9
	ADD	R15,R12
	EXTP	R1,#01h
	MOVB	[R15],RL6
	MOVB	RL1,#00h
	MOV	R14,R8
	MOV	R15,R9
	ADD	R14,#01h
	ADD	R14,R12
	EXTP	R15,#01h
	MOVB	[R14],RL1
; main.c   1931	 }
_745:
; main.c   1932	 if ((key==LEFT_SOFT)&&(l1!=0))
	CMPB	RL6,#01h
	JMPR	cc_NE,_747
	CMP	R13,#00h
	JMPR	cc_Z,_747
; main.c   1933	 {
; main.c   1934	  s[l-1]=0;
	MOVB	RL6,#00h
	MOV	R13,R8
	MOV	R14,R9
	SUB	R13,#01h
	ADD	R13,R12
	EXTP	R14,#01h
	MOVB	[R13],RL6
; main.c   1935	 }
_747:
; main.c   1936	 FillRect(0,0,101,80,0);
	MOV	R6,#00h
	MOV	[-R0],R6
	MOV	R12,R6
	MOV	R13,R6
	MOV	R14,#065h
	MOV	R15,#050h
	CALLS	SEG _FillRect,_FillRect
; main.c   1937	 DrawString(0,0,101,56,s,3);
	MOV	R6,#03h
	MOV	[R0],R6
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	R12,#00h
	MOV	R13,#00h
	MOV	R14,#065h
	MOV	R15,#038h
	CALLS	SEG _DrawString,_DrawString
	ADD	R0,#06h
; main.c   1938	 DrawString(0,56,101,12,(STR)"Digit - input",3);
	MOV	R8,#03h
	MOV	[-R0],R8
	MOV	R9,#POF _740
	MOV	R6,#PAG _740
	MOV	[-R0],R6
	MOV	[-R0],R9
	MOV	R12,#00h
	MOV	R13,#038h
	MOV	R14,#065h
	MOV	R15,#0Ch
	CALLS	SEG _DrawString,_DrawString
	ADD	R0,#06h
; main.c   1939	 DrawString(0,68,50,12,(STR)"Clear",3);
	MOV	R8,#03h
	MOV	[-R0],R8
	MOV	R9,#POF _741
	MOV	R6,#PAG _741
	MOV	[-R0],R6
	MOV	[-R0],R9
	MOV	R12,#00h
	MOV	R13,#044h
	MOV	R14,#032h
	MOV	R15,#0Ch
	CALLS	SEG _DrawString,_DrawString
	ADD	R0,#06h
; main.c   1940	 DrawString(51,68,50,12,(STR)"Ok",3);
	MOV	R8,#03h
	MOV	[-R0],R8
	MOV	R9,#POF _742
	MOV	R6,#PAG _742
	MOV	[-R0],R6
	MOV	[-R0],R9
	MOV	R12,#033h
	MOV	R13,#044h
	MOV	R14,#032h
	MOV	R15,#0Ch
	CALLS	SEG _DrawString,_DrawString
	ADD	R0,#06h
; main.c   1941	}
	MOV	R6,[R0+]
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_InDigitStrProcess	ENDP
; main.c   1942	
; main.c   1943	static const STR gl_01[]=
MAIN_2_PR	ENDS

MAIN_3_FC	SECTION	DATA
_gl_01	LABEL	WORD
	DPPTR	_748,_749
; main.c   1944	{
; main.c   1945	 "Go to line\nnumber:\n\0\0\0\0\0",
; main.c   1946	 "Go to percent\n\0\0\0"
; main.c   1947	};
; main.c   1948	
; main.c   1949	unsigned int far gl_num;
MAIN_3_FC	ENDS

MAIN_1_FB	SECTION	DATA
_gl_num	LABEL	WORD
	DS	2
	PUBLIC	_gl_num
; main.c   1950	
; main.c   1951	unsigned long my_atoi(STR s)
; main.c   1952	{
	PUBLIC	_my_atoi
MAIN_1_FB	ENDS

MAIN_2_PR	SECTION	CODE
_my_atoi	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
;     r = R14R15
;     s = R12R13
;     c = RL1
; 
; main.c   1953	 unsigned long r=0;
	MOV	R14,#00h
	MOV	R15,#00h
; main.c   1954	 for(;;)
_750:
; main.c   1955	 {
; main.c   1956	  unsigned char c=*s-'0';
	EXTP	R13,#01h
	MOVB	RL1,[R12]
	SUBB	RL1,#030h
; main.c   1957	  if (c>9) break;
	CMPB	RL1,#09h
	JMPR	cc_UGT,_751
; main.c   1958	  r=r*10+c;
	MOV	R4,R14
	MOV	R5,R15
	MOV	R10,#0Ah
	MOV	R11,#00h
	CALLS	SEG __mul,__mul
	MOV	R14,R4
	MOV	R15,R5
	MOVBZ	R1,RL1
	MOV	R2,#00h
	ADD	R14,R1
	ADDC	R15,R2
; main.c   1959	  s++;
	ADD	R12,#01h
	JMPR	cc_UC,_750
; main.c   1960	 }
_751:
; main.c   1961	 return(r);
	MOV	R4,R14
	MOV	R5,R15
; main.c   1962	}
	RETS
_my_atoi	ENDP
; main.c   1963	
; main.c   1964	void gl_oncreate(void)
; main.c   1965	{
	PUBLIC	_gl_oncreate
_gl_oncreate	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
;     i = R12
; 
; main.c   1966	 int i=gl_num;
	MOV	DPP0,#PAG _gl_num
	NOP
	MOV	R12,POF _gl_num
; main.c   1967	 InDigitStrProcess(gl_01[i],0,i?14:19,i?3:5);
	MOV	[-R0],R12
	CMP	R12,#00h
	JMPR	cc_Z,_752
_753:
	MOV	R12,#03h
	JMPR	cc_UC,_754
_752:
	MOV	R12,#05h
_754:
	MOV	[-R0],R12
	MOV	R12,[R0+#02H]
	SHL	R12,#02h
	MOV	R14,R12
	EXTP	#PAG _gl_01,#02h
	MOV	R12,[R14+#POF _gl_01]
	MOV	R13,[R14+#POF _gl_01+2]
	MOV	R14,#00h
	MOV	[-R0],R12
	MOV	R12,[R0+#04H]
	JMPR	cc_Z,_755
_756:
	MOV	R15,#0Eh
	JMPR	cc_UC,_757
_755:
	MOV	R15,#013h
_757:
	MOV	R12,[R0+]
	MOV	R1,R13
	CALLS	SEG _InDigitStrProcess,_InDigitStrProcess
	ADD	R0,#04h
; main.c   1968	}
	RETS
_gl_oncreate	ENDP
; main.c   1969	
; main.c   1970	int gl_onkey(void far* data, struct MSG far* Msg)
; main.c   1971	{
	PUBLIC	_gl_onkey
_gl_onkey	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	[-R0],R6
	MOV	[-R0],R13
	MOV	[-R0],R12
	SUB	R0,#02h
	MOV	R6,R15
; Locals:
; 
; Statics:
; 
; CSEs:
;     i = R8
;     Msg + 4 = R14R15
;     Msg = R9R6
;     i * 4 = offset 0
;     data = offset 2
;     *&gl_01 + 19 = R12R13
;     Msg + 6 = R12R13
;     *(&gl_01 + 4) + 14 = R12R13
; 
; main.c   1972	 int i=gl_num;
	MOV	DPP0,#PAG _gl_num
	MOV	R9,R14
	MOV	R8,POF _gl_num
; main.c   1973	 if (IsFocus(data))
	CALLS	SEG _IsFocus,_IsFocus
	CMP	R4,#00h
	JMPA	cc_Z,_788
; main.c   1974	 {
; main.c   1975	  InDigitStrProcess(gl_01[i],0,i?14:19,i?3:5);
	CMP	R8,#00h
	JMPR	cc_Z,_790
_791:
	MOV	R12,#03h
	JMPR	cc_UC,_792
_790:
	MOV	R12,#05h
_792:
	MOV	[-R0],R12
	MOV	R13,R8
	SHL	R13,#02h
	MOV	[R0+#02H],R13
	MOV	R14,R13
	EXTP	#PAG _gl_01,#02h
	MOV	R12,[R14+#POF _gl_01]
	MOV	R13,[R14+#POF _gl_01+2]
	MOV	R14,#00h
	CMP	R8,#00h
	JMPR	cc_Z,_793
_794:
	MOV	R15,#0Eh
	JMPR	cc_UC,_795
_793:
	MOV	R15,#013h
_795:
	CALLS	SEG _InDigitStrProcess,_InDigitStrProcess
	ADD	R0,#02h
; main.c   1976	  if (Msg->Msg==KEY_DOWN)
	MOV	R14,R9
	MOV	R15,R6
	ADD	R14,#04h
	EXTP	R15,#01h
	MOV	R12,[R14]
	CMP	R12,#0E9h
	JMPA	cc_NE,_781
; main.c   1977	  {
; main.c   1978	   switch(Msg->Param[0])
	MOV	R12,R9
	MOV	R13,R6
	ADD	R12,#06h
	EXTP	R13,#01h
	MOV	R9,[R12]
	CMP	R9,#04h
	JMPR	cc_EQ,_776
	CMP	R9,#0Bh
	JMPR	cc_EQ,_776
	CMP	R9,#0Ch
	JMPA	cc_EQ,_779
	JMPA	cc_UC,_780
; main.c   1979	   {
; main.c   1980	    case RIGHT_SOFT:
; main.c   1981	    case GREEN_BUTTON:
_776:
; main.c   1982	     if (i)
	CMP	R8,#00h
	JMPR	cc_Z,_777
; main.c   1983		 {
; main.c   1984		  if (!gl_01[1][14]) return(0);
	MOV	DPP0,#PAG _gl_01
	NOP
	MOV	R12,POF (_gl_01+4)
	MOV	R13,POF (_gl_01+6)
	ADD	R12,#0Eh
	EXTP	R13,#01h
	MOVB	RL6,[R12]
	JMPA	cc_Z,_786
; main.c   1985		  seek_to_line=total_line*my_atoi(gl_01[1]+14)/100;
	CALLS	SEG _my_atoi,_my_atoi
	MOV	DPP0,#PAG _total_line
	NOP
	MOV	R10,POF _total_line
	MOV	R11,POF (_total_line+2)
	CALLS	SEG __mul,__mul
	MOV	R10,#064h
	MOV	R11,#00h
	CALLS	SEG __udil,__udil
	MOV	DPP0,#PAG _seek_to_line
	NOP
	MOV	POF _seek_to_line,R4
	MOV	POF (_seek_to_line+2),R5
; main.c   1986	     }
	JMPR	cc_UC,_778
_777:
; main.c   1987		 else
; main.c   1988		 {
; main.c   1989		  if (!gl_01[0][19]) return(0);
	MOV	DPP0,#PAG _gl_01
	NOP
	MOV	R12,POF _gl_01
	MOV	R13,POF (_gl_01+2)
	ADD	R12,#013h
	EXTP	R13,#01h
	MOVB	RL6,[R12]
	JMPA	cc_Z,_786
; main.c   1990		  seek_to_line=my_atoi(gl_01[0]+19);
	CALLS	SEG _my_atoi,_my_atoi
	MOV	DPP0,#PAG _seek_to_line
	NOP
	MOV	POF _seek_to_line,R4
	MOV	POF (_seek_to_line+2),R5
; main.c   1991	     }
_778:
; main.c   1992	     draw_mode=2; //Переходим на нужную строку
	MOV	DPP0,#PAG _draw_mode
	MOVB	RL6,#02h
	MOVB	POF _draw_mode,RL6
; main.c   1993	     FilesysICall(GotoLine);
	MOV	R12,#SOF _GotoLine
	MOV	R13,#SEG _GotoLine
	CALLS	SEG _FilesysICall,_FilesysICall
; main.c   1994	    case RED_BUTTON:
_779:
; main.c   1995	     CloseDialogWithSoftKeys(((int far *)data)[6]);
	MOV	R8,[R0+#02H]
	MOV	R9,[R0+#04H]
	EXTP	R9,#01h
	MOV	R12,[R8+#0CH]
	CALLS	SEG _CloseDialogWithSoftKeys,_CloseDialogWithSoftKeys
; main.c   1996	 	return(0);
	JMPR	cc_UC,_786
; main.c   1997	   }
_780:
; main.c   1998	   InDigitStrProcess(gl_01[i],Msg->Param[0],i?14:19,i?3:5);
	MOV	R9,R12
	MOV	R6,R13
	CMP	R8,#00h
	JMPR	cc_Z,_796
_797:
	MOV	R12,#03h
	JMPR	cc_UC,_798
_796:
	MOV	R12,#05h
_798:
	MOV	[-R0],R12
	MOV	R13,[R0+#02H]
	MOV	R14,R13
	EXTP	#PAG _gl_01,#02h
	MOV	R12,[R14+#POF _gl_01]
	MOV	R13,[R14+#POF _gl_01+2]
	EXTP	R6,#01h
	MOV	R14,[R9]
	CMP	R8,#00h
	JMPR	cc_Z,_799
_800:
	MOV	R15,#0Eh
	JMPR	cc_UC,_801
_799:
	MOV	R15,#013h
_801:
	CALLS	SEG _InDigitStrProcess,_InDigitStrProcess
	ADD	R0,#02h
; main.c   1999	   return(0);  
	JMPR	cc_UC,_786
; main.c   2000	  }
_781:
; main.c   2001	  if ((Msg->Msg==KEY_UP)||(Msg->Msg==LONG_PRESS)) return(0);
	EXTP	R15,#01h
	MOV	R8,[R14]
	CMP	R8,#0EAh
	JMPR	cc_EQ,_786
	EXTP	R15,#01h
	MOV	R8,[R14]
	CMP	R8,#0EBh
	JMPR	cc_NE,_788
_786:
	MOV	R4,#00h
	JMPR	cc_UC,_789
; main.c   2002	 }
_788:
; main.c   2003	 return(1);
	MOV	R4,#01h
; main.c   2004	}
_789:
	ADD	R0,#06h
	MOV	R6,[R0+]
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_gl_onkey	ENDP
; main.c   2005	
; main.c   2006	//===================================================================
; main.c   2007	// Меню Goto...
; main.c   2008	//===================================================================
; main.c   2009	void goto_l(unsigned long l)
; main.c   2010	{
	PUBLIC	_goto_l
_goto_l	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
;     l = R12R13
; 
; main.c   2011	 seek_to_line=l;
	MOV	DPP0,#PAG _seek_to_line
	MOVB	RL1,#02h
	MOV	POF _seek_to_line,R12
	MOV	POF (_seek_to_line+2),R13
; main.c   2012	 draw_mode=2; //Переходим на нужную строку
	MOVB	POF _draw_mode,RL1
; main.c   2013	 FilesysICall(GotoLine);
	MOV	R12,#SOF _GotoLine
	MOV	R13,#SEG _GotoLine
	CALLS	SEG _FilesysICall,_FilesysICall
; main.c   2014	 GeneralFunc(1);
	MOV	R12,#01h
	JMPS	SEG _GeneralFunc,_GeneralFunc
; main.c   2015	}
	RETV
_goto_l	ENDP
; main.c   2016	
; main.c   2017	void goto_top(void)
; main.c   2018	{
	PUBLIC	_goto_top
_goto_top	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   2019	 goto_l(0);
	MOV	R12,#00h
	MOV	R13,#00h
	JMPS	SEG _goto_l,_goto_l
; main.c   2020	}
	RETV
_goto_top	ENDP
; main.c   2021	
; main.c   2022	void goto_bot(void)
; main.c   2023	{
	PUBLIC	_goto_bot
_goto_bot	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   2024	 goto_l(0xFFFFFFFF);
	MOV	R12,#0FFFFh
	MOV	R13,#0FFFFh
	JMPS	SEG _goto_l,_goto_l
; main.c   2025	}
	RETV
_goto_bot	ENDP
; main.c   2026	
; main.c   2027	void gl_onclose(void){}
	PUBLIC	_gl_onclose
_gl_onclose	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
	RETS
_gl_onclose	ENDP
; main.c   2028	static const struct DIALOG_WSK gl_dialog=
MAIN_2_PR	ENDS

MAIN_3_FC	SECTION	DATA
_gl_dialog	LABEL	WORD
	DSPTR	_gl_onkey,_gl_oncreate,_gl_onclose
	DW	02Ch,01h
	DPPTR	_md_tab
; main.c   2029	{gl_onkey,gl_oncreate,gl_onclose,0x2C, sizeof(md_tab)/sizeof(unsigned int),md_tab};
; main.c   2030	
; main.c   2031	void goto_line(void)
; main.c   2032	{
	PUBLIC	_goto_line
MAIN_3_FC	ENDS

MAIN_2_PR	SECTION	CODE
_goto_line	PROC	FAR
; Locals:
;     mmm = offset 0
; 
; Statics:
; 
; CSEs:
; 
; main.c   2033	 unsigned char mmm[0x2C];
; main.c   2034	 gl_num=0; //Признак перехода по строке
	MOV	DPP0,#PAG _gl_num
	SUB	R0,#02Ch
	MOV	POF _gl_num,ZEROS
; main.c   2035	 GeneralFunc(1);
	MOV	R12,#01h
	CALLS	SEG _GeneralFunc,_GeneralFunc
; main.c   2036	 CreateDialogWithSoftKeys(&gl_dialog,mmm,0);
	MOV	R12,#00h
	MOV	[-R0],R12
	MOV	R12,#POF _gl_dialog
	MOV	R13,#PAG _gl_dialog
	MOV	R14,#02h
	ADD	R14,R0
	AND	R14,#03FFFh
	MOV	R15,DPP1
	CALLS	SEG _CreateDialogWithSoftKeys,_CreateDialogWithSoftKeys
	ADD	R0,#02Eh
; main.c   2037	}
	RETS
_goto_line	ENDP
; main.c   2038	
; main.c   2039	void goto_percent(void)
; main.c   2040	{
	PUBLIC	_goto_percent
_goto_percent	PROC	FAR
	SUB	R0,#02Ch
; Locals:
;     mmm = offset 0
; 
; Statics:
; 
; CSEs:
; 
; main.c   2041	 unsigned char mmm[0x2C];
; main.c   2042	 gl_num=1; //Признак перехода по процентам
	MOV	DPP0,#PAG _gl_num
	MOV	R12,#01h
	MOV	POF _gl_num,R12
; main.c   2043	 GeneralFunc(1);
	CALLS	SEG _GeneralFunc,_GeneralFunc
; main.c   2044	 CreateDialogWithSoftKeys(&gl_dialog,mmm,0);
	MOV	R12,#00h
	MOV	[-R0],R12
	MOV	R12,#POF _gl_dialog
	MOV	R13,#PAG _gl_dialog
	MOV	R14,#02h
	ADD	R14,R0
	AND	R14,#03FFFh
	MOV	R15,DPP1
	CALLS	SEG _CreateDialogWithSoftKeys,_CreateDialogWithSoftKeys
	ADD	R0,#02Eh
; main.c   2045	}
	RETS
_goto_percent	ENDP
; main.c   2046	
; main.c   2047	void goto_last_saved(void)
; main.c   2048	{
	PUBLIC	_goto_last_saved
_goto_last_saved	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   2049	 goto_l(HISTORY.line);
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOV	R12,POF (_HISTORY+132)
	MOV	R13,POF (_HISTORY+134)
	JMPS	SEG _goto_l,_goto_l
; main.c   2050	}
	RETV
_goto_last_saved	ENDP
; main.c   2051	
; main.c   2052	void goto_book1(void)
; main.c   2053	{
	PUBLIC	_goto_book1
_goto_book1	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   2054	 goto_l(HISTORY.bookm1);
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOV	R12,POF (_HISTORY+140)
	MOV	R13,POF (_HISTORY+142)
	JMPS	SEG _goto_l,_goto_l
; main.c   2055	}
	RETV
_goto_book1	ENDP
; main.c   2056	void goto_book2(void)
; main.c   2057	{
	PUBLIC	_goto_book2
_goto_book2	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   2058	 goto_l(HISTORY.bookm2);
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOV	R12,POF (_HISTORY+144)
	MOV	R13,POF (_HISTORY+146)
	JMPS	SEG _goto_l,_goto_l
; main.c   2059	}
	RETV
_goto_book2	ENDP
; main.c   2060	void goto_book3(void)
; main.c   2061	{
	PUBLIC	_goto_book3
_goto_book3	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   2062	 goto_l(HISTORY.bookm3);
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOV	R12,POF (_HISTORY+148)
	MOV	R13,POF (_HISTORY+150)
	JMPS	SEG _goto_l,_goto_l
; main.c   2063	}
	RETV
_goto_book3	ENDP
; main.c   2064	void goto_book4(void)
; main.c   2065	{
	PUBLIC	_goto_book4
_goto_book4	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   2066	 goto_l(HISTORY.bookm4);
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOV	R12,POF (_HISTORY+152)
	MOV	R13,POF (_HISTORY+154)
	JMPS	SEG _goto_l,_goto_l
; main.c   2067	}
	RETV
_goto_book4	ENDP
; main.c   2068	
; main.c   2069	static const struct ITEMSDATA far gotomenu_ITEMS[]=
MAIN_2_PR	ENDS

MAIN_3_FC	SECTION	DATA
_gotomenu_ITEMS	LABEL	WORD
	DW	00h,00h
	DW	0E2Bh,0E2Bh,00h
	DW	00h,00h
	DW	03h,02BCh
	DW	00h,00h
	DW	0E2Ch,0E2Ch,00h
	DW	00h,00h
	DW	03h,02BCh
	DW	00h,00h
	DW	0E2Dh,0E2Dh,00h
	DW	00h,00h
	DW	03h,02BCh
	DW	00h,00h
	DW	0E2Eh,0E2Eh,00h
	DW	00h,00h
	DW	03h,02BCh
	DW	00h,00h
	DW	0E2Fh,0E2Fh,00h
	DW	00h,00h
	DW	03h,02BCh
	DW	00h,00h
	DW	0E30h,0E30h,00h
	DW	00h,00h
	DW	03h,02BCh
	DW	00h,00h
	DW	0E31h,0E31h,00h
	DW	00h,00h
	DW	03h,02BCh
	DW	00h,00h
	DW	0E32h,0E32h,00h
	DW	00h,00h
	DW	03h,02BCh
	DW	00h,00h
	DW	0E33h,0E33h,00h
	DW	00h,00h
	DW	03h,02BCh
; main.c   2070	{
; main.c   2071	 NULL, 0xE2B,0xE2B, 0,NULL,3,0x2BC,
; main.c   2072	 NULL, 0xE2C,0xE2C, 0,NULL,3,0x2BC,
; main.c   2073	 NULL, 0xE2D,0xE2D, 0,NULL,3,0x2BC,
; main.c   2074	 NULL, 0xE2E,0xE2E, 0,NULL,3,0x2BC,
; main.c   2075	 NULL, 0xE2F,0xE2F, 0,NULL,3,0x2BC,
; main.c   2076	 NULL, 0xE30,0xE30, 0,NULL,3,0x2BC,
; main.c   2077	 NULL, 0xE31,0xE31, 0,NULL,3,0x2BC,
; main.c   2078	 NULL, 0xE32,0xE32, 0,NULL,3,0x2BC,
; main.c   2079	 NULL, 0xE33,0xE33, 0,NULL,3,0x2BC
; main.c   2080	};
; main.c   2081	
; main.c   2082	static const struct ITEMSHNDL far gotomenu_HNDLS[]=
_gotomenu_HNDLS	LABEL	WORD
	DSPTR	_goto_top,_goto_line,_goto_percent,_goto_bot,_goto_last_saved
	DSPTR	_goto_book1,_goto_book2,_goto_book3,_goto_book4
; main.c   2083	{
; main.c   2084	 goto_top,
; main.c   2085	 goto_line,
; main.c   2086	 goto_percent,
; main.c   2087	 goto_bot,
; main.c   2088	 goto_last_saved,
; main.c   2089	 goto_book1,
; main.c   2090	 goto_book2,
; main.c   2091	 goto_book3,
; main.c   2092	 goto_book4
; main.c   2093	};
; main.c   2094	
; main.c   2095	static const struct MENUHEADER far gotomenu_HDR=
_gotomenu_HDR	LABEL	WORD
	DW	00h,00h,065h,0Ch
	DW	0DB0h,02E2h
	DW	0E28h,07FFFh
; main.c   2096	{
; main.c   2097	 0x00,0x00,0x65,0x0C,(char far*)0xB88DB0,0xE28,0x7FFF 
; main.c   2098	};
; main.c   2099	
; main.c   2100	static const struct MENUSTRUCT far gotomenu_STRUCT=
_gotomenu_STRUCT	LABEL	WORD
	DW	00h,00h,00h,00h,00h,00h,00h,00h
	DW	03C06h,02EBh,03BFCh,02EBh
	DW	080h,00h
	DW	00h,00h
	DPPTR	_gotomenu_ITEMS,_gotomenu_HNDLS
	DW	09h
; main.c   2101	{
; main.c   2102	 NULL,NULL,NULL,NULL,
; main.c   2103	 (char far*)0xBAFC06,(char far*)0xBAFBFC,
; main.c   2104	 0x80,0x00,
; main.c   2105	 NULL,
; main.c   2106	 (struct ITEMSDATA far*)&gotomenu_ITEMS,
; main.c   2107	 (struct ITEMSHNDL far*)&gotomenu_HNDLS,
; main.c   2108	 9
; main.c   2109	};
; main.c   2110	
; main.c   2111	void goto_menu(void)
; main.c   2112	{
	PUBLIC	_goto_menu
MAIN_3_FC	ENDS

MAIN_2_PR	SECTION	CODE
_goto_menu	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   2113	 GeneralFunc(1);
	MOV	R12,#01h
	CALLS	SEG _GeneralFunc,_GeneralFunc
; main.c   2114	 CreateMenu02(menu_full,0,0,
; main.c   2115	              (struct MENUSTRUCT far*)&gotomenu_STRUCT,
; main.c   2116	              (struct MENUHEADER far*)&gotomenu_HDR,
; main.c   2117	              0,0,0,0);
	MOV	R12,#00h
	MOV	R13,#00h
	MOV	[-R0],R13
	MOV	[-R0],R12
	MOV	R14,#00h
	MOV	R15,#00h
	MOV	[-R0],R15
	MOV	[-R0],R14
	MOV	R1,#00h
	MOV	R2,#00h
	MOV	[-R0],R2
	MOV	[-R0],R1
	MOV	R3,#00h
	MOV	R4,#00h
	MOV	[-R0],R4
	MOV	[-R0],R3
	MOV	R5,#POF _gotomenu_HDR
	MOV	R10,#PAG _gotomenu_HDR
	MOV	[-R0],R10
	MOV	[-R0],R5
	MOV	R11,#POF _gotomenu_STRUCT
	MOV	R12,#PAG _gotomenu_STRUCT
	MOV	[-R0],R12
	MOV	[-R0],R11
	MOV	R12,#00h
	MOV	R13,#00h
	MOV	R14,#00h
	CALLS	SEG _CreateMenu02,_CreateMenu02
	ADD	R0,#018h
; main.c   2118	}
	RETS
_goto_menu	ENDP
; main.c   2119	
; main.c   2120	//===================================================================
; main.c   2121	// Меню Bookmark...
; main.c   2122	//===================================================================
; main.c   2123	void set_book1(void)
; main.c   2124	{
	PUBLIC	_set_book1
_set_book1	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   2125	 HISTORY.bookm1=curline;
	MOV	DPP0,#PAG _curline
	NOP
	MOV	R12,POF _curline
	MOV	R13,POF (_curline+2)
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOV	POF (_HISTORY+140),R12
	MOV	POF (_HISTORY+142),R13
; main.c   2126	 GeneralFunc(1);
	MOV	R12,#01h
	JMPS	SEG _GeneralFunc,_GeneralFunc
; main.c   2127	}
	RETV
_set_book1	ENDP
; main.c   2128	
; main.c   2129	void set_book2(void)
; main.c   2130	{
	PUBLIC	_set_book2
_set_book2	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   2131	 HISTORY.bookm2=curline;
	MOV	DPP0,#PAG _curline
	NOP
	MOV	R12,POF _curline
	MOV	R13,POF (_curline+2)
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOV	POF (_HISTORY+144),R12
	MOV	POF (_HISTORY+146),R13
; main.c   2132	 GeneralFunc(1);
	MOV	R12,#01h
	JMPS	SEG _GeneralFunc,_GeneralFunc
; main.c   2133	}
	RETV
_set_book2	ENDP
; main.c   2134	
; main.c   2135	void set_book3(void)
; main.c   2136	{
	PUBLIC	_set_book3
_set_book3	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   2137	 HISTORY.bookm3=curline;
	MOV	DPP0,#PAG _curline
	NOP
	MOV	R12,POF _curline
	MOV	R13,POF (_curline+2)
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOV	POF (_HISTORY+148),R12
	MOV	POF (_HISTORY+150),R13
; main.c   2138	 GeneralFunc(1);
	MOV	R12,#01h
	JMPS	SEG _GeneralFunc,_GeneralFunc
; main.c   2139	}
	RETV
_set_book3	ENDP
; main.c   2140	
; main.c   2141	void set_book4(void)
; main.c   2142	{
	PUBLIC	_set_book4
_set_book4	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   2143	 HISTORY.bookm4=curline;
	MOV	DPP0,#PAG _curline
	NOP
	MOV	R12,POF _curline
	MOV	R13,POF (_curline+2)
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOV	POF (_HISTORY+152),R12
	MOV	POF (_HISTORY+154),R13
; main.c   2144	 GeneralFunc(1);
	MOV	R12,#01h
	JMPS	SEG _GeneralFunc,_GeneralFunc
; main.c   2145	}
	RETV
_set_book4	ENDP
; main.c   2146	
; main.c   2147	static const struct ITEMSDATA far bookmenu_ITEMS[]=
MAIN_2_PR	ENDS

MAIN_3_FC	SECTION	DATA
_bookmenu_ITEMS	LABEL	WORD
	DW	00h,00h
	DW	0E30h,0E30h,00h
	DW	00h,00h
	DW	03h,02BCh
	DW	00h,00h
	DW	0E31h,0E31h,00h
	DW	00h,00h
	DW	03h,02BCh
	DW	00h,00h
	DW	0E32h,0E32h,00h
	DW	00h,00h
	DW	03h,02BCh
	DW	00h,00h
	DW	0E33h,0E33h,00h
	DW	00h,00h
	DW	03h,02BCh
; main.c   2148	{
; main.c   2149	 NULL, 0xE30,0xE30, 0,NULL,3,0x2BC,
; main.c   2150	 NULL, 0xE31,0xE31, 0,NULL,3,0x2BC,
; main.c   2151	 NULL, 0xE32,0xE32, 0,NULL,3,0x2BC,
; main.c   2152	 NULL, 0xE33,0xE33, 0,NULL,3,0x2BC
; main.c   2153	};
; main.c   2154	
; main.c   2155	static const struct ITEMSHNDL far bookmenu_HNDLS[]=
_bookmenu_HNDLS	LABEL	WORD
	DSPTR	_set_book1,_set_book2,_set_book3,_set_book4
; main.c   2156	{
; main.c   2157	 set_book1,
; main.c   2158	 set_book2,
; main.c   2159	 set_book3,
; main.c   2160	 set_book4
; main.c   2161	};
; main.c   2162	
; main.c   2163	static const struct MENUHEADER far bookmenu_HDR=
_bookmenu_HDR	LABEL	WORD
	DW	00h,00h,065h,0Ch
	DW	0DB0h,02E2h
	DW	0E29h,07FFFh
; main.c   2164	{
; main.c   2165	 0x00,0x00,0x65,0x0C,(char far*)0xB88DB0,0xE29,0x7FFF 
; main.c   2166	};
; main.c   2167	
; main.c   2168	static const struct MENUSTRUCT far bookmenu_STRUCT=
_bookmenu_STRUCT	LABEL	WORD
	DW	00h,00h,00h,00h,00h,00h,00h,00h
	DW	03C06h,02EBh,03BFCh,02EBh
	DW	080h,00h
	DW	00h,00h
	DPPTR	_bookmenu_ITEMS,_bookmenu_HNDLS
	DW	04h
; main.c   2169	{
; main.c   2170	 NULL,NULL,NULL,NULL,
; main.c   2171	 (char far*)0xBAFC06,(char far*)0xBAFBFC,
; main.c   2172	 0x80,0x00,
; main.c   2173	 NULL,
; main.c   2174	 (struct ITEMSDATA far*)&bookmenu_ITEMS,
; main.c   2175	 (struct ITEMSHNDL far*)&bookmenu_HNDLS,
; main.c   2176	 4
; main.c   2177	};
; main.c   2178	
; main.c   2179	void bookm_menu(void)
; main.c   2180	{
	PUBLIC	_bookm_menu
MAIN_3_FC	ENDS

MAIN_2_PR	SECTION	CODE
_bookm_menu	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   2181	 GeneralFunc(1);
	MOV	R12,#01h
	CALLS	SEG _GeneralFunc,_GeneralFunc
; main.c   2182	 CreateMenu02(menu_full,0,0,
; main.c   2183	              (struct MENUSTRUCT far*)&bookmenu_STRUCT,
; main.c   2184	              (struct MENUHEADER far*)&bookmenu_HDR,
; main.c   2185	              0,0,0,0);
	MOV	R12,#00h
	MOV	R13,#00h
	MOV	[-R0],R13
	MOV	[-R0],R12
	MOV	R14,#00h
	MOV	R15,#00h
	MOV	[-R0],R15
	MOV	[-R0],R14
	MOV	R1,#00h
	MOV	R2,#00h
	MOV	[-R0],R2
	MOV	[-R0],R1
	MOV	R3,#00h
	MOV	R4,#00h
	MOV	[-R0],R4
	MOV	[-R0],R3
	MOV	R5,#POF _bookmenu_HDR
	MOV	R10,#PAG _bookmenu_HDR
	MOV	[-R0],R10
	MOV	[-R0],R5
	MOV	R11,#POF _bookmenu_STRUCT
	MOV	R12,#PAG _bookmenu_STRUCT
	MOV	[-R0],R12
	MOV	[-R0],R11
	MOV	R12,#00h
	MOV	R13,#00h
	MOV	R14,#00h
	CALLS	SEG _CreateMenu02,_CreateMenu02
	ADD	R0,#018h
; main.c   2186	}
	RETS
_bookm_menu	ENDP
; main.c   2187	//===================================================================
; main.c   2188	// Меню по левому софту
; main.c   2189	//===================================================================
; main.c   2190	
; main.c   2191	void search_menu(void)
; main.c   2192	{
	PUBLIC	_search_menu
_search_menu	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   2193	}
	RETS
_search_menu	ENDP
; main.c   2194	
; main.c   2195	static const STR softmenu_ExtendedSTR[]=
MAIN_2_PR	ENDS

MAIN_3_FC	SECTION	DATA
_softmenu_ExtendedSTR	LABEL	WORD
	DPPTR	_802,_803,_804,_805,_806
	DPPTR	_807,_808,_809,_810,_811
	DPPTR	_812,_813,_814
; main.c   2196	{
; main.c   2197	 "TED menu",
; main.c   2198	 "Goto...", //8
; main.c   2199	 "Set Bookmark...", //9
; main.c   2200	 "Search...", //A
; main.c   2201	 "Top", //B
; main.c   2202	 "Line...", //C
; main.c   2203	 "Percent...", //D
; main.c   2204	 "Bottom", //E
; main.c   2205	 "Last saved", //F
; main.c   2206	 "BM1 000000", //30
; main.c   2207	 "BM2 000000", //31
; main.c   2208	 "BM3 000000", //32
; main.c   2209	 "BM4 000000", //33
; main.c   2210	};
; main.c   2211	
; main.c   2212	static const struct ITEMSDATA far softmenu_ITEMS[]=
_softmenu_ITEMS	LABEL	WORD
	DW	00h,00h
	DW	0E28h,0E28h,00h
	DW	00h,00h
	DW	03h,02BCh
	DW	00h,00h
	DW	0E29h,0E29h,00h
	DW	00h,00h
	DW	03h,02BCh
	DW	00h,00h
	DW	0E2Ah,0E2Ah,00h
	DW	00h,00h
	DW	03h,02BCh
; main.c   2213	{
; main.c   2214	 NULL, 0xE28,0xE28, 0,NULL,3,0x2BC,
; main.c   2215	 NULL, 0xE29,0xE29, 0,NULL,3,0x2BC,
; main.c   2216	 NULL, 0xE2A,0xE2A, 0,NULL,3,0x2BC
; main.c   2217	};
; main.c   2218	
; main.c   2219	static const struct ITEMSHNDL far softmenu_HNDLS[]=
_softmenu_HNDLS	LABEL	WORD
	DSPTR	_goto_menu,_bookm_menu,_search_menu
; main.c   2220	{
; main.c   2221	 goto_menu,
; main.c   2222	 bookm_menu,
; main.c   2223	 search_menu
; main.c   2224	};
; main.c   2225	
; main.c   2226	static const struct MENUHEADER far softmenu_HDR=
_softmenu_HDR	LABEL	WORD
	DW	00h,00h,065h,0Ch
	DW	0DB0h,02E2h
	DW	0E27h,07FFFh
; main.c   2227	{
; main.c   2228	 0x00,0x00,0x65,0x0C,(char far*)0xB88DB0,0xE27,0x7FFF 
; main.c   2229	};
; main.c   2230	
; main.c   2231	static const struct MENUSTRUCT far softmenu_STRUCT=
_softmenu_STRUCT	LABEL	WORD
	DW	00h,00h,00h,00h,00h,00h,00h,00h
	DW	03C06h,02EBh,03BFCh,02EBh
	DW	080h,00h
	DW	00h,00h
	DPPTR	_softmenu_ITEMS,_softmenu_HNDLS
	DW	03h
; main.c   2232	{
; main.c   2233	 NULL,NULL,NULL,NULL,
; main.c   2234	 (char far*)0xBAFC06,(char far*)0xBAFBFC,
; main.c   2235	 0x80,0x00,
; main.c   2236	 NULL,
; main.c   2237	 (struct ITEMSDATA far*)&softmenu_ITEMS,
; main.c   2238	 (struct ITEMSHNDL far*)&softmenu_HNDLS,
; main.c   2239	 3
; main.c   2240	};
; main.c   2241	
; main.c   2242	void DrawSoftMenu(void)
; main.c   2243	{
	PUBLIC	_DrawSoftMenu
_815	LABEL	BYTE
	DB	025h,06Ch,075h,00h
MAIN_3_FC	ENDS

MAIN_2_PR	SECTION	CODE
_DrawSoftMenu	PROC	FAR
; Locals:
; 
; Statics:
;     lfrm = label _815
; 
; CSEs:
; 
; main.c   2244	 static const char lfrm[]="%lu";
; main.c   2245	 xsprintf((STR)(softmenu_ExtendedSTR[9]+4),(STR)lfrm,HISTORY.bookm1);
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOV	R12,POF (_HISTORY+140)
	MOV	R13,POF (_HISTORY+142)
	MOV	[-R0],R13
	MOV	[-R0],R12
	MOV	DPP0,#PAG _softmenu_ExtendedSTR
	MOV	R14,#POF _815
	MOV	R12,POF (_softmenu_ExtendedSTR+36)
	MOV	R13,POF (_softmenu_ExtendedSTR+38)
	ADD	R12,#04h
	MOV	R15,#PAG _815
	CALLS	SEG _xsprintf,_xsprintf
; main.c   2246	 xsprintf((STR)(softmenu_ExtendedSTR[10]+4),(STR)lfrm,HISTORY.bookm2);
	MOV	DPP0,#PAG _HISTORY
	ADD	R0,#04h
	MOV	R12,POF (_HISTORY+144)
	MOV	R13,POF (_HISTORY+146)
	MOV	[-R0],R13
	MOV	[-R0],R12
	MOV	DPP0,#PAG _softmenu_ExtendedSTR
	MOV	R14,#POF _815
	MOV	R12,POF (_softmenu_ExtendedSTR+40)
	MOV	R13,POF (_softmenu_ExtendedSTR+42)
	ADD	R12,#04h
	MOV	R15,#PAG _815
	CALLS	SEG _xsprintf,_xsprintf
; main.c   2247	 xsprintf((STR)(softmenu_ExtendedSTR[11]+4),(STR)lfrm,HISTORY.bookm3);
	MOV	DPP0,#PAG _HISTORY
	ADD	R0,#04h
	MOV	R12,POF (_HISTORY+148)
	MOV	R13,POF (_HISTORY+150)
	MOV	[-R0],R13
	MOV	[-R0],R12
	MOV	DPP0,#PAG _softmenu_ExtendedSTR
	MOV	R14,#POF _815
	MOV	R12,POF (_softmenu_ExtendedSTR+44)
	MOV	R13,POF (_softmenu_ExtendedSTR+46)
	ADD	R12,#04h
	MOV	R15,#PAG _815
	CALLS	SEG _xsprintf,_xsprintf
; main.c   2248	 xsprintf((STR)(softmenu_ExtendedSTR[12]+4),(STR)lfrm,HISTORY.bookm4);
	MOV	DPP0,#PAG _HISTORY
	ADD	R0,#04h
	MOV	R12,POF (_HISTORY+152)
	MOV	R13,POF (_HISTORY+154)
	MOV	[-R0],R13
	MOV	[-R0],R12
	MOV	DPP0,#PAG _softmenu_ExtendedSTR
	MOV	R14,#POF _815
	MOV	R12,POF (_softmenu_ExtendedSTR+48)
	MOV	R13,POF (_softmenu_ExtendedSTR+50)
	ADD	R12,#04h
	MOV	R15,#PAG _815
	CALLS	SEG _xsprintf,_xsprintf
	ADD	R0,#04h
; main.c   2249	 setExtSIDTable(softmenu_ExtendedSTR);
	MOV	R12,#POF _softmenu_ExtendedSTR
	MOV	R13,#PAG _softmenu_ExtendedSTR
	CALLS	SEG _setExtSIDTable,_setExtSIDTable
; main.c   2250	 CreateMenu02(menu_full,0,0,
; main.c   2251	              (struct MENUSTRUCT far*)&softmenu_STRUCT,
; main.c   2252	              (struct MENUHEADER far*)&softmenu_HDR,
; main.c   2253	              0,0,0,0);
	MOV	R12,#00h
	MOV	R13,#00h
	MOV	[-R0],R13
	MOV	[-R0],R12
	MOV	R14,#00h
	MOV	R15,#00h
	MOV	[-R0],R15
	MOV	[-R0],R14
	MOV	R1,#00h
	MOV	R2,#00h
	MOV	[-R0],R2
	MOV	[-R0],R1
	MOV	R3,#00h
	MOV	R4,#00h
	MOV	[-R0],R4
	MOV	[-R0],R3
	MOV	R5,#POF _softmenu_HDR
	MOV	R10,#PAG _softmenu_HDR
	MOV	[-R0],R10
	MOV	[-R0],R5
	MOV	R11,#POF _softmenu_STRUCT
	MOV	R12,#PAG _softmenu_STRUCT
	MOV	[-R0],R12
	MOV	[-R0],R11
	MOV	R12,#00h
	MOV	R13,#00h
	MOV	R14,#00h
	CALLS	SEG _CreateMenu02,_CreateMenu02
	ADD	R0,#018h
; main.c   2254	}
	RETS
_DrawSoftMenu	ENDP
; main.c   2255	
; main.c   2256	//======================================================================
; main.c   2257	
; main.c   2258	//Загрузка куска входного файла
; main.c   2259	unsigned int FL_loader(int fin, unsigned int p)
; main.c   2260	{
	PUBLIC	_FL_loader
_FL_loader	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	[-R0],R6
	MOV	R9,R13
	MOV	R6,R12
; Locals:
; 
; Statics:
; 
; CSEs:
;     i = R8
;     p = R9
;     fin = R6
; 
; main.c   2261	 unsigned int i;
; main.c   2262	 if (p==0xFFFF)
	CMP	R9,#0FFFFh
	JMPR	cc_NE,_817
; main.c   2263	 {
; main.c   2264	  //Первая загрузка
; main.c   2265	  i=FileRead(fin,dstk,STKSZ);
	MOV	R12,R6
	MOV	R13,#POF _dstk
	MOV	R14,#PAG _dstk
	MOV	R15,#04000h
	CALLS	SEG _FileRead,_FileRead
	MOV	R8,R4
; main.c   2266	  if (i<STKSZ)
	CMP	R8,#04000h
	JMPR	cc_UGE,_816
; main.c   2267	  {
; main.c   2268	   //Загрузили меньше 16 кб
; main.c   2269	   dstk[i]=0; //Маркер конца файла
	MOVB	RL1,#00h
	EXTP	#PAG _dstk,#01h
	MOVB	[R8+#POF _dstk],RL1
; main.c   2270	  }
_816:
; main.c   2271	  p=0;
	MOV	R9,#00h
; main.c   2272	 }
_817:
; main.c   2273	 if (p>STKSZ50) //Если указатель перешел за границу половины буфера
	CMP	R9,#02000h
	JMPR	cc_ULE,_819
; main.c   2274	 {
; main.c   2275	  memcpy(dstk,dstk+STKSZ50,STKSZ50); //Копируем конец буфера в начало
	MOV	R8,#02000h
	MOV	[-R0],R8
	MOV	R12,#POF _dstk
	MOV	R13,#PAG _dstk
	MOV	R14,#POF _dstk+8192
	MOV	R15,#PAG _dstk
	CALLS	SEG _memcpy,_memcpy
	ADD	R0,#02h
; main.c   2276	  p-=STKSZ50; //Новый указатель
	SUB	R9,#02000h
; main.c   2277	  i=FileRead(fin,dstk+STKSZ50,STKSZ50); //Следующие 8 кБ
	MOV	R12,R6
	MOV	R13,#POF _dstk+8192
	MOV	R14,#PAG _dstk
	MOV	R15,#02000h
	CALLS	SEG _FileRead,_FileRead
	MOV	R8,R4
; main.c   2278	  if (i<STKSZ50) dstk[i+STKSZ50]=0; //Меньше 8кБ - маркер конца файла
	CMP	R8,#02000h
	JMPR	cc_UGE,_819
	MOVB	RL6,#00h
	EXTP	#PAG _dstk,#01h
	MOVB	[R8+#POF _dstk+8192],RL6
; main.c   2279	 }
_819:
; main.c   2280	 return(p);
	MOV	R4,R9
; main.c   2281	}
	MOV	R6,[R0+]
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_FL_loader	ENDP
; main.c   2282	
; main.c   2283	//Запись верхнего стека при начальной загрузке
; main.c   2284	unsigned int FL_saver(int fs, unsigned int p)
; main.c   2285	{
	PUBLIC	_FL_saver
_FL_saver	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	[-R0],R6
	SUB	R0,#04h
	MOV	R8,R13
	MOV	R9,R12
; Locals:
;     ul = offset 0
; 
; Statics:
; 
; CSEs:
;     p = R8
;     b = RL6
;     fs = R9
; 
; main.c   2286	 unsigned char b;
; main.c   2287	 long ul;
; main.c   2288	 if (p>=STKSZ50)
	CMP	R8,#02000h
	JMPR	cc_ULT,_820
; main.c   2289	 {
; main.c   2290	  b=FindFreeBlock();
	CALLS	SEG _FindFreeBlock,_FindFreeBlock
; main.c   2291	  ubat[++u_disk]=b;
	MOV	DPP0,#PAG _u_disk
	MOVB	RL6,RL4
	MOV	R12,POF _u_disk
	ADD	R12,#01h
	MOV	POF _u_disk,R12
	EXTP	#PAG _ubat,#01h
	MOVB	[R12+#POF _ubat],RL6
; main.c   2292	  FileSeek(fs,_mulu32(STKSZ50,b),0,&ul);
	MOV	R12,R0
	AND	R12,#03FFFh
	MOV	R13,DPP1
	MOV	[-R0],R13
	MOV	[-R0],R12
	MOV	R13,#02000h
	MOVBZ	R6,RL6
	MULU	R13,R6
	MOV	R14,MDH
	MOV	R13,MDL
	MOV	R12,R9
	MOV	R15,#00h
	CALLS	SEG _FileSeek,_FileSeek
	ADD	R0,#04h
; main.c   2293	  FileWrite(fs,ustk,STKSZ50);
	MOV	R12,R9
	MOV	R13,#POF _ustk
	MOV	R14,#PAG _ustk
	MOV	R15,#02000h
	CALLS	SEG _FileWrite,_FileWrite
; main.c   2294	  p-=STKSZ50;
	SUB	R8,#02000h
; main.c   2295	  memcpy(ustk,ustk+STKSZ50,p);
	MOV	[-R0],R8
	MOV	R12,#POF _ustk
	MOV	R13,#PAG _ustk
	MOV	R14,#POF _ustk+8192
	MOV	R15,#PAG _ustk
	CALLS	SEG _memcpy,_memcpy
	ADD	R0,#02h
; main.c   2296	 }
_820:
; main.c   2297	 return(p);
	MOV	R4,R8
; main.c   2298	}
	ADD	R0,#04h
	MOV	R6,[R0+]
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_FL_saver	ENDP
; main.c   2299	
; main.c   2300	//==================================================================
; main.c   2301	// Первая загрузка файла
; main.c   2302	// TODO:
; main.c   2303	// - разбиение на строки с учетом переноса по словам
; main.c   2304	// - юникод
; main.c   2305	//==================================================================
; main.c   2306	void FirstLoadFile(unsigned int fmt)
; main.c   2307	{
	PUBLIC	_FirstLoadFile
_FirstLoadFile	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	[-R0],R6
; Locals:
; 
; Statics:
; 
; CSEs:
;     fmt = R8
;     fs = R9
;     fin = R6
;     fmt & 127 = R12
; 
; main.c   2308	 int fin;
; main.c   2309	 int fs;
; main.c   2310	
; main.c   2311	 u_disk=-1; //Дисковый указатель верхнего стека
	MOV	DPP0,#PAG _u_disk
	MOV	R8,R12
	MOV	POF _u_disk,ONES
; main.c   2312	 d_disk=-1; //Дисковый указатель нижнего стека
	MOV	POF _d_disk,ONES
; main.c   2313	 memset(ubat,0,sizeof(ubat)); //Прочищаем таблицу блоков верхнего стека
	MOV	R12,#POF _ubat
	MOV	R13,#PAG _ubat
	MOV	R14,#00h
	MOV	R15,#0100h
	CALLS	SEG _memset,_memset
; main.c   2314	 memset(dbat,0,sizeof(dbat)); //Прочищаем таблицу блоков нижнего стека
	MOV	R12,#POF _dbat
	MOV	R13,#PAG _dbat
	MOV	R14,#00h
	MOV	R15,#0100h
	CALLS	SEG _memset,_memset
; main.c   2315	 memset(bfree,0,sizeof(bfree)); //Прочищаем таблицу занятых блоков
	MOV	R12,#POF _bfree
	MOV	R13,#PAG _bfree
	MOV	R14,#00h
	MOV	R15,#0100h
	CALLS	SEG _memset,_memset
; main.c   2316	 usp=0; //Указатель на верхний стек
	MOV	DPP0,#PAG _usp
	MOV	R9,#04000h
	MOV	POF _usp,ZEROS
; main.c   2317	 dsp=STKSZ; //Указатель на нижний стек
	MOV	POF _dsp,R9
; main.c   2318	 viewpos=0;
	MOV	POF _viewpos,ZEROS
; main.c   2319	 curpos=0;
	MOV	POF _curpos,ZEROS
; main.c   2320	 curline=0;
	MOV	POF _curline,ZEROS
	MOV	POF (_curline+2),ZEROS
; main.c   2321	 CSM=0;
	MOV	POF _CSM,ZEROS
; main.c   2322	
; main.c   2323	 draw_mode=255;
	MOVB	POF _draw_mode,ONES
; main.c   2324	 if (fmt==0xFFFF)
	CMP	R8,#0FFFFh
	JMPA	cc_NE,_822
; main.c   2325	 {
; main.c   2326	  //Ищем историю
; main.c   2327	  if (SearchHistory()&0x8000)
	CALLS	SEG _SearchHistory,_SearchHistory
	JB	R4.15,_821
; main.c   2328	  {
; main.c   2329	   font_size=HISTORY.font;
; main.c   2330	   fmt=HISTORY.fmt;
; main.c   2331	   win_dos_koi=HISTORY.codepage;
; main.c   2332	   cursor_off=HISTORY.cursor_off;
; main.c   2333	  }
; main.c   2334	  else
; main.c   2335	  {
; main.c   2336	   win_dos_koi=0xFF; //Неизвестный
	MOV	DPP0,#PAG _win_dos_koi
	MOVB	RL6,#04h
	MOVB	POF _win_dos_koi,ONES
; main.c   2337	   font_size=4; //Минимальный шрифт
	MOVB	POF _font_size,RL6
; main.c   2338	   memset(&HISTORY.line,0,4*6); //Все на самом верху
	MOV	R12,#POF _HISTORY+132
	MOV	R13,#PAG _HISTORY
	MOV	R14,#00h
	MOV	R15,#018h
	CALLS	SEG _memset,_memset
; main.c   2339	   HISTORY.cursor_off=cursor_off=0; //Включить курсор
	MOV	DPP0,#PAG _cursor_off
	NOP
	MOVB	POF _cursor_off,ZEROS
	MOV	DPP0,#PAG _HISTORY
	MOV	R8,#01h
	MOVB	POF (_HISTORY+131),ZEROS
; main.c   2340	   HISTORY.total=1;
	MOV	POF (_HISTORY+136),R8
	MOV	POF (_HISTORY+138),ZEROS
; main.c   2341	   HISTORY.fmt=255; //Первый запуск!!!!
	MOVB	POF (_HISTORY+129),ONES
; main.c   2342	   DrawLoadMenu(); //Определяем, как грузить через меню
	CALLS	SEG _DrawLoadMenu,_DrawLoadMenu
; main.c   2343	   SendMessage(pid_MMI,0x85,0); //Перерисовываем
	MOV	R12,#035E8h
	MOV	R13,#0Eh
	MOV	R14,#085h
	MOV	R15,#00h
	CALLS	SEG _SendMessage,_SendMessage
; main.c   2344	   return;
	JMPA	cc_UC,_838
_821:
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOVB	RL6,POF (_HISTORY+128)
	MOV	DPP0,#PAG _font_size
	NOP
	MOVB	POF _font_size,RL6
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOVBZ	R8,POF (_HISTORY+129)
	MOVB	RL1,POF (_HISTORY+130)
	MOV	DPP0,#PAG _win_dos_koi
	NOP
	MOVB	POF _win_dos_koi,RL1
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOVB	RL2,POF (_HISTORY+131)
	MOV	DPP0,#PAG _cursor_off
	NOP
	MOVB	POF _cursor_off,RL2
; main.c   2345	  }
; main.c   2346	 }
_822:
; main.c   2347	 if ((fmt&0x7F)>2) fmt=0;
	MOV	R9,R8
	AND	R9,#07Fh
	CMP	R9,#02h
	JMPR	cc_ULE,_823
	MOV	R8,#00h
_823:
; main.c   2348	 switch(font_size)
	MOV	DPP0,#PAG _font_size
	NOP
	MOVB	RL6,POF _font_size
	CMPB	RL6,#04h
	JMPR	cc_EQ,_827
	CMPB	RL6,#06h
	JMPR	cc_EQ,_827
	CMPB	RL6,#08h
	JMPR	cc_EQ,_827
; main.c   2349	 {
; main.c   2350	  case 4:
; main.c   2351	  case 6:
; main.c   2352	  case 8:
; main.c   2353	   break;
; main.c   2354	  default:
_824:
; main.c   2355	   font_size=4;
	MOV	DPP0,#PAG _font_size
	MOVB	RL6,#04h
	MOVB	POF _font_size,RL6
; main.c   2356	  break;
; main.c   2357	 }
_827:
; main.c   2358	 //Загружаем шрифт
; main.c   2359	 loadfont(0);
	MOV	R12,#00h
	CALLS	SEG _loadfont,_loadfont
; main.c   2360	
; main.c   2361	 //Конвертируем все строки в верхний стек
; main.c   2362	 fs=FileOpen((STR)stkfile,_O_CREAT+_O_RDWR+_O_BINARY,_S_IREAD); //Файл верхнего стека
	MOV	R12,#POF _stkfile
	MOV	R13,#PAG _stkfile
	MOV	R14,#08102h
	MOV	R15,#0100h
	CALLS	SEG _FileOpen,_FileOpen
	MOV	R9,R4
; main.c   2363	
; main.c   2364	 if ((fin=FileOpen((STR)filename,_O_RDONLY+_O_BINARY,0))!=-1)
	MOV	R12,#POF _filename
	MOV	R13,#PAG _filename
	MOV	R14,#08000h
	MOV	R15,#00h
	CALLS	SEG _FileOpen,_FileOpen
	MOV	R6,R4
	CMP	R6,#0FFFFh
	JMPR	cc_EQ,_833
; main.c   2365	 {
; main.c   2366	  switch(fmt&0x7F)
	MOV	R12,R8
	AND	R12,#07Fh
	CMP	R12,#01h
	JMPR	cc_EQ,_829
	CMP	R12,#02h
	JMPR	cc_NE,_830
; main.c   2367	  {
; main.c   2368	   case 1:
; main.c   2369	   case 2:
_829:
; main.c   2370	     usp=ConvertFormat(fin,fs,fmt&0x7F);
	MOV	R13,R12
	MOV	R12,R6
	MOV	R14,R13
	MOV	R13,R9
	CALLS	SEG _ConvertFormat,_ConvertFormat
	MOV	DPP0,#PAG _usp
	NOP
	MOV	POF _usp,R4
; main.c   2371	     break;
	JMPR	cc_UC,_832
; main.c   2372	   case 0:
; main.c   2373	   default:
_830:
; main.c   2374	     if (win_dos_koi==0xFF) win_dos_koi=0;
	MOV	DPP0,#PAG _win_dos_koi
	NOP
	MOVB	RL1,POF _win_dos_koi
	CMPB	RL1,#0FFh
	JMPR	cc_NE,_831
	MOVB	POF _win_dos_koi,ZEROS
_831:
; main.c   2375	     usp=ConvertSimple(fin,fs);
	MOV	R12,R6
	MOV	R13,R9
	CALLS	SEG _ConvertSimple,_ConvertSimple
	MOV	DPP0,#PAG _usp
	NOP
	MOV	POF _usp,R4
; main.c   2376		 break;
; main.c   2377	  }
_832:
; main.c   2378	  FileClose(fin);
	MOV	R12,R6
	CALLS	SEG _FileClose,_FileClose
; main.c   2379	 }
_833:
; main.c   2380	 FileClose(fs);
	MOV	R12,R9
	CALLS	SEG _FileClose,_FileClose
; main.c   2381	 total_line=viewline=curline; //Находимся в последней строке
	MOV	DPP0,#PAG _curline
	NOP
	MOV	R9,POF _curline
	MOV	R6,POF (_curline+2)
	MOV	POF _viewline,R9
	MOV	POF (_viewline+2),R6
	MOV	POF _total_line,R9
	MOV	POF (_total_line+2),R6
; main.c   2382	 HISTORY.font=font_size;
	MOVB	RL1,POF _font_size
	MOV	DPP0,#PAG _HISTORY
	MOV	R2,R8
	MOVB	POF (_HISTORY+128),RL1
; main.c   2383	 HISTORY.fmt=fmt;
	MOVB	POF (_HISTORY+129),RL2
; main.c   2384	 memcpy(HISTORY.name,filename,sizeof(HISTORY.name));
	MOV	R8,#080h
	MOV	[-R0],R8
	MOV	R12,#POF _HISTORY
	MOV	R13,#PAG _HISTORY
	MOV	R14,#POF _filename
	MOV	R15,#PAG _filename
	CALLS	SEG _memcpy,_memcpy
; main.c   2385	 //Расчитываем, куда перейти
; main.c   2386	 if (HISTORY.total==total_line)
	MOV	DPP0,#PAG _HISTORY
	ADD	R0,#02h
	MOV	R8,POF (_HISTORY+136)
	MOV	R9,POF (_HISTORY+138)
	MOV	DPP0,#PAG _total_line
	NOP
	SUB	R8,POF _total_line
	SUBC	R9,POF (_total_line+2)
	JMPR	cc_NE,_834
; main.c   2387	 {
; main.c   2388	  seek_to_line=HISTORY.line; //Прямой переход
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOV	R8,POF (_HISTORY+132)
	MOV	R9,POF (_HISTORY+134)
	MOV	DPP0,#PAG _seek_to_line
	NOP
	MOV	POF _seek_to_line,R8
	MOV	POF (_seek_to_line+2),R9
; main.c   2389	 }
	JMPR	cc_UC,_837
_834:
; main.c   2390	 else
; main.c   2391	 {
; main.c   2392	  if (HISTORY.total)
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOV	R8,POF (_HISTORY+138)
	OR	R8,POF (_HISTORY+136)
	JMPR	cc_Z,_835
; main.c   2393	   seek_to_line=(total_line*HISTORY.line)/HISTORY.total; //По отношению
	MOV	R4,POF (_HISTORY+132)
	MOV	R5,POF (_HISTORY+134)
	MOV	DPP0,#PAG _total_line
	NOP
	MOV	R10,POF _total_line
	MOV	R11,POF (_total_line+2)
	CALLS	SEG __mul,__mul
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOV	R10,POF (_HISTORY+136)
	MOV	R11,POF (_HISTORY+138)
	CALLS	SEG __udil,__udil
	MOV	DPP0,#PAG _seek_to_line
	NOP
	MOV	POF _seek_to_line,R4
	MOV	POF (_seek_to_line+2),R5
	JMPR	cc_UC,_836
_835:
; main.c   2394	  else
; main.c   2395	   seek_to_line=0;
	MOV	DPP0,#PAG _seek_to_line
	NOP
	MOV	POF _seek_to_line,ZEROS
	MOV	POF (_seek_to_line+2),ZEROS
_836:
; main.c   2396	   HISTORY.line=seek_to_line;
	MOV	DPP0,#PAG _seek_to_line
	NOP
	MOV	R8,POF _seek_to_line
	MOV	R9,POF (_seek_to_line+2)
	MOV	DPP0,#PAG _HISTORY
	NOP
	MOV	POF (_HISTORY+132),R8
	MOV	POF (_HISTORY+134),R9
; main.c   2397	 }
_837:
; main.c   2398	 draw_mode=2; //Переходим на нужную строку
	MOV	DPP0,#PAG _draw_mode
	MOVB	RL6,#02h
	MOVB	POF _draw_mode,RL6
; main.c   2399	 GotoLine();
	CALLS	SEG _GotoLine,_GotoLine
; main.c   2400	}
_838:
	MOV	R6,[R0+]
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_FirstLoadFile	ENDP
; main.c   2401	
; main.c   2402	void EraseSnapShoot(void)
; main.c   2403	{
	PUBLIC	_EraseSnapShoot
_EraseSnapShoot	PROC	FAR
; Locals:
; 
; Statics:
; 
; CSEs:
; 
; main.c   2404	 FileErase((STR)snapshootfile);
	MOV	R12,#POF _snapshootfile
	MOV	R13,#PAG _snapshootfile
	JMPS	SEG _FileErase,_FileErase
; main.c   2405	}
	RETV
_EraseSnapShoot	ENDP
; main.c   2406	
; main.c   2407	void LoadSnapShoot(void)
; main.c   2408	{
	PUBLIC	_LoadSnapShoot
_LoadSnapShoot	PROC	FAR
	MOV	[-R0],R8
	SUB	R0,#02Ch
; Locals:
;     mmm = offset 0
; 
; Statics:
; 
; CSEs:
;     f = R8
; 
; main.c   2409	 char mmm[0x2C];
; main.c   2410	 int f;
; main.c   2411	 if ((f=FileOpen((STR)snapshootfile,_O_BINARY+_O_RDONLY,0))!=-1)
	MOV	R12,#POF _snapshootfile
	MOV	R13,#PAG _snapshootfile
	MOV	R14,#08000h
	MOV	R15,#00h
	CALLS	SEG _FileOpen,_FileOpen
	MOV	R8,R4
	CMP	R8,#0FFFFh
	JMPA	cc_EQ,_839
; main.c   2412	 {
; main.c   2413	  FileRead(f,(void far *)0x80000,16384);
	MOV	R12,R8
	MOV	R13,#00h
	MOV	R14,#020h
	MOV	R15,#04000h
	CALLS	SEG _FileRead,_FileRead
; main.c   2414	  FileRead(f,(void far *)0x84000,16384);
	MOV	R12,R8
	MOV	R13,#00h
	MOV	R14,#021h
	MOV	R15,#04000h
	CALLS	SEG _FileRead,_FileRead
; main.c   2415	  FileRead(f,(void far *)0x88000,16384);
	MOV	R12,R8
	MOV	R13,#00h
	MOV	R14,#022h
	MOV	R15,#04000h
	CALLS	SEG _FileRead,_FileRead
; main.c   2416	  FileRead(f,(void far *)0x8C000,16384);
	MOV	R12,R8
	MOV	R13,#00h
	MOV	R14,#023h
	MOV	R15,#04000h
	CALLS	SEG _FileRead,_FileRead
; main.c   2417	  FileRead(f,(void far *)0x90000,16384);
	MOV	R12,R8
	MOV	R13,#00h
	MOV	R14,#024h
	MOV	R15,#04000h
	CALLS	SEG _FileRead,_FileRead
; main.c   2418	  FileClose(f);
	MOV	R12,R8
	CALLS	SEG _FileClose,_FileClose
; main.c   2419	  EraseSnapShoot();
	CALLS	SEG _EraseSnapShoot,_EraseSnapShoot
; main.c   2420	  terminated=2;
	MOV	DPP0,#PAG _terminated
	MOV	R8,#02h
	MOV	POF _terminated,R8
; main.c   2421	  stk_fhandle=-1;
	MOV	POF _stk_fhandle,ONES
; main.c   2422	  dia_id=CreateDialogWithSoftKeys(&main_dia,mmm,0); //Создаем основной диалог
	MOV	R12,#00h
	MOV	[-R0],R12
	MOV	R12,#POF _main_dia
	MOV	R13,#PAG _main_dia
	MOV	R14,#02h
	ADD	R14,R0
	AND	R14,#03FFFh
	MOV	R15,DPP1
	CALLS	SEG _CreateDialogWithSoftKeys,_CreateDialogWithSoftKeys
	MOV	DPP0,#PAG _dia_id
	ADD	R0,#02h
	MOV	POF _dia_id,R4
; main.c   2423	  SendMessage(pid_MMI,0x85,0); //Перерисовываем
	MOV	R12,#035E8h
	MOV	R13,#0Eh
	MOV	R14,#085h
	MOV	R15,#00h
	CALLS	SEG _SendMessage,_SendMessage
; main.c   2424	 }
_839:
; main.c   2425	}
	ADD	R0,#02Ch
	MOV	R8,[R0+]
	RETS
_LoadSnapShoot	ENDP
; main.c   2426	
; main.c   2427	void xmain(STR file_to_load)
; main.c   2428	{
	PUBLIC	_xmain
_xmain	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	SUB	R0,#02Ch
	MOV	R9,R13
; Locals:
;     mmm = offset 0
; 
; Statics:
; 
; CSEs:
;     file_to_load = R8R9
; 
; main.c   2429	 char mmm[0x2C];
; main.c   2430	 filename[0]=0;
	MOV	DPP0,#PAG _filename
	MOV	R8,R12
	MOVB	POF _filename,ZEROS
; main.c   2431	 if (*((int far *)0x3B1DC)!=0x3870) goto LOAD_SNAP;
	MOV	R12,#031DCh
	MOV	R13,#0Eh
	EXTP	R13,#01h
	MOV	R12,[R12]
	CMP	R12,#03870h
	JMPR	cc_NE,_841
; main.c   2432	 if (_pag(file_to_load)==0x35)
	MOV	R12,R9
	CMP	R12,#035h
	JMPR	cc_NE,_841
; main.c   2433	 {
; main.c   2434	  if (strlen(file_to_load)<0x7F)
	MOV	R12,R8
	MOV	R13,R9
	CALLS	SEG _strlen,_strlen
	CMP	R4,#07Fh
	JMPR	cc_SLT,_842
; main.c   2435	  {
; main.c   2436	   strcpy((STR)filename,file_to_load);
; main.c   2437	   goto LOAD_TEXT;
; main.c   2438	  }
; main.c   2439	 }
; main.c   2440	 LOAD_SNAP:
_841:
; main.c   2441	 FilesysICall(LoadSnapShoot);
	MOV	R12,#SOF _LoadSnapShoot
	MOV	R13,#SEG _LoadSnapShoot
	CALLS	SEG _FilesysICall,_FilesysICall
; main.c   2442	 return;
	JMPR	cc_UC,_843
_842:
	MOV	R12,#POF _filename
	MOV	R13,#PAG _filename
	MOV	R14,R8
	MOV	R15,R9
	CALLS	SEG _strcpy,_strcpy
; main.c   2443	 LOAD_TEXT:
; main.c   2444	 FilesysICall(EraseSnapShoot);
	MOV	R12,#SOF _EraseSnapShoot
	MOV	R13,#SEG _EraseSnapShoot
	CALLS	SEG _FilesysICall,_FilesysICall
; main.c   2445	 clip_pasted=1;
	MOV	DPP0,#PAG _clip_pasted
	MOV	R8,#01h
	MOV	POF _clip_pasted,R8
; main.c   2446	 draw_mode=255; //Приветствие
	MOVB	POF _draw_mode,ONES
; main.c   2447	 disk_access=FIRSTLOAD;
	MOVB	RL1,#01h
	MOVB	POF _disk_access,RL1
; main.c   2448	 font_size=4;
	MOVB	RL2,#04h
	MOVB	POF _font_size,RL2
; main.c   2449	 terminated=0;
	MOV	POF _terminated,ZEROS
; main.c   2450	 editmode=0;
	MOV	POF _editmode,ZEROS
; main.c   2451	 stk_fhandle=-1;
	MOV	POF _stk_fhandle,ONES
; main.c   2452	 dia_id=CreateDialogWithSoftKeys(&main_dia,mmm,0); //Создаем основной диалог
	MOV	R9,#00h
	MOV	[-R0],R9
	MOV	R12,#POF _main_dia
	MOV	R13,#PAG _main_dia
	MOV	R14,#02h
	ADD	R14,R0
	AND	R14,#03FFFh
	MOV	R15,DPP1
	CALLS	SEG _CreateDialogWithSoftKeys,_CreateDialogWithSoftKeys
	MOV	DPP0,#PAG _dia_id
	ADD	R0,#02h
	MOV	POF _dia_id,R4
; main.c   2453	 SendMessage(pid_MMI,0x85,0); //Перерисовываем
	MOV	R12,#035E8h
	MOV	R13,#0Eh
	MOV	R14,#085h
	MOV	R15,#00h
	CALLS	SEG _SendMessage,_SendMessage
; main.c   2454	}
_843:
	ADD	R0,#02Ch
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_xmain	ENDP
; main.c   2455	
; main.c   2456	
; main.c   2457	
MAIN_2_PR	ENDS

MAIN_7_CO	SECTION	DATA
_224	DB	00h
_748	DB	047h,06Fh,020h,074h,06Fh,020h,06Ch,069h,06Eh,065h
	DB	0Ah,06Eh,075h,06Dh,062h,065h,072h,03Ah,0Ah,00h
	DB	00h,00h,00h,00h,00h
_678	DB	045h,078h,074h,065h,06Eh,064h,020h,06Ch,069h,06Eh
	DB	065h,073h,00h
_443	DB	044h,065h,06Ch,065h,074h,065h,020h,06Ch,069h,06Eh
	DB	065h,00h
_449	DB	043h,06Ch,065h,061h,072h,020h,063h,06Ch,069h,070h
	DB	062h,00h
_225	DB	047h,06Fh,074h,06Fh,020h,06Ch,069h,06Eh,065h,020h
	DB	025h,06Ch,075h,02Eh,02Eh,02Eh,00h
_220	DB	047h,06Fh,074h,06Fh,020h,06Ch,069h,06Eh,065h,020h
	DB	025h,06Ch,075h,02Eh,02Eh,02Eh,00h
_442	DB	049h,06Eh,073h,065h,072h,074h,020h,06Ch,069h,06Eh
	DB	065h,00h
_810	DB	04Ch,061h,073h,074h,020h,073h,061h,076h,065h,064h
	DB	00h
_676	DB	04Ch,06Fh,061h,064h,020h,026h,020h,046h,06Fh,072h
	DB	06Dh,061h,074h,00h
_749	DB	047h,06Fh,020h,074h,06Fh,020h,070h,065h,072h,063h
	DB	065h,06Eh,074h,0Ah,00h,00h,00h,00h
_802	DB	054h,045h,044h,020h,06Dh,065h,06Eh,075h,00h
_447	DB	049h,06Eh,073h,065h,072h,074h,020h,064h,061h,074h
	DB	065h,00h
_804	DB	053h,065h,074h,020h,042h,06Fh,06Fh,06Bh,06Dh,061h
	DB	072h,06Bh,02Eh,02Eh,02Eh,00h
_808	DB	050h,065h,072h,063h,065h,06Eh,074h,02Eh,02Eh,02Eh
	DB	00h
_671	DB	04Ch,06Fh,061h,064h,020h,06Fh,070h,074h,069h,06Fh
	DB	06Eh,073h,00h
_807	DB	04Ch,069h,06Eh,065h,02Eh,02Eh,02Eh,00h
_811	DB	042h,04Dh,031h,020h,030h,030h,030h,030h,030h,030h
	DB	00h
_812	DB	042h,04Dh,032h,020h,030h,030h,030h,030h,030h,030h
	DB	00h
_805	DB	053h,065h,061h,072h,063h,068h,02Eh,02Eh,02Eh,00h
_226	DB	054h,065h,078h,074h,020h,076h,069h,065h,077h,065h
	DB	072h,02Fh,065h,064h,069h,074h,06Fh,072h,0Ah,076h
	DB	065h,072h,073h,069h,06Fh,06Eh,020h,032h,02Eh,030h
	DB	0Ah,043h,06Fh,070h,079h,072h,069h,067h,068h,074h
	DB	028h,043h,029h,032h,030h,030h,035h,02Fh,032h,030h
	DB	030h,036h,0Ah,062h,079h,020h,052h,073h,074h,037h
	DB	02Fh,043h,042h,053h,049h,045h,00h
_448	DB	050h,061h,073h,074h,065h,00h
_675	DB	044h,069h,072h,065h,063h,074h,020h,06Ch,06Fh,061h
	DB	064h,00h
_813	DB	042h,04Dh,033h,020h,030h,030h,030h,030h,030h,030h
	DB	00h
_742	DB	04Fh,06Bh,00h
_445	DB	04Ah,06Fh,069h,06Eh,020h,06Ch,069h,06Eh,065h,073h
	DB	00h
_677	DB	045h,04Fh,04Ch,02Dh,03Eh,045h,04Fh,04Ch,020h,053h
	DB	050h,043h,00h
_674	DB	046h,06Fh,06Eh,074h,020h,073h,069h,07Ah,065h,03Dh
	DB	038h,00h
_673	DB	046h,06Fh,06Eh,074h,020h,073h,069h,07Ah,065h,03Dh
	DB	036h,00h
_221	DB	053h,061h,076h,069h,06Eh,067h,02Eh,02Eh,02Eh,00h
_440	DB	025h,030h,032h,064h,03Ah,025h,030h,032h,064h,00h
_672	DB	046h,06Fh,06Eh,074h,020h,073h,069h,07Ah,065h,03Dh
	DB	034h,00h
_679	DB	053h,061h,076h,065h,020h,061h,073h,02Eh,02Eh,02Eh
	DB	00h
_740	DB	044h,069h,067h,069h,074h,020h,02Dh,020h,069h,06Eh
	DB	070h,075h,074h,00h
_219	DB	054h,069h,06Dh,065h,03Ah,0Ah,025h,030h,032h,064h
	DB	03Ah,025h,030h,032h,064h,0Ah,043h,075h,072h,072h
	DB	065h,06Eh,074h,020h,06Ch,069h,06Eh,065h,020h,025h
	DB	06Ch,075h,0Ah,054h,06Fh,074h,061h,06Ch,020h,06Ch
	DB	069h,06Eh,065h,073h,020h,025h,06Ch,075h,0Ah,0Ah
	DB	043h,075h,072h,072h,065h,06Eh,074h,020h,066h,069h
	DB	06Ch,065h,03Ah,00h
_444	DB	053h,070h,06Ch,069h,074h,020h,06Ch,069h,06Eh,065h
	DB	00h
_809	DB	042h,06Fh,074h,074h,06Fh,06Dh,00h
_223	DB	03Ch,03Ch,045h,04Fh,046h,03Eh,03Eh,00h
_806	DB	054h,06Fh,070h,00h
_222	DB	04Ch,069h,06Eh,065h,020h,025h,06Ch,075h,02Eh,02Eh
	DB	02Eh,00h
_441	DB	025h,030h,032h,064h,02Dh,025h,030h,032h,064h,02Dh
	DB	025h,030h,034h,064h,00h
_741	DB	043h,06Ch,065h,061h,072h,00h
_446	DB	049h,06Eh,073h,065h,072h,074h,020h,074h,069h,06Dh
	DB	065h,00h
_228	DB	031h,033h,04Dh,048h,07Ah,00h
_227	DB	032h,036h,04Dh,048h,07Ah,00h
_814	DB	042h,04Dh,034h,020h,030h,030h,030h,030h,030h,030h
	DB	00h
_803	DB	047h,06Fh,074h,06Fh,02Eh,02Eh,02Eh,00h
MAIN_7_CO	ENDS

	EXTERN	_drawImage:FAR
	EXTERN	_MMIMalloc:FAR
	EXTERN	__year:WORD
	EXTERN	_CreateMenu02:FAR
	EXTERN	_strlen:FAR
	EXTERN	_SetInputData:FAR
	EXTERN	_FillRect:FAR
	EXTERN	_WSTR_Len:FAR
	EXTERN	_ClearWideString:FAR
	EXTERN	__month:WORD
	EXTERN	_ClearInputData:FAR
	EXTERN	_FilesysICall_I:FAR
	EXTERN	_AllocWSTR:FAR
	EXTERN	_strcmp:FAR
	EXTERN	_EX_heap_free_with_lock:FAR
	EXTERN	__day:WORD
	EXTERN	_setExtSIDTable:FAR
	EXTERN	_GeneralFunc:FAR
	EXTERN	__minute:WORD
	EXTERN	_sub_E70BAC:FAR
	EXTERN	_FileClose:FAR
	EXTERN	_bl_ds:FAR
	EXTERN	_savetext:FAR
	EXTERN	_AsciizToWSTR:FAR
	EXTERN	_SetSoftKeyID:FAR
	EXTERN	_WString_GetChar:FAR
	EXTERN	_strcpy:FAR
	EXTERN	_CutWSTR:FAR
	EXTERN	_SetMenuItemIcon:FAR
	EXTERN	_OnTimer1:FAR
	EXTERN	_ConvertSimple:FAR
	EXTERN	_OnTimer2:FAR
	EXTERN	_bl_us:FAR
	EXTERN	_FileSeek:FAR
	EXTERN	_FilesysICall:FAR
	EXTERN	_DrawString:FAR
	EXTERN	_memset:FAR
	EXTERN	_DisplayMessageBoxV:FAR
	EXTERN	_FileWrite:FAR
	EXTERN	_SetInputType:FAR
	EXTERN	_GetDataPointer_ITEM04:FAR
	EXTERN	__hour:WORD
	EXTERN	_AddCharToWSTR:FAR
	EXTERN	_SendMessage:FAR
	EXTERN	_ConvertFormat:FAR
	EXTERN	_move_up:FAR
	EXTERN	_FilesysICall_UI:FAR
	EXTERN	_FileRead:FAR
	EXTERN	_CreateDialogWithSoftKeys:FAR
	EXTERN	_xsprintf:FAR
	EXTERN	_Find_Pointer0A_ItemInMenuITEMSQ_by_ID:FAR
	EXTERN	_FileErase:FAR
	EXTERN	_CreateInputTextDialog:FAR
	EXTERN	_EX_heap_malloc_with_lock:FAR
	EXTERN	_FilesysICall_FP:FAR
	EXTERN	_pShowDialog:FAR
	EXTERN	_CloseDialogWithSoftKeys:FAR
	EXTERN	_FileOpen:FAR
	EXTERN	_move_dw:FAR
	EXTERN	_doBack0A:FAR
	EXTERN	_memcpy:FAR
	EXTERN	_AddInputToWSTR:FAR
	EXTERN	__udil:FAR
	EXTERN	__umol:FAR
	EXTERN	__mul:FAR
	REGDEF	R0-R15
	END
