; C166/ST10 C compiler v7.5 r2            SN00123412-435 (c) 2001 TASKING, Inc.
; options: -e -Id:\c166\include -xmifp -DCPUTYPE=0x167 -FSC -Ob -znocustack
;          -zautobitastruct-4 -zautobita-0 -T256 -s -zvolatile_union -u
;          -AcdFiklmpstuVx -OAcdFghjkLnoprSUx -Ml
$EXTEND
$NOMOD166
$STDNAMES(reg.def)
$SEGMENTED
$CASE
$MODEL(LARGE)
	NAME	CONVERT_SIMPLE_C
	ASSUME	DPP3:SYSTEM
; convert_simple.c    1	#include "sl45.h"
; convert_simple.c    2	
; convert_simple.c    3	extern unsigned long curline;
; convert_simple.c    4	
; convert_simple.c    5	extern unsigned char far dstk[];
; convert_simple.c    6	extern unsigned char far ustk[];
; convert_simple.c    7	
; convert_simple.c    8	extern unsigned int FL_loader(int fin, unsigned int p);
; convert_simple.c    9	extern unsigned int FL_saver(int fs, unsigned int p);
; convert_simple.c   10	
; convert_simple.c   11	unsigned int ConvertSimple(int fin,int fs)
; convert_simple.c   12	{
	PUBLIC	_ConvertSimple
CONVERT_SIMPLE_1_PR	SECTION	CODE WORD PUBLIC 'CPROGRAM'
_ConvertSimple	PROC	FAR
	MOV	[-R0],R9
	MOV	[-R0],R8
	MOV	[-R0],R7
	MOV	[-R0],R6
	MOV	[-R0],R13
	MOV	[-R0],R12
; Locals:
; 
; Statics:
; 
; CSEs:
;     d = R8
;     s = R9
;     sym = R14
;     i = R6
;     eolsymb = R7
;     fin = offset 0
;     fs = offset 2
; 
; convert_simple.c   13	 unsigned int s;
; convert_simple.c   14	 unsigned int sym;
; convert_simple.c   15	 unsigned int d=0;
	MOV	R8,#00h
; convert_simple.c   16	 unsigned int i=0;
	MOV	R6,#00h
; convert_simple.c   17	 unsigned int eolsymb=0;
	MOV	R7,#00h
; convert_simple.c   18	
; convert_simple.c   19	 s=FL_loader(fin,0xFFFF);
	MOV	R13,#0FFFFh
	CALLS	SEG _FL_loader,_FL_loader
	MOV	R9,R4
; convert_simple.c   20	 while((sym=dstk[s++]))
	JMPA	cc_UC,_15
_3:
; convert_simple.c   21	 {
; convert_simple.c   22	   if (s>=8192) s=FL_loader(fin,s);
	CMP	R9,#02000h
	JMPR	cc_ULT,_4
	MOV	[-R0],R14
	MOV	R12,[R0+#02H]
	MOV	R13,R9
	CALLS	SEG _FL_loader,_FL_loader
	MOV	R9,R4
	MOV	R14,[R0+]
_4:
; convert_simple.c   23	   switch(sym)
	CMP	R14,#0Dh
	JMPR	cc_EQ,_6
	CMP	R14,#0Ah
	JMPR	cc_EQ,_6
	CMP	R14,#01h
	JMPR	cc_EQ,_10
	CMP	R14,#09h
	JMPR	cc_EQ,_10
	JMPR	cc_UC,_11
; convert_simple.c   24	   {
; convert_simple.c   25	    case 0x0D:
; convert_simple.c   26	    case 0x0A:
_6:
; convert_simple.c   27	     if (eolsymb==sym)
	CMP	R7,R14
	JMPR	cc_EQ,_8
; convert_simple.c   28	     {
; convert_simple.c   29		  goto LEOL;
; convert_simple.c   30	     }
; convert_simple.c   31	     if (eolsymb) break; //Пропустили второе окончание строки
	CMP	R7,#00h
	JMPR	cc_NZ,_13
; convert_simple.c   32	     eolsymb=sym; //Определили конец строки
	MOV	R7,R14
; convert_simple.c   33		 LEOL:
_8:
; convert_simple.c   34	     curline++;
	EXTP	#PAG _curline,#02h
	SUB	POF _curline,ONES
	SUBC	POF (_curline+2),ONES
; convert_simple.c   35		 i=0; //Начало строки
	MOV	R6,#00h
; convert_simple.c   36		 ustk[d++]=0;
	MOVB	RL1,#00h
	MOV	R12,R8
	ADD	R8,#01h
	EXTP	#PAG _ustk,#01h
	MOVB	[R12+#POF _ustk],RL1
; convert_simple.c   37		 break;
	JMPR	cc_UC,_13
; convert_simple.c   38		case 0x01:
; convert_simple.c   39	    case 0x09:
_10:
; convert_simple.c   40	     sym=' '; //Пока преобразовали табуляцию в пробел
	MOV	R14,#020h
; convert_simple.c   41	    default:
_11:
; convert_simple.c   42		 ustk[d++]=sym;
	MOV	R1,R14
	MOV	R12,R8
	ADD	R8,#01h
	EXTP	#PAG _ustk,#01h
	MOVB	[R12+#POF _ustk],RL1
; convert_simple.c   43	     i++;
	ADD	R6,#01h
; convert_simple.c   44	     if (i>255)
	CMP	R6,#0FFh
	JMPR	cc_UGT,_8
; convert_simple.c   45	     {
; convert_simple.c   46	       goto LEOL; //Слишком длинная строка
; convert_simple.c   47		 }
; convert_simple.c   48		 break;
; convert_simple.c   49	   }
_13:
; convert_simple.c   50	   if (d>=8192) d=FL_saver(fs,d);
	CMP	R8,#02000h
	JMPR	cc_ULT,_15
	MOV	R12,[R0+#02H]
	MOV	R13,R8
	CALLS	SEG _FL_saver,_FL_saver
	MOV	R8,R4
_15:
	MOV	R12,R9
	ADD	R9,#01h
	EXTP	#PAG _dstk,#01h
	MOVB	RL1,[R12+#POF _dstk]
	MOVBZ	R14,RL1
	JMPR	cc_NZ,_3
; convert_simple.c   51	 }
; convert_simple.c   52	 if (i)
	CMP	R6,#00h
	JMPR	cc_Z,_16
; convert_simple.c   53	 {
; convert_simple.c   54	   //Незавершенная строка
; convert_simple.c   55	   ustk[d++]=0;
	MOVB	RL6,#00h
	MOV	R9,R8
	ADD	R8,#01h
	EXTP	#PAG _ustk,#01h
	MOVB	[R9+#POF _ustk],RL6
; convert_simple.c   56	   curline++;
	EXTP	#PAG _curline,#02h
	SUB	POF _curline,ONES
	SUBC	POF (_curline+2),ONES
; convert_simple.c   57	 }
_16:
; convert_simple.c   58	 if (d>=8192) d=FL_saver(fs,d);
	CMP	R8,#02000h
	JMPR	cc_ULT,_17
	MOV	R12,[R0+#02H]
	MOV	R13,R8
	CALLS	SEG _FL_saver,_FL_saver
	MOV	R8,R4
_17:
; convert_simple.c   59	 return(d);
	MOV	R4,R8
; convert_simple.c   60	}
	ADD	R0,#04h
	MOV	R6,[R0+]
	MOV	R7,[R0+]
	MOV	R8,[R0+]
	MOV	R9,[R0+]
	RETS
_ConvertSimple	ENDP
; convert_simple.c   61	
; convert_simple.c   62	
; convert_simple.c   63	
; convert_simple.c   64	
; convert_simple.c   65	
CONVERT_SIMPLE_1_PR	ENDS

	EXTERN	_FL_loader:FAR
	EXTERN	_curline:WORD
	EXTERN	_FL_saver:FAR
	EXTERN	_dstk:BYTE
	EXTERN	_ustk:BYTE
	REGDEF	R0-R15
	END
